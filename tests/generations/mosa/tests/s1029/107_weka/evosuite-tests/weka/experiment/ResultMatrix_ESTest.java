/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 07:35:52 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.487923456611979
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(2, 1);
      assertNotNull(resultMatrixHTML1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(2, resultMatrixHTML1.getColCount());
      assertEquals(2, resultMatrixHTML1.getVisibleColCount());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML1);
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(2, resultMatrixHTML1.getColCount());
      assertEquals(2, resultMatrixHTML1.getVisibleColCount());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      
      double double0 = resultMatrixLatex0.getMean(1, (-335));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(2, resultMatrixHTML1.getColCount());
      assertEquals(2, resultMatrixHTML1.getVisibleColCount());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2910843402609493
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      resultMatrixHTML0.m_ColHidden = booleanArray0;
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(0, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      String string0 = resultMatrixHTML0.globalInfo();
      assertEquals("Generates the matrix output as HTML.", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.720513391960982
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(18, stringArray0.length);
      
      resultMatrixHTML0.setMeanWidth(1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      
      double double0 = resultMatrixCSV0.getMean(0, 0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.536830130031114
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      
      resultMatrixPlainText0.m_EnumerateRowNames = false;
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      
      int int0 = resultMatrixPlainText0.getVisibleRowCount();
      assertEquals(1, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      
      double double0 = resultMatrixPlainText0.getCount((-224));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      
      String string0 = resultMatrixPlainText0.stdDevPrecTipText();
      assertEquals("The number of decimals after the decimal point for the standard deviation.", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.8570032600672426
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 10;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(10, 10);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(10, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(10, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(10, resultMatrixPlainText0.getColCount());
      assertEquals(10, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      
      String string0 = resultMatrixPlainText0.toString();
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(10, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(10, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(10, resultMatrixPlainText0.getColCount());
      assertEquals(10, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      
      resultMatrixPlainText0.setShowAverage(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(10, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(10, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(10, resultMatrixPlainText0.getColCount());
      assertEquals(10, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 2615.0;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 2;
      resultMatrixPlainText0.m_Counts = doubleArray0;
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(10, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(10, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(10, resultMatrixPlainText0.getColCount());
      assertEquals(10, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      
      boolean boolean0 = resultMatrixPlainText0.getShowAverage();
      assertTrue(boolean0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(10, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(10, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(10, resultMatrixPlainText0.getColCount());
      assertEquals(10, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      
      String string1 = resultMatrixPlainText0.colNameWidthTipText();
      assertEquals("The maximum width of the column names (0 = optimal).", string1);
      assertNotNull(string1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(10, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(10, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(10, resultMatrixPlainText0.getColCount());
      assertEquals(10, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      
      boolean boolean1 = resultMatrixPlainText0.getDefaultShowAverage();
      assertFalse(boolean1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(10, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(10, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(10, resultMatrixPlainText0.getColCount());
      assertEquals(10, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      
      int int1 = resultMatrixPlainText0.getDisplayCol(23);
      assertEquals((-1), int1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(int1 == int0);
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(10, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(10, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(10, resultMatrixPlainText0.getColCount());
      assertEquals(10, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      resultMatrixHTML0.clearHeader();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      resultMatrixHTML0.m_ShowStdDev = true;
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      String string2 = resultMatrixHTML0.getRevision();
      assertEquals("8034", string2);
      assertNotNull(string2);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      resultMatrixHTML0.m_ColOrder = intArray0;
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      String string3 = resultMatrixHTML0.globalInfo();
      assertEquals("Generates the matrix output as HTML.", string3);
      assertNotNull(string3);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.9053926745039176
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 1161;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 1;
      intArray0[7] = 2;
      intArray0[8] = 2;
      resultMatrixHTML0.m_RowOrder = intArray0;
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.898049251018126
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(12, 12);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(12, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(12, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(12, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(12, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(12, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(12, resultMatrixLatex0.getVisibleColCount());
      assertEquals(50, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(12, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(12, resultMatrixLatex0.getColCount());
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(12));
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      resultMatrixLatex0.m_HeaderKeys = vector0;
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(12, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(12, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(12, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(12, resultMatrixLatex0.getVisibleColCount());
      assertEquals(50, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(12, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(12, resultMatrixLatex0.getColCount());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(resultMatrixLatex0.m_HeaderKeys.isEmpty());
      assertEquals("[]", resultMatrixLatex0.m_HeaderKeys.toString());
      assertEquals(0, resultMatrixLatex0.m_HeaderKeys.size());
      assertEquals(10, resultMatrixLatex0.m_HeaderKeys.capacity());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(12, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(12, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(12, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(12, resultMatrixLatex0.getVisibleColCount());
      assertEquals(50, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(12, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(12, resultMatrixLatex0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(12, resultMatrixCSV0.getVisibleColCount());
      assertEquals(12, resultMatrixCSV0.getColCount());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(12, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(12, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(12, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(12, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(12, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(12, resultMatrixLatex0.getVisibleColCount());
      assertEquals(50, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(12, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(12, resultMatrixLatex0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(12, resultMatrixCSV0.getVisibleColCount());
      assertEquals(12, resultMatrixCSV0.getColCount());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(12, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(12, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(50, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(12, resultMatrixPlainText0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(12, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(12, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(12, resultMatrixPlainText0.getRowCount());
      
      int int0 = resultMatrixPlainText0.getVisibleRowCount();
      assertEquals(12, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(12, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(12, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(12, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(12, resultMatrixLatex0.getVisibleColCount());
      assertEquals(50, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(12, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(12, resultMatrixLatex0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(12, resultMatrixCSV0.getVisibleColCount());
      assertEquals(12, resultMatrixCSV0.getColCount());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(12, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(12, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(50, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(12, resultMatrixPlainText0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(12, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(12, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(12, resultMatrixPlainText0.getRowCount());
      
      boolean boolean0 = resultMatrixPlainText0.getPrintColNames();
      assertTrue(boolean0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(12, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(12, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(12, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(12, resultMatrixLatex0.getVisibleColCount());
      assertEquals(50, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(12, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(12, resultMatrixLatex0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(12, resultMatrixCSV0.getVisibleColCount());
      assertEquals(12, resultMatrixCSV0.getColCount());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(12, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(12, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(50, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(12, resultMatrixPlainText0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(12, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(12, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(12, resultMatrixPlainText0.getRowCount());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4914587692804866
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      
      resultMatrixHTML0.assign(resultMatrixHTML1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
      
      String string0 = resultMatrixHTML0.countWidthTipText();
      assertEquals("The width of the counts (0 = optimal).", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      
      int int0 = resultMatrixHTML1.getDisplayCol(1);
      assertEquals((-1), int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0344841307510952
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      resultMatrixHTML0.m_Counts = doubleArray0;
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      
      resultMatrixHTML0.TIE_STRING = "_$Dja1;juLPn\"r$M";
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      
      // Undeclared exception!
      try { 
        resultMatrixHTML1.assign(resultMatrixHTML0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3425812486644295
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      
      int int0 = resultMatrixPlainText0.getVisibleRowCount();
      assertEquals(1, int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      
      int int1 = resultMatrixPlainText0.getDefaultStdDevWidth();
      assertEquals(0, int1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(int1 == int0);
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.964319472204824
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int[][] intArray1 = new int[1][8];
      intArray1[0] = intArray0;
      resultMatrixLatex0.setSummary(intArray1, intArray1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(1, intArray1.length);
      
      resultMatrixLatex0.setColOrder(intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(1, intArray0.length);
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixLatex0);
      assertNotNull(resultMatrixLatex1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.6312207116556454
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(5, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      
      int int0 = resultMatrixHTML0.getDisplayCol((-157));
      assertEquals((-1), int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(5, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.159182477773174
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      
      resultMatrixHTML0.clearRanking();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      
      int[][] intArray0 = new int[2][7];
      resultMatrixHTML0.setSummary(intArray0, intArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(2, intArray0.length);
      
      String[][] stringArray0 = new String[8][9];
      String[] stringArray1 = new String[1];
      stringArray1[0] = " ";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[0];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[9];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "*";
      stringArray3[1] = ")";
      stringArray3[2] = "(";
      stringArray3[3] = "v";
      stringArray3[4] = " ";
      stringArray3[5] = "(";
      stringArray3[6] = "(";
      stringArray3[7] = "O.U^'Ya#";
      stringArray3[8] = "*";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[6];
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      
      stringArray4[0] = " ";
      stringArray4[1] = "(";
      stringArray4[2] = "(";
      stringArray4[3] = "H}t}gE\u0005ia$Ys5%{";
      stringArray4[4] = ">jtI{p[";
      stringArray4[5] = "O.U^'Ya#";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[1];
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray1));
      
      stringArray5[0] = "H}t}gE\u0005ia$Ys5%{";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[4];
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray5));
      
      stringArray6[0] = ")";
      stringArray6[1] = "(";
      stringArray6[2] = ")";
      stringArray6[3] = "H}t}gE\u0005ia$Ys5%{";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[0];
      assertFalse(stringArray7.equals((Object)stringArray2));
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray3));
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertFalse(stringArray7.equals((Object)stringArray4));
      assertFalse(stringArray7.equals((Object)stringArray6));
      
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[9];
      assertFalse(stringArray8.equals((Object)stringArray3));
      assertFalse(stringArray8.equals((Object)stringArray6));
      assertFalse(stringArray8.equals((Object)stringArray1));
      assertFalse(stringArray8.equals((Object)stringArray2));
      assertFalse(stringArray8.equals((Object)stringArray4));
      assertFalse(stringArray8.equals((Object)stringArray7));
      assertFalse(stringArray8.equals((Object)stringArray5));
      
      stringArray8[0] = ")";
      stringArray8[1] = "H}t}gE\u0005ia$Ys5%{";
      stringArray8[2] = ")";
      stringArray8[3] = "O.U^'Ya#";
      stringArray8[4] = "";
      stringArray8[5] = "YNLn/A-ImOc`4,";
      stringArray8[6] = "*";
      stringArray8[7] = "O.U^'Ya#";
      stringArray8[8] = "(";
      stringArray0[7] = stringArray8;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.getColSize(stringArray0, 0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3459642493748554
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      
      resultMatrixCSV0.m_Counts = null;
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      
      String string0 = resultMatrixCSV0.padString("", (-1529));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      
      int[] intArray0 = new int[0];
      resultMatrixLatex0.setColOrder(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, intArray0.length);
      
      ResultMatrixLatex resultMatrixLatex1 = null;
      try {
        resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixCSV0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.349282251575593
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      
      double double0 = resultMatrixCSV0.getMean(1, 2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=4.146506103868214
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(";
      resultMatrixCSV0.setOptions(stringArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, stringArray0.length);
      
      resultMatrixPlainText0.m_StdDevPrec = 1;
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      
      String string0 = resultMatrixCSV0.getRowName(18);
      assertNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixLatex0);
      assertNotNull(resultMatrixLatex1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      
      String string1 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string1);
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      
      String string2 = resultMatrixCSV1.getRevision();
      assertEquals("8034", string2);
      assertNotNull(string2);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertNotSame(resultMatrixCSV1, resultMatrixCSV0);
      
      String string3 = resultMatrixCSV0.trimString("(", (-2172));
      assertEquals("(", string3);
      assertNotNull(string3);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertNotSame(resultMatrixCSV0, resultMatrixCSV1);
      
      String[][] stringArray1 = new String[4][1];
      stringArray1[0] = stringArray0;
      String[] stringArray2 = new String[6];
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = ")";
      stringArray2[1] = "$\bullet$";
      stringArray2[2] = "]";
      stringArray2[3] = "(";
      stringArray2[4] = "$\bullet$";
      stringArray2[5] = ")";
      stringArray1[1] = stringArray2;
      stringArray1[2] = stringArray0;
      stringArray1[3] = stringArray0;
      int int0 = resultMatrixLatex1.getColSize(stringArray1, 1);
      assertEquals(0, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex0.equals((Object)resultMatrixLatex1));
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals(4, stringArray1.length);
      assertNotSame(resultMatrixLatex0, resultMatrixLatex1);
      assertNotSame(resultMatrixLatex1, resultMatrixLatex0);
      
      // Undeclared exception!
      try { 
        resultMatrixLatex1.getHeader("(");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1952569562732145
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      
      int[] intArray0 = new int[1];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      
      resultMatrixLatex0.setColOrder(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, intArray0.length);
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixLatex0);
      assertNotNull(resultMatrixLatex1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      int int0 = resultMatrixCSV0.getStdDevWidth();
      assertEquals(0, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.542305700411061
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      
      int[] intArray0 = new int[1];
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      resultMatrixCSV0.m_ColHidden = booleanArray0;
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      
      int[][] intArray1 = new int[4][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.931745052018779
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(3284, 1);
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(3284, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      
      resultMatrixHTML0.setMeanPrec(0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanPrec());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      
      int[] intArray0 = new int[0];
      resultMatrixPlainText0.m_RowOrder = intArray0;
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5494584920727386
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      
      resultMatrixLatex0.clearRanking();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      
      String string0 = resultMatrixLatex0.removeFilterName("The maximum width of the column names (0 = optimal).");
      assertEquals("The maximum width of the column names (0 = optimal).", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      
      resultMatrixGnuPlot0.m_SignificanceWidth = 0;
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      
      String string1 = resultMatrixGnuPlot0.getRowName(0);
      assertEquals("row0", string1);
      assertNotNull(string1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      
      int int0 = resultMatrixLatex0.getSignificanceWidth();
      assertEquals(0, int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.7696478941581013
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.doubleToString(2198.131188343, (-335));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.46288360678721
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1, 1);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      
      String string0 = resultMatrixPlainText0.removeFilterName("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      
      String string1 = resultMatrixPlainText0.getSummaryTitle(1);
      assertEquals("b", string1);
      assertNotNull(string1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      
      String string2 = resultMatrixPlainText0.globalInfo();
      assertEquals("Generates the output as plain text (for fixed width fonts).", string2);
      assertNotNull(string2);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      
      double double0 = resultMatrixCSV0.getMean(0, 2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2861940974386643
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      
      Enumeration enumeration0 = resultMatrixCSV0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      
      int int0 = resultMatrixCSV0.getRowNameWidth();
      assertEquals(25, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.6485107693405467
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      
      String string0 = resultMatrixHTML0.printRowNamesTipText();
      assertEquals("Whether to output row names or just numbers representing them.", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      
      resultMatrixLatex0.clearRanking();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      
      String string1 = resultMatrixLatex0.padString(")", 1, false);
      assertEquals(")", string1);
      assertNotNull(string1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      
      resultMatrixHTML0.setRowHidden(1, false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      
      String string2 = resultMatrixHTML0.significanceWidthTipText();
      assertEquals("The width of the significance indicator (0 = optimal).", string2);
      assertNotNull(string2);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 0);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      
      resultMatrixGnuPlot0.setSignificanceWidth(0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      
      resultMatrixLatex0.WIN_STRING = resultMatrixLatex0.WIN_STRING;
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      
      String string3 = resultMatrixGnuPlot0.getRevision();
      assertEquals("8034", string3);
      assertNotNull(string3);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(2, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      assertNotNull(resultMatrixCSV1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getRowCount());
      assertEquals(2, resultMatrixCSV1.getVisibleColCount());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV1.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV1.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(50, resultMatrixCSV1.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV1.getColCount());
      assertFalse(resultMatrixCSV1.getShowAverage());
      
      resultMatrixGnuPlot0.LOSS_STRING = "$\bullet$";
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      
      int int0 = resultMatrixPlainText0.getDefaultCountWidth();
      assertEquals(5, int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      
      boolean boolean0 = resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      assertFalse(boolean0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      
      resultMatrixPlainText0.setStdDevPrec(0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      
      resultMatrixCSV0.setStdDev(2, 2, 2);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(2, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertNotSame(resultMatrixCSV0, resultMatrixCSV1);
      
      boolean boolean1 = resultMatrixLatex0.getDefaultPrintColNames();
      assertFalse(boolean1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      
      String string4 = resultMatrixLatex0.printRowNamesTipText();
      assertEquals("Whether to output row names or just numbers representing them.", string4);
      assertNotNull(string4);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      
      int int1 = resultMatrixCSV1.getRowCount();
      assertEquals(0, int1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(int1 == int0);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getRowCount());
      assertEquals(2, resultMatrixCSV1.getVisibleColCount());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV1.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV1.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(50, resultMatrixCSV1.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV1.getColCount());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertNotSame(resultMatrixCSV1, resultMatrixCSV0);
      
      int int2 = resultMatrixLatex0.getDefaultRowNameWidth();
      assertEquals(0, int2);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2677343533077416
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      
      int[] intArray0 = new int[1];
      resultMatrixHTML0.setRowOrder(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, intArray0.length);
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      
      boolean boolean0 = resultMatrixHTML0.isRowName((-1788));
      assertFalse(boolean0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.988830290385688
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(5, 5);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(5, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(5, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(5, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(5, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      String[] stringArray0 = new String[8];
      stringArray0[1] = " ";
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(5, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(5, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(5, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(5, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(5, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(5, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      
      boolean boolean0 = resultMatrixHTML0.isMean(1);
      assertTrue(boolean0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(5, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(5, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(5, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(5, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(5, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(5, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(5, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      
      boolean boolean1 = resultMatrixSignificance0.getDefaultShowStdDev();
      assertFalse(boolean1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(boolean1 == boolean0);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(5, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(5, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(5, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(5, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      boolean boolean2 = resultMatrixSignificance0.isRowName(0);
      assertTrue(boolean2);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(5, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(5, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(5, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(5, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.3419177324522935
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      
      resultMatrixCSV0.clearRanking();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 0);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      
      int int0 = resultMatrixPlainText0.getVisibleRowCount();
      assertEquals(0, int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.4397784532655384
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      
      int int0 = resultMatrixPlainText0.getVisibleRowCount();
      assertEquals(1, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      
      String string0 = resultMatrixPlainText0.colNameWidthTipText();
      assertEquals("The maximum width of the column names (0 = optimal).", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      
      Enumeration enumeration0 = resultMatrixPlainText0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2955193301273638
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 66);
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      
      resultMatrixSignificance0.setCount(66, 0.0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.6306398469971106
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(5, 5);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(5, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(5, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(5, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      
      resultMatrixPlainText0.setStdDevPrec((-3));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      
      resultMatrixPlainText0.setShowAverage(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.049971717403392
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(1, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      
      double double0 = resultMatrixHTML0.getMean((-280), (-280));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(18, stringArray0.length);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.4884858967423966
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      
      double double0 = resultMatrixCSV0.getMean(2, 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      assertEquals(0, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.08653687151477
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      
      resultMatrixSignificance0.setCount((-1921), (-56.41284));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.182915642223098
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      
      resultMatrixCSV0.clearHeader();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      
      resultMatrixCSV0.setOptions((String[]) null);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      
      boolean boolean0 = resultMatrixCSV0.getShowAverage();
      assertFalse(boolean0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      assertNotNull(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      
      resultMatrixLatex0.setColName((-1944), " ");
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      
      ResultMatrixSignificance.main((String[]) null);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      
      String string0 = resultMatrixSignificance0.globalInfo();
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5154255556930334
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 104);
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(104, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(104, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      
      String string0 = resultMatrixGnuPlot0.getRowName(0);
      assertEquals("row0", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(0, 2);
      assertNotNull(resultMatrixGnuPlot1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot1.getRowCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot1.getColCount());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1, 1);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      
      resultMatrixLatex0.setColName(1, "[3[oWvxi\"mTlRL/7");
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=4.18881139912551
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 27);
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(27, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(27, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      
      int[][] intArray0 = new int[17][3];
      resultMatrixHTML0.TIE_STRING = "\tThe number of decimals after the decimal point for the mean.\n\t(default: ";
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(27, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(27, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      
      resultMatrixHTML0.setRanking(intArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(27, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(27, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(17, intArray0.length);
      
      String string0 = resultMatrixHTML0.meanWidthTipText();
      assertEquals("The width of the mean (0 = optimal).", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(27, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(27, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      
      resultMatrixHTML0.m_ShowStdDev = false;
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(27, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(27, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      
      int int0 = resultMatrixHTML0.getSignificanceCount(26, 26);
      assertEquals(0, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(27, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(27, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(27, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(27, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(27, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(27, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(26, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(26, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(26, 6);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(26, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(26, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(6, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(6, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      
      resultMatrixLatex0.setColName(0, "X");
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")";
      stringArray0[1] = "(";
      stringArray0[2] = "(";
      stringArray0[3] = ")";
      stringArray0[4] = "(";
      stringArray0[5] = ")";
      stringArray0[6] = "*";
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(7, stringArray0.length);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      
      String string1 = resultMatrixSignificance0.globalInfo();
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", string1);
      assertNotNull(string1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.435005016902289
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(5, 5);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(5, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(5, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(5, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(5, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      
      resultMatrixSignificance0.setCount(5, 2.0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(5, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(5, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(5, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(5, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.490781778504486
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      
      resultMatrixSignificance0.setCount(0, (-56.41284));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.9390510168552884
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 1);
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(0, int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(229, 0);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals(229, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(229, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      
      String string0 = resultMatrixGnuPlot0.toStringRanking();
      assertEquals("-ranking data not set-", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals(229, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(229, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.padString((String) null, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=4.060190753301553
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(18, stringArray0.length);
      
      Integer integer0 = new Integer(73);
      assertEquals(73, (int)integer0);
      assertNotNull(integer0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      
      resultMatrixCSV0.setOptions(stringArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(18, stringArray0.length);
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      assertNotNull(resultMatrixHTML1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 1);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      
      String string0 = resultMatrixPlainText0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      
      int int0 = resultMatrixPlainText0.getCountWidth();
      assertEquals(5, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=4.183335614867577
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      
      String string0 = resultMatrixHTML0.printRowNamesTipText();
      assertEquals("Whether to output row names or just numbers representing them.", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      
      resultMatrixLatex0.clearRanking();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      
      String string1 = resultMatrixHTML0.padString(" ", 0);
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      
      String string2 = resultMatrixLatex1.padString("&BGt|E*'8@kPee#0YK", 0, true);
      assertEquals("&BGt|E*'8@kPee#0YK", string2);
      assertNotNull(string2);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertNotSame(resultMatrixLatex1, resultMatrixLatex0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixCSV0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*";
      stringArray0[1] = "&BGt|E*'8@kPee#0YK";
      stringArray0[2] = " ";
      stringArray0[3] = " ";
      resultMatrixCSV0.setOptions(stringArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixCSV0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(4, stringArray0.length);
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(1, 2);
      assertNotNull(resultMatrixCSV1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV1.getRowCount());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals(2, resultMatrixCSV1.getVisibleRowCount());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      
      resultMatrixCSV1.clear();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV1.getRowCount());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals(2, resultMatrixCSV1.getVisibleRowCount());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertNotSame(resultMatrixCSV1, resultMatrixCSV0);
      
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV(resultMatrixLatex1);
      assertNotNull(resultMatrixCSV2);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV2.equals((Object)resultMatrixCSV1));
      assertFalse(resultMatrixCSV2.equals((Object)resultMatrixCSV0));
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertFalse(resultMatrixCSV2.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV2.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV2.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV2.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV2.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV2.countWidthTipText());
      assertFalse(resultMatrixCSV2.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV2.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV2.getVisibleColCount());
      assertEquals(0, resultMatrixCSV2.getCountWidth());
      assertEquals("CSV", resultMatrixCSV2.getDisplayName());
      assertEquals(2, resultMatrixCSV2.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV2.showAverageTipText());
      assertTrue(resultMatrixCSV2.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV2.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV2.meanPrecTipText());
      assertFalse(resultMatrixCSV2.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV2.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV2.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV2.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV2.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV2.globalInfo());
      assertFalse(resultMatrixCSV2.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV2.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV2.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV2.showStdDevTipText());
      assertFalse(resultMatrixCSV2.getShowAverage());
      assertEquals(0, resultMatrixCSV2.getSignificanceWidth());
      assertFalse(resultMatrixCSV2.getShowStdDev());
      assertTrue(resultMatrixCSV2.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV2.getRowNameWidth());
      assertFalse(resultMatrixCSV2.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV2.meanWidthTipText());
      assertEquals(2, resultMatrixCSV2.getStdDevPrec());
      assertFalse(resultMatrixCSV2.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV2.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV2.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV2.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV2.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV2.getRowCount());
      assertEquals(0, resultMatrixCSV2.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV2.getMeanWidth());
      assertTrue(resultMatrixCSV2.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV2.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV2.printColNamesTipText());
      assertTrue(resultMatrixCSV2.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV2.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV2.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV2.removeFilterNameTipText());
      assertFalse(resultMatrixCSV2.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV2.getColNameWidth());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixLatex1);
      assertNotNull(resultMatrixHTML1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertEquals(0, resultMatrixHTML1.getRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      
      ResultMatrixHTML resultMatrixHTML2 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML2);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML2.equals((Object)resultMatrixHTML1));
      assertFalse(resultMatrixHTML2.equals((Object)resultMatrixHTML0));
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML2.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML2.getStdDevWidth());
      assertFalse(resultMatrixHTML2.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML2.significanceWidthTipText());
      assertFalse(resultMatrixHTML2.getShowAverage());
      assertTrue(resultMatrixHTML2.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML2.getRowNameWidth());
      assertEquals(0, resultMatrixHTML2.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML2.showStdDevTipText());
      assertEquals(0, resultMatrixHTML2.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML2.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML2.stdDevPrecTipText());
      assertEquals(1, resultMatrixHTML2.getVisibleColCount());
      assertEquals(0, resultMatrixHTML2.getColNameWidth());
      assertEquals(25, resultMatrixHTML2.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML2.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML2.getCountWidth());
      assertEquals(2, resultMatrixHTML2.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML2.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML2.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML2.removeFilterNameTipText());
      assertTrue(resultMatrixHTML2.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML2.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML2.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML2.meanPrecTipText());
      assertEquals(0, resultMatrixHTML2.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML2.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML2.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML2.showAverageTipText());
      assertEquals(2, resultMatrixHTML2.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML2.countWidthTipText());
      assertFalse(resultMatrixHTML2.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML2.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML2.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML2.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML2.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML2.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML2.getColCount());
      assertEquals("HTML", resultMatrixHTML2.getDisplayName());
      assertEquals(0, resultMatrixHTML2.getDefaultMeanWidth());
      assertTrue(resultMatrixHTML2.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML2.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML2.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML2.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML2.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML2.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML2.meanWidthTipText());
      assertFalse(resultMatrixHTML2.getEnumerateRowNames());
      assertFalse(resultMatrixHTML2.getRemoveFilterName());
      assertFalse(resultMatrixHTML2.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML2.getVisibleRowCount());
      
      int int0 = resultMatrixHTML0.getSignificance(0, 0);
      assertEquals(0, int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML2));
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      assertNotSame(resultMatrixHTML0, resultMatrixHTML2);
      
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(4, stringArray0.length);
      
      ResultMatrixLatex resultMatrixLatex2 = null;
      try {
        resultMatrixLatex2 = new ResultMatrixLatex((-1072), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1699021172713064
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      assertEquals(2, int0);
      
      int int1 = resultMatrixCSV0.getRowCount();
      assertEquals(1, int1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(int1 == int0);
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3361489025855664
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      
      int[][] intArray0 = new int[24][3];
      resultMatrixHTML0.setSummary(intArray0, intArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(24, intArray0.length);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 0);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      assertNotNull(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getVisibleColCount());
      assertEquals(5, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      
      String string0 = resultMatrixLatex0.toStringSummary();
      assertEquals("-summary data not set-", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getVisibleColCount());
      assertEquals(5, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      
      int int0 = resultMatrixPlainText0.getRowCount();
      assertEquals(0, int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.632138511231163
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      assertNotNull(resultMatrixHTML1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      
      resultMatrixHTML0.setStdDevWidth(1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      
      boolean boolean0 = resultMatrixHTML1.getDefaultPrintColNames();
      assertFalse(boolean0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
      
      int int0 = resultMatrixHTML0.getDisplayCol(1);
      assertEquals((-1), int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      
      resultMatrixHTML0.setEnumerateRowNames(false);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      
      resultMatrixHTML0.setStdDevWidth((-2201));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      
      int int1 = resultMatrixHTML0.getSignificance(0, (-1));
      assertEquals(0, int1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertFalse(int1 == int0);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      
      String string0 = resultMatrixHTML1.stdDevPrecTipText();
      assertEquals("The number of decimals after the decimal point for the standard deviation.", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.284122976139303
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      resultMatrixHTML0.setPrintRowNames(false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(18, stringArray0.length);
      
      resultMatrixHTML0.setMeanWidth(2);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 0);
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getColCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(18, stringArray0.length);
      
      // Undeclared exception!
      try { 
        resultMatrixCSV0.getHeader(" ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=4.097205695305983
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      
      resultMatrixHTML0.m_EnumerateRowNames = true;
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(19, stringArray0.length);
      
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(19, stringArray0.length);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3425812486644295
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      
      int int0 = resultMatrixPlainText0.getVisibleRowCount();
      assertEquals(1, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      
      int int1 = resultMatrixPlainText0.getDefaultSignificanceWidth();
      assertEquals(0, int1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(int1 == int0);
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=4.071801886128797
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      
      resultMatrixCSV0.setOptions(stringArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, stringArray0.length);
      
      int int0 = resultMatrixSignificance0.getDefaultColNameWidth();
      assertEquals(0, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.7419288148943366
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      
      resultMatrixCSV0.clearHeader();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      
      resultMatrixCSV0.setOptions((String[]) null);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      
      boolean boolean0 = resultMatrixCSV0.getShowAverage();
      assertFalse(boolean0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      
      resultMatrixCSV0.setColName(6, "");
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.475995409495045
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      
      String string0 = resultMatrixHTML1.printRowNamesTipText();
      assertEquals("Whether to output row names or just numbers representing them.", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML1);
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      
      String string1 = resultMatrixLatex0.padString("", 0, false);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
      
      resultMatrixHTML0.setRowHidden(2, false);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      
      String string2 = resultMatrixHTML1.significanceWidthTipText();
      assertEquals("The width of the significance indicator (0 = optimal).", string2);
      assertNotNull(string2);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 2);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      
      resultMatrixGnuPlot0.setSignificanceWidth(1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      
      String string3 = resultMatrixGnuPlot0.getRevision();
      assertEquals("8034", string3);
      assertNotNull(string3);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixLatex0);
      assertNotNull(resultMatrixCSV1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      
      int int0 = resultMatrixPlainText0.getDefaultCountWidth();
      assertEquals(5, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      
      boolean boolean0 = resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      assertFalse(boolean0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      
      resultMatrixPlainText0.setStdDevPrec(1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      
      resultMatrixCSV0.setStdDev(2, (-2107), 0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
      assertNotSame(resultMatrixCSV0, resultMatrixCSV1);
      
      boolean boolean1 = resultMatrixLatex0.getDefaultPrintColNames();
      assertFalse(boolean1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(boolean1 == boolean0);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
      
      String string4 = resultMatrixLatex0.printRowNamesTipText();
      assertEquals("Whether to output row names or just numbers representing them.", string4);
      assertNotNull(string4);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      
      int[][] intArray0 = new int[24][3];
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setSummary((int[][]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.376958674841705
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      
      int[][] intArray0 = new int[24][3];
      resultMatrixHTML0.setColNameWidth((-176));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      
      resultMatrixHTML0.setRanking(intArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(24, intArray0.length);
      
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(1, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      
      String string0 = resultMatrixHTML0.globalInfo();
      assertEquals("Generates the matrix output as HTML.", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.470787141456588
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      
      String string0 = resultMatrixGnuPlot0.getRowName(0);
      assertEquals("row0", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      
      String string1 = resultMatrixGnuPlot0.getColName(1);
      assertNull(string1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.169501957207281
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      
      String string0 = resultMatrixHTML0.toStringRanking();
      assertEquals("-ranking data not set-", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      
      boolean boolean0 = resultMatrixHTML0.getDefaultPrintColNames();
      assertFalse(boolean0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.297455386895915
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      
      int int0 = resultMatrixHTML0.getSignificanceCount(0, 2);
      assertEquals(0, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      
      String string0 = resultMatrixGnuPlot0.toStringRanking();
      assertEquals("-ranking data not set-", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      
      boolean boolean0 = resultMatrixGnuPlot0.getPrintRowNames();
      assertTrue(boolean0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.3155929110989417
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      resultMatrixHTML0.setPrintRowNames(false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      int[][] intArray0 = new int[2][7];
      resultMatrixHTML0.setSummary(intArray0, intArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, intArray0.length);
      
      String string0 = resultMatrixHTML0.showAverageTipText();
      assertEquals("Whether to show the row with averages.", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.4342348975337873
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      
      String string0 = resultMatrixGnuPlot0.showStdDevTipText();
      assertEquals("Whether to display the standard deviation column.", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      
      int[][] intArray0 = new int[24][3];
      resultMatrixHTML0.setSignificance((-180), 745, 745);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.349282251575593
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 1);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      
      String string0 = resultMatrixCSV0.toStringRanking();
      assertEquals("-ranking data not set-", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      
      resultMatrixCSV0.setSignificance(2, 515, 0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3815696501104067
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      
      String string0 = resultMatrixHTML0.getSummaryTitle((-2));
      assertEquals("_", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      
      int int0 = resultMatrixHTML0.getDisplayRow((-2));
      assertEquals((-1), int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      
      String string1 = resultMatrixLatex0.toStringKey();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string1);
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string1.equals((Object)string0));
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      
      String string2 = resultMatrixLatex0.padString("(", (-2), true);
      assertEquals("(", string2);
      assertNotNull(string2);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      
      resultMatrixHTML0.setRowHidden((-1), true);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      
      String string3 = resultMatrixHTML0.getSummaryTitle(1257);
      assertEquals("j", string3);
      assertNotNull(string3);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      
      int int1 = resultMatrixHTML0.getDisplayRow((-1));
      assertEquals((-1), int1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(int1 == int0);
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3427145165260703
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 2);
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      
      String string0 = resultMatrixCSV0.padString("*", (-2));
      assertEquals("*", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      
      resultMatrixGnuPlot0.setEnumerateRowNames(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      
      resultMatrixGnuPlot0.setColHidden(3, true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixHTML0);
      assertNotNull(resultMatrixCSV1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      
      // Undeclared exception!
      try { 
        resultMatrixCSV1.trimString((String) null, 26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.507227472701078
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      
      resultMatrixLatex0.clearRanking();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 104);
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(104, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(104, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      
      String string0 = resultMatrixGnuPlot0.getRowName(0);
      assertEquals("row0", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      
      resultMatrixPlainText0.setShowAverage(true);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      
      String string1 = resultMatrixPlainText0.toStringKey();
      assertEquals("Key:\n(1) col0\n", string1);
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(string1.equals((Object)string0));
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixLatex1);
      assertNotNull(resultMatrixHTML1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getRowNameWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      
      String string2 = resultMatrixHTML0.toStringSummary();
      assertEquals("-summary data not set-", string2);
      assertNotNull(string2);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(104, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(104, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      
      double double0 = resultMatrixLatex1.getStdDev(0, 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertNotSame(resultMatrixLatex1, resultMatrixLatex0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.0761897984004087
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      
      resultMatrixHTML0.assign(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      
      String string0 = resultMatrixLatex0.globalInfo();
      assertEquals("Generates the matrix output in LaTeX-syntax.", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      
      int int0 = resultMatrixHTML0.getCountWidth();
      assertEquals(0, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.391433911957216
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      
      int int0 = resultMatrixPlainText0.getVisibleRowCount();
      assertEquals(1, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      
      boolean boolean0 = resultMatrixPlainText0.getEnumerateColNames();
      assertTrue(boolean0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.439584610234401
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      
      int int0 = resultMatrixHTML0.getSignificanceCount((-867), 10);
      assertEquals(0, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      resultMatrixHTML0.setMeanWidth((-1035));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      String string0 = resultMatrixHTML0.trimString("\tThe width of the standard deviation (0 = optimal).\n\t(default: ", 10);
      assertEquals("\tThe width", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.369224802856662
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      
      resultMatrixGnuPlot0.clearSummary();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      
      String string0 = resultMatrixGnuPlot0.getRowName(0);
      assertEquals("row0", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.526869179753222
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixHTML0.setRowOrder(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, intArray0.length);
      
      String string0 = resultMatrixHTML0.toStringSummary();
      assertEquals("-summary data not set-", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(1, int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      
      boolean boolean0 = resultMatrixHTML0.getPrintColNames();
      assertFalse(boolean0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(20, 0);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(20, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(20, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      
      String string1 = resultMatrixSignificance0.toStringKey();
      assertEquals("Key:\n(1) col0\n(2) col1\n(3) col2\n(4) col3\n(5) col4\n(6) col5\n(7) col6\n(8) col7\n(9) col8\n(10) col9\n(11) col10\n(12) col11\n(13) col12\n(14) col13\n(15) col14\n(16) col15\n(17) col16\n(18) col17\n(19) col18\n(20) col19\n", string1);
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(20, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(20, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      
      String string2 = resultMatrixSignificance0.toStringKey();
      assertEquals("Key:\n(1) col0\n(2) col1\n(3) col2\n(4) col3\n(5) col4\n(6) col5\n(7) col6\n(8) col7\n(9) col8\n(10) col9\n(11) col10\n(12) col11\n(13) col12\n(14) col13\n(15) col14\n(16) col15\n(17) col16\n(18) col17\n(19) col18\n(20) col19\n", string2);
      assertNotNull(string2);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(20, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(20, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.4430872463832487
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1469, 2);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1469, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1469, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      
      String string0 = resultMatrixPlainText0.globalInfo();
      assertEquals("Generates the output as plain text (for fixed width fonts).", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1469, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      
      double double0 = resultMatrixCSV0.getMean(258, 4128);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      assertEquals(0, int0);
      
      int int1 = resultMatrixPlainText0.getDisplayRow(0);
      assertEquals(0, int1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(int1 == int0);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1469, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1469, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      
      String string1 = resultMatrixHTML0.toStringRanking();
      assertEquals("-ranking data not set-", string1);
      assertNotNull(string1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.6718809908417733
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 66);
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      
      int[][] intArray0 = new int[17][3];
      int[] intArray1 = new int[3];
      intArray1[0] = 66;
      intArray1[1] = 26;
      intArray1[2] = 66;
      resultMatrixHTML0.TIE_STRING = "\tThe number of decimals after the decimal point for the mean.\n\t(default: ";
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      
      intArray0[0] = intArray1;
      resultMatrixHTML0.setRanking(intArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(17, intArray0.length);
      
      String string0 = resultMatrixHTML0.meanWidthTipText();
      assertEquals("The width of the mean (0 = optimal).", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      
      int int0 = resultMatrixHTML0.getSignificanceCount(66, 26);
      assertEquals(0, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(26, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(66, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(26, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(66, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      
      String string1 = resultMatrixCSV0.trimString("*", 310);
      assertEquals("*", string1);
      assertNotNull(string1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string1.equals((Object)string0));
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(26, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(66, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(26, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(66, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      
      boolean boolean0 = resultMatrixHTML0.getPrintColNames();
      assertFalse(boolean0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      
      String[][] stringArray0 = new String[0][7];
      int int1 = resultMatrixHTML0.getColSize(stringArray0, (-3964));
      assertEquals(0, int1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(int1 == int0);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.3914339119572157
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      
      resultMatrixPlainText0.setStdDevPrec(2183);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2183, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      
      int int0 = resultMatrixPlainText0.getVisibleRowCount();
      assertEquals(1, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2183, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.301331940078409
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 26);
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(26, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(26, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      resultMatrixHTML0.TIE_STRING = "*";
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(26, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(26, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(26, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(26, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(26, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(26, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(26, resultMatrixLatex0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(26, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      
      String string0 = resultMatrixHTML0.getSummaryTitle(1);
      assertEquals("b", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(26, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(26, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      int int0 = resultMatrixHTML0.getDisplayRow(44);
      assertEquals((-1), int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(26, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(26, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixHTML0);
      assertNotNull(resultMatrixLatex1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(26, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(26, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertEquals(25, resultMatrixLatex1.getRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertEquals(26, resultMatrixLatex1.getVisibleRowCount());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertEquals(26, resultMatrixLatex1.getRowCount());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertEquals(26, resultMatrixLatex1.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals(26, resultMatrixLatex1.getVisibleColCount());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      
      String string1 = resultMatrixLatex0.toStringKey();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n(2) & col1 \\\\\n(3) & col2 \\\\\n(4) & col3 \\\\\n(5) & col4 \\\\\n(6) & col5 \\\\\n(7) & col6 \\\\\n(8) & col7 \\\\\n(9) & col8 \\\\\n(10) & col9 \\\\\n(11) & col10 \\\\\n(12) & col11 \\\\\n(13) & col12 \\\\\n(14) & col13 \\\\\n(15) & col14 \\\\\n(16) & col15 \\\\\n(17) & col16 \\\\\n(18) & col17 \\\\\n(19) & col18 \\\\\n(20) & col19 \\\\\n(21) & col20 \\\\\n(22) & col21 \\\\\n(23) & col22 \\\\\n(24) & col23 \\\\\n(25) & col24 \\\\\n(26) & col25 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string1);
      assertNotNull(string1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixLatex0.equals((Object)resultMatrixLatex1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(26, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(26, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(26, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(26, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(26, resultMatrixLatex0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(26, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertNotSame(resultMatrixLatex0, resultMatrixLatex1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3275738812971776
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1, 1);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      
      String string0 = resultMatrixPlainText0.globalInfo();
      assertEquals("Generates the output as plain text (for fixed width fonts).", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      
      double double0 = resultMatrixCSV0.getMean(0, 2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      
      String string1 = resultMatrixCSV0.removeFilterName(" ");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      assertNotNull(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(5, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      
      resultMatrixLatex0.clear();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.0231713247546135
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      
      boolean boolean0 = resultMatrixHTML0.getDefaultEnumerateRowNames();
      assertFalse(boolean0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3965297222092277
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      
      String string0 = resultMatrixHTML0.getSummaryTitle(1);
      assertEquals("b", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      
      int int0 = resultMatrixHTML0.getDisplayRow(1);
      assertEquals((-1), int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      
      String string1 = resultMatrixLatex0.toStringKey();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string1);
      assertNotNull(string1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=4.122901807344236
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "v";
      resultMatrixCSV0.setOptions(stringArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, stringArray0.length);
      
      resultMatrixPlainText0.m_StdDevPrec = 1;
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      
      int[] intArray0 = new int[1];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      
      String string0 = resultMatrixCSV0.getRowName(18);
      assertNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixLatex0);
      assertNotNull(resultMatrixLatex1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      
      String string1 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string1);
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      
      String string2 = resultMatrixCSV1.getRevision();
      assertEquals("8034", string2);
      assertNotNull(string2);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertNotSame(resultMatrixCSV1, resultMatrixCSV0);
      
      String string3 = resultMatrixCSV0.trimString("(", (-2172));
      assertEquals("(", string3);
      assertNotNull(string3);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertNotSame(resultMatrixCSV0, resultMatrixCSV1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=4.141248409570184
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixGnuPlot0);
      assertNotNull(resultMatrixGnuPlot1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      
      Integer integer0 = new Integer(3250);
      assertEquals(3250, (int)integer0);
      assertNotNull(integer0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      
      resultMatrixCSV0.setOptions((String[]) null);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(1, 11);
      assertNotNull(resultMatrixCSV1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals(11, resultMatrixCSV1.getVisibleRowCount());
      assertEquals(11, resultMatrixCSV1.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      
      resultMatrixCSV0.clear();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertNotSame(resultMatrixCSV0, resultMatrixCSV1);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      
      int int0 = resultMatrixHTML1.getSignificance(0, 3250);
      assertEquals(0, int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
      
      ResultMatrixSignificance.main((String[]) null);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2592, 2);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.5370597511562574
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      
      String string0 = resultMatrixGnuPlot0.getRowName((-1));
      assertNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.544448181645515
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 97);
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(97, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(97, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      
      String string0 = resultMatrixHTML0.meanWidthTipText();
      assertEquals("The width of the mean (0 = optimal).", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(97, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(97, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      
      int int0 = resultMatrixHTML0.getSignificanceCount(1, 26);
      assertEquals(0, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(97, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(97, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      
      resultMatrixHTML0.setMeanWidth(26);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(26, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(97, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(97, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(97, 2);
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(97, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(97, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(2, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(97, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(97, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(2, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(97, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(97, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      
      resultMatrixSignificance0.setMean(36, 57, 1043.758564129);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(97, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(97, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(2, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(97, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(97, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=4.132173772183331
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      stringArray0[3] = "]";
      stringArray0[4] = "[";
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(5, stringArray0.length);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(5, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      
      resultMatrixSignificance0.setMean(0, 1, 2);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(5, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.2913789160859594
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      
      int[][] intArray0 = new int[0][6];
      resultMatrixHTML0.setRanking(intArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, intArray0.length);
      
      int int0 = resultMatrixHTML0.getSignificanceCount(1, 1);
      assertEquals(0, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.3459306006376353
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(1, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 1);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getColCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      
      String string0 = resultMatrixSignificance0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getColCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      
      int int1 = resultMatrixSignificance0.getDefaultMeanWidth();
      assertEquals(0, int1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(int1 == int0);
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getColCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=4.049323965103872
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(18, stringArray0.length);
      
      String string0 = resultMatrixHTML0.enumerateColNamesTipText();
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=4.321898983366783
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "n{v^y>7yh%#v&ec.,1";
      stringArray0[3] = "a$Lr6l#Y!B7 ";
      stringArray0[4] = "*8Ea7t{lb";
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(6, stringArray0.length);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      
      resultMatrixPlainText0.setShowAverage(false);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      
      String string0 = resultMatrixPlainText0.toStringKey();
      assertEquals("Key:\n(1) col0\n", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      
      String string1 = resultMatrixHTML0.toStringSummary();
      assertEquals("-summary data not set-", string1);
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      
      double double0 = resultMatrixLatex0.getStdDev(0, 1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.754911824645687
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      
      String string0 = resultMatrixLatex0.stdDevPrecTipText();
      assertEquals("The number of decimals after the decimal point for the standard deviation.", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      
      resultMatrixPlainText0.m_PrintRowNames = true;
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      
      String string1 = resultMatrixSignificance0.getRevision();
      assertEquals("8034", string1);
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      
      resultMatrixPlainText0.addHeader("The number of decimals after the decimal point for the standard deviation.", " ");
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      
      String string2 = resultMatrixCSV0.globalInfo();
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", string2);
      assertNotNull(string2);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      
      String string3 = resultMatrixCSV0.trimString("", 2);
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      
      String string4 = resultMatrixSignificance0.stdDevWidthTipText();
      assertEquals("The width of the standard deviation (0 = optimal).", string4);
      assertNotNull(string4);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      
      String string5 = resultMatrixPlainText0.rowNameWidthTipText();
      assertEquals("The maximum width for the row names (0 = optimal).", string5);
      assertNotNull(string5);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.772043419931793
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(18, stringArray0.length);
      
      resultMatrixHTML0.setMeanWidth(0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      
      double double0 = resultMatrixHTML0.getAverage(0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      assertNotNull(resultMatrixHTML1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      
      boolean boolean0 = resultMatrixHTML1.isMean(0);
      assertFalse(boolean0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
      
      String[][] stringArray1 = new String[1][5];
      resultMatrixHTML1.m_RowNameWidth = 1157;
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals(1157, resultMatrixHTML1.getRowNameWidth());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      
      String[] stringArray2 = new String[1];
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "$ct[";
      stringArray1[0] = stringArray2;
      int int0 = resultMatrixHTML0.getColSize(stringArray1, 0, false, false);
      assertEquals(4, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, stringArray1.length);
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.836838332218218
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(18, stringArray0.length);
      
      resultMatrixHTML0.setMeanWidth(11);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(11, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      
      // Undeclared exception!
      try { 
        resultMatrixHTML0.getColSize((String[][]) null, 27, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.2910358629127177
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      
      String[][] stringArray0 = new String[2][2];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "*";
      stringArray1[1] = "]";
      stringArray1[2] = "X99";
      stringArray1[3] = "[";
      stringArray1[4] = "*";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[4];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      resultMatrixCSV0.setStdDevPrec(2298);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(2298, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      
      stringArray2[0] = "*";
      stringArray2[1] = "[";
      stringArray2[2] = "[";
      stringArray2[3] = " ";
      stringArray0[1] = stringArray2;
      int int0 = resultMatrixCSV0.getColSize(stringArray0, 3594, true, false);
      assertEquals(0, int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(2298, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.5354315286325124
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(69, 69);
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(69, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(69, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(69, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(69, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      
      String[][] stringArray0 = new String[1][6];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "*";
      stringArray0[0] = stringArray1;
      int int0 = resultMatrixCSV0.getColSize(stringArray0, 97);
      assertEquals(0, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(69, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(69, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(69, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(69, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, stringArray0.length);
      
      Enumeration enumeration0 = resultMatrixCSV0.headerKeys();
      assertNotNull(enumeration0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(69, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(69, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(69, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(69, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=4.305849305903947
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      
      resultMatrixCSV0.setOptions((String[]) null);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      
      ResultMatrixCSV.main((String[]) null);
      boolean boolean0 = resultMatrixCSV0.getColHidden((-1133));
      assertFalse(boolean0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=4.256924509581594
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(18, stringArray0.length);
      
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(18, stringArray0.length);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      
      resultMatrixHTML0.clear();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      resultMatrixHTML0.TIE_STRING = "*";
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      resultMatrixSignificance0.setMean(0, (-665), 0.0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.436242257854965
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      
      resultMatrixHTML0.setRowOrder((int[]) null);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(1, int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.2548395689931526
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      
      resultMatrixGnuPlot0.setEnumerateRowNames(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      
      resultMatrixGnuPlot0.setColHidden(0, true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      assertNotNull(resultMatrixCSV1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      
      String string0 = resultMatrixCSV0.trimString("*", 1);
      assertEquals("*", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertNotSame(resultMatrixCSV0, resultMatrixCSV1);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 2);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      
      resultMatrixSignificance0.setShowStdDev(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.435005016902289
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      
      resultMatrixCSV0.setRowNameWidth(450);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(450, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      
      String string0 = resultMatrixCSV0.globalInfo();
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(450, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      
      String string1 = resultMatrixCSV0.trimString("", 1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(450, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=4.137575184946431
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(18, stringArray0.length);
      
      resultMatrixHTML0.setMeanWidth(0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(3284, 0);
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getVisibleRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(3284, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      resultMatrixLatex0.m_RankingWins = intArray0;
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getVisibleRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(3284, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      
      int[][] intArray1 = new int[1][7];
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 0;
      intArray2[3] = 3284;
      intArray1[0] = intArray2;
      resultMatrixHTML0.setSummary(intArray1, intArray1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, intArray1.length);
      
      resultMatrixHTML0.setStdDev(3378, 0, 2261.88200763554);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      // Undeclared exception!
      resultMatrixLatex0.toString();
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.422976983480329
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      
      int int0 = resultMatrixPlainText0.getVisibleRowCount();
      assertEquals(1, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      
      resultMatrixPlainText0.WIN_STRING = "setColOrder: length does not match (";
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      
      boolean boolean0 = resultMatrixPlainText0.isMean(125);
      assertFalse(boolean0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.299444207063042
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      
      int[] intArray0 = new int[5];
      resultMatrixHTML0.setRowOrder(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(5, intArray0.length);
      
      double double0 = resultMatrixHTML0.getAverage(359);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.590374896615991
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 66);
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      
      int[][] intArray0 = new int[17][3];
      resultMatrixHTML0.setRanking(intArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(17, intArray0.length);
      
      String string0 = resultMatrixHTML0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = resultMatrixHTML0.isMean(26);
      assertTrue(boolean0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      
      int int0 = resultMatrixHTML0.getVisibleRowCount();
      assertEquals(66, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(66, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(26, resultMatrixSignificance0.getColCount());
      assertEquals(66, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(26, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      
      String string1 = resultMatrixSignificance0.toStringKey();
      assertEquals("Key:\n(1) col0\n(2) col1\n(3) col2\n(4) col3\n(5) col4\n(6) col5\n(7) col6\n(8) col7\n(9) col8\n(10) col9\n(11) col10\n(12) col11\n(13) col12\n(14) col13\n(15) col14\n(16) col15\n(17) col16\n(18) col17\n(19) col18\n(20) col19\n(21) col20\n(22) col21\n(23) col22\n(24) col23\n(25) col24\n(26) col25\n", string1);
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(66, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(26, resultMatrixSignificance0.getColCount());
      assertEquals(66, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(26, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=4.110433477036148
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      
      resultMatrixGnuPlot0.setEnumerateRowNames(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      
      int int0 = (-2326);
      resultMatrixGnuPlot0.setColHidden((-2326), true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      
      String[][] stringArray0 = resultMatrixGnuPlot0.toArray();
      assertNotNull(stringArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(3, stringArray0.length);
      
      int int1 = (-1361);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.padString((String) null, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=4.328575719357869
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(18, stringArray0.length);
      
      resultMatrixHTML0.setMeanWidth(0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(18, stringArray0.length);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      
      resultMatrixPlainText0.setShowAverage(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      
      String string0 = resultMatrixPlainText0.toStringKey();
      assertEquals("Key:\n(1) col0\n", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixPlainText0);
      assertNotNull(resultMatrixHTML1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML1.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixHTML1.getCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      
      String string1 = resultMatrixHTML0.toStringSummary();
      assertEquals("-summary data not set-", string1);
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.equals((Object)resultMatrixHTML1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertNotSame(resultMatrixHTML0, resultMatrixHTML1);
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(2, 2);
      assertNotNull(resultMatrixLatex1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex1.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixLatex1.getColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex1.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex1.getRowCount());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      
      double double0 = resultMatrixLatex1.getStdDev(2, 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex1.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixLatex1.getColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex1.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex1.getRowCount());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertNotSame(resultMatrixLatex1, resultMatrixLatex0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.441847180997983
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      
      int int0 = resultMatrixPlainText0.getVisibleRowCount();
      assertEquals(1, int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      
      boolean boolean0 = resultMatrixPlainText0.getDefaultEnumerateColNames();
      assertTrue(boolean0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      
      boolean boolean1 = resultMatrixPlainText0.getEnumerateRowNames();
      assertFalse(boolean1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(boolean1 == boolean0);
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.4898499206128144
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      assertNotNull(resultMatrixCSV1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertFalse(resultMatrixCSV1.getShowAverage());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[6];
      intArray1[1] = 1;
      intArray1[2] = 2;
      intArray1[4] = 1;
      intArray1[5] = 2;
      intArray0[0] = intArray1;
      int int0 = resultMatrixCSV0.getSignificance(2, 2);
      assertEquals(0, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertNotSame(resultMatrixCSV0, resultMatrixCSV1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=4.020866019121658
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(18, stringArray0.length);
      
      resultMatrixHTML0.setMeanWidth(2);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      
      int int0 = resultMatrixHTML0.getSignificance(1, (-21));
      assertEquals(0, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(102, (-21));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.318746863395413
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      
      int[][] intArray0 = new int[24][3];
      resultMatrixHTML0.setSummary(intArray0, intArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(24, intArray0.length);
      
      int int0 = resultMatrixHTML0.getSignificance((-3687), 4);
      assertEquals(0, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.631292535256881
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[2] = "v";
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      
      resultMatrixPlainText0.setCountWidth(0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      
      resultMatrixPlainText0.setShowAverage(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      
      String string0 = resultMatrixSignificance0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      
      String string1 = resultMatrixHTML0.toStringSummary();
      assertEquals("-summary data not set-", string1);
      assertNotNull(string1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string1.equals((Object)string0));
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.2954193201263635
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      
      String string0 = resultMatrixGnuPlot0.getRowName(1);
      assertNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.716363262054128
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(5, 5);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(5, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(5, resultMatrixSignificance0.getColCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = "*";
      resultMatrixSignificance0.setOptions(stringArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(5, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(5, resultMatrixSignificance0.getColCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(5, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(3, stringArray0.length);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      
      String string0 = resultMatrixHTML0.toStringSummary();
      assertEquals("-summary data not set-", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      
      double double0 = resultMatrixLatex0.getStdDev(111, 1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.773057421324253
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(5, 5);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(5, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(5, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(5, resultMatrixSignificance0.getColCount());
      assertEquals(5, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, 15);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(15, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(15, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      
      resultMatrixGnuPlot0.setColHidden(15, false);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(15, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(15, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      
      String[][] stringArray0 = resultMatrixGnuPlot0.toArray();
      assertNotNull(stringArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(15, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(15, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(17, stringArray0.length);
      
      String string0 = resultMatrixGnuPlot0.padString("", 15);
      assertEquals("               ", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(15, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(15, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      
      boolean boolean0 = resultMatrixGnuPlot0.getDefaultRemoveFilterName();
      assertFalse(boolean0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(15, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(15, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 0);
      assertNotNull(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(1, 1);
      assertNotNull(resultMatrixLatex1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      
      String string1 = resultMatrixLatex1.toStringRanking();
      assertEquals("-ranking data not set-", string1);
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertNotSame(resultMatrixLatex1, resultMatrixLatex0);
      
      String string2 = resultMatrixLatex1.printColNamesTipText();
      assertEquals("Whether to output column names or just numbers representing them.", string2);
      assertNotNull(string2);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertNotSame(resultMatrixLatex1, resultMatrixLatex0);
      
      resultMatrixLatex0.setEnumerateRowNames(false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixLatex0.equals((Object)resultMatrixLatex1));
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertNotSame(resultMatrixLatex0, resultMatrixLatex1);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      
      String string3 = resultMatrixGnuPlot1.getColName(0);
      assertEquals("col0", string3);
      assertNotNull(string3);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.630732311167245
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      
      String string0 = resultMatrixGnuPlot0.getRowName(0);
      assertEquals("row0", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      
      Enumeration enumeration0 = resultMatrixGnuPlot0.headerKeys();
      assertNotNull(enumeration0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.8584728841136644
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(18, stringArray0.length);
      
      String string0 = resultMatrixHTML0.getColName((-203));
      assertNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      
      resultMatrixHTML0.setMeanWidth(1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(1, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      
      double double0 = resultMatrixHTML0.getAverage(0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(1, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.631734817432909
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      
      String string0 = resultMatrixSignificance0.toStringKey();
      assertEquals("Key:\n(1) col0\n", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      
      int[][] intArray0 = new int[0][7];
      resultMatrixSignificance0.setRanking(intArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, intArray0.length);
      
      resultMatrixSignificance0.setMean(6, 1317, 1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      
      String string1 = resultMatrixSignificance0.printColNamesTipText();
      assertEquals("Whether to output column names or just numbers representing them.", string1);
      assertNotNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      
      int int0 = resultMatrixHTML0.getMeanPrec();
      assertEquals(2, int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.2367626210831992
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      
      double double0 = resultMatrixHTML0.getAverage(4);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      
      boolean boolean0 = resultMatrixHTML0.getDefaultPrintRowNames();
      assertTrue(boolean0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.209417879200296
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 66);
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(66, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(66, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 66;
      intArray0[1] = 26;
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML1);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      
      resultMatrixGnuPlot0.setEnumerateRowNames(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
      
      resultMatrixGnuPlot0.setColHidden(1, false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
      
      resultMatrixGnuPlot0.assign(resultMatrixHTML1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      
      String string0 = resultMatrixCSV0.trimString("set xrange [0:", 20);
      assertEquals("set xrange [0:", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertNotSame(resultMatrixHTML1, resultMatrixHTML0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.4244551558328777
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(3284, 1);
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(3284, resultMatrixLatex0.getColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      
      resultMatrixHTML0.setMeanPrec(0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      resultMatrixHTML0.setMeanWidth(97);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(97, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      String string0 = resultMatrixLatex0.padString("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(3284, resultMatrixLatex0.getColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      
      resultMatrixLatex0.setStdDev(1, 26, (-4460.237234487976));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(3284, resultMatrixLatex0.getColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.3291483034058102
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      
      int int0 = resultMatrixHTML0.getSignificanceCount(2, 2);
      assertEquals(0, int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertFalse(resultMatrixHTML1.getShowAverage());
      
      resultMatrixCSV0.setStdDev(0, 1, 0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.487795765617483
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(true));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      booleanArray0[4] = false;
      booleanArray0[1] = false;
      resultMatrixSignificance0.m_ColHidden = booleanArray0;
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      
      boolean boolean0 = resultMatrixSignificance0.isSignificance((-628));
      assertFalse(boolean0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      
      resultMatrixSignificance0.m_MeanPrec = 48;
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(48, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      
      resultMatrixSignificance0.setRowName(0, ":8@}'yhpeU'.B ");
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(48, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      
      resultMatrixSignificance0.addHeader(":8@}'yhpeU'.B ", "A_WyRFO5Pz$j");
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(48, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(48, 393);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=4.2135633983386445
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 97);
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(97, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(97, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      
      resultMatrixHTML0.TIE_STRING = "*";
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(97, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(97, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The maximum width for the row names (0 = optimal).";
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      
      String string0 = resultMatrixSignificance0.toString();
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      
      resultMatrixSignificance0.setOptions(stringArray0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(1, stringArray0.length);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(97, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(97, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(97, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(26, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(26, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(97, resultMatrixCSV0.getVisibleRowCount());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      
      boolean boolean0 = resultMatrixCSV0.getDefaultShowAverage();
      assertFalse(boolean0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(97, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(97, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(97, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(26, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(26, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(97, resultMatrixCSV0.getVisibleRowCount());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      
      // Undeclared exception!
      resultMatrixCSV0.toArray();
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.4929496021874633
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Vector<String> vector1 = new Vector<String>();
      assertNotNull(vector1);
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      
      boolean boolean0 = vector0.retainAll(vector1);
      assertFalse(boolean0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 381);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(381, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(381, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      
      resultMatrixCSV0.setShowStdDev(false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      
      boolean boolean1 = resultMatrixSignificance0.isSignificance(1857);
      assertTrue(boolean1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(boolean1 == boolean0);
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(381, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(381, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      
      resultMatrixSignificance0.setRowName(1857, "[eRp$!cCe(4O dM6");
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(381, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(381, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      
      boolean boolean2 = resultMatrixSignificance0.getRowHidden(6);
      assertFalse(boolean2);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(381, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(381, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(3068, 1748);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.8767914539223076
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      
      resultMatrixHTML0.m_EnumerateColNames = false;
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(17, stringArray0.length);
      
      resultMatrixHTML0.setMeanWidth(0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      
      double double0 = resultMatrixHTML0.getAverage(0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(1, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      
      int int1 = resultMatrixHTML0.getStdDevPrec();
      assertEquals(2, int1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(int1 == int0);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.806742654714448
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(";
      stringArray0[1] = "$\bullet$";
      stringArray0[2] = "$circ$";
      stringArray0[3] = "";
      stringArray0[4] = "stddev-prec";
      stringArray0[5] = "$\bullet$";
      stringArray0[6] = " ";
      stringArray0[7] = "";
      resultMatrixLatex0.setOptions(stringArray0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(8, stringArray0.length);
      
      resultMatrixLatex0.addHeader("", "");
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      
      String string0 = resultMatrixLatex0.toStringRanking();
      assertEquals("-ranking data not set-", string0);
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      
      int int0 = resultMatrixLatex0.getStdDevPrec();
      assertEquals(0, int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.5857792954635777
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      
      int int0 = resultMatrixHTML0.getSignificanceCount(0, 25);
      assertEquals(0, int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      
      Vector<Integer> vector0 = new Vector<Integer>(25, 730);
      assertNotNull(vector0);
      assertFalse(vector0.contains(25));
      assertEquals(25, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      resultMatrixHTML0.m_HeaderKeys = vector0;
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, resultMatrixHTML0.m_HeaderKeys.size());
      assertEquals(25, resultMatrixHTML0.m_HeaderKeys.capacity());
      assertTrue(resultMatrixHTML0.m_HeaderKeys.isEmpty());
      assertEquals("[]", resultMatrixHTML0.m_HeaderKeys.toString());
      
      resultMatrixGnuPlot0.setEnumerateRowNames(true);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      
      resultMatrixGnuPlot0.setCountWidth((-1176));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      
      resultMatrixGnuPlot0.setColHidden(0, true);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      
      String string0 = resultMatrixCSV0.trimString("BP4p,U8)$U@:_=FV", 25);
      assertEquals("BP4p,U8)$U@:_=FV", string0);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getRowCount());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.605281131346854
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      Integer integer0 = new Integer(2592);
      resultMatrixCSV0.setCountWidth(2592);
      resultMatrixCSV0.setOptions((String[]) null);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.3423210352894626
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setMeanWidth((-750));
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, int0);
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.209773226216316
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.setEnumerateRowNames(false);
      resultMatrixGnuPlot0.setEnumerateRowNames(true);
      resultMatrixGnuPlot0.setColHidden(2, true);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixGnuPlot0.toStringSummary();
      assertTrue(resultMatrixGnuPlot0.getEnumerateRowNames());
      
      resultMatrixCSV1.getStdDev(0, 2);
      assertTrue(resultMatrixCSV1.getPrintRowNames());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=4.237602782298872
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "n{v^y>7yh%#v&ec.,1";
      stringArray0[3] = "a$Lr6l#Y!B7 ";
      stringArray0[4] = "*8Ea7t{lb";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setShowAverage(false);
      resultMatrixPlainText0.toStringKey();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.toStringSummary();
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      
      resultMatrixLatex0.getStdDev(0, (-661));
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getShowStdDev());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.393214877492927
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRemoveFilterName(true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(26, 2);
      resultMatrixCSV0.padString("(", 2);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.getHeader("(");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.8304904732258733
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.assign(resultMatrixHTML0);
      resultMatrixHTML0.assign(resultMatrixGnuPlot0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 2);
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=4.05164435778571
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.getRowName(0);
      assertEquals("row0", string0);
      
      String[] stringArray0 = resultMatrixGnuPlot0.getOptions();
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(18, stringArray0.length);
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=4.023567228526778
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertEquals(18, stringArray0.length);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(0, 1);
      resultMatrixCSV1.globalInfo();
      assertEquals(0, resultMatrixCSV1.getColCount());
      
      double double0 = resultMatrixCSV0.getStdDev((-1), (-1292));
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.58357976679115
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int int0 = resultMatrixPlainText0.getMeanWidth();
      assertEquals(0, int0);
      
      resultMatrixPlainText0.listOptions();
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.3948659153892193
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int int0 = resultMatrixPlainText0.getVisibleRowCount();
      assertEquals(1, int0);
      
      boolean boolean0 = resultMatrixCSV0.getDefaultShowAverage();
      assertFalse(boolean0);
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.4457187038290495
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.clearRanking();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixLatex0.toStringSummary();
      boolean boolean0 = resultMatrixLatex0.isStdDev(2);
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(boolean0);
      
      resultMatrixGnuPlot0.setStdDev(1, 2, 0);
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.3441415661482083
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      assertTrue(resultMatrixPlainText1.getDefaultEnumerateColNames());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixCSV0.m_ColOrder = intArray0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      
      int int0 = resultMatrixCSV0.getColNameWidth();
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.367065157411477
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.addHeader("HNlVu'x", "HNlVu'x");
      int[][] intArray0 = new int[24][3];
      resultMatrixHTML0.setSummary(intArray0, intArray0);
      boolean boolean0 = resultMatrixHTML0.isSignificance(45);
      assertTrue(boolean0);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.3915038795048784
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = resultMatrixHTML0.getSignificanceCount(0, 2);
      assertEquals(0, int0);
      
      int int1 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(1, int1);
      
      resultMatrixHTML0.getDefaultRemoveFilterName();
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.5384983413378794
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(1, resultMatrixPlainText0.getColCount());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      int int0 = resultMatrixHTML0.getDisplayCol(2);
      assertEquals((-1), int0);
      
      resultMatrixHTML0.setStdDevWidth((-1));
      int int1 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(1, int1);
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(5, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.5360478614522353
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.meanWidthTipText();
      resultMatrixHTML0.getSignificanceCount(1, 1);
      resultMatrixHTML0.meanPrecTipText();
      resultMatrixHTML0.setStdDevWidth(77);
      int[] intArray0 = new int[1];
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.073291247675771
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setPrintColNames(false);
      resultMatrixHTML0.assign(resultMatrixHTML0);
      resultMatrixHTML0.getDefaultEnumerateRowNames();
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.392932350451869
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.m_MeanPrec = 0;
      resultMatrixCSV0.setPrintColNames(true);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.getHeader("*");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=4.137529205631386
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[][] intArray0 = new int[24][3];
      resultMatrixHTML0.setRanking(intArray0);
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      String[] stringArray0 = new String[0];
      ResultMatrixHTML.main(stringArray0);
      String string0 = resultMatrixHTML0.doubleToString(0.0, 18);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("0.000000000000000000", string0);
      assertEquals(1, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getSignificanceCount((-308), (-308));
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.3723567042172484
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = resultMatrixHTML0.getSignificanceCount(0, 2);
      assertEquals(0, int0);
      
      boolean boolean0 = resultMatrixHTML0.getShowStdDev();
      assertFalse(boolean0);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.globalInfo();
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.5414921346931187
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setColOrder((int[]) null);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixHTML0);
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals(25, resultMatrixLatex1.getRowNameWidth());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML1.getColCount());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.306922169071613
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 97);
      resultMatrixHTML0.clearRanking();
      resultMatrixHTML0.TIE_STRING = "*";
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.padString("*", 26, true);
      resultMatrixHTML0.setRowHidden(0, true);
      resultMatrixHTML0.getSummaryTitle(0);
      int int0 = resultMatrixHTML0.getDisplayRow(2);
      assertEquals(96, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.0880530989128174
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.padString("GRH[)D\"zW.}1l%9Yq", 25);
      assertEquals("GRH[)D\"zW.}1l%9Yq        ", string0);
      
      resultMatrixHTML0.assign(resultMatrixHTML0);
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.2910358629127177
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      double double0 = resultMatrixHTML0.getAverage((-477));
      assertEquals(0.0, double0, 0.01);
      
      resultMatrixHTML0.padString(" ", (-477), true);
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.544884733780147
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.printRowNamesTipText();
      resultMatrixLatex0.clearRanking();
      resultMatrixHTML0.padString(")", 0);
      resultMatrixLatex0.padString(")", 1, false);
      resultMatrixHTML0.setRowHidden(1, false);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setShowAverage(false);
      String string0 = resultMatrixPlainText0.toStringKey();
      assertEquals("Key:\n(1) col0\n", string0);
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      ResultMatrixHTML resultMatrixHTML2 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML2.toStringSummary();
      assertEquals(2, resultMatrixHTML2.getStdDevPrec());
      assertEquals(2, resultMatrixHTML2.getMeanPrec());
      assertEquals(0, resultMatrixHTML2.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML2.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML2.getCountWidth());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.3976033235452654
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2;
      resultMatrixGnuPlot0.m_RankingDiff = intArray0;
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      resultMatrixGnuPlot0.setRowHidden(1103, false);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setRemoveFilterName(false);
      resultMatrixSignificance0.getDefaultPrintColNames();
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.169501957207281
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setStdDev((-17), (-17), 1783.727095);
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.434635057597813
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[][] intArray0 = new int[0][9];
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.073074937920201
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      String[] stringArray0 = new String[1];
      try { 
        resultMatrixCSV0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=4.098518965725564
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(18, stringArray0.length);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setMean(3, 3, 0.0);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.567284040117864
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(5, 5);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      Vector<Object> vector0 = new Vector<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      vector0.retainAll(linkedList0);
      resultMatrixSignificance0.isSignificance(3273);
      resultMatrixSignificance0.setRowName((-1153), "F3'Xxx%N>(# 8t_6_ZY");
      resultMatrixSignificance0.getRowHidden(3258);
      ResultMatrixHTML resultMatrixHTML0 = null;
      try {
        resultMatrixHTML0 = new ResultMatrixHTML(4935, (-4625));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.369224802856662
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringRanking();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.getRowName(0);
      assertEquals("row0", string0);
      assertNotNull(string0);
      
      int int0 = resultMatrixHTML0.getDefaultCountWidth();
      assertEquals(0, int0);
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.632138511231163
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.m_SignificanceWidth = 0;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2449;
      intArray0[2] = 0;
      intArray0[3] = (-2358);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (-1);
      resultMatrixHTML0.setColOrder(intArray0);
      resultMatrixHTML0.addHeader("", "");
      resultMatrixHTML0.getColName(790);
      resultMatrixHTML0.toStringHeader();
      resultMatrixHTML0.getRowName(1790);
      resultMatrixHTML0.getCount(2449);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRowNameWidth((-1));
      resultMatrixLatex0.toStringRanking();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, (-2779));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=4.081055884268919
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getOptions();
      resultMatrixHTML0.meanPrecTipText();
      resultMatrixHTML0.setStdDevWidth((-1058));
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.setRowNameWidth((-1058));
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixCSV resultMatrixCSV3 = new ResultMatrixCSV(935, 1030);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.4365024712299324
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(1, int0);
      
      resultMatrixHTML0.getCount(1);
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.assign((ResultMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=4.1375167634737835
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(5, 5);
      String[] stringArray0 = new String[2];
      stringArray0[1] = " ";
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixSignificance0.setMean((-498), (-1), (-498));
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.9033004617529565
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      int int0 = resultMatrixHTML0.getSignificanceCount(3, 25);
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixHTML0.setMeanWidth(0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixHTML1.getAverage(3);
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      
      int int1 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(int1 == int0);
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, int1);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.6312207116556454
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.listOptions();
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultPrintColNames();
      boolean boolean0 = resultMatrixHTML0.isMean(12);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertTrue(boolean0);
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=3.4365024712299324
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getAverage(3284);
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, int0);
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=3.585991948307809
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(25, 0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Vector<Object> vector0 = new Vector<Object>();
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      resultMatrixSignificance0.m_ColHidden = booleanArray0;
      resultMatrixSignificance0.isSignificance((-628));
      resultMatrixSignificance0.setRowName(0, ":8@}'yhpeU'.B ");
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(3457, 2);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=3.469736490702675
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = resultMatrixHTML0.getSignificanceCount(6, 6);
      assertEquals(0, int0);
      
      boolean boolean0 = resultMatrixHTML0.getRowHidden(7);
      assertFalse(boolean0);
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=3.434635057597813
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getRowHidden((-1812));
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=3.5405224377234217
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 97);
      Vector<Object> vector0 = new Vector<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      vector0.retainAll(linkedList0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.isSignificance(0);
      resultMatrixSignificance0.setRowName(246, " ");
      resultMatrixSignificance0.getRowHidden(97);
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(97, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(0, 2);
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML1.getVisibleColCount());
  }

  /**
  //Test case number: 167
  /*Coverage entropy=3.3423210352894626
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int int0 = resultMatrixLatex0.getVisibleColCount();
      assertEquals(1, int0);
      
      resultMatrixLatex0.toStringRanking();
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 168
  /*Coverage entropy=3.435005016902289
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(5, 5);
      resultMatrixSignificance0.setMean(5, 1351, (-3447.69212736));
      assertEquals(5, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
  }

  /**
  //Test case number: 169
  /*Coverage entropy=3.4211876269016317
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setPrintRowNames(true);
      int[][] intArray0 = new int[24][3];
      resultMatrixHTML0.setSummary(intArray0, intArray0);
      resultMatrixHTML0.toStringKey();
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
  }

  /**
  //Test case number: 170
  /*Coverage entropy=3.6953845686184503
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1, 0);
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Dataset (1) col0\n----------------\n----------------\n(v/ /*)        |\n", string0);
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
  }

  /**
  //Test case number: 171
  /*Coverage entropy=4.0248590231146615
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultStdDevPrec();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String string0 = resultMatrixLatex0.toStringMatrix();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
  }

  /**
  //Test case number: 172
  /*Coverage entropy=3.435964402895254
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_EnumerateColNames = true;
      resultMatrixSignificance0.setPrintRowNames(true);
      resultMatrixSignificance0.getColHidden(40);
      resultMatrixSignificance0.setMean(757, 757, (-917.4));
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
  }

  /**
  //Test case number: 173
  /*Coverage entropy=4.185885442137892
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      resultMatrixHTML0.clearRanking();
      resultMatrixLatex0.setOptions(stringArray0);
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 174
  /*Coverage entropy=4.185486881767591
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_CountWidth = 61;
      resultMatrixCSV0.setOptions((String[]) null);
      ResultMatrixLatex.main((String[]) null);
  }

  /**
  //Test case number: 175
  /*Coverage entropy=4.188812438968517
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 1);
      resultMatrixHTML0.assign(resultMatrixSignificance0);
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      
      resultMatrixSignificance0.getColHidden(1);
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
  }

  /**
  //Test case number: 176
  /*Coverage entropy=3.926645708575261
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 1);
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      resultMatrixLatex0.stdDevPrecTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance1.getRevision();
      resultMatrixPlainText0.addHeader((String) null, "J@CvB[Qy(@RELr");
      resultMatrixPlainText0.setMeanWidth((-475));
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.toStringMatrix();
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 177
  /*Coverage entropy=3.4627152140954527
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setPrintRowNames(false);
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.getRowName(0);
      assertEquals("row0", string0);
  }

  /**
  //Test case number: 178
  /*Coverage entropy=3.0198268431492625
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setColNameWidth(2);
      resultMatrixHTML0.assign(resultMatrixHTML0);
      assertEquals(2, resultMatrixHTML0.getColNameWidth());
  }

  /**
  //Test case number: 179
  /*Coverage entropy=3.5389044601953317
  */
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals(1, resultMatrixCSV0.getRowCount());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.setEnumerateRowNames(true);
      resultMatrixGnuPlot0.setColHidden(2, true);
      assertTrue(resultMatrixGnuPlot0.getEnumerateRowNames());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV1.trimString(" ", 2);
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
  }

  /**
  //Test case number: 180
  /*Coverage entropy=3.5396680687913826
  */
  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setPrintRowNames(true);
      resultMatrixLatex0.significanceWidthTipText();
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getRevision();
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 181
  /*Coverage entropy=3.3711641900397766
  */
  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[1];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.doubleToString(0, 1);
      resultMatrixLatex0.setColOrder(intArray0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.getHeader("(");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 182
  /*Coverage entropy=3.263154759975629
  */
  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[][] intArray0 = new int[24][3];
      resultMatrixHTML0.setRanking(intArray0);
      resultMatrixHTML0.getRevision();
      resultMatrixHTML0.enumerateRowNamesTipText();
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 183
  /*Coverage entropy=3.391433911957216
  */
  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setMeanPrec(5);
      int int0 = resultMatrixPlainText0.getVisibleRowCount();
      assertEquals(5, resultMatrixPlainText0.getMeanPrec());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 184
  /*Coverage entropy=3.4690744582630857
  */
  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.getColName(684);
      assertNull(string0);
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 185
  /*Coverage entropy=3.6737060042609895
  */
  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String string0 = resultMatrixCSV0.getColName(0);
      assertEquals("[1]", string0);
      assertNotNull(string0);
      
      resultMatrixCSV0.getMean(0, 2);
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      
      int int0 = resultMatrixPlainText0.getMeanWidth();
      assertEquals(0, int0);
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
  }

  /**
  //Test case number: 186
  /*Coverage entropy=3.4866413644630816
  */
  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setMeanPrec((-2183));
      int int0 = resultMatrixHTML0.getSignificanceCount(4, 4);
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, int0);
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(1, resultMatrixHTML0.getColCount());
  }

  /**
  //Test case number: 187
  /*Coverage entropy=3.3940014245149444
  */
  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      resultMatrixPlainText0.getDisplayName();
      boolean boolean0 = resultMatrixCSV0.isAverage(1034);
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(boolean0);
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
  }

  /**
  //Test case number: 188
  /*Coverage entropy=3.2324603778814467
  */
  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.clear();
      resultMatrixHTML0.showStdDevTipText();
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
  }

  /**
  //Test case number: 189
  /*Coverage entropy=3.6102430185778718
  */
  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String[][] stringArray0 = resultMatrixGnuPlot0.toArray();
      assertEquals(3, stringArray0.length);
      
      String string0 = resultMatrixGnuPlot0.getRowName(2);
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertNull(string0);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
  }

  /**
  //Test case number: 190
  /*Coverage entropy=3.4356670493418786
  */
  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[][] intArray0 = new int[24][3];
      resultMatrixHTML0.setSummary(intArray0, intArray0);
      int[] intArray1 = new int[0];
      resultMatrixHTML0.setColOrder(intArray1);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
  }

  /**
  //Test case number: 191
  /*Coverage entropy=3.952510221978067
  */
  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 1);
      resultMatrixHTML0.assign(resultMatrixSignificance0);
      resultMatrixHTML0.stdDevPrecTipText();
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
  }

  /**
  //Test case number: 192
  /*Coverage entropy=3.6436974545328544
  */
  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      
      String string0 = resultMatrixGnuPlot0.toStringMatrix();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"col0\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string0);
      
      resultMatrixCSV0.getColOrder();
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
  }

  /**
  //Test case number: 193
  /*Coverage entropy=3.22701448677876
  */
  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = new int[16];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 194
  /*Coverage entropy=3.22701448677876
  */
  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 3284;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 2;
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 195
  /*Coverage entropy=3.2763778089486544
  */
  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = resultMatrixHTML0.getSignificanceCount(0, 2);
      assertEquals(0, int0);
      
      resultMatrixHTML0.getDefaultShowStdDev();
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 196
  /*Coverage entropy=3.7894046105735444
  */
  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[][] intArray0 = new int[2][7];
      resultMatrixHTML0.setSummary(intArray0, intArray0);
      resultMatrixHTML0.setSize(6, 41);
      resultMatrixHTML0.getOptions();
      resultMatrixHTML0.getDefaultShowStdDev();
      assertEquals(41, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 197
  /*Coverage entropy=3.1746555337894287
  */
  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      // Undeclared exception!
      resultMatrixHTML1.setSize(396, 396);
  }

  /**
  //Test case number: 198
  /*Coverage entropy=3.44345658677069
  */
  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setMeanWidth(0);
      resultMatrixHTML0.getAverage(0);
      resultMatrixHTML0.getVisibleColCount();
      resultMatrixHTML0.setSize(47, 0);
      resultMatrixHTML0.getRowOrder();
      assertEquals(47, resultMatrixHTML0.getColCount());
  }

  /**
  //Test case number: 199
  /*Coverage entropy=3.2286443931453856
  */
  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.setSize((-1), 418);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 200
  /*Coverage entropy=3.2842228217416776
  */
  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setEnumerateRowNames(false);
      double double0 = resultMatrixCSV0.getAverage((-746));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 201
  /*Coverage entropy=3.369313810422305
  */
  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1, 1);
      resultMatrixCSV0.setSignificanceWidth(1);
      resultMatrixPlainText0.globalInfo();
      resultMatrixCSV0.getMean(0, 2);
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getSignificanceWidth());
  }

  /**
  //Test case number: 202
  /*Coverage entropy=3.348050800310277
  */
  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clearHeader();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      
      int[] intArray0 = new int[0];
      resultMatrixCSV0.setRowOrder(intArray0);
      int int0 = resultMatrixCSV0.getDefaultMeanPrec();
      assertEquals(2, int0);
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 203
  /*Coverage entropy=3.3433239325162116
  */
  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1, 1);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setStdDevWidth(1);
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      assertEquals(1, int0);
  }

  /**
  //Test case number: 204
  /*Coverage entropy=3.233316450647632
  */
  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[4];
      resultMatrixHTML0.setSignificanceWidth((-3997));
      intArray0[0] = 0;
      resultMatrixHTML0.setRowOrder(intArray0);
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML1.getVisibleColCount());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
  }

  /**
  //Test case number: 205
  /*Coverage entropy=3.5354315286325124
  */
  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setEnumerateColNames(false);
      resultMatrixPlainText0.clearHeader();
      resultMatrixPlainText0.getDisplayName();
      assertFalse(resultMatrixPlainText0.getEnumerateColNames());
  }

  /**
  //Test case number: 206
  /*Coverage entropy=3.2913789160859594
  */
  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setShowAverage(false);
      int int0 = resultMatrixHTML0.getDisplayCol(1);
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals((-1), int0);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 207
  /*Coverage entropy=3.337588728123289
  */
  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setShowStdDev(false);
      resultMatrixPlainText0.getDefaultRowNameWidth();
      int int0 = resultMatrixPlainText0.getMeanPrec();
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(2, int0);
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
  }

  /**
  //Test case number: 208
  /*Coverage entropy=3.3841394779891303
  */
  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setRowNameWidth(0);
      resultMatrixPlainText0.m_ShowStdDev = false;
      double double0 = resultMatrixPlainText0.getAverage(0);
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 209
  /*Coverage entropy=3.328451439294312
  */
  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[1];
      resultMatrixHTML0.setRowOrder(intArray0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixHTML1.isSignificance(0);
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML1.getColCount());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertFalse(resultMatrixHTML1.getShowAverage());
  }

  /**
  //Test case number: 210
  /*Coverage entropy=3.338118710555227
  */
  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      int int0 = resultMatrixHTML1.getDisplayCol(0);
      assertEquals(0, int0);
      
      boolean boolean0 = resultMatrixHTML1.getRemoveFilterName();
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertFalse(boolean0);
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
  }

  /**
  //Test case number: 211
  /*Coverage entropy=3.4910593763577293
  */
  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int[] intArray0 = new int[3];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setColOrder(intArray0);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex1.getColCount());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 212
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.globalInfo();
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
  }

  /**
  //Test case number: 213
  /*Coverage entropy=3.073074937920201
  */
  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.assign(resultMatrixHTML0);
      boolean boolean0 = resultMatrixHTML0.isStdDev(19);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(boolean0);
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
  }

  /**
  //Test case number: 214
  /*Coverage entropy=3.963969118347428
  */
  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.meanPrecTipText();
      assertEquals(1, resultMatrixHTML0.getColCount());
      
      String string0 = resultMatrixHTML0.toString();
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
  }

  /**
  //Test case number: 215
  /*Coverage entropy=3.435348070075531
  */
  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setMeanWidth(0);
      assertEquals(1, resultMatrixHTML0.getColCount());
      
      double double0 = resultMatrixHTML0.getAverage(1);
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
  }

  /**
  //Test case number: 216
  /*Coverage entropy=3.1699021172713064
  */
  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int int0 = resultMatrixCSV0.getColCount();
      assertEquals(1, int0);
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
  }

  /**
  //Test case number: 217
  /*Coverage entropy=3.8269838133085994
  */
  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1, 1);
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string0);
      
      resultMatrixHTML0.toStringSummary();
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
  }

  /**
  //Test case number: 218
  /*Coverage entropy=3.9640176897413055
  */
  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.toString();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"col0\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string0);
      
      String string1 = resultMatrixGnuPlot0.toStringKey();
      assertEquals("Key:\n1 col0\n", string1);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
  }

  /**
  //Test case number: 219
  /*Coverage entropy=4.188812077749569
  */
  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getVisibleColCount();
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
  }

  /**
  //Test case number: 220
  /*Coverage entropy=3.5350884754592706
  */
  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.getRowOrder();
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
  }

  /**
  //Test case number: 221
  /*Coverage entropy=3.4882695869868265
  */
  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }
}
