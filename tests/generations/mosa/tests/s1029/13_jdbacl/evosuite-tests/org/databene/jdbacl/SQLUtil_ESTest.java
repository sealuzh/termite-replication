/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 07:41:43 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("BtKes", "ICDOR", stringArray0, "BtKes", "drop indexyhr", stringArray0);
      assertEquals("BtKes join BtKes as drop indexyhr on ICDOR.null = drop indexyhr.null and ICDOR.null = drop indexyhr.null", string0);
      
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBCatalog dBCatalog0 = new DBCatalog("BtKes");
      DBSchema dBSchema0 = new DBSchema("Onq-Cd%\"y-h|UNH'Ey", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ICDOR", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-99), "BtKes");
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((Object) " x1-eJQ&");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderValue(stringBuilder0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null", string0);
      
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("GREATEST");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "GREATEST";
      stringArray0[1] = "GREATEST";
      stringArray0[2] = "insert";
      stringArray0[3] = "GREATEST";
      stringArray0[4] = "GREATEST";
      stringArray0[5] = "GREATEST";
      stringArray0[6] = "GREATEST";
      stringArray0[7] = "GREATEST";
      stringArray0[8] = "GREATEST";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "GREATEST", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("GREATEST", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("GREATEST");
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("into");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("w*(2y+=", (DBTable) null, (DBDataType) null);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("w*(2y+=, w*(2y+=", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = Boolean.FALSE;
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-44828446), "create unique index");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.max((-44828446), (-1793438658));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("D?vCGCEMo)^J#;(A7^");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("create unique index CREATE UNIQUE INDEX(3) DEFAULT D?vCGCEMo)^J#;(A7^ NULL", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, ";odnFp~=", ";odnFp~=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("CLA1T;");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "CLA1T;";
      stringArray0[1] = "CLA1T;";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextLog0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ALTER TABLE ");
      DBDataType dBDataType0 = DBDataType.getInstance((-1919), "ALTER TABLE ");
      defaultDBTable0.getCheckConstraints();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ALTER TABLE ", defaultDBTable0, dBDataType0);
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextLog0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("ALTER TABLE ", defaultDBTable0.getName());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("nanoTime");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("nanoTime");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("nanoTime", false, defaultDBTable0, "nanoTime");
      dBCheckConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFileWriter mockFileWriter0 = new MockFileWriter("nanoTime");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("BLOB", stringBuilder0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2), "org.apache.derby.impl.sql.execute.UnionResultSet");
      Integer integer0 = new Integer((-2));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.execute.UnionResultSet", (DBTable) null, dBDataType0, integer0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("}`Axx-=^G^#");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("}`Axx-=^G^#ORG.APACHE.DERBY.IMPL.SQL.EXECUTE.UNIONRESULTSET(-2,-2)", stringBuilder0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(0, "cD\"");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cD\"");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cD\"", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("CD\"(3)", stringBuilder0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5719549218038606
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized Uiew");
      assertNull(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("xTIsWfT-K?p|8#LA");
      String string0 = SQLUtil.substituteMarkers("", "xTIsWfT-K?p|8#LA", boolean1);
      assertEquals("", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "exec");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLUtil.normalize("v/7Z", false);
      SQLUtil.normalize("/*", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableContainer tableContainer0 = new TableContainer("v / 7Z");
      tableContainer0.getSchema();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[3] = "";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.199663191579221
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select  RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_TYPE as FIELD_TYPE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$CHARACER_LENGTH as CHAR_LEN, RF.RDB$DESCRIPTION AS REMAR`S, RF.RDB$DEFAULT_SOURCE as DEFAULT_SOURCE, RF.RDB$FIELD_POSITION as FIELD_POSITION,  RF.RDB$NULL_FLAG as NULL_FLAG,  F.RDB$NULL_FLAG as SOURCE_NULL_FLAG from RDB$RELATION_FIELDS RF, RDB$FIELDS F where ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = SQLUtil.isQuery("select  RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_TYPE as FIELD_TYPE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$CHARACER_LENGTH as CHAR_LEN, RF.RDB$DESCRIPTION AS REMAR`S, RF.RDB$DEFAULT_SOURCE as DEFAULT_SOURCE, RF.RDB$FIELD_POSITION as FIELD_POSITION,  RF.RDB$NULL_FLAG as NULL_FLAG,  F.RDB$NULL_FLAG as SOURCE_NULL_FLAG from RDB$RELATION_FIELDS RF, RDB$FIELDS F where ");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.351312332210292
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("SYSSTAT");
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("exec$e;8", true, defaultDBTable0, "SYSSTAT");
      StringBuilder stringBuilder0 = new StringBuilder(343);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT exec$e;8 ", stringBuilder0.toString());
      
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec1);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1817319207582866
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLUtil.isDML("PVw3=[");
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("selectdoy", false, defaultDBTable0, "selectdoy");
      dBCheckConstraint0.setName("selectdoy");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "selectdoy");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("selectdoyCONSTRAINT selectdoy ", stringBuilder0.toString());
      
      String string0 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint selectdoy", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.051681985465941
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SQLUtil.innerJoin("", stringArray0, " REFERENCES ", (String) null, stringArray0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      TableContainer tableContainer0 = new TableContainer("update", defaultDBTable0);
      TableContainer tableContainer1 = new TableContainer("", tableContainer0);
      tableContainer0.getSchema();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM null WHERE null = null");
      assertTrue(boolean0);
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "SELECT * FROM null WHERE null = null", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("create");
      assertFalse(boolean0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("exec$e;8", true, defaultDBTable0, "SYSSTAT");
      StringBuilder stringBuilder0 = new StringBuilder(343);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("FIRST", false, "`sw%lC@o_UoFF~j;C", "selgct ");
      StringBuilder stringBuilder0 = new StringBuilder("selgct ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("selgct ", stringBuilder1);
      SQLUtil.addOptionalCondition("selgct ", stringBuilder2);
      assertEquals("selgct  or selgct  or selgct ", stringBuilder2.toString());
      assertEquals("selgct  or selgct  or selgct ", stringBuilder0.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "inner";
      stringArray0[1] = "inner";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "d\"svokTcc";
      stringArray1[1] = "d\"svokTcc";
      stringArray1[2] = "inner";
      stringArray1[3] = "inner";
      stringArray1[4] = "inner";
      String string0 = SQLUtil.join("inner", "inner", stringArray0, "inner", "d\"svokTcc", stringArray1);
      assertEquals("inner as d\"svokTcc on inner.inner = d\"svokTcc.d\"svokTcc and inner.inner = d\"svokTcc.d\"svokTcc", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = SQLUtil.normalize("z1'gNs/.)]I{crbJA({", true);
      assertEquals("z1 'gNs/.)]I{crbJA({'", string0);
      
      boolean boolean0 = SQLUtil.isDML("z1'gNs/.)]I{crbJA({");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnListWithTableName("into", stringArray0);
      assertEquals("into.null, into.null, into.null, into.null, into.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("into");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "//", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT // PRIMARY KEY (, , , , )", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Nocg:S3}-8Fu:\"/%'", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Illegal column type format: ");
      DBDataType.getInstance("BLOB");
      Character character0 = new Character('Y');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'Y'", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3265171534282083
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("execute", "execute", stringArray0, "execute", "execute", stringArray0);
      assertEquals("execute join execute as execute on execute.null = execute.null and execute.null = execute.null", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-44828446), "create unique index");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("create unique index CREATE UNIQUE INDEX(1,1) NULL", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6912684355451217
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null", defaultDBTable0, 2718, "SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("SELECT * FROM NULL WHERE NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL AND NULL = NULL", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9263548464292743
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("null_flag,", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , ) REFERENCES null(, , )", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("EPq2_tF3(x)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"x\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("executesetclob(sting, read)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"sting\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = SQLUtil.normalize("yH@C^Co-q)x;nvw", true);
      assertEquals("yH @ C ^ Co - q) x ; nvw", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[2] = "";
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("", string0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isDDL("delete");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("Old database: ", "( ", stringArray0, "?0u;", "alter session", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("Y=x-?9^j~.", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9844935290697798
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tablenx");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rTname4:zjlv.!+a2`<j6^}?a");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NOT NULL", true, defaultDBTable0, " NOT NULL");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" NOT NULL\" CHECK  NOT NULL", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename4:zjlv.!+a2`<j6^}&a");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NOT NULL", false, defaultDBTable0, " NOT NULL");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" NOT NULL\" CHECK  NOT NULL", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLUtil.isProcedureCall("6HuF");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" A~+b=,~/o|1");
      SQLUtil.normalize("alter table*/", false);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "6HuF", false, stringArray0);
      assertEquals("6HuF", dBPrimaryKeyConstraint0.getName());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = SQLUtil.normalize("Ik}tG3ix*S", false);
      assertEquals("Ik } tG3ix * S", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "bR{Q~a.$:U%o%ai", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("*S\"t[RB}Fr0g )r>", true, "*S\"t[RB}Fr0g )r>", "callupdateblob");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"*S\"t[RB}Fr0g )r>\" ", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create tableupdatenamectx=");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NOT NULL", true, defaultDBTable0, " NOT NULL");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK  NOT NULL", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NULL", false, " NULL", " NULL");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \" NULL\" ", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ICDOR", false, "ICDOR", "ICDOR");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT ICDOR ", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, stringArray0[1], false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = null;
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "null.null, null.null", false, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("drop materialized view");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.8545607627328535
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "IUxwh2";
      stringArray0[1] = "IUxwh2";
      SQLUtil.innerJoin("IUxwh2", stringArray0, "IUxwh2", "IUxwh2", stringArray0);
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("IUxwh2 as IUxwh2 on IUxwh2.IUxwh2 = IUxwh2.IUxwh2 and IUxwh2.IUxwh2 = IUxwh2.IUxwh2", stringArray0, "NJArDia{^O(@Q", "NJArDia{^O(@Q", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = SQLUtil.normalize("l/bnGQ.c}Qh(TEZ#", true);
      assertEquals("l / b  nGQ.c } Qh ( TEZ #", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = SQLUtil.normalize("select  RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_TYPE as FIELD_TYPE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$CHARACER_LENGTH as CHAR_LEN, RF.RDB$DESCRIPTION AS REMAR`S, RF.RDB$DEFAULT_SOURCE a DEFAULT_SOURCE, RF.RDB$FIELD_POSITION as FIELD_POSITION,  RF.RDB$NULL_FLAG as NULL_FLAG,  F.RDB$NULL_FLAG as SOURCE_NULL_FLAG from RDB$RELATION_FIELDS RF, RDB$FIELDS F where ", true);
      assertEquals("select RF.RDB $ RELATION_NAME as RELATION_NAME, RF.RDB $ FIELD_NAME as FIELD_NAME, F.RDB $ FIELD_TYPE as FIELD_TYPE, F.RDB $ FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB $ FIELD_PRECISION as FIELD_PRECISION, F.RDB $ FIELD_SCALE as FIELD_SCALE, F.RDB $ FIELD_LENGTH as FIELD_LENGTH, F.RDB $ CHARACER_LENGTH as CHAR_LEN, RF.RDB $ DESCRIPTION AS REMAR ` S, RF.RDB $ DEFAULT_SOURCE a  DEFAULT_SOURCE, RF.RDB $ FIELD_POSITION as FIELD_POSITION, RF.RDB $ NULL_FLAG as NULL_FLAG, F.RDB $ NULL_FLAG as SOURCE_NULL_FLAG from RDB $ RELATION_FIELDS RF, RDB $ FIELDS F where", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("j", defaultDBTable0, (DBDataType) null);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("j", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized Uiew");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized Uiew");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter materialized Uiew", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("ICDOR", "ICDOR", (String[]) null, "ICDOR", "ICDOR", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.0585146483307786
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[18];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, ")LGL~j4Pz", ")LGL~j4Pz", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("insertalter materialized uiew");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ICDOR", false, "ICDOR", "ICDOR");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK ICDOR", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("count (1..", stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("count (1..");
      defaultDBTable0.getColumns();
      SQLUtil.normalize("alter materialized view", false);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter materialized view", true, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      File file0 = FileUtil.canonicalFile("alter materialized view");
      MockFile mockFile0 = new MockFile("", "alter materialized view");
      MockFile.createTempFile("create materialized view>b!\" n", ">o:4X,'BR", file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertNull(dBForeignKeyConstraint0.getDoc());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("f22w4E$DU,54S(2;|>", (String[]) null, "f22w4E$DU,54S(2;|>", "+ji", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.3654597361104444
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderColumnListWithTableName("SAMPLE_SIZE", stringArray0);
      assertEquals("SAMPLE_SIZE.null", string0);
      
      String string1 = SQLUtil.innerJoin("SAMPLE_SIZE", stringArray0, "SAMPLE_SIZE.null", "SAMPLE_SIZE.null", stringArray0);
      assertEquals("SAMPLE_SIZE.null as SAMPLE_SIZE.null on SAMPLE_SIZE.null = SAMPLE_SIZE.null.null", string1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.5108045110385615
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter materialized Uiew");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "alter materialized Uiew";
      stringArray0[1] = null;
      String[] stringArray1 = new String[1];
      stringArray1[0] = "COv*Tx d_6;vW";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, stringArray0, "COv*Tx d_6;vW", (String) null, stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, (String[]) null, (String) null, "c/Ehvse.'fiix", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "H'biG$<PT~ E";
      stringArray0[2] = "H'biG$<PT~ E";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("H'biG$<PT~ E", stringArray0, "AV#U]h>~{RF9]4uoP&$", stringArray0[0], (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder(5);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("table null", defaultDBTable0, 5, "table null");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("TABLE NULL", stringBuilder0.toString());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-44828446), "create unique index");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("create unique index CREATE UNIQUE INDEX(3) NULL", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("bvP`>CCAEU<5.7OL", (DBTable) null, (DBDataType) null);
      SQLUtil.mutatesDataOrStructure("bvP`>CCAEU<5.7OL");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("z1'gNs/.)]I{crbJA({");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: z1'gNs/.)]I{crbJA({
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = SQLUtil.normalize("Y=x-?9^j~.", true);
      assertEquals("Y = x - ? 9 ^ j ~.", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = SQLUtil.normalize("WG+[\"f>3Oq>H<YO", true);
      assertEquals("WG + [  \"f>3Oq>H<YO\"", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("update");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ALTER TABLE ");
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "ALTER TABLE ");
      StringBuilder stringBuilder1 = stringBuilder0.append("ALTER TABLE ");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("org.h2.index.PageBtree", stringArray0, "org.h2.index.PageBtree", (String) null, stringArray0);
      assertEquals("left join org.h2.index.PageBtree as null on ", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("CEIL");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("create materialized view", stringArray0, "CEIL", "CEIL", stringArray0);
      assertEquals("left join CEIL as CEIL on ", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("y<nN#]p4[!_gY>^,h", "callinsert", "y<nN#]p4[!_gY>^,h");
      assertEquals("y<nN#]p4[!_gY>^,h", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("WK,G", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("select  RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_TYPE as FIELD_TYPE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$CHARACTER_LENGTH as CHAR_LEN, RF.RDB$DESCRIPTION AS REMARKS, RF.RDB$DEFAULT_SOURCE as DEFAULT_SOURCE, RF.RDB$FIELD_POSITION as FIELD_POSITION,  RF.RDB$NULL_FLAG as NULL_FLAG,  F.RDB$NULL_FLAG as SOURCE_NULL_FLAG from RDB$RELATION_FIELDS RF, RDB$FIELDS F where ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execute");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create unique index");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("scr.sq_in ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("P^URYd ");
      DBTrigger dBTrigger0 = new DBTrigger("P^URYd ", dBSchema0);
      dBTrigger0.setActionType("02-mL3eJZ8aUWK");
      String string0 = SQLUtil.ownerDotComponent(dBTrigger0);
      assertEquals("P^URYd .P^URYd ", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = SQLUtil.removeComments("%J[1[pC;Ue[x[");
      assertEquals("%J[1[pC;Ue[x[", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.4395708588544698
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string1);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = SQLUtil.renderValue("alter tableoz8u{");
      assertEquals("'alter tableoz8u{'", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string0 = SQLUtil.renderValue(integer0);
      assertEquals("3", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("exec", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("REFERENCE");
      SQLUtil.addRequiredCondition("REFERENCE", stringBuilder0);
      assertEquals("REFERENCE and REFERENCE", stringBuilder0.toString());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("org.apache.derby.impl.store.raw.xact.RowLockingRR", stringBuilder0);
      assertEquals("org.apache.derby.impl.store.raw.xact.RowLockingRR", stringBuilder0.toString());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("rf.rdb$field_name", "rf.rdb$field_name", stringArray0, "cursorResultSet", "cursorResultSet", stringArray0);
      assertEquals("rf.rdb$field_name join cursorResultSet as cursorResultSet on rf.rdb$field_name.null = cursorResultSet.null and rf.rdb$field_name.null = cursorResultSet.null", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join((String) null, "alter materialized viewdefaulht", stringArray0, "alter materialized viewdefaulht", (String) null, stringArray0);
      assertEquals("alter materialized viewdefaulht as null on alter materialized viewdefaulht.null = null.null and alter materialized viewdefaulht.null = null.null", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("SCOPE", "alter materialized Uiew", (String[]) null, "SCOPE", "SCOPE", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("@T6N03C", stringBuilder0);
      assertEquals("@T6N03C", stringBuilder0.toString());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("wsT|nNJ9v+yO");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
