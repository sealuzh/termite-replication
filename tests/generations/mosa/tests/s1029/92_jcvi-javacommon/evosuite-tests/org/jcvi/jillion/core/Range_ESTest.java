/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 08:18:39 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.059202231024756
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getBegin();
      assertEquals((-32768L), long0);
      
      Object object0 = new Object();
      Range range1 = Range.of((-32768L), (-2432L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L);
      assertFalse(range1.isEmpty());
      
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.205019898071907
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(466L, 2271L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2272L, long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 466L, 2271L);
      Range range2 = Range.of(466L, 2271L);
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range1.equals(range2);
      assertFalse(range1.isEmpty());
      
      range0.iterator();
      assertSame(range0, range2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(1L, 2147483629L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.327595366528126
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range1 = Range.ofLength(457L);
      assertFalse(range1.isEmpty());
      
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.equals(range0);
      range0.iterator();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2041131932281943
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      boolean boolean0 = range1.equals(range0);
      assertSame(range1, range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.505149596990334
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1267L, 1267L);
      Range.of(1267L);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.parseRange("L3,0yPLw`*68", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4407893441299437
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(9223372036854774576L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.ofLength(9223372036854775807L);
      Range.Comparators.values();
      range1.equals(range0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      range2.iterator();
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4123737377631094
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9976L, 9976L);
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.802115746447663
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "@Lqs};Z7s0j I";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      List<Range> list0 = range0.split(255L);
      range0.complementFrom(list0);
      Range range1 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      // Undeclared exception!
      try { 
        range1.complementFrom(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of((-1L), 255L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1348556489429895
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 3333L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.133033233229716
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 1L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.060601531374581
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of((-4294971343L));
      range0.toString();
      Object object0 = new Object();
      range1.equals((Object) null);
      assertFalse(range1.isEmpty());
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. 2147483646 ]/0B", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(2147483647L, 9223372036854775807L);
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(15L);
      Range range1 = Range.of(15L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.456688512346244
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), 128L);
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(9223372034707292133L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0587765179553648
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Object object0 = new Object();
      Range range1 = Range.of((-128L));
      Integer integer0 = new Integer((-822));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.394366306011
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.of((-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-128L), 134L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-3231L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3231 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6912004809506773
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775774L));
      Range range1 = Range.of((-9223372036854775774L));
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(range0);
      Range.Comparators.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Range range1 = Range.of((-128L), 32767L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=4.150516019572973
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2536L, 4294967295L);
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Integer integer0 = new Integer((-1092));
      Range range1 = Range.of(1337L);
      linkedList0.add(range1);
      linkedList0.removeLastOccurrence(range1);
      linkedList0.offerLast(range0);
      linkedList0.add(range1);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem1);
      range1.iterator();
      // Undeclared exception!
      try { 
        range0.split((-647L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 935L, 935L);
      Range range1 = Range.of(935L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1531210720454395
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.9011889815479126
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of((-522L), 65535L);
      List<Range> list0 = range0.split(272L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(243, list0.size());
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1380750113441387
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854774541L, 9223372036854775807L);
      Long long0 = new Long(9223372036854774541L);
      List<Range> list0 = range0.split(9223372036854774541L);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      //  // Unstable assertion: assertFalse(list2.contains(range0));
      //  // Unstable assertion: assertTrue(list2.equals((Object)list1));
      //  // Unstable assertion: assertEquals(1, list2.size());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.060601531374581
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-9223372036854775808L));
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1186L, 9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(1267L, 9223372034707292161L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(981L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.6771719961327785
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(4294967299L, 9223372036854298448L);
      Long long0 = new Long(4294967299L);
      Range range1 = Range.ofLength(9223372036854299264L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertFalse(list1.contains(range0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 4294967295L, 4294967295L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 9223372036854775554L);
      range0.equals(range0);
      long long0 = range0.getLength();
      assertEquals(9223372036854775554L, long0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.266970744711691
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.of(801L, 2147483647L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.6497385434087244
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(1487L, 1487L);
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(255L);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.startsBefore(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      range0.equals("");
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=4.202141490883314
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4033L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Range range1 = Range.of((-2543L), 5433L);
      List<Range> list0 = range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 1856L);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range1.complementFrom(list1);
      assertTrue(list2.isEmpty());
      
      List<Range> list3 = range2.complementFrom(list1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(list3);
      assertEquals(2, list1.size());
      assertTrue(list1.equals((Object)list0));
      
      Range.ofLength(0L);
      range0.intersects(range2);
      long long1 = range2.getLength();
      assertEquals(1857L, long1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer(81);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(65535L, 65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.ofLength(2655L);
      Object object0 = new Object();
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3673427474137916
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(1266L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.892400767303865
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(708L);
      Range range1 = Range.of(701L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.340986344011985
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-9223372034707292335L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372034707292336 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.335685561595388
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-9223372036854775808L), long0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.1062158566438884
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483642L, 2147483642L);
      long long0 = new Long(2147483642L);
      assertEquals(2147483642L, long0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9848941644582636
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.of(801L, 2147483647L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(1L, 2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.438579638819744
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 1L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.633101871431542
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      List<Range> list0 = range0.split(9223372036854774874L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.023412547429375
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(9L);
      Range range1 = Range.of(255L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2252568683036555
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Range.of(range_CoordinateSystem0, (-438L), 9223372036746376885L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.1156141964683886
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 65534 ]/0B", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.3862395264912064
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(973L);
      Range range1 = Range.of((-128L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.0599988624120327
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 37L, 37L);
      Range range1 = Range.ofLength(37L);
      boolean boolean0 = range1.intersects(range0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(2667L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.4920285698502873
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.of((-120L));
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractEnd(157L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372032559808513L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range1 = Range.ofLength(1L);
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2180L), 4294966982L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = 2147483647L;
      long long1 = (-1209L);
      Range range0 = Range.of((-1209L));
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1267L, 1267L);
      Object object0 = new Object();
      range0.equals(object0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 37L, 37L);
      Range range1 = Range.ofLength(37L);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.145776642580429
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.ofLength(1945L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.203625422341148
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, 1L, 1L);
      range_Builder0.contractBegin((-3311L));
      Range.Builder range_Builder1 = new Range.Builder(1312L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range1 = Range.of(255L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(7L, 7L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.835166303165913
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(2825L);
      range_Builder0.contractBegin(2825L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(2825L);
      Range.Builder range_Builder1 = new Range.Builder(2825L);
      range1.startsBefore(range0);
      range0.getLength();
      range0.endsBefore(range1);
      range0.getEnd();
      Range range2 = Range.of(9223372036854775807L);
      range0.iterator();
      Range range3 = range2.intersection(range0);
      assertSame(range0, range3);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1510L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1510 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.133133660972153
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.ofLength(9223372034707292161L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals(object1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.2200645450199237
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range1.startsBefore(range0);
      boolean boolean1 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.6763116700692007
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      range0.toString();
      range1.getEnd();
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf(":vM%Hs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.:vM%Hs
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.540818734019718
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range0));
      
      Range range2 = Range.of(range_CoordinateSystem0, 1644L, 2147483647L);
      long long0 = range2.getLength();
      assertEquals(2147482003L, long0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.716899540283218
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(64486L, 9223372036854710272L);
      Range range1 = Range.ofLength(9223372036854710272L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.372471180234069
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775800L), (-1L));
      Range range1 = Range.of((-1L));
      range0.startsBefore(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.ofLength(2452L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483668L, 2147483668L);
      assertTrue(range0.isEmpty());
      
      range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.408385208188493
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1216L), (-1216L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      // Undeclared exception!
      try { 
        range0.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.268771928346651
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(10241L);
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.3767635019666526
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      long long0 = range0.getBegin();
      assertEquals((-1L), long0);
      
      Long long1 = new Long((-1L));
      assertTrue(long1.equals((Object)long0));
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.4889433680869066
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-9223372036854775808L), long0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.3926195063231543
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.2247505661058167
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.32914830340581
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range0.toString();
      Range.of(1L, 1L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(5294L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 1 .. 1 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 1 .. 1 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-813L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(314L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.689532269643912
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(1L);
      range0.toString();
      range0.getEnd(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.299145180131708
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(1267L, 1267L);
      long long0 = range0.getBegin();
      assertEquals(1267L, long0);
      
      Long long1 = new Long(1267L);
      assertTrue(long1.equals((Object)long0));
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(255L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.7596218378547452
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      List<Range> list0 = range0.split(1L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(1, list0.size());
      assertTrue(list1.isEmpty());
      
      Range range1 = Range.of(1L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(255L, 255L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.5442057816119585
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(167L, 1057L);
      List<Range> list0 = range0.split(167L);
      List<Range> list1 = range0.complementFrom(list0);
      assertFalse(list0.contains(range0));
      assertEquals(6, list0.size());
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.0102602073476445
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.200767051101671
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, 10241L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.301586756692573
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(2667L, 2667L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2667 .. 2667 ]/0B", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(3736L);
      List<Range> list0 = range0.split(123L);
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.361445543503274
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(1267L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1267L, long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(2147483671L);
      range_Builder0.copy();
      range_Builder0.expandBegin((-9223372036854775738L));
      range_Builder0.expandEnd((-1494L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.contractBegin(255L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(13L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.414564466298768
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.2700286917069685
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 4294967296 .. 4294967296 ]/RB", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(10241L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(10240L, long0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.203195832170171
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(39L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 39 .. 40 ]/SB", string0);
      
      Range range1 = Range.parseRange("[ 39 .. 40 ]/SB");
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-381L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.4953870350255363
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2022L), (-2022L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.5647987886037624
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1451L, 1451L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775806L), (-9223372036854775806L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = (-1L);
      Range.of((-1L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.0599988624120327
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.084259275231587
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      String string0 = range0.toString();
      assertEquals("[ 4294967295 .. 4294967295 ]/0B", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.3880676104307272
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      List<Range> list0 = range0.split(291L);
      assertTrue(list0.contains(range0));
      
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.259097513032171
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      long long0 = range0.getEnd();
      assertEquals(2147483647L, long0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.793494183903136
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775794L));
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.7938131631694842
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2L, 2L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.3132129167647397
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1186L, 9223372036854775807L);
      range0.getBegin();
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-3857L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.1691736649021247
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.3804370545947804
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
      
      Integer integer0 = new Integer(2);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      range0.startsBefore(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775805L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.6330311617419575
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.1360270265849555
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L, 9223372036854775801L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 257L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4033L, 4033L);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4224L, 4224L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.ji!lion.cx.Range$ntRan*e", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.ji!lion.cx.Range$ntRan*e into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.1703662707458933
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.3926195063231543
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      long long0 = range0.getEnd();
      assertEquals((-2147483648L), long0);
      
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      long long0 = range0.getLength();
      assertEquals(2147483649L, long0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("o(bO;[Mv*9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse o(bO;[Mv*9 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of((-829L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      String string0 = range0.toString();
      assertTrue(range0.isEmpty());
      assertEquals("[ 0 .. -1 ]/0B", string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of(9223372036746376885L);
      assertFalse(range0.isEmpty());
  }
}
