/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 07:42:03 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4638109497830465
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Short> hashMap0 = new HashMap<Byte, Short>();
      Byte byte0 = new Byte((byte)60);
      Short short0 = new Short((byte)60);
      hashMap0.put(byte0, short0);
      JSONObject jSONObject1 = jSONObject0.put("] is not  nmber.", (Map) hashMap0);
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject1.put("-", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject2.optJSONObject("] is not  nmber.");
      assertNotNull(jSONObject3);
      
      double double0 = jSONObject0.optDouble("] is not  nmber.");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8997313334935368
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      jSONObject0.toJSONArray(jSONArray0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-205), 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3303466540076667
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("4!0(#so(+[\"?G]Dy)7'", object0);
      boolean boolean0 = jSONObject0.isNull("4!0(#so(+[\"?G]Dy)7'");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Double double0 = new Double(0.0);
      Double.isFinite(0.0);
      Float float0 = new Float(0.0);
      hashMap0.put(double0, float0);
      Double double1 = new Double(0.0);
      Float float1 = new Float(0.0F);
      hashMap0.replace(double1, float1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.311020476445201
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Double double0 = new Double(1568.4959214);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.optLong("", 1474L);
      jSONObject0.putOpt("@ac\"_  ;", "@ac\"_  ;");
      assertEquals(9, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2084184190550267
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put((Object) null, jSONObject0);
      String string0 = "Unterminated string";
      Boolean boolean0 = new Boolean("Unterminated string");
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.toString(92, 2214);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3264044037551526
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Expected '", (Object) null);
      JSONObject jSONObject2 = jSONObject1.put("Expected '", 1.0);
      jSONObject2.optDouble("Expected '", 1.0);
      int int0 = jSONObject2.optInt("Expected '");
      assertEquals(1, int0);
      
      jSONObject0.length();
      int int1 = jSONObject0.optInt(";%\"1}");
      assertEquals(0, int1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8015527142164323
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      jSONObject0.optDouble("ZhPLpq*3b)c^7}UPJe");
      JSONObject jSONObject1 = jSONObject0.put("ZhPLpq*3b)c^7}UPJe", 4);
      jSONObject1.put("ZhPLpq*3b)c^7}UPJe", (double) 0.0F);
      jSONObject0.toString(92, 4);
      jSONObject0.getDouble("ZhPLpq*3b)c^7}UPJe");
      try { 
        jSONObject1.getInt("java.lang.Float@00000000010");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@00000000010\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7242986702781118
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("true", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(linkedList0, 9, 3699);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4170335089312496
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("TP~v-qrqD)'");
      jSONObject0.putOpt("TP~v-qrqD)'", boolean0);
      jSONObject0.getBoolean("TP~v-qrqD)'");
      Boolean boolean1 = new Boolean("w/uRVSE@%Npw rq");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("", "");
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("Lo6</");
      assertEquals("\"Lo6<\\/\"", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7224384814625195
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float(2390.441F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("&ff^2}@u", (-1247));
      jSONObject0.toString((-1176));
      long long0 = jSONObject1.optLong("&ff^2}@u");
      assertEquals(4, jSONObject0.length());
      assertEquals((-1247L), long0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.putOpt("QuFFqc8@d6", boolean0);
      boolean boolean1 = jSONObject0.optBoolean("QuFFqc8@d6");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject1 = jSONObject0.put(",]\"hA2iP[7ad", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "] is not a JSONObject.");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("] is not a JSONObject.", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray1);
      JSONObject jSONObject1 = jSONObject0.accumulate("gettoJSONObject", jSONArray1);
      JSONArray jSONArray2 = jSONObject0.names();
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONObject1.getJSONArray("gettoJSONObject");
      assertNotSame(jSONArray3, jSONArray1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9896217341979852
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONArray@0000000001", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6332004508871008
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      Long long0 = new Long(0L);
      hashMap0.put((Byte) null, long0);
      Long long1 = new Long(0L);
      Long long2 = new Long(1474L);
      hashMap0.getOrDefault(long1, long2);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-2211), (-2211));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.866297152724486
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(0);
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{}";
      stringArray0[1] = "getintValue";
      stringArray0[0] = "getintValue";
      stringArray0[3] = "getintValue";
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.put("] is not a number.", (long) 0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      jSONObject2.optBoolean("O");
      JSONObject jSONObject3 = jSONObject0.put("F>D>aV`hE~N", (Map) hashMap1);
      jSONObject1.put("Cn", 0);
      jSONObject0.toString(0, 0);
      int int0 = jSONObject3.getInt("] is not a number.");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("false", "false");
      boolean boolean0 = jSONObject0.getBoolean("false");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("s&r!", 0.0);
      jSONObject1.accumulate("s&r!", jSONObject0);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Wns6w=", (Object) null);
      jSONObject1.isNull("Wns6w=");
      jSONObject1.append("Wns6w=", "Wns6w=");
      JSONObject jSONObject2 = jSONObject1.accumulate("Wns6w=", jSONObject0);
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("mUK^psT*`$O{s|oG", "mUK^psT*`$O{s|oG");
      jSONObject0.accumulate("mUK^psT*`$O{s|oG", "mUK^psT*`$O{s|oG");
      try { 
        jSONObject0.getLong("jk@vKQSv@HLWJ'_B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jk@vKQSv@HLWJ'_B\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.152791022150616
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject.quote("] is not a number.");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4296680571106783
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(".`", "true");
      boolean boolean0 = jSONObject0.optBoolean(".`");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0290018112854749
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.putOpt("J@", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("J@");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("true", "true");
      boolean boolean0 = jSONObject0.getBoolean("true");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Integer integer0 = new Integer((-22654515));
      jSONObject0.accumulate("]R_+k*5>X~Q9", integer0);
      jSONObject0.getInt("]R_+k*5>X~Q9");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5149300683537237
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject.doubleToString((-972.8684219962327));
      JSONObject jSONObject0 = new JSONObject((Object) "-972.8684219962327");
      // Undeclared exception!
      jSONObject0.toString(1631, 719);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1432435489116055
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = new Double(1548.41754891);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("J#Z@D\"gnR3", (Object) double0);
      jSONObject0.getInt("J#Z@D\"gnR3");
      try { 
        jSONObject0.getBoolean("J#Z@D\"gnR3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"J#Z@D\\\"gnR3\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ri;Z{z";
      jSONObject0.accumulate("ri;Z{z", "ri;Z{z");
      try { 
        jSONObject0.getJSONArray("ri;Z{z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ri;Z{z\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.633640040010207
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "/I<RL";
      JSONObject jSONObject1 = jSONObject0.put("/I<RL", (Object) "/I<RL");
      try { 
        jSONObject1.getDouble("/I<RL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/I<RL\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("sum", (Collection) linkedList0);
      Double.min(0.0, 0.0);
      Boolean boolean0 = new Boolean("sum");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("sum");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.964763373583426
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", "");
      boolean boolean0 = new Boolean("");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{.NV|+\"e9s !'ey=%-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {.NV|+\"e9s !'ey=%-
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("getnames", false);
      assertFalse(boolean0);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3126328398468408
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("WaGns6w=", jSONObject0);
      jSONObject1.isNull("WaGns6w=");
      String string0 = jSONObject1.optString("WaGns6w=", "istoString");
      assertNotNull(string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4522469794234416
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("WaGns6w=", jSONObject0);
      jSONObject0.isNull("WaGns6w=");
      String string0 = jSONObject0.optString("WaGns6w=");
      assertNotNull(string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Unterminated string";
      try { 
        jSONObject0.accumulate((String) null, "Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(jSONObject0, (-2820), (-2820));
      assertEquals("{}", string0);
      
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      Float float0 = new Float((double) (-2820));
      JSONObject.numberToString(float0);
      String[] stringArray1 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray1);
      assertEquals(11, stringArray1.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8751832500087795
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isintern", 3216);
      Long long0 = new Long(1L);
      Object object0 = new Object();
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString(jSONObject0, 8391, 8391);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      jSONObject0.put("isintern", 3216);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{_:*a7bL'u4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 11 of {_:*a7bL'u4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{Pu0v\"j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {Pu0v\"j
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2888.296838879351);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("}q}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }q}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7540298966049588
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "tC9SWyj");
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5801229155620669
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = new Double(115.3);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.091217127583354
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      Float float0 = new Float(3638.2160814911513);
      JSONObject.numberToString(float0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Float@0000000001";
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("$]Ay", 0L);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      jSONObject1.optBoolean("F>D>aV`hE~N");
      JSONObject jSONObject3 = jSONObject2.put("$]Ay", (Map) hashMap1);
      JSONObject jSONObject4 = jSONObject1.put("(S{4jS&70Crx", 0);
      jSONObject4.toString(0, 0);
      JSONObject.getNames(jSONObject1);
      jSONObject2.toString(0);
      jSONObject4.opt((String) null);
      JSONObject jSONObject5 = jSONObject3.putOpt("", hashMap0);
      assertNotSame(jSONObject0, jSONObject5);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.087698781999318
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      jSONObject0.remove("wheel.json.JSONArray");
      JSONObject jSONObject1 = jSONObject0.put("@`I:YyZML'tpS", (Map) null);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("@`I:YyZML'tpS");
      assertNotSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 390L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("C.YKP)1C?eYA;nZD[9=", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.7005631560081493
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("u],!Hwb2AOXd", "u],!Hwb2AOXd");
      jSONObject0.put("u],!Hwb2AOXd", 1867.0);
      jSONObject1.has("u],!Hwb2AOXd");
      Long long0 = new Long(0L);
      JSONObject jSONObject2 = jSONObject1.putOpt("va", "u],!Hwb2AOXd");
      jSONObject2.optLong("u],!Hwb2AOXd");
      JSONObject.doubleToString(121.9143384190067);
      int int0 = jSONObject2.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.317289039628425
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("zp^D", (Map) hashMap0);
      JSONObject.valueToString(hashMap0, 673, (-399));
      try { 
        jSONObject1.getString("isparseShort");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isparseShort\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.429496150272295
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getsplit");
      jSONObject0.keys();
      // Undeclared exception!
      jSONObject0.toString(3478);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7480895599985722
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("JSONArray initial value should be a string or collection or array.", (-3664));
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.294447386871068
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.append("\t", boolean0);
      boolean boolean1 = jSONObject0.isNull((String) null);
      assertTrue(boolean1);
      
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertFalse(boolean0.equals((Object)boolean1));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.999703381818536
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Object) "(pa");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.4477688673683726
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("|/|wk W2", 2875L);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = JSONObject.quote("/v ");
      assertEquals("\"/v \"", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4841013506264735
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = new Double(1510.63383606);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-439), (-439));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.6094197556296352
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("],!wb2AX");
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      jSONObject0.put("Expected a ',' or ']'", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(": ", (-439));
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.toString((-439), (-439));
      // Undeclared exception!
      JSONObject.valueToString(jSONObject1, (-926), 8192);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.538401579564486
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("ZhPLpq*3b)c^7}UPJe", 4);
      jSONObject0.toString(92, 4);
      jSONObject0.getDouble("ZhPLpq*3b)c^7}UPJe");
      try { 
        jSONObject1.getInt("java.lang.Float@00000000010");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@00000000010\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.5132665692480773
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      Object object0 = new Object();
      JSONObject.getNames(jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(hashMap0, 2747, 1);
      assertEquals("{}", string0);
      
      JSONTokener jSONTokener0 = new JSONTokener("*a&H|Yc,tl");
      jSONObject0.put("{}", 1855);
      long long0 = jSONObject0.getLong("{}");
      assertEquals(1855L, long0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 10, (-1697));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 109, (-1546));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Short short0 = new Short((short)5713);
      JSONObject jSONObject0 = new JSONObject(short0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.452888727960641
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject0.put("73N0j`>T38EF`", 594);
      double double0 = jSONObject0.optDouble("73N0j`>T38EF`");
      assertEquals(594.0, double0, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.0093994817375425
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Unterminated string", (-3592L));
      jSONObject0.accumulate("Unterminated string", "Unterminated string");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.4057580979718103
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("MWtlR=0J", 0L);
      try { 
        jSONObject0.get("isopt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isopt\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.3128868859883003
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("{a|", "{a|");
      String string0 = jSONObject0.getString("{a|");
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.2039958490137452
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      jSONObject0.put("!}B!@)?O ", 92);
      JSONObject.getNames((Object) "!}B!@)?O ");
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "m]|j";
      JSONObject jSONObject1 = jSONObject0.putOpt("m]|j", "m]|j");
      try { 
        jSONObject1.getJSONObject("m]|j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m]|j\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("JSON does not allow non-finite numbers.");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.4407696753202024
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("m]|j", "m]|j");
      jSONObject1.remove("m]|j");
      boolean boolean0 = jSONObject1.isNull("m]|j");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.042276215150105
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Long long0 = new Long((-1199L));
      jSONObject0.putOpt("xOMXEY9K=R3j%", long0);
      jSONObject0.getLong("xOMXEY9K=R3j%");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.199663191579221
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "true";
      JSONObject jSONObject1 = jSONObject0.putOpt("true", "true");
      try { 
        jSONObject1.getLong("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("],!wb2AX", "],!wb2AX");
      String string0 = JSONObject.valueToString(jSONObject0, 1663, 1663);
      assertNotNull(string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.4574653869995418
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("WaGns6w=", jSONObject0);
      jSONObject1.isNull("WaGns6w=");
      JSONArray jSONArray0 = (JSONArray)jSONObject0.get("WaGns6w=");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.960841804955975
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-Kuk.7\".;y9^ArHH", (-457));
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject1.getDouble("-Kuk.7\".;y9^ArHH");
      assertEquals((-457.0), double0, 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.4082746217878275
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.putOpt("u],!Hwb2AOXd", float0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "u],!Hwb2AOXd";
      stringArray0[1] = "u],!Hwb2AOXd";
      stringArray0[2] = "Q(BW6#n2t/tS<o$qXJ";
      stringArray0[3] = "u],!Hwb2AOXd";
      stringArray0[4] = "u],!Hwb2AOXd";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = jSONObject2.put("Q(BW6#n2t/tS<o$qXJ", (double) 0.0F);
      jSONObject3.keys();
      jSONObject3.optDouble("m;jZ", Double.NaN);
      jSONObject0.opt("u],!Hwb2AOXd");
      jSONObject1.opt("wheel.json.JSONObject");
      try { 
        jSONObject2.getJSONObject("Xzq/{h`yYWZxo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Xzq/{h`yYWZxo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("@_hU6{3fq;S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@_hU6{3fq;S\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-120));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("}iY(", (-3915.36572));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("{}", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.275712101117219
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(320, (-531));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.quote("jV/Jw1]}~\"dD0*g_");
      assertEquals("\"jV/Jw1]}~\\\"dD0*g_\"", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 61, 9);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.11285303678132
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-2444), (-2444));
      JSONObject jSONObject1 = jSONObject0.append("WaGns6w=", jSONObject0);
      JSONObject jSONObject2 = jSONObject1.put("{}", (-2444));
      jSONObject1.isNull("WaGns6w=");
      jSONObject2.optInt("{}");
      jSONObject1.keys();
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "J?J`y=cXDC/Dz\"Q!");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.accumulate("{}", "{}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("uMmOH#hs3@Og%", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("u],!Hwb2AOXd", "u],!Hwb2AOXd");
      JSONObject jSONObject1 = jSONObject0.put("u],!Hwb2AOXd", 0.0);
      jSONObject1.optDouble("u],!Hwb2AOXd", 0.0);
      try { 
        jSONObject1.getJSONObject("u],!Hwb2AOXd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u],!Hwb2AOXd\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("u],!Hwb2AOXd", "u],!Hwb2AOXd");
      jSONObject0.put("u],!Hwb2AOXd", 0.0);
      int int0 = jSONObject0.optInt("u],!Hwb2AOXd", 4353);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("m]|j", "m]|j");
      jSONObject1.optBoolean("m]|j");
      try { 
        jSONObject0.append("m]|j", "m]|j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[m]|j] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("toU", "toU");
      jSONObject1.append("toU", "toU");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2544.5));
      assertEquals("-2544.5", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.9706758056211484
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.names();
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.put("{}", 0L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("{I!LB3*OqmK");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0121515258995455
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.112704644485289
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("WaGns6w=", (Object) null);
      try { 
        jSONObject0.getBoolean("WaGns6w=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WaGns6w=\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("m]j", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("C<NS.7Lh-F${fNFS");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of C<NS.7Lh-F${fNFS
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("lQ1F!0\"S%$F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lQ1F!0\\\"S%$F\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      Float.sum((-1074.4828F), (-1074.4828F));
      JSONObject.valueToString(float0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.names();
      boolean boolean0 = jSONObject0.has("java.lang.Float@0000000002");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("u],!Hwb2AOXd", "u],!Hwb2AOXd");
      jSONObject1.has("u],!Hwb2AOXd");
      Long long0 = new Long(0L);
      jSONObject1.putOpt("u],!Hwb2AOXd", "u],!Hwb2AOXd");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("BdsS^$f8aCqf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BdsS^$f8aCqf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.9764597735622598
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("uQH/{H", true);
      assertTrue(boolean0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("c[!");
      assertEquals(0L, long0);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", (-1376));
      Integer.remainderUnsigned(2172, 46);
      Integer.max(46, 10);
      Integer.getInteger("", (-1376));
      JSONObject.numberToString(integer0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("java.lang.Integer@0000000001");
      assertNull(object0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("haGns6w=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of haGns6w=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Double double0 = new Double(1548.41754891);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-1.0));
      jSONObject0.put("-1", (-1.0));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-Kuk.7\".;y9^ArHH", (-451));
      jSONObject0.toString((-451), (-451));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(2463, 2463);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("null", 127);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = JSONObject.valueToString("] is not a JSONObject.");
      assertNotNull(string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("t3Hab");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("issplit", 3532.988221831732);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("fl", "fl");
      assertEquals("fl", string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("<q/SSp(#U@]");
      assertEquals("", string0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONTokener", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("K.I.`U&.&iO ?9", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.8121790402101223
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(";pzWuR)#,1*L", ";pzWuR)#,1*L");
      boolean boolean0 = jSONObject0.optBoolean(";pzWuR)#,1*L");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONArray0, 51, 51);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Short short0 = new Short((short)2614);
      String string0 = JSONObject.valueToString(short0, (short)2614, (short)2614);
      assertNotNull(string0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.4726145613275863
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(107);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 167
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(1082);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 168
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(97);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = JSONObject.quote("h\t");
      assertEquals("\"h\\t\"", string0);
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("] is not a JSONArray.");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 173
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 174
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("],!wb2AX", "],!wb2AX");
      try { 
        jSONObject1.getBoolean("],!wb2AX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"],!wb2AX\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 175
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("_nmD>:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_nmD>:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 176
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Unterminated string", "Unterminated string");
      try { 
        jSONObject0.getInt("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 177
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
