/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 23:41:51 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.8300018670033977
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(9223372036854772565L, 9223372036854772565L);
      Long long0 = new Long(9223372036854772565L);
      range0.equals(long0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of(9223372036854773227L);
      Range range2 = Range.ofLength(9223372036854772565L);
      Range range3 = Range.of(32767L);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      List<Range> list0 = range2.complement(range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9799561547384963
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.iterator();
      range0.iterator();
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.830425150744599
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(399L, 4294967335L);
      range0.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.iterator();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.ofLength(399L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.561680674370494
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774261L);
      Range range1 = Range.of(82L, 9223372036854774261L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = Range.of(749L);
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.iterator();
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.8211461535581464
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 128L, 128L);
      Range range1 = Range.of(range_CoordinateSystem0, 128L, 128L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addLast(range0);
      List<Range> list0 = range1.complementFrom(linkedList0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.7090463694671674
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(313L);
      Range range1 = Range.of(65530L, 65530L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      range1.complement(range0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4921861742632108
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(313L);
      Range range1 = Range.of(65530L, 65530L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2285415935416353
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774261L);
      range0.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object0 = new Object();
      range0.equals(object0);
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("9BxZ7V}!ShNN-<il");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.9BxZ7V}!ShNN-<il
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.8993045530897223
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65530L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(313L);
      Range range0 = range_Builder1.build();
      range0.iterator();
      range0.iterator();
      List<Range> list0 = range0.split(263L);
      Range range1 = Range.ofLength(65530L);
      // Undeclared exception!
      range1.complementFrom(list0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.793494183903136
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(9223372036854775455L);
      Long long0 = new Long(968L);
      range0.equals(long0);
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.328788565295154
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.ofLength(9223372036854774261L);
      Range.of(82L, 9223372036854774261L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.519606427453291
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of((-32756L));
      long long0 = new Long((-32756L));
      Range range1 = Range.of((-32756L), (-1056L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.890202965106063
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 510L, 9223372036854775455L);
      range0.equals(range_CoordinateSystem0);
      String string0 = range0.toString();
      assertEquals("[ 510 .. 9223372036854775455 ]/0B", string0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.831355613740569
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.intersects(range0);
      range1.equals(range0);
      Range range2 = Range.ofLength(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.addLast(range2);
      range2.complementFrom(linkedList0);
      //  // Unstable assertion: assertTrue(linkedList0.contains(range1));
      
      Range.CoordinateSystem.values();
      range0.complement(range2);
      //  // Unstable assertion: assertNotSame(range0, range1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.268771928346651
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.intersects(range1);
      range1.equals(range0);
      Range range2 = Range.ofLength(2147483647L);
      range2.equals(range1);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4947180747710296
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      Range range1 = Range.of((-1L), (-1L));
      range1.equals(range_Builder1);
      //  // Unstable assertion: assertSame(range1, range0);
      
      Range range2 = Range.of(9223372036854772911L);
      Range range3 = Range.of((-1L), 9223372036854772911L);
      Object object0 = new Object();
      List<Range> list0 = range3.complement(range2);
      //  // Unstable assertion: assertTrue(list0.contains(range3));
      //  // Unstable assertion: assertFalse(list0.contains(range2));
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(366L, 4294967335L);
      Range.Builder range_Builder0 = new Range.Builder(4294967335L, 9223372036854773257L);
      range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4452376211616165
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals((-1L), long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-1L), (-1L));
      range2.getLength();
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      assertNotSame(range0, range1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5405224377234217
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(9223372036854772565L, 9223372036854772565L);
      Long long0 = new Long(9223372036854772565L);
      Range.ofLength(32779L);
      Range.of((-425L));
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("UTF-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse UTF-8 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2330756778266094
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(229L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = Range.of(229L);
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
      assertNotSame(range2, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2037023750152533
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(399L, 4294967335L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3579L, 4294967335L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      range0.iterator();
      range1.iterator();
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.635486386424444
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774261L);
      Range range1 = Range.of(82L, 82L);
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = Range.ofLength(82L);
      range2.toString();
      range0.split(82L);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      Range range1 = Range.of(134L, 9223372034707292161L);
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(399L, 4294967335L);
      Long long0 = new Long(4294967335L);
      range0.equals((Object) null);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-32756L), (-1056L));
      Range range1 = Range.of((-32756L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.386970397351947
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(134L, 134L);
      Range range1 = Range.of(1L, 1L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addLast(range0);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8922772952702807
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      boolean boolean0 = range0.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of(1L);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1334393520871684
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(8L);
      range0.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(8L, 8L);
      Range range1 = Range.of(8L);
      range0.equals(range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3290116633839473
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      Range range1 = range_Builder0.build();
      range1.equals(range_Builder1);
      assertTrue(range1.isEmpty());
      
      range_Builder1.contractBegin((-1L));
      Range range2 = Range.of((-1L));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.441171005310231
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-396L));
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = Range.of(9223372036854775807L);
      range1.iterator();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        range2.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -396 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.868947170274063
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(9223372036854774261L, 9223372036854774261L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.removeFirstOccurrence(range0);
      linkedList0.add(range0);
      linkedList0.addLast(range0);
      Range range1 = range0.asRange();
      range1.isEmpty();
      range1.equals("");
      range0.iterator();
      Range range2 = Range.of((-2095L));
      Range.of(134L);
      // Undeclared exception!
      try { 
        range1.complement(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2095 would make range [9223372036854774261 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-3784L), (-1056L));
      Range.of(9223372036854775480L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      boolean boolean0 = range0.startsBefore(range0);
      boolean boolean1 = range0.equals(range0);
      assertFalse(boolean1 == boolean0);
      
      Range range1 = range0.intersection(range0);
      range1.split(9223372034707292161L);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=4.003231413389875
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(436L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.isEmpty();
      Range range1 = Range.of(0L);
      Range range2 = Range.of(0L);
      Range range3 = Range.ofLength(2198L);
      range1.endsBefore(range3);
      Range range4 = Range.of((-2L));
      range4.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-2L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of((-244L), 9223372036854775455L);
      Range range1 = Range.of(2147483647L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.5413777836353715
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65530L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(313L);
      Range range0 = range_Builder1.build();
      Range range1 = Range.of(313L, 2147483647L);
      Range range2 = range_Builder1.build();
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      
      Range range3 = Range.of(2147483647L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(5799L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 5799L, 5799L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9848941644582636
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 9223372036854709984L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      boolean boolean0 = range1.equals(range0);
      boolean boolean1 = range1.isEmpty();
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      
      range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(366L, 4294967312L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.059202231024756
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.ofLength(312L);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of((-1L));
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.589263093927709
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(2147483644L, 2147483644L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483644L, 2147483647L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Range.of(1037L);
      boolean boolean1 = range0.equals(range1);
      range1.iterator();
      Range range2 = range0.intersection(range1);
      boolean boolean2 = range2.equals(range0);
      assertFalse(boolean2 == boolean1);
      
      Range range3 = range0.intersection(range1);
      Range range4 = range3.asRange();
      assertSame(range4, range0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.268163943478719
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(2147483660L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(2147483647L, 2147483660L);
      range0.intersects(range1);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483660L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.7437049634716177
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(134L, 134L);
      Range range1 = Range.ofLength(134L);
      Range range2 = Range.of(134L);
      range0.getLength();
      Range range3 = Range.of((-1736L), 32767L);
      range3.isSubRangeOf(range1);
      range2.equals(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-2123L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.8904921968688857
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-32768L));
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = Range.ofLength(65535L);
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65530L, 9223372036854709965L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.20450410181143
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.toString();
      Range range1 = Range.of(2147483647L);
      range0.startsBefore(range1);
      Range.ofLength(2147483647L);
      range0.asRange();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775455L, (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483649 would make range [9223372036854775454 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.829666439109214
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addLast(range0);
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd((-1L));
      Range range1 = range_Builder0.build();
      range1.equals((Object) null);
      range0.iterator();
      Range range2 = Range.of(9223372036854772911L);
      Range range3 = range2.intersection(range0);
      range3.intersects(range1);
      assertTrue(range3.isEmpty());
      
      String string0 = range2.toString();
      assertEquals("[ 9223372036854772911 .. 9223372036854772911 ]/0B", string0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854774261L, 9223372036854774261L);
      range_Builder0.expandEnd(9223372036854774261L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3094 would make range [9223372036854774261 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854775298L, 9223372036854775298L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775298L, (-1340L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1340 would make range [9223372036854775298 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.188920110753204
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Long long0 = new Long(65530L);
      Range range0 = Range.of((-9223372036854775493L), (-9223372036854775493L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-9223372036854775492L), long1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.490781778504486
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1);
      
      range0.iterator();
      range1.equals(range_CoordinateSystem0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.129966420524349
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-13L), (-13L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-13L));
      range0.getBegin();
      long long0 = 5644L;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-13L), 5644L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.1356178217257975
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.6094024898848867
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65530L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(313L);
      Range range0 = range_Builder1.build();
      range0.iterator();
      range0.iterator();
      List<Range> list0 = range0.split(65530L);
      assertEquals(2, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.372913013361274
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774261L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854774261L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3095 would make range [9223372036854774261 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.389172717128779
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774261L);
      Range range1 = Range.of(9223372036854774261L, 9223372036854774261L);
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-199L), 2134L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65543L, 9223372036854709980L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.4259237720183378
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of((-1768L), (-1768L));
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals((-1767L), long0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.433164130796204
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range1.iterator();
      range0.equals(range_CoordinateSystem0);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.6890544866144155
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(366L, 4294967335L);
      Range range1 = Range.of(4294967335L);
      range1.equals(range0);
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 130L, 130L);
      Range range1 = Range.ofLength(130L);
      range0.startsBefore(range1);
      Range range2 = range1.asRange();
      boolean boolean0 = range0.startsBefore(range2);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.2021678481610336
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(313L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 312L);
      boolean boolean0 = range1.equals((Object) null);
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.1792007145348498
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.getLength();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.717030806418014
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      Range range2 = range0.asRange();
      Range range3 = Range.of(1L);
      range3.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range2.iterator();
      range_Builder0.expandBegin(0L);
      range0.endsBefore(range3);
      Range range4 = Range.of(0L);
      range2.endsBefore(range3);
      range0.equals(range2);
      String string0 = range3.toString();
      assertEquals("[ 1 .. 1 ]/0B", string0);
      
      range0.isEmpty();
      boolean boolean1 = range0.endsBefore(range4);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.4023466662272295
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      boolean boolean0 = range1.intersects(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      boolean boolean1 = range0.equals(range_CoordinateSystem0);
      boolean boolean2 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertTrue(boolean2);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.5433233969560356
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774261L);
      Range range1 = Range.of(82L, 9223372036854774261L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(2, list0.size());
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.117392856642673
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(65535L);
      String string0 = range0.toString();
      assertEquals("[ 65535 .. 65535 ]/0B", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.295882669213566
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      
      range0.iterator();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.3851086000014283
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(5799L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 5799L, 5799L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.4279783730534703
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(255L, 255L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.1139696645160146
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(6250L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.661550160681755
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-1765L));
      Range range1 = Range.of(9223372036854772735L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      range1.iterator();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.536728749774552
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-128L), 2147483647L);
      Range range1 = Range.of((-128L));
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        range1.split((-318L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.3278369999701947
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(5676L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(linkedList0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.8899587648618628
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 510L, 510L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 510 .. 510 ]/0B", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.8899587648618628
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(651L);
      boolean boolean0 = range0.intersects(range0);
      boolean boolean1 = range0.equals(range0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.3738287667386646
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addLast(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.4420466346688325
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(65530L);
      range0.equals(range0);
      range0.equals(range0);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.747165662294138
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      range_Builder0.expandEnd((-1L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range1 = Range.ofLength(4294967295L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.5087533227103065
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-32756L));
      long long0 = range0.getBegin();
      assertEquals((-32756L), long0);
      
      Range range1 = Range.of((-32756L), (-1056L));
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.8908530192772437
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 510L, 9223372036854775455L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 510 .. 9223372036854775455 ]/0B", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.182525797007715
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals("Range coordinates %d, %d are not valid %s coordinates");
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      range0.getBegin();
      Range range1 = range0.asRange();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.7732518005590348
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-244L), 9223372036854775455L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1038L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.7074978123290525
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 510L, 9223372036854775455L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.addLast(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.388363725767651
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-32756L));
      Range range1 = Range.of((-32756L), (-1056L));
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      //  // Unstable assertion: assertEquals(2, list0.size());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.4392843399911825
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range range1 = range0.asRange();
      range0.equals("");
      range1.iterator();
      Range range2 = Range.of(1353L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 478L, 9223372036854775455L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.5873387496546107
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      long long0 = range0.getBegin();
      assertEquals((-1L), long0);
      
      Range range1 = Range.of(9223372036854775727L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.384753780368075
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.intersects(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.415464856379073
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65530L);
      Range range0 = Range.of(65530L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 65530L, 65530L);
      Range range2 = Range.ofLength(2835L);
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.323934824062405
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(9223372036854772565L, 9223372036854772565L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(9223372036854772565L, long0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.133680985529237
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L), (-128L));
      boolean boolean0 = range1.intersects(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(2901L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 2901L, 2901L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.360538514024816
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.3485592166350826
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(120L);
      Range range1 = Range.of(range_CoordinateSystem0, 120L, 120L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
      
      Range range2 = range1.asRange();
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.268771928346651
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      boolean boolean0 = range0.intersects(range0);
      range0.equals(range0);
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      boolean boolean1 = range0.equals("[ 2147483647 .. 2147483647 ]/0B");
      assertFalse(boolean1 == boolean0);
      
      Range range1 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B");
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.203099706052705
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-1L));
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/RB", string0);
      
      Range range1 = Range.parseRange("[ 0 .. 0 ]/RB", range_CoordinateSystem0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.0719074572815157
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      long long0 = range0.getLength();
      assertSame(range0, range1);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      range0.split(2760L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.203776696828706
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 128L, 128L);
      Range.of(range_CoordinateSystem0, 128L, 128L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.iterator();
      Range range1 = range0.asRange();
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.40640935807259
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(287L);
      Range range0 = Range.of((-11L), (-11L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(2147483652L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-68836L), 366L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-68836L), long0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.of((-209L), 9223372036854775455L);
      // Undeclared exception!
      try { 
        Range.ofLength((-209L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(263L, 263L);
      range_Builder0.contractBegin(0L);
      range_Builder0.expandBegin((-2791L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.0905047549735127
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.ofLength(134L);
      long long0 = range0.getEnd();
      assertEquals(133L, long0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(3905L);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.180683087165041
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1149L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.8920447039568087
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(0L, 0L);
      range0.complement(range1);
      String string0 = range_CoordinateSystem0.toString();
      range1.iterator();
      range0.iterator();
      range1.endsBefore(range0);
      range_CoordinateSystem0.toString();
      Object object0 = new Object();
      range1.equals(object0);
      range0.intersects(range1);
      range1.toString();
      range1.getEnd();
      range0.split(4294967295L);
      range0.asRange();
      String string1 = range_CoordinateSystem0.getAbbreviatedName();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("<oUOXe!VqGb8Ks2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.<oUOXe!VqGb8Ks2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.5876867486603277
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(2147483647L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.7781979638788714
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.386825658605385
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-13L), (-13L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-13L));
      Range range1 = Range.of((-13L));
      Range range2 = range0.intersection(range1);
      range2.iterator();
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = (-361L);
      Range.Builder range_Builder0 = new Range.Builder((-361L), (-361L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-361L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.198616238838059
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483647L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.4286687697449683
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      range_Builder0.copy();
      range_Builder0.expandEnd((-1L));
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      Range range0 = Range.of((-1L));
      range0.equals(range_Builder1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(3184L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.79438837168257
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-55L));
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      range0.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Zero Based", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Zero Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.54293513613612
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.addLast(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.4931415999788613
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.iterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-887L), (-887L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = 9223372036854772565L;
      Range range0 = Range.of(9223372036854772565L, 9223372036854772565L);
      Long long1 = new Long(9223372036854772565L);
      range0.equals(long1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.798452861589087
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      assertSame(range0, range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, 255L);
      range_Builder0.shift(451L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65530L);
      range_Builder0.expandEnd(313L);
      range_Builder0.contractEnd(313L);
      Range range0 = Range.ofLength(313L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-361L), (-361L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = 18L;
      Range range0 = Range.ofLength(18L);
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of(2147483604L, 2147483604L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.split(2147483604L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      Range range1 = Range.of(134L, 9223372034707292161L);
      range0.intersection(range1);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.9795303057019797
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      
      range0.iterator();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(255L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.219024046188041
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L);
      boolean boolean0 = range0.startsBefore(range0);
      boolean boolean1 = range1.isEmpty();
      assertSame(range1, range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.796837966557264
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.intersection(range0);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertSame(range1, range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.6709864226010485
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(0L);
      range1.equals(range0);
      range1.isEmpty();
      range0.iterator();
      Range range2 = Range.of((-477L));
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.7938131631694842
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of(2147483672L);
      String string0 = range0.toString();
      assertEquals("[ 2147483672 .. 2147483672 ]/0B", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of((-611L));
      Long long0 = new Long((-611L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 2147483647 .. 2147483647 ]/SB", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.240780038630771
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of((-4198L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("[ -4197 .. -4197 ]/RB", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ -4197 .. -4197 ]/RB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.3915465043565254
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of((-1L), 2760L);
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.059686199566801
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-32756L));
      Range range1 = Range.of((-32756L), (-1056L));
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        range1.split((-1056L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.266171631535167
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      range_Builder0.expandEnd((-1L));
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      range0.equals(object0);
      range0.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.ofLength(1904L);
      range0.iterator();
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of(128L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 128L, 128L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.133680985529237
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(2147483647L, 2147483647L);
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(2147483648L, long0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.iterator();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 159L, 159L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-383L), (-383L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.of((-15L), (-15L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range range0 = Range.of(1078L);
      assertFalse(range0.isEmpty());
  }
}
