/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 14 23:13:55 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Vector;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+m=}Ytb`gI3#<");
      DBDataType dBDataType0 = DBDataType.getInstance((-224052905), "BLOB");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+m=}Ytb`gI3#<", defaultDBTable0, dBDataType0, integer1);
      SQLUtil.removeComments("+m=}Ytb`gI3#<");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("BLOB", stringBuilder0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5636770115202485
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+m=1Ytb`g3#7");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("call", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBDataType dBDataType0 = DBDataType.getInstance((-224052905), "BLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+m=1Ytb`g3#7", defaultDBTable0, dBDataType0, integer0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(" 4EFAUvT3");
      assertNull(boolean0);
      
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("+m=1Ytb`g3#7 BLOB NULL", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-4588), "ute");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DX13E>K6", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("[PwDm6'zmuz");
      SQLUtil.renderColumn(defaultDBColumn0);
      DBSchema dBSchema0 = new DBSchema("c");
      dBSchema0.equals(dBDataType0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("k*t|2:3(pd/XUXTzQ", dBSchema0);
      String[] stringArray0 = new String[18];
      stringArray0[0] = "c";
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("k*t|2:3(pd/XUXTzQ");
      assertNull(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnNames(stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(, , )");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(, , )");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "40XL1", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("=0)?7=U{vK'9m", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("D!/(X9w[{9p");
      DBDataType dBDataType0 = DBDataType.getInstance((-1855), "D!/(X9w[{9p");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("A+Sw)I<Ih", defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("D!/(X9w[{9p", defaultDBTable0, dBDataType0);
      defaultDBColumn1.toString();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("D!/(X9w[{9p");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      File file0 = MockFile.createTempFile("?zw@Ms", "org.firebirdsql.event.FBEventManager$EventDispatcher");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.firebirdsql.event.FBEventManager$EventDispatcher";
      stringArray0[1] = "org.firebirdsql.event.FBEventManager$EventDispatcher";
      stringArray0[2] = "org.firebirdsql.event.FBEventManager$EventDispatcher";
      stringArray0[3] = "org.firebirdsql.event.FBEventManager$EventDispatcher";
      stringArray0[4] = "D!+/ (zXvw[{9p";
      stringArray0[5] = "3fF@f.Y,";
      stringArray0[6] = "?zw@Ms";
      stringArray0[7] = "f,*>x=Zjg";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "D!+/ (zXvw[{9p", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.firebirdsql.event.FBEventManager$EventDispatcher", true, dBUniqueConstraint0);
      dBUniqueConstraint0.equals("org.firebirdsql.event.FBEventManager$EventDispatcher");
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(dBTable0.getDoc());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "1vyf{V/*@$],D";
      // Undeclared exception!
      SQLUtil.isQuery("1vyf{V/*@$],D");
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "1vyf{V/*@$],D";
      // Undeclared exception!
      SQLUtil.isDDL("1vyf{V/*@$],D");
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"M?z8\f@Df+>QE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2654, "ute");
      Integer integer0 = new Integer(3872);
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("seret", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("seret UTE(3872) NOT NULL", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("bfoB=s$SY# S!mHko{");
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ater sessionalXrtahblem");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES ater sessionalXrtahblem()", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1267173420842145
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter taIle");
      assertNull(boolean1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter taIle";
      stringArray0[1] = "p=9;51Qybm>";
      stringArray0[2] = "alter sessionobjecttype";
      stringArray0[3] = "drop materialized view";
      stringArray0[4] = "alter taIle";
      stringArray0[5] = "alter sessionobjecttype";
      stringArray0[7] = "alter sessionobjecttype";
      stringArray0[8] = "alter sessionobjecttype";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter sessionobjecttype", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter sessionobjecttype", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String string0 = SQLUtil.renderQuery(dBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE alter taIle = 'alter taIle' AND p=9;51Qybm> = 'p=9;51Qybm>' AND alter sessionobjecttype = 'alter sessionobjecttype' AND drop materialized view = 'drop materialized view' AND alter taIle = 'alter taIle' AND alter sessionobjecttype = 'alter sessionobjecttype' AND null = null AND alter sessionobjecttype = 'alter sessionobjecttype' AND alter sessionobjecttype = 'alter sessionobjecttype'", string0);
      
      SQLUtil.renderValue(defaultDBTable0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter sessionobjecttype", true, stringArray0);
      String string1 = SQLUtil.substituteMarkers("insert", "p=9;51Qybm>", dBPrimaryKeyConstraint1);
      assertEquals("insert", string1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4610439264386184
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("OBJECTTnmfYPE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~");
      DBDataType dBDataType0 = DBDataType.getInstance(90, "+Af+&cQm_uGmS7-");
      Integer integer0 = new Integer(90);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.toString();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderValue(stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "", 94, 94);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 94, end 94, s.length() 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null, .null, .null", string0);
      
      DBSequence dBSequence0 = new DBSequence("", "drop materialized viewobjecttype", "create unique indexobjecttype");
      dBSequence0.getStartIfNotDefault();
      String string1 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1739, "k8(F9 Xj|TO8GsP360");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k8(F9 Xj|TO8GsP360");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k8(F9 Xj|TO8GsP360", defaultDBTable0, dBDataType0, integer0);
      defaultDBTable0.getIndexes();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("k8(F9 Xj|TO8GsP360", defaultDBTable0, dBDataType0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      MockFileWriter mockFileWriter0 = new MockFileWriter("k8(F9 Xj|TO8GsP360", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "create materialized view";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create materialized view", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null, .null, .null", string0);
      
      String string1 = SQLUtil.substituteMarkers("", "`P_/fW5/GSQe", "`P_/fW5/GSQe");
      assertEquals("", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter indexobjecuttnfype");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "fpF)_*FA;`*8hH%E'", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "D!/(X9w[{9p";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("D!/(X9w[{9p");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("D!/(X9w[{9p", defaultDBTable0, (DBDataType) null, integer0);
      SQLUtil.removeComments("D!/(X9w[{9p");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("D!/(X9w[{9p");
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = MockFile.createTempFile("FgDrN2CN", "FgDrN2CN");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderColumnNames(stringArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "(, )";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4342447161495797
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select join");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "select join", "select join");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("exec{reate ]tab");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.402886181440778
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(68);
      TableContainer tableContainer0 = new TableContainer("dataSourceNae");
      tableContainer0.getTable("+S.2");
      DBDataType dBDataType0 = DBDataType.getInstance(68, "+S.2");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+S.2", (DBTable) null, dBDataType0, integer0);
      stringBuilder0.append((Object) defaultDBColumn0);
      assertEquals("+S.2 : +S.2(0)", stringBuilder0.toString());
      
      boolean boolean0 = SQLUtil.isProcedureCall("dataSourceNae");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.341748649525924
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("6o@strGint");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("?owlX^%O>+:v)B<", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder("?owlX^%O>+:v)B<");
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("?owlX^%O>+:v)B< and nullCONSTRAINT ?owlX^%O>+:v)B< ", stringBuilder0.toString());
      
      Boolean boolean0 = SQLUtil.mutatesStructure("Z;T");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1719497587472385
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("select", "select", stringArray0, "select", "select", stringArray0);
      assertEquals("select join select as select on select.null = select.null", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select join select as select on select.null = select.null");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("select", stringArray0);
      assertEquals("select.null", string1);
      
      String string2 = SQLUtil.normalize("update--", false);
      assertEquals("update --", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "b'";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("b'");
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable1, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("{reate ]txwkaZle");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "tLMiq!";
      stringArray0[2] = "{reate ]txwkaZle";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("tLMiq!", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "Lwk'z";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder("p`m^e<[t6$l}");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("Lwk'z", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      stringBuilder1.append((float) 622);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-2), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DBSchema dBSchema0 = new DBSchema("update}x=:wapbs");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" DEFAULT ", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "d}pGB", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(" DEFAULT ", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, " DEFAULT ", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint1);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      dBPrimaryKeyConstraint1.toString();
      dBPrimaryKeyConstraint0.toString();
      SQLUtil.constraintName(dBPrimaryKeyConstraint1);
      StringBuilder stringBuilder0 = new StringBuilder("alter session");
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder0.append(true);
      SQLUtil.addOptionalCondition("d}pGB", stringBuilder0);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("alter sessiontrue or d}pGBCONSTRAINT \" DEFAULT \" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Character character0 = new Character('h');
      SQLUtil.renderValue(character0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Frl2Eajc*w&");
      assertNull(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Character character0 = new Character('3');
      String string0 = SQLUtil.substituteMarkers(",OQ(nvgbEpc@8K8", ",OQ(nvgbEpc@8K8", character0);
      assertEquals("'3'", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1807537688693923
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      String string0 = SQLUtil.normalize("updatex9%(<bo}4!j ,9*/;", true);
      assertEquals("updatex9 % (< bo } 4 ! j,  9 */ ;", string0);
      
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      boolean boolean0 = SQLUtil.isDML("select intod!+/ (zx9w[{9p");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.804922332724494
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[19];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SQLUtil.join("select", "select", stringArray0, "select", "select", stringArray0);
      assertEquals("select join select as select on select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null and select.null = select.null", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " (", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" (\" PRIMARY KEY (, , , , , , , , , , , , , , , , , , )", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(134217727);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-527), "select intocreate table");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*>lpJS08aCF977]}l=L", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBUniqueConstraint0.setName((String) null);
      dBPrimaryKeyConstraint0.toString();
      dBUniqueConstraint0.toString();
      SQLUtil.constraintName(dBUniqueConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder("t,,=$}iDDUHB&");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      stringBuilder2.appendCodePoint(18);
      StringBuilder stringBuilder3 = new StringBuilder(455);
      SQLUtil.addRequiredCondition("t,,=$}iDDUHB&", stringBuilder2);
      assertEquals("t,,=$}iDDUHB& and nullfalse\u0012 and t,,=$}iDDUHB&", stringBuilder2.toString());
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6290079478444386
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.normalize("null = null AND null = null", false);
      assertTrue(string1.equals((Object)string0));
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null = null AND null = null");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("null = null AND null = null", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string2 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \"null = null AND null = null\" ", string2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBUniqueConstraint0.setName((String) null);
      dBPrimaryKeyConstraint0.toString();
      dBUniqueConstraint0.toString();
      SQLUtil.constraintName(dBUniqueConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder("t,,=$}iDDUHB&");
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append(false);
      SQLUtil.addOptionalCondition("PRIMARY KEY (, , , , , , , )", stringBuilder1);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, stringBuilder1);
      assertEquals("false or PRIMARY KEY (, , , , , , , )", stringBuilder1.toString());
      
      boolean boolean0 = SQLUtil.isDML("ALTER TABLE ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.199663191579221
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select join");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = SQLUtil.isQuery("select join");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesStructure("eecuted,H9d)\"[Qm~z");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.360448974670294
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("|@&");
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("$/*bmfr~K9$w2VrW");
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "seret");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK seret", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("deletetb-4u^gll7^$j}f", stringBuilder0);
      assertEquals("deletetb-4u^gll7^$j}f", stringBuilder0.toString());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6036051515160747
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "insert", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      StringBuilder stringBuilder2 = stringBuilder1.append(true);
      SQLUtil.addRequiredCondition("?L-~AhO|QlpH@", stringBuilder2);
      assertEquals("CONSTRAINT insert true and ?L-~AhO|QlpH@", stringBuilder2.toString());
      assertEquals("CONSTRAINT insert true and ?L-~AhO|QlpH@", stringBuilder0.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create unique indexalter tahlem", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("create unique indexalter tahlem", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("exec42001", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("d/0$*z [D", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "exec42001";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("P*?", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT P*? ", stringBuilder0.toString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "varcha");
      SQLUtil.addRequiredCondition("varcha", stringBuilder0);
      assertEquals("varcha and varcha", stringBuilder0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = SQLUtil.normalize("Pc\"ymEx/", true);
      assertEquals("Pc \"ymEx/\"", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execute");
      assertNull(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.apache.derby.iapi.store.replication.slave.SlaveFactory", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("executeindLx_mype_name");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "rgRe0@TkgK.0(`I|";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rgRe0@TkgK.0(`I|");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "rgRe0@TkgK.0(`I|");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("deletetb-4u^gll7^$j6}f");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create tableswkuz");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = SQLUtil.normalize("~mm+]e*r6vf~&-1T", false);
      assertEquals("~ mm + ] e * r6vf ~ & - 1T", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = SQLUtil.normalize("~)od}sx]\u0002`=J", false);
      assertEquals("~) od } sx ] \u0002 ` = J", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      System.setCurrentTimeMillis((-1396L));
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[3] = null;
      stringArray0[5] = null;
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, stringArray0, stringArray0[5], stringArray0[3], stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("|@&", stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("|@&", (String[]) null, "_v9p0j7gic..9\"n2P#", "|@&", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "p`M^E<[6$l}", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT p`M^E<[6$l} PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "rename", true, (String[]) null);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = SQLUtil.normalize("*~ >l^k=pH,IL$:=~", true);
      assertEquals("* ~ > l ^ k = pH, IL $ : = ~", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "truncated!+ (9w[{9p", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"truncated!+ (9w[{9p\" PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "CdIL";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder(4095);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = SQLUtil.normalize("%X8,{p}.C[l=", false);
      assertEquals("% X8, { p }.C [ l =", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("D!+/ (zX9w[{9p");
      DBDataType dBDataType0 = DBDataType.getInstance((-1855), "D!+/ (zX9w[{9p");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("D!+/ (zX9w[{9p", defaultDBTable0, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[13];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7343996803791222
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("null = null AND null = null", false, "null = null AND null = null", "null = null AND null = null");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Rvret", false, "Rvret", "Rvret");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK Rvret", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Unnter", false, "Unnter", "Unnter");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Unnter CHECK Unnter", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "p`M^E<[6$l}", true, stringArray0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT p`M^E<[6$l} UNIQUE (, , , , , , , )", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6663317712332457
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[9];
      stringArray1[1] = "null = null AND null = null AND null = null";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("null = null AND null = null AND null = null", stringArray1, "null = null AND null = null AND null = null", "Unknown token type", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderColumnListWithTableName("ater sessionalXrtahblem", stringArray0);
      assertEquals("ater sessionalXrtahblem.null", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("ater sessionalXrtahblem", dBCatalog0);
      dBSchema0.isIdentical(dBCatalog0);
      String string1 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("null.ater sessionalXrtahblem", string1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F_MBU?yY^~I<{");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table F_MBU?yY^~I<{", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.6247219524633114
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[11];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.mutatesDataOrStructure("UpW,N8u-JUiM^i]>");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("UpW,N8u-JUiM^i]>", stringArray0, "UpW,N8u-JUiM^i]>", "(, , , , , , , , , , )", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter taHblem");
      assertNull(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-1612795658), "!!5KrNu!ap<~\":ei");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter taHblem", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("alter taHblem !!5KRNU!AP<~\":EI(3,3) NULL", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete");
      DBDataType dBDataType0 = DBDataType.getInstance(1917, "delete");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals("delete : DELETE(2)", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.2014023220140038
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select join");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select join", defaultDBTable0, 228, "select join");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("select join SELECT JOIN NULL", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.6982233306789656
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null", string0);
      
      String[] stringArray1 = new String[1];
      stringArray1[0] = "null = null AND null = null AND null = null";
      String string1 = SQLUtil.innerJoin("null = null AND null = null AND null = null", stringArray1, "null = null AND null = null AND null = null", "Unknown token type", stringArray0);
      assertEquals("null = null AND null = null AND null = null as Unknown token type on null = null AND null = null AND null = null.null = null AND null = null AND null = null = Unknown token type.null", string1);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = SQLUtil.normalize("TM.6Y.='1kSUj7/j", false);
      assertEquals("TM.6Y.= '1kSUj7/j'", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("3jN`@", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1273525491449161
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
      
      String string1 = SQLUtil.renderValue("null = null AND null = null");
      assertEquals("'null = null AND null = null'", string1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("create table");
      boolean boolean0 = SQLUtil.isDDL("create table");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("create unique index");
      tableContainer0.getTable("create unique index");
      DBDataType dBDataType0 = DBDataType.getInstance((-1880528057), "create unique index");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index", (DBTable) null, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "create unique index");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("create unique indexCREATE UNIQUE INDEX", stringBuilder0.toString());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selectnclob");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selectnclob", defaultDBTable0, 468, "create unique index");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CREATE UNIQUE INDEX", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("inner", "inner", (String[]) null, "freeMemoryAndFinalize", "freeMemoryAndFinalize", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(|2`Rs8/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (|2`Rs8/
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setLogWriter(out)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"out\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("D!+/ (zX9w[{>p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: D!+/ (zX9w[{>p
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.4582244426360023
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("null = null", "null = null", stringArray0, "c<`!JZ_~Q#tK", "null = null", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("] ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("drop index");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("create ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("deletetb-4u^gll7^$j6}f");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T, 9`:z{|C<yps,~");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.6593387642402389
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
      
      String string1 = SQLUtil.leftJoin("", stringArray0, "0su[eAUGPdEZeJv", "null = null AND null = null", stringArray0);
      assertEquals("left join 0su[eAUGPdEZeJv as null = null AND null = null on .null = null = null AND null = null.null and .null = null = null AND null = null.null", string1);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "";
      DBCatalog dBCatalog0 = new DBCatalog();
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ''
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter session");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.4971185504216376
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[15];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.join("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "(", "(", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, (String[]) null, (String) null, "CHECK ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[13];
      String string0 = SQLUtil.join("sV9er\"t", "sV9er\"t", stringArray0, (String) null, "sV9er\"t", stringArray0);
      assertEquals("sV9er\"t join null as sV9er\"t on sV9er\"t.null = sV9er\"t.null and sV9er\"t.null = sV9er\"t.null and sV9er\"t.null = sV9er\"t.null and sV9er\"t.null = sV9er\"t.null and sV9er\"t.null = sV9er\"t.null and sV9er\"t.null = sV9er\"t.null and sV9er\"t.null = sV9er\"t.null and sV9er\"t.null = sV9er\"t.null and sV9er\"t.null = sV9er\"t.null and sV9er\"t.null = sV9er\"t.null and sV9er\"t.null = sV9er\"t.null and sV9er\"t.null = sV9er\"t.null and sV9er\"t.null = sV9er\"t.null", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[15];
      String string0 = SQLUtil.innerJoin("\"", stringArray0, "\"", "d?", stringArray0);
      assertEquals("\" as d? on \".null = d?.null and \".null = d?.null and \".null = d?.null and \".null = d?.null and \".null = d?.null and \".null = d?.null and \".null = d?.null and \".null = d?.null and \".null = d?.null and \".null = d?.null and \".null = d?.null and \".null = d?.null and \".null = d?.null and \".null = d?.null and \".null = d?.null", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.innerJoin("X0ZK M(=L_=r ]hcgJ", stringArray0, "2l]r!,Ev8n;}H3", "2l]r!,Ev8n;}H3", stringArray0);
      assertEquals("2l]r!,Ev8n;}H3 as 2l]r!,Ev8n;}H3 on X0ZK M(=L_=r ]hcgJ.null = 2l]r!,Ev8n;}H3.null and X0ZK M(=L_=r ]hcgJ.null = 2l]r!,Ev8n;}H3.null and X0ZK M(=L_=r ]hcgJ.null = 2l]r!,Ev8n;}H3.null and X0ZK M(=L_=r ]hcgJ.null = 2l]r!,Ev8n;}H3.null", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.join("NCLOB", stringArray0[0], stringArray0, stringArray0[0], stringArray0[0], stringArray0);
      assertEquals("NCLOB join null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("I(X\"XWBd3", (String[]) null, "I(X\"XWBd3", "I(X\"XWBd3", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
