/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 03:28:47 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.Mode;
import freemind.modes.mindmapmode.MindMapController;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.Stack;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.ListModel;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.UserAgentAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1997543786005975
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-125);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.drawDays();
      jDayChooser0.isDayBordersVisible();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 1264L, 40, 40, 'C');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1518656280003343
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton[] jButtonArray0 = new JButton[1];
      JButton jButton0 = jDayChooser0.selectedDay;
      jButtonArray0[0] = null;
      jDayChooser0.weeks = jButtonArray0;
      JDayChooser jDayChooser1 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setMonth((-367));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-2079L));
      JTextField jTextField0 = new JTextField("ER_NEED_NAME_ATTRIB", 35);
      KeyEvent keyEvent0 = new KeyEvent(jTextField0, 35, (-2079L), 35, 35, 'E');
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.696326911267997
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser1.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "1");
      jDayChooser1.setMonth(2031);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.151003002680045
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputMap();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 462, (-2083L), 462, 462, '\\');
      jDayChooser0.weeks = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setMonth(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setForeground((Color) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(2, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-2083L));
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, 5873L, 37, 37, '`');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8961031581030303
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 462, 33, 33, 't');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0972882399579627
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis(4294977020L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(10);
      Locale locale0 = Locale.GERMAN;
      jDayChooser0.setLocale(locale0);
      assertEquals(10, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 65485, 65485, '|', 38, '|');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 34, 34, 34, '`');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8962003575441333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-2079L));
      JDayChooser jDayChooser0 = new JDayChooser();
      Stack<AWTKeyStroke> stack0 = new Stack<AWTKeyStroke>();
      JList<Object> jList0 = new JList<Object>(stack0);
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setSundayForeground(color0);
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      jDayChooser0.setComponentOrientation(componentOrientation0);
      jDayChooser0.setMonth(14);
      jDayChooser0.getSundayForeground();
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 'F', 'F', 39, 39, 'F');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 36, 36, 36, 'E');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.064048456560637
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      float[] floatArray0 = new float[3];
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser1.setYearChooser(jYearChooser0);
      Color color0 = Color.pink;
      jDayChooser0.isDayBordersVisible();
      jDayChooser1.setAlwaysFireDayProperty(false);
      jDayChooser1.getDecorationBackgroundColor();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.896090218646746
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1978114387430616
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getDockingColor();
      Color.getColor("day", (Color) null);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 42);
      jDayChooser0.getDecorationBackgroundColor();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8969943718974696
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis((-2076L));
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      MockDate mockDate0 = new MockDate(22, 1382, 1382);
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
      jDayChooser0.drawDays();
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.isDayBordersVisible();
      assertEquals(31, jDayChooser1.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.240235895383868
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.decorationBackgroundVisible = false;
      jDayChooser0.getDay();
      jDayChooser0.getSelectedDay();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Boolean boolean1 = new Boolean(" l");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8969943718974696
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis((-2076L));
      JDayChooser jDayChooser0 = new JDayChooser();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getAttributionImage();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      Color color0 = Color.pink;
      jDayChooser0.setForeground(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setAlwaysFireDayProperty(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser1.setDay(673);
      jDayChooser1.getMaxSelectableDate();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      int int0 = 37;
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "Windows", 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.208313128881091
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis((-2083L));
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 462, (-2083L), 462, 462, '\'');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = ImageObserver.ERROR;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6090497473625858
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-459));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-442));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWidth();
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(462);
      Date date0 = jDayChooser0.minSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertSame(date1, date0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.window;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWidth();
      Locale locale0 = Locale.GERMAN;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      ParsePosition parsePosition0 = new ParsePosition(0);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.minSelectableDate = null;
      // Undeclared exception!
      try { 
        jDayChooser0.drawDays();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      color0.getColorSpace();
      int int0 = 63720;
      FocusEvent focusEvent0 = new FocusEvent(defaultTreeCellRenderer0, 63720, false);
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      metalComboBoxEditor_UIResource0.focusLost(focusEvent0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getComponentPopupMenu();
      // Undeclared exception!
      try { 
        MockLocalDateTime.now((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 10, "3");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ELSE");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      jDayChooser_DecoratorButton0.add((Component) jDayChooser0, (Object) gregorianCalendar0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.requestFocus();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.09185472800677
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-2785));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      jDayChooser0.setSundayForeground(systemColor0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2109181719504103
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(3);
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8961770597399514
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocation((Point) null);
      jDayChooser0.setRequestFocusEnabled(false);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(223, dimension0.width);
      
      jDayChooser0.contains(59, 0);
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(59);
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(true);
      ActionEvent actionEvent0 = new ActionEvent("I_ OLF*+z e<`IMn(Sb", 0, "org.apache.xpath.operations.Div", 0, 0);
      Object object0 = new Object();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jYearChooser0, 59, 333L, 115, 1723, 'h', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.170076619162811
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.updateUI();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-16754012), color0.getRGB());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(63713);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0640644017093255
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Boolean boolean0 = new Boolean("day");
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDay();
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.add((InputMethodListener) null, inputMethodListener1);
      jDayChooser1.removeInputMethodListener(inputMethodListener2);
      jDayChooser1.isDecorationBackgroundVisible();
      jDayChooser1.initDecorations();
      jDayChooser0.keyTyped((KeyEvent) null);
      JList<Object> jList0 = null;
      try {
        jList0 = new JList<Object>((ListModel<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataModel must be non null
         //
         verifyException("javax.swing.JList", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 63720, false);
      basicComboBoxEditor0.focusLost(focusEvent0);
      jDayChooser0.addFocusListener(basicComboBoxEditor0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8009015913105437
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setInheritsPopupMenu(true);
      jDayChooser0.setRequestFocusEnabled(false);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(223, dimension0.width);
      
      jDayChooser0.contains(59, 0);
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(59);
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(true);
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 1, true, jDayChooser_DecoratorButton0);
      Component component0 = jDayChooser0.add((Component) jDayChooser_DecoratorButton0);
      FocusEvent focusEvent1 = new FocusEvent(component0, 12, true, component0);
      jDayChooser0.focusGained(focusEvent1);
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setEnabled(true);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, '`', '`', '`', '`', '`');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      String[] stringArray0 = new String[13];
      stringArray0[0] = "A?";
      stringArray0[1] = "day";
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.696330122953393
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      assertEquals(1, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      jDayChooser1.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9831644895092557
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      Date date1 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.drawDays();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      boolean boolean1 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.8961408868334586
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setWeekdayForeground((Color) null);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertNull(color0);
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, int0);
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.801680933862038
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      System.setCurrentTimeMillis((-2076L));
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      jDayChooser1.isWeekOfYearVisible();
      assertEquals(31, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.sundayForeground;
      jDayChooser0.setForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(164, color0.getRed());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.097359124239373
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      System.setCurrentTimeMillis(4294976989L);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 927, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1127);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = SwingConstants.BOTTOM;
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.133789948455545
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(389);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
