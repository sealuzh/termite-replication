/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 02:17:17 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3530995795144536
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775127L);
      Long.valueOf(100L);
      Range range1 = Range.of(100L, 9223372036854775127L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.061245653757834
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.of((-2147483648L));
      range0.equals(range0);
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5095879969302297
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-1560L));
      Range range1 = Range.of((-1560L), 288L);
      long long0 = range1.getEnd();
      assertEquals(288L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775127L);
      Long.valueOf(248L);
      Range range1 = Range.of(248L, 9223372036854775127L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.8743355392245067
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2L), 636L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 127L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
      
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(127L, long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3876979611047213
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.632604042518745
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483646L, long0);
      
      Range range1 = Range.ofLength(9223372036854775681L);
      assertFalse(range1.isEmpty());
      
      Long long1 = new Long(2147483646L);
      Range range2 = Range.of(2147483647L, 9223372036854775681L);
      Range range3 = Range.of(2147483647L, 2147483646L);
      boolean boolean0 = range2.equals(range3);
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      boolean boolean1 = range3.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertTrue(range3.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-9L), (-9L));
      range0.isEmpty();
      Range.of(9L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.6808399702521157
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.ofLength(127L);
      Range.of(127L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Range range1 = null;
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.717400898614511
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(9223372036854775681L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775681L, long0);
      
      Range range1 = Range.ofLength(9223372036854775681L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(range1.isEmpty());
      
      Long.valueOf(9223372036854775681L);
      Range range2 = Range.of(2147483647L, 9223372036854775681L);
      Range range3 = Range.of(2147483647L, 9223372036854775681L);
      boolean boolean1 = range2.equals(range3);
      assertFalse(boolean1 == boolean0);
      
      Range range4 = Range.of(2147483647L);
      assertFalse(range4.isEmpty());
      
      List<Range> list0 = range0.complement(range3);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4535914753674404
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775127L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775127L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1363 would make range [9223372036854775127 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.979024296846825
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 186L, 186L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 186L, 186L);
      range1.complement(range0);
      range0.equals(range_CoordinateSystem1);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, (-1L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      Range.Comparators.values();
      String string0 = range0.toString();
      assertEquals("[ -1 .. -2 ]/0B", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 186L, 186L);
      range0.split(3105L);
      range0.equals((Object) null);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.511494513260857
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range0.equals(range_CoordinateSystem0);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, (-1L));
      range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(0L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-1560L));
      Range range1 = Range.of((-2454L));
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.386182706029501
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.of((-1358L), 2147483647L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.6694998147463753
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 43L, 43L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(43L);
      Range range2 = Range.ofLength(43L);
      boolean boolean0 = range1.equals(range2);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range range3 = Range.of(43L, 43L);
      //  // Unstable assertion: assertNotSame(range3, range0);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(3670L);
      Range range1 = Range.ofLength(2882L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.907999545723374
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = Range.of(32767L, 32767L);
      Range.Builder range_Builder0 = new Range.Builder();
      range1.iterator();
      Range.Builder range_Builder1 = new Range.Builder(32767L, 32767L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      List<Range> list0 = range1.split(32767L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.contains(range0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.44318584633436
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775127L);
      Range range1 = Range.of(9223372036854775127L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.7943171091654238
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.equals((Object) null);
      Long long0 = new Long((-1918L));
      Object object0 = new Object();
      Range range1 = Range.ofLength(2147483647L);
      range0.complement(range1);
      range0.equals(range1);
      Object object1 = new Object();
      range0.equals("");
      Range.ofLength(4294966129L);
      Range.of(2147483647L, 4294966129L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.543299943835891
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(1176L, 4294967307L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.268991599937623
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(1176L, 4294967258L);
      Range range1 = Range.ofLength(1176L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.split(1176L);
      assertTrue(list0.contains(range1));
      assertEquals(1, list0.size());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.451924225405579
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-321L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-2031L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.toString(range_CoordinateSystem0);
      Range.Builder range_Builder2 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2031 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.327595366528126
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(9223372036854775127L, 9223372036854775127L);
      Object object0 = new Object();
      Range range1 = Range.of(4294966119L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.split(4294966119L);
      assertTrue(list0.contains(range1));
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.440563010174192
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long((-3010L));
      range0.equals((Object) null);
      Range range1 = Range.of((-3010L));
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range0));
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range1));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.7169857662729404
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(9223372036854775667L);
      Long long0 = new Long(9223372036854775667L);
      range0.equals(long0);
      Range range1 = Range.of((-1358L), (-1358L));
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1358 would make range [9223372036854775667 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.644151176986761
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.of((-1L), 65535L);
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-1921L), (-1L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4413333891043285
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(2147483647L);
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      range_Builder0.shift((-323L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range2 = range_Builder1.build();
      String string0 = range1.toString();
      //  // Unstable assertion: assertTrue(range1.equals((Object)range2));
      //  // Unstable assertion: assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      //  // Unstable assertion: assertNotSame(range1, range2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.7555584669554936
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.ofLength(9223372036854775681L);
      Long long0 = new Long(2147483646L);
      Range range1 = Range.of(2147483647L, 9223372036854775681L);
      Range range2 = Range.of(2147483647L, 2147483646L);
      range1.equals(range2);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range3 = range_Builder0.build();
      assertFalse(range3.equals((Object)range1));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.6342283931443395
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(1176L, 9223372036854775125L);
      Object object0 = new Object();
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7957357779255525
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.isEmpty();
      Object object0 = new Object();
      boolean boolean1 = range0.equals(range0);
      assertTrue(boolean1 == boolean0);
      
      Range range1 = Range.ofLength(0L);
      range0.complement(range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.721539554935058
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(9223372036854775687L);
      range0.split(9223372036854775687L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-926L), (-926L));
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -926 would make range [9223372036854775687 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(2089L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(65590L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.5490956852982434
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775127L);
      Range range1 = Range.of(9223372036854775128L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(1281L);
      Long long0 = new Long((-9223372036854775808L));
      Range range1 = Range.of(1281L);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.ofLength(65535L);
      Long long0 = new Long(65535L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2025556956077046
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.of(186L, 762L);
      Range range0 = Range.of(762L, 762L);
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(9223372036854775681L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      range0.equals(long0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.8626263583660223
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.ofLength(0L);
      range1.isSubRangeOf(range0);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-2205L), 0L);
      range2.toString(range_CoordinateSystem1);
      range0.isEmpty();
      long long0 = 1L;
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      range0.intersects(range2);
      // Undeclared exception!
      range2.split(1L);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.134006824564753
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-2147483659L));
      Object object0 = new Object();
      List<Range> list0 = range0.split(1L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.08332035538405
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.ofLength(4294967295L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3306492414921136
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-1L), 4294967295L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854772103L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-32774L));
      range0.getLength();
      range0.equals((Object) null);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.1792007145348498
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-127L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.5887383058928766
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L));
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.1349250982103
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(1176L);
      range0.startsBefore(range0);
      Range range1 = Range.of(4225L);
      range1.equals(range0);
      Range range2 = Range.ofLength(255L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.977660272976407
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(214L, 214L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      
      range0.split(65597L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.462973389226051
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(1176L, 1176L);
      Range.of((-62L), 1176L);
      Range range1 = Range.ofLength(1176L);
      range1.startsBefore(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3313818422247143
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1208L, 32767L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(255L);
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-1808L));
      range_Builder0.contractBegin(32767L);
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder2.build();
      String string0 = range0.toString();
      assertEquals("[ 33975 .. 34320 ]/0B", string0);
      
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
      
      List<Range> list0 = range0.split(255L);
      assertFalse(list0.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ 33975 .. 34320 ]/0B", range_CoordinateSystem0);
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.1518643310039365
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(9223372036854775127L);
      Range range1 = Range.of(9223372036854775127L);
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-1560L));
      Range range1 = Range.of((-1560L));
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-747L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 65595L, 65595L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.061245653757834
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-32784L), 29886L);
      Range range1 = Range.of((-32784L));
      Range.of((-32784L));
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of(29886L, (-32784L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.457663386901383
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = new Object();
      Range.of((-838L), (-838L));
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.589985370905883
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(1176L, 1176L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1176L, 4225L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Range.of(32512L);
      Range range2 = Range.of(3007L);
      List<Range> list0 = range0.split(3007L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      
      String string0 = range1.toString();
      assertEquals("[ 1175 .. 4224 ]/0B", string0);
      
      range1.getBegin();
      Range range3 = Range.parseRange("[ 1175 .. 4224 ]/0B");
      Range range4 = Range.parseRange("[ 1175 .. 4224 ]/0B");
      range2.equals(range4);
      assertSame(range4, range3);
      
      Long long0 = new Long(1176L);
      boolean boolean1 = range2.equals(long0);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.6332317724902357
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(2882L);
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2883L, long0);
      
      Range range1 = Range.ofLength(101L);
      range1.isSubRangeOf(range0);
      assertFalse(range1.isEmpty());
      
      Long long1 = new Long(2882L);
      Range range2 = Range.of(2882L, 2883L);
      Range range3 = Range.of((-2147483648L), 2882L);
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
      
      range0.iterator();
      range3.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = range3.getBegin(range_CoordinateSystem1);
      assertEquals((-2147483648L), long2);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(762L);
      Range range1 = Range.of(619L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.8478157753716573
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 10L, 10L);
      Range range1 = Range.of(range_CoordinateSystem0, (-5L), 214L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.2068395473491833
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(9223372036854775127L, 9223372036854775127L);
      Range range1 = Range.of(9223372036854775127L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.587774479502105
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.isEmpty();
      Object object0 = new Object();
      Range range1 = Range.of((-1101L), (-1101L));
      Range range2 = Range.of(0L, 1460L);
      range2.getEnd();
      Range range3 = range1.intersection(range0);
      range3.iterator();
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Q", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Q into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3844894049549885
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range1 = Range.of(1L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.4398518232031376
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 186L, 186L);
      range0.split(3105L);
      Range range1 = Range.of(2147483647L, 9223372036854775807L);
      range1.intersects(range0);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(1176L, 9223372036854775127L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.1356178217257975
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(1176L, 1176L);
      Object object0 = new Object();
      range0.equals(object0);
      List<Range> list0 = range0.split(1176L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.5424816213968913
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(1208L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of((-511L), 32767L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.4775764813786965
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-213L));
      range0.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.388188351782628
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(9223372036854775667L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 9223372036854775667 .. 9223372036854775668 ]/SB", string0);
      
      Range.CoordinateSystem.values();
      Long.getLong("", 3371L);
      Range range1 = Range.parseRange("[ 9223372036854775667 .. 9223372036854775668 ]/SB");
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      long long0 = range0.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(9223372036854775667L, long0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Long long0 = new Long((-2147483648L));
      range0.equals(long0);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(2095L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.667717190318361
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775127L);
      Range range1 = Range.of(9223372036854775127L);
      range0.equals(range1);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.contains(range1));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.409002618102703
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.ofLength(9223372036854775127L);
      Range.of(9223372036854775127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775127L, (-1361L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1362 would make range [9223372036854775126 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1606L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1606 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = 1176L;
      Range range0 = Range.ofLength(1176L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.5873928183218178
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.723591618902321
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.4969927331173896
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775141L);
      Range.of(9223372036854775141L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775141L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1335 would make range [9223372036854775141 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(1190L, 9223372036854775127L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.500276762908039
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-9L), (-9L));
      range0.isEmpty();
      Range range1 = Range.of((-27L));
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.133033233229716
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-18L), (-18L));
      boolean boolean0 = range0.isEmpty();
      Range range1 = Range.of((-7L));
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(6264L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-32767L), long0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.4132920168729
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(1176L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.633593075244739
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(2034L);
      List<Range> list0 = range0.split(2034L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      assertEquals(1, list0.size());
      assertTrue(list1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.492390221294595
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long((-3010L));
      Object object0 = new Object();
      Range range1 = Range.of((-3010L), (-987L));
      range1.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range1.endsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.intersects(range0);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.3006853165187846
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.of((-2147483605L));
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483605L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-128L), 9223372034707292161L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.321410915164367
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(0L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      Range range1 = Range.of(4225L);
      Range range2 = Range.of(4225L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      List<Range> list0 = range2.split(804L);
      assertTrue(list0.contains(range1));
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.0655582509323094
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.6793199244197097
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-29L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      range_Builder0.shift((-29L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder0.build();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.653556397963837
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2692L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.4073117511820032
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775127L);
      Range range1 = Range.of(9223372036854775127L);
      range1.startsBefore(range0);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("h9~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse h9~ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(962L);
      Long long0 = new Long(962L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.5873928183218178
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range0.complement(range1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-1800L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.482276946927626
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.ofLength(1176L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.1968824804758986
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 186L, 186L);
      range0.isEmpty();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.375961096566773
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(52L, 255L);
      range0.getBegin();
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.4406221852733103
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(3279L);
      Range range1 = Range.ofLength(3279L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.ofLength(648L);
      // Undeclared exception!
      try { 
        range0.split((-791L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-368L), (-368L));
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.059202231024756
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-29L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-29L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(32767L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(9223372036854775687L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.35944788412389
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-1074L), 2112L);
      String string0 = range0.toString();
      assertEquals("[ -1074 .. 2112 ]/0B", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.344292841368524
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.498913660254054
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of(1176L, 1176L);
      Range range1 = Range.of(1176L, 1176L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertSame(range1, range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.5888003008919465
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(920L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.9778643962668743
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(9223372036854775681L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.0543110595891974
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(22L, 22L);
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.5427042559052397
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-29L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-29L), (-29L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertSame(range1, range0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.663899808048474
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-29L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-2147483648L));
      range_Builder0.expandBegin((-760L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.contractBegin((-3266L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.of(32767L);
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.shift(32767L);
      assertSame(range_Builder1, range_Builder2);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.358831551304167
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.of((-552L), (-552L));
      Range.Builder range_Builder0 = new Range.Builder((-552L), (-552L));
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 465L, 33113L);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(346L, (-3219L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.2474621865397753
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getBegin();
      assertEquals((-32768L), long0);
      
      long long1 = range0.getLength();
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.218138826073275
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 43L, 43L);
      range0.toString(range_CoordinateSystem0);
      range0.getLength();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(1411L, 1411L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1412L, long0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.655331315602514
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 186L, 186L);
      Range range1 = Range.of(186L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
      
      Range.Comparators.values();
      range0.intersection(range1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.6270667273478656
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 267L, 267L);
      Range range1 = Range.ofLength(267L);
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.681095545078155
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.54145624532784
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      long long0 = range0.getEnd();
      assertEquals((-2147483648L), long0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      assertSame(range1, range0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.2457458690955514
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.spliterator();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.2798541081424775
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775690L);
      range0.iterator();
      long long0 = range0.getEnd();
      assertEquals(9223372036854775689L, long0);
      
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.6330311617419575
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.ofLength(65590L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.563918443902542
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of((-1L), 65535L);
      List<Range> list0 = range0.split(65535L);
      assertEquals(2, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.1360270265849555
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of(9223372036854775674L, 9223372036854775674L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.2010324156844576
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.of(9223372036854775687L);
      Long long0 = Long.valueOf(9223372036854775687L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775127L);
      range_Builder0.expandEnd(9223372036854775687L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.133269744238794
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775687L);
      Long long0 = new Long(9223372036854775687L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.4433951378303234
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775127L);
      Range range1 = Range.of(9223372036854775127L, 9223372036854775127L);
      Range range2 = Range.of(9223372036854775127L);
      List<Range> list0 = range2.complement(range0);
      assertTrue(list0.contains(range1));
      assertEquals(1, list0.size());
      
      Object object0 = new Object();
      range2.isSubRangeOf(range0);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.248606238947189
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long(2147483647L);
      Object object0 = new Object();
      Range range1 = Range.of(1L, 2147483647L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.17594182149412
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.ofLength(799L);
      Range range1 = Range.of(799L);
      Range range2 = Range.of(799L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.2691873616955633
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.ofLength(1176L);
      Range range1 = Range.of(1176L, 1176L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      
      List<Range> list0 = range0.split(1176L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.ofLength(476L);
      Long long0 = new Long(476L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.1341068345657535
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of(9223372036854775127L, 9223372036854775127L);
      Range range1 = Range.of(9223372036854775127L);
      boolean boolean0 = range1.isSubRangeOf(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.2459427981487714
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long long0 = (-2147483634L);
      Range.of((-2147483634L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2147483634L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.354100214318228
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(27L);
      Range range0 = Range.of(1384L, 1384L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.466000195883
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 1703L);
      assertFalse(range1.isEmpty());
      
      range_CoordinateSystem0.getAbbreviatedName();
      List<Range> list0 = range0.split(1292L);
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 162
  /*Coverage entropy=3.152991288216747
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.ofLength(65590L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=3.1356178217257975
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range range0 = Range.of(23L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(2147483648L, long0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range range0 = Range.of(4380L);
      assertFalse(range0.isEmpty());
  }
}
