/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 07 18:09:29 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.78489484807327
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-138), (-138));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = JSONObject.quote("XJk)'eB.0/DrcQ");
      assertEquals("\"XJk)'eB.0/DrcQ\"", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{F[8B/;ap]Cj>$!lC#");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {F[8B/;ap]Cj>$!lC#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}@O)cL}SIY!\"u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }@O)cL}SIY!\"u
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Double double0 = new Double(680.534987990879);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9830877585747856
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((String) null, jSONObject0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("M", (Map) hashMap0);
      JSONObject jSONObject2 = (JSONObject)jSONObject1.remove("M");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("6U", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("getreplaceAll", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "cgAvHV*+qFLK");
      long long0 = jSONObject0.optLong("cgAvHV*+qFLK", (-696L));
      assertEquals((-696L), long0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Null key.", 555);
      long long0 = jSONObject1.optLong("Null key.");
      assertEquals(555L, long0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7078761950506254
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.put("*un*wd9^p", (-1214.3260053184981));
      long long0 = jSONObject0.optLong("*un*wd9^p");
      assertEquals(3, jSONObject0.length());
      assertEquals((-1214L), long0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put("isreplace", jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("Weee~wAW", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("Weee~wAW");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("M,t{|a+S:-JW/j", 16);
      assertEquals(16, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("1", (-714));
      assertEquals((-714), int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getremainderUnsigned", 209);
      int int0 = jSONObject0.optInt("getremainderUnsigned");
      assertEquals(209, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7405117043237692
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("DZMz6&!9:kxy[", (long) (-103));
      int int0 = jSONObject1.optInt("DZMz6&!9:kxy[");
      assertEquals(3, jSONObject0.length());
      assertEquals((-103), int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("wheel.json.JSONException", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("gIn]oM(.%~^LS", (-903.545031313));
      assertEquals((-903.545031313), double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("'", 0.0);
      double double0 = jSONObject0.optDouble("'");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)7);
      jSONObject0.putOpt("$MwSM21Nb}:pU", byte0);
      double double0 = jSONObject0.optDouble("$MwSM21Nb}:pU");
      assertEquals(1, jSONObject0.length());
      assertEquals(7.0, double0, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("] is not a Boolean.", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (-562.4));
      Object object0 = jSONObject0.opt("");
      assertEquals((-562.4), object0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("isparseByte", "1");
      boolean boolean0 = jSONObject0.has("isparseByte");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("OWv@ttb%Ke>5(&zG", "OWv@ttb%Ke>5(&zG");
      String string0 = jSONObject1.getString("OWv@ttb%Ke>5(&zG");
      assertNotNull(string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put("isreplace", jSONObject0);
      jSONObject0.put("Weee~wAW", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("Weee~wAW");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9792045174343245
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("isparseByte", "1");
      int int0 = jSONObject0.getInt("isparseByte");
      assertEquals(1, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9251211907908186
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Short short0 = new Short((short) (-1138));
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.put("wheel.json.JSONArray", 0.0);
      double double0 = jSONObject0.getDouble("wheel.json.JSONArray");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("bH>}mdKymzMJbP>q", (-859.3921388427166));
      double double0 = jSONObject0.getDouble("bH>}mdKymzMJbP>q");
      assertEquals((-859.3921388427166), double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("] not found.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-2361), 4821);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7802938398421952
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.put("", (Object) jSONObject0);
      // Undeclared exception!
      jSONObject0.toString(320, 47);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      hashMap0.put((Object) null, jSONObject0);
      jSONObject0.put("\t", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-154), (-154));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9974448875939759
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject1 = jSONObject0.put("ggtBoolean", (Map) hashMap0);
      jSONObject0.accumulate("ggtBoolean", jSONObject1);
      // Undeclared exception!
      jSONObject0.toString(14);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Float float0 = new Float(1.0);
      Double double0 = new Double(1.0);
      hashMap0.put(float0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.469483727358999
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "RDA[");
      try { 
        jSONObject0.getLong("RDA[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"RDA[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0732573526251707
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-3167.2185928257145");
      String string0 = jSONObject0.toString(233);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(hashMap0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(32, 32);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.4298983731002692
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put(" of ", (double) 32);
      jSONObject1.optString(" of ", " of ");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("cX'", 2903L);
      double double0 = jSONObject1.optDouble("cX'", (double) 2903L);
      assertEquals(2903.0, double0, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("false");
      assertNull(object0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = Integer.valueOf(3);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9792045174343245
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("-746", "-746");
      long long0 = jSONObject1.getLong("-746");
      assertEquals((-746L), long0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.706909392987053
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "v+;*qmlldE8>/A??");
      JSONObject jSONObject0 = new JSONObject("v+;*qmlldE8>/A??", stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("v+;*qmlldE8>/A??", "v+;*qmlldE8>/A??");
      try { 
        jSONObject1.getInt("v+;*qmlldE8>/A??");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"v+;*qmlldE8>/A??\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\fEy@[yj|dJ[D}", (-1783));
      int int0 = jSONObject0.getInt("\fEy@[yj|dJ[D}");
      assertEquals((-1783), int0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("get", "get");
      try { 
        jSONObject1.getDouble("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8200759753606217
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("tri", true);
      boolean boolean0 = jSONObject0.getBoolean("tri");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("-746", "-746");
      try { 
        jSONObject1.getBoolean("-746");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-746\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("-746", false);
      boolean boolean0 = jSONObject0.getBoolean("-746");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("to", jSONObject0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.get("to");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{!\"Gv=vv.~z$$e~1");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {!\"Gv=vv.~z$$e~1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("L|S710%[As 1s{6E<0w");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of L|S710%[As 1s{6E<0w
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("getopt", 57L);
      assertEquals(57L, long0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("T!K>41rTM>", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("M");
      assertNull(object0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.3986496111888456
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("<0d)FZnLZ'm[?", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.4849258911092231
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.7280868748471145
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0, 65, (-1443));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6675489389448948
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("%K>S", (Object) hashMap0);
      String string0 = jSONObject0.toString((-3608), 120);
      assertNotNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 3, (-2071));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 115, 115);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7870020467612302
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(2, 2);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6583656821534862
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "cgAvHV*+qFLK");
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt(",", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = JSONObject.quote("vl';zPE</?");
      assertEquals("\"vl';zPE<\\/?\"", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = JSONObject.quote("fr+!i1(<\ni1$7qL");
      assertEquals("\"fr+!i1(<\\ni1$7qL\"", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.quote(")UwkT@ws9\"`_u@p{6l");
      assertEquals("\")UwkT@ws9\\\"`_u@p{6l\"", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("\fEy@[yj|dJ[D}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1894736293243366
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("\t");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("UI*ENwEI_v", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("dou", "dou");
      jSONObject0.optString("dou");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Weee~wAW", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("Weee~wAW");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("istrim");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer integer0 = new Integer(45);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put("", (Collection) null);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("g3=co:yValueOf");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("`n,XSXGPIi~\"7)[", (long) (-2628));
      double double0 = jSONObject0.optDouble("`n,XSXGPIi~\"7)[");
      assertEquals((-2628.0), double0, 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float float0 = new Float(0.90890944F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5406465859104317
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put(" of ", (double) 32);
      long long0 = jSONObject1.getLong(" of ");
      assertEquals(2, jSONObject0.length());
      assertEquals(32L, long0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Weee~wAW", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("Weee~wAW");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.3961001489141087
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isparseDouble", (-1.0));
      try { 
        jSONObject0.getJSONObject("isparseDouble");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isparseDouble\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("[4BW", "[4BW");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("[4BW");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("get", 1289L);
      try { 
        jSONObject1.getJSONArray("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      int int0 = jSONObject1.optInt("", (-1719));
      assertEquals(0, int0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.7202025435261348
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("istoArray", "istoArray");
      int int0 = jSONObject0.optInt("istoArray");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.5406465859104317
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 32);
      double double0 = jSONObject1.getDouble("");
      assertEquals(2, jSONObject0.length());
      assertEquals(32.0, double0, 0.01);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.580649125069464
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("qu", (Object) "qu");
      long long0 = jSONObject1.optLong("qu");
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.0692024658203625
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("S{jyy8#<", true);
      boolean boolean0 = jSONObject1.optBoolean("S{jyy8#<");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2624.14856122301));
      assertEquals("-2624.14856122301", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-746.0));
      assertEquals("-746", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.991509361356614
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", (Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject1.accumulate("wheel.json.JSONException", boolean0);
      jSONObject0.append("wheel.json.JSONException", jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", (Map) hashMap0);
      try { 
        jSONObject0.append("wheel.json.JSONException", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[wheel.json.JSONException] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.put("-2624.14856122301", (Collection) linkedList0);
      jSONObject0.accumulate("-2624.14856122301", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      try { 
        jSONObject0.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-562.4));
      Short short0 = new Short((short)788);
      jSONObject1.accumulate("", short0);
      jSONObject1.optJSONArray("");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double double0 = new Double((-159.7832413));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = new Boolean("AXlH-kow(pdqG#)ljk");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      String string0 = jSONObject0.optString("23UI[-)7k?fUgJ/s(", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{+='}I]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 7 of {+='}I]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.863679987341
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("isparseDouble", object0);
      boolean boolean0 = jSONObject0.isNull("isparseDouble");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.791759469228055
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isparseDouble", (-1.0));
      boolean boolean0 = jSONObject0.isNull("isparseDouble");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "v+;*qm{ldE8>/>A??");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 321);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.1894736293243366
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("\b");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("1UMZ?J2kn*EPw");
      assertEquals("", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.581573107414146
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Weee~wAW", (Map) hashMap0);
      try { 
        jSONObject0.getBoolean("Weee~wAW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Weee~wAW\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "is");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 180.4337106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("U8IlR\"A", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2225L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("`v^DN}wuah5E<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`v^DN}wuah5E<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("isparseByte");
      assertFalse(boolean0);
  }
}
