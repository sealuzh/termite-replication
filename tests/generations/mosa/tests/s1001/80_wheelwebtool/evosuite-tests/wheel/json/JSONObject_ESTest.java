/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 20:12:55 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5734259394367505
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 233.875F);
      Float.sum(233.875F, 233.875F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string0 = "V;N%lv";
      Float.min(1, (-1165.4F));
      JSONObject.valueToString(jSONObject0, 1, (-1408));
      JSONObject jSONObject1 = jSONObject0.putOpt("V;N%lv", "V;N%lv");
      jSONObject1.optDouble("{\n\"java.lang.String@0000000011\": java.lang.Integer@0000000012,\n\"java.lang.String@0000000013\": java.lang.Integer@0000000014,\n\"java.lang.String@0000000004\": java.lang.Float@0000000005,\n\"java.lang.String@0000000017\": java.lang.Integer@0000000018,\n\"java.lang.String@0000000002\": java.lang.Float@0000000003,\n\"java.lang.String@0000000006\": java.lang.Float@0000000007,\n\"java.lang.String@0000000019\": \"java.lang.Class@0000000020\",\n\"java.lang.String@0000000015\": java.lang.Integer@0000000016\n}");
      jSONObject0.optLong("p");
      JSONObject jSONObject2 = jSONObject0.put("CMI#v}", (-2539L));
      try { 
        jSONObject2.getJSONObject("VZm#)L0@h=\":dZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VZm#)L0@h=\\\":dZ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9133137678625887
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Byte byte0 = new Byte((byte)32);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optBoolean("] is not a Boolean.");
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 418L);
      JSONObject.valueToString(jSONObject1, (byte)32, (byte)32);
      Byte byte1 = new Byte((byte)32);
      JSONObject jSONObject2 = jSONObject1.putOpt("] is not a Boolean.", byte1);
      int int0 = jSONObject2.optInt("] is not a JSONObject.");
      assertEquals(3, jSONObject1.length());
      assertEquals(418, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3624183070083653
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-83));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.accumulate("C", byte0);
      jSONObject1.getInt("C");
      boolean boolean0 = jSONObject0.optBoolean("JSON does not allow non-finite numbers.");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0463903222500655
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, (-2598), (-2598));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      try { 
        jSONObject1.getJSONArray("va");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"va\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.902262542586821
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-51));
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((byte) (-51));
      JSONObject jSONObject1 = jSONObject0.putOpt("null", long0);
      jSONObject1.getLong("null");
      JSONObject.getNames(jSONObject0);
      jSONObject0.optLong("null");
      String string0 = JSONObject.valueToString(long0, 114, 438);
      assertNotNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7224533248940002
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "false";
      JSONObject jSONObject1 = jSONObject0.accumulate("false", "false");
      jSONObject1.getBoolean("false");
      JSONObject.getNames(jSONObject0);
      int int0 = (-101);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-101));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.881674586918941
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "t";
      stringArray0[1] = "Y6T]~R%wa>/y:Ar`";
      stringArray0[2] = ",\n";
      stringArray0[3] = "D|lb";
      stringArray0[4] = "jA1IngZ:aQvJ-q?D#z.";
      stringArray0[5] = "";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optDouble("getvalueOf", (-1170.541953817606));
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Float float0 = new Float(3897.1422528977564);
      JSONObject jSONObject2 = jSONObject1.append("", float0);
      jSONObject2.optDouble("D|lb");
      jSONObject2.getJSONArray("");
      jSONObject1.toString(57, 57);
      try { 
        jSONObject0.getLong("Y6T]~R%wa>/y:Ar`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Y6T]~R%wa>/y:Ar`\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(2147483645, 2147483645);
      String string0 = JSONObject.doubleToString(2147483645);
      assertEquals("2.147483645E9", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "C{R0gFMqZ##v`,";
      JSONTokener jSONTokener0 = new JSONTokener("C{R0gFMqZ##v`,");
      jSONTokener0.nextClean();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of C{R0gFMqZ##v`,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4120708684858494
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("[]");
      jSONObject0.accumulate("[]", boolean0);
      boolean boolean1 = jSONObject0.getBoolean("[]");
      assertFalse(boolean1);
      
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject1);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3213685429259527
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(2133, (Collection) linkedList0);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 105, 105);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)825);
      JSONObject.numberToString(short0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Short@0000000002", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("java.lang.Short@0000000002");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("true", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("true");
      jSONObject2.remove("true");
      JSONObject jSONObject3 = jSONObject0.put("true", 0L);
      assertNotSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Double double0 = new Double(0.041118433971561695);
      String string0 = "{8%3TcAC&b|rP";
      JSONTokener jSONTokener0 = new JSONTokener("{8%3TcAC&b|rP");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 13 of {8%3TcAC&b|rP
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double((-1726.9522033798949));
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1021915356225063
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("2EG0I", object0);
      jSONObject1.toString();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject2 = jSONObject0.put("{\"java.lang.String@0000000002\":null}", object0);
      jSONObject2.toString((-2439), (-2439));
      JSONObject jSONObject3 = new JSONObject("{\n\"java.lang.String@0000000003\": null,\n\"java.lang.String@0000000002\": null\n}");
      String string0 = jSONObject0.getString("2EG0I");
      String string1 = JSONObject.quote("{\n\"java.lang.String@0000000003\": null,\n\"java.lang.String@0000000002\": null\n}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8760902794872374
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString((-2439), (-2439));
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      String string0 = JSONObject.valueToString(jSONObject1, (-2439), (-2439));
      String string1 = JSONObject.quote("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1567513521784605
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)32);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a Boolean.", byte0);
      jSONObject1.getLong("] is not a Boolean.");
      boolean boolean0 = jSONObject0.optBoolean("^QSpb&>u ~>;7sO`T", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put((Object) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = (-2412);
      // Undeclared exception!
      try { 
        jSONObject0.toString(1375, (-2412));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("=ZN{");
      JSONObject jSONObject1 = jSONObject0.accumulate("=ZN{", boolean0);
      boolean boolean1 = jSONObject1.optBoolean("=ZN{", true);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject("{}");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{9cW;<f}6|*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {9cW;<f}6|*
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.515861944689119
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      JSONObject.getNames(object1);
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optString("", "");
      StringWriter stringWriter0 = new StringWriter(3158);
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1274044717862095
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("puPS", "puPS");
      jSONObject0.getString("puPS");
      JSONObject jSONObject1 = jSONObject0.accumulate("puPS", "puPS");
      try { 
        jSONObject1.getBoolean("puPS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"puPS\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("uW)", jSONArray0);
      jSONObject0.append("uW)", jSONArray0);
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6860593375545356
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "gelquote");
      jSONObject0.optLong("gelquote");
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      jSONObject0.toString(1013);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("puPS", "puPS");
      JSONObject jSONObject2 = jSONObject1.accumulate("puPS", jSONObject0);
      try { 
        jSONObject2.getBoolean("puPS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"puPS\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.066421592262631
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "joi";
      JSONObject jSONObject1 = jSONObject0.put("joi", 92);
      jSONObject1.getDouble("joi");
      jSONObject0.optBoolean("joi");
      try { 
        jSONObject1.append("joi", "joi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[joi] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3128868859883
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", true);
      jSONObject1.remove("' and instead saw '");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.7709929093876201
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray0.put(1260, (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject1.toJSONArray(jSONArray0);
      Long long0 = new Long(1260);
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("CP*B", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.56706033485134
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Short short0 = new Short((short)39);
      Object object1 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object1, (short)39, 1401);
      jSONObject0.put("null", (Object) linkedList0);
      jSONObject0.toString((int) (short)39, (int) (short)39);
      Float float0 = new Float((double) 1401);
      JSONObject.getNames((Object) float0);
      String string1 = JSONObject.quote("{\n                                                                              \"java.lang.String@0000000005\": [],\n                                                                              \"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"\n                                       }");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6680336709356518
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOpt("og88gSW,s|y>", (Object) null);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7234324589767334
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("l$RyT/*k:y-,S", 3314.6876832512);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = jSONObject0.getInt("l$RyT/*k:y-,S");
      assertEquals(3314, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.112704644485289
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("oBf-+%C-4(r}'g_", "oBf-+%C-4(r}'g_");
      try { 
        jSONObject1.getBoolean("oBf-+%C-4(r}'g_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"oBf-+%C-4(r}'g_\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7419822783982568
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("D4pz.jA-/P-)LJ9", (-88.9686));
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (-824L));
      jSONObject1.getDouble("] is not a number.");
      jSONObject1.optDouble("getgetChars");
      try { 
        jSONObject0.getJSONObject("java.lang.Long@0000000004.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@0000000004.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.470729941163138
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("#6oU", 0);
      jSONObject1.getDouble("#6oU");
      String[] stringArray0 = new String[10];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean.valueOf(" $Wa%7:>1;n");
      jSONObject0.put("\"wM95{ ", (Collection) linkedList0);
      jSONObject0.optJSONArray("\"wM95{ ");
      jSONObject0.names();
      Iterator iterator1 = jSONObject0.keys();
      assertNotSame(iterator1, iterator0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0031132476971447
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getquote");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject1 = jSONObject0.put("getequals", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      Writer writer1 = jSONObject1.write(writer0);
      assertSame(writer0, writer1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1166128048630464
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("!A0\")/", true);
      jSONObject0.names();
      try { 
        jSONObject0.getInt("!A0\")/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!A0\\\")/\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9330436228738463
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject.doubleToString(122.64805584876841);
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.append("122.64805584876841", double0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("122.64805584876841");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0723000599670853
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.putOpt("K%VmS$iKrXB!@", integer0);
      jSONObject2.getInt("K%VmS$iKrXB!@");
      Integer.compare((-1253), (-1253));
      jSONObject2.toString(0, (-1253));
      JSONObject jSONObject3 = jSONObject1.append("null", jSONObject0);
      jSONObject2.keys();
      jSONObject1.optLong("dEPp-m)*Y-Ly!s&5b");
      jSONObject3.optString("0ds$E");
      jSONObject0.optDouble("K%VmS$iKrXB!@");
      JSONObject jSONObject4 = new JSONObject();
      try { 
        jSONObject4.getBoolean("civ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"civ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8036641842872083
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ww9?dL&4|d;T6j4Z", true);
      JSONObject.valueToString(jSONObject0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.7927105325986603
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("joi", 3);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject2.optBoolean("|:xui~1");
      Double double0 = new Double((-3050.04261458442));
      JSONObject jSONObject3 = jSONObject0.append("n:^aPVG+:KLH<S", double0);
      jSONObject2.keys();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "n:^aPVG+:KLH<S";
      JSONObject jSONObject4 = new JSONObject("|:xui~1", stringArray0);
      jSONObject4.optLong("n:^aPVG+:KLH<S");
      jSONObject3.optDouble("joi");
      try { 
        jSONObject2.getBoolean("n:^aPVG+:KLH<S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n:^aPVG+:KLH<S\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.357285019952196
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("A JSONObject text must end with '}'", (Object) null);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4572926768921821
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("/TkCf!=nCt", 0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.getBoolean("/TkCf!=nCt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/TkCf!=nCt\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.1422366498954215
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getquote");
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 2728, (-2598));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "!";
      jSONObject0.accumulate("!", "!");
      try { 
        jSONObject0.getDouble("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.3536926991390703
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject.valueToString(hashMap0, 102, 5);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      try { 
        jSONObject0.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator.identity();
      JSONObject.valueToString(hashMap0, 12, 12);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("getsubList");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getsubList
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Integer integer0 = new Integer(57);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put("{EH7G'i%o7}", (double) 57);
      long long0 = jSONObject0.optLong("{EH7G'i%o7}");
      assertEquals(57L, long0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "HpuPS";
      JSONObject jSONObject1 = jSONObject0.accumulate("HpuPS", "HpuPS");
      try { 
        jSONObject1.getLong("HpuPS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HpuPS\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("aq", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = JSONObject.quote("*C7");
      assertEquals("\"*C7\"", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.4252920579420665
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("jYi", 92);
      boolean boolean0 = new Boolean("jYi");
      jSONObject1.append("#1)?x>%wZX@)", "jYi");
      jSONObject0.keys();
      long long0 = jSONObject0.optLong("#1)?x>%wZX@)");
      assertEquals(0L, long0);
      
      String string0 = jSONObject1.optString("jYi");
      jSONObject1.opt("pu");
      String string1 = jSONObject1.optString("jYi", "jYi");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.6721708036977385
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.accumulate("2%#.;qO", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.getBoolean("2%#.;qO");
      jSONObject1.optBoolean("2%#.;qO", true);
      jSONObject1.optString("2%#.;qO");
      assertTrue(boolean0.equals((Object)boolean1));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("0 fm+y*LK N@@F7g", stringArray0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "0 fm+y*LK N@@F7g");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.193877669746141
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Y&Z~|\"U^QU0_yqni", "Y&Z~|\"U^QU0_yqni");
      try { 
        jSONObject1.append("Y&Z~|\"U^QU0_yqni", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Y&Z~|\"U^QU0_yqni] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.3199044298479494
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("2%#.;qO", object0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.opt("2%#.;qO");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("joi", 92);
      jSONObject0.optBoolean("joi");
      jSONObject1.optDouble("joi", (double) 92);
      Integer integer0 = new Integer(92);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(integer0, 9, 9);
      assertNotNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.953093269754322
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      jSONObject0.put("] is not a number.", (-824L));
      String[] stringArray0 = new String[3];
      stringArray0[1] = "] is not a number.";
      double double0 = jSONObject0.optDouble("] is not a number.");
      assertEquals((-824.0), double0, 0.01);
      
      String string0 = JSONObject.quote("5W,rV@");
      assertEquals("\"5W,rV@\"", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-18607958), 47);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0E", false);
      try { 
        jSONObject0.getJSONArray("0E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0E\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(2, jSONArray1.length());
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.434799037944202
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      jSONObject0.opt("{}");
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)2720);
      JSONObject jSONObject2 = new JSONObject(short0, stringArray0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject3 = jSONObject2.accumulate("v4$O#$22QQ7wY3rOP", boolean0);
      boolean boolean1 = jSONObject3.optBoolean("{}", true);
      assertTrue(boolean1);
      assertEquals(1, stringArray0.length);
      
      Integer integer0 = new Integer((short)2720);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string1 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer("");
      linkedList0.iterator();
      String string0 = JSONObject.valueToString(linkedList0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("JSONArray initial value should be a string or collection or array.", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("put");
      JSONObject jSONObject1 = jSONObject0.accumulate("\"put\"", "\"put\"");
      try { 
        jSONObject1.getJSONObject("\"put\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"put\\\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      String[] stringArray0 = new String[0];
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double((-1216.131521816));
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("getpush", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 10, 10);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "\",\n\"");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, 123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.5428866763466784
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("l;O", true);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Object object0 = jSONObject0.get("l;O");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 2376, 2376);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0 fm+y*LK N@@F7g", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.7443659328512955
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = JSONObject.quote("(!w%X=/M?dIJW");
      assertEquals("\"(!w%X=/M?dIJW\"", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.quote("&/@}V>C6T&E)b,V");
      assertEquals("\"&/@}V>C6T&E)b,V\"", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.putOpt("K%VmS$iKrXB!@", integer0);
      jSONObject2.getInt("K%VmS$iKrXB!@");
      String string0 = JSONObject.doubleToString(0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Unclosed comment", "Unclosed comment");
      jSONObject1.optBoolean("Unclosed comment", true);
      int int0 = jSONObject0.optInt("Unclosed comment");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.6617503644104987
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.putOpt("K%VmS$iKrXB!@", integer0);
      jSONObject2.getInt("K%VmS$iKrXB!@");
      Integer.compare((-1253), (-1253));
      jSONObject2.toString(0, (-1253));
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject2.put("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}", (Object) boolean0);
      Byte.toUnsignedInt((byte)90);
      Float float0 = new Float((double) 0);
      JSONObject jSONObject3 = new JSONObject(float0);
      String string0 = jSONObject2.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.432868788124517
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = JSONObject.quote("put");
      assertEquals("\"put\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"put\"");
      jSONObject0.toString((-2075));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0, (-208), (-208));
      assertNotNull(string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      String string0 = jSONObject0.optString("joi", "joi");
      assertEquals("joi", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5094656225315988
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "isformat";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.8256853598598344
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      jSONObject0.optDouble("E");
      jSONObject0.toString();
      jSONObject0.opt("{}");
      JSONObject jSONObject1 = new JSONObject(hashMap0, stringArray0);
      jSONObject1.isNull("W");
      jSONObject1.optDouble("E", Double.NaN);
      String string0 = "'`y";
      jSONObject0.optJSONArray("'`y");
      int int0 = 1741;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "'`y");
      jSONObject1.write(stringWriter0);
      JSONObject.doubleToString(2054.4387);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject2.optBoolean("!eS[C<.-cN", true);
      try { 
        jSONObject2.get(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("^(GPH", 3122.045782925496);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("R+A}F").when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Byte byte0 = Byte.valueOf((byte)124);
      hashMap0.put(byte0, "JSON does not allow non-finite numbers.");
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, String> function2 = unaryOperator1.andThen((Function<? super Integer, ? extends String>) function1);
      function1.compose((Function<? super Integer, ?>) function2);
      hashMap0.computeIfAbsent((Object) null, function1);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("R+A}F", (Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = jSONObject0.toString();
      assertNull(string0);
      
      String string1 = jSONObject0.optString("R+A}F");
      assertEquals("", string1);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.271759469228055
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      hashMap0.put((Float) null, double0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
      
      long long0 = jSONObject0.optLong(",\n");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "false");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|HWdd]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |HWdd]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.9906188255641685
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("&,77", (-907L));
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("istrim", (-1280.976652));
      assertEquals((-1280.976652), double0, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.108341314531592
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("isquote", object0);
      try { 
        jSONObject1.getBoolean("isquote");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isquote\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.2806483581169434
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("gD?i5LD\b;=~!jo`\"");
      JSONObject jSONObject1 = jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", (-1L));
      jSONObject1.optDouble("gD?i5LD\b;=~!jo`\"", (-1.9863293809364408));
      jSONObject1.isNull("<,Bv+~f{+BQ:FPK0\"7");
      String string0 = jSONObject1.toString(42, 1810);
      Boolean boolean0 = new Boolean("14Yv");
      JSONObject.testValidity(integer0);
      JSONObject jSONObject2 = jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", (-1182.7368581));
      Integer integer1 = new Integer(32);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string1 = JSONObject.valueToString(jSONObject2);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.1904885611243943
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString((-2331), 2161);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.3328462280962987
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(2);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-1528), (-1528));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Short short0 = new Short((short) (-1538));
      String string0 = JSONObject.valueToString(short0, (short) (-1538), (short) (-1538));
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.753440343014635
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(128, 128);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("=ZN{", "=ZN{");
      String string0 = jSONObject1.toString((-1275));
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.207304368451297
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getquote");
      // Undeclared exception!
      jSONObject0.toString(1628, 1628);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-2096));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("_O7.DJA$A", "_O7.DJA$A");
      String string0 = jSONObject0.getString("_O7.DJA$A");
      assertNotNull(string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("mnc*xz-O6mx,ze");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Float float0 = new Float((double) 44L);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.3350026060706126
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("\t", 1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null, (-2935));
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("h$}+");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.85441987781001
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject.quote("Sq!#nPjvo~@)7x");
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      Object object0 = jSONObject0.opt("\"Sq!#nPjvo~@)7x\"");
      assertNull(object0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.remove("9^gm5H#Fq");
      assertNull(object0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 28;
      jSONObject0.toString(28, 114);
      String string0 = "h!no`ZG5>\\}t^G";
      jSONObject0.has("h!no`ZG5>}t^G");
      try { 
        Short.valueOf("h!no`ZG5>}t^G");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"h!no`ZG5>}t^G\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("3Hc?<a|%", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = JSONObject.quote("&%)\"J6}lcmV Iz,phg");
      assertEquals("\"&%)\\\"J6}lcmV Iz,phg\"", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.1411212857848825
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)43);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.put(".gjM:9T`:VFX2WUdcLY", 0.0);
      JSONObject.valueToString("$Qd8EGTdm;8I");
      boolean boolean0 = jSONObject1.has(".gjM:9T`:VFX2WUdcLY");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("wa");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get(".LK&&zHW^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".LK&&zHW^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("=ZN{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=ZN{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("vI*qeH", 1181L);
      assertEquals(1181L, long0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("wheel.json.JSONArray", 0L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = JSONObject.quote("E[u22{:%");
      assertEquals("\"E[u22{:%\"", string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("for");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.7511893730418442
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("wheel.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$Null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("^mKVD;F2sm");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("0 fm+y*LK N@@F7g");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0 fm+y*LK N@@F7g
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
