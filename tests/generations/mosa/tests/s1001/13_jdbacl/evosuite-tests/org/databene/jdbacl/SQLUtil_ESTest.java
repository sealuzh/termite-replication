/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 19:19:27 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLUtil.isProcedureCall("3");
      SQLUtil.isQuery("setblob");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "setblob";
      stringArray0[1] = "3";
      stringArray0[2] = "setblob";
      SQLUtil.innerJoin("setblob", stringArray0, "<z5[uU>P&kXzJ", "<z5[uU>P&kXzJ", stringArray0);
      SQLUtil.isQuery(" as ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, defaultDBTable0, "3");
      SQLUtil.typeAndName(dBCheckConstraint0);
      Random.setNextRandom((-213221793));
      String string0 = "//";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("<z5[uU>P&kXzJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("hB7", (DBTable) null, (-1425), "hB7");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.setDefaultValue("hB7");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(" or ");
      assertNull(boolean0);
      
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("hB7 HB7 DEFAULT hB7 NULL", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      SQLUtil.isProcedureCall("LXk/*`");
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4572637190629707
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qI_2<_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\u0001\u00C3");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("qI_2<_");
      String[] stringArray0 = new String[4];
      mockPrintWriter0.print(1415);
      stringArray0[0] = "\u0001\u00C3";
      stringArray0[1] = "\u0001\u00C3";
      stringArray0[2] = "\u0001\u00C3";
      stringArray0[3] = "\u0001\u00C3";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "\u0001\u00C3", false, stringArray0);
      defaultDBTable1.addUniqueConstraint(dBUniqueConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable1, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable1.getObjectType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!!", (DBSchema) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "!!";
      stringArray0[1] = null;
      stringArray0[2] = "!!";
      String[] stringArray1 = new String[1];
      stringArray1[0] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer((-1664));
      DBDataType dBDataType0 = DBDataType.getInstance((-1664), "\"r]8HY3q0Bk");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("s~%kg9{?%C'd}Y3", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.mutatesDataOrStructure("i(M,dib3M");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("i(M,dib3M");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.8372691536457428
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      SQLUtil.normalize("LXk/*`", false);
      // Undeclared exception!
      SQLUtil.isDDL("LXk /* `");
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[26];
      String string0 = SQLUtil.join("inner", "inner", stringArray0, "inner", "inner", stringArray0);
      assertEquals("inner as inner on inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.359005762630872
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = SQLUtil.isQuery("select into");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.removeComments("create mat");
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("d(KXw%(X)mh0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"KXw%(X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "hZ@";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("hZ@", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = MockFile.createTempFile("JnB \"xSVY&lxUoH", "?6<%c#");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertTrue(dBForeignKeyConstraint0.isNameDeterministic());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "rename.6ls\";g$h7w\"$ox2ez");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alwer session", false, "-- free", "SQLXML");
      String string0 = SQLUtil.normalize("-- free", false);
      assertEquals("-- free", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionselctbc");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update5r0/a8ql^");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = SQLUtil.isProcedureCall("callsele^t;s<rom");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5669499167988556
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("STORAGE");
      assertNull(boolean0);
      
      Integer integer0 = RawTransaction.ABORT;
      String string0 = SQLUtil.substituteMarkers("", "STORAGE", integer0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-1984263023), "");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, (-1984263023), "org.apac");
      arrayList0.add((DBColumn) defaultDBColumn1);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, 95, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      slaveDatabase0.getDataDictionary();
      StringBuilder stringBuilder2 = new StringBuilder();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("drop materialized view", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getUniqueConstraints(false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-1207015953), "drop materialized view");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("drop materialized viewDROP MATERIALIZED VIEW", stringBuilder1.toString());
      assertEquals("drop materialized viewDROP MATERIALIZED VIEW", stringBuilder0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("in best access path", (DBTable) null, 42, "in best access path");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6204086093677565
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = SQLUtil.renderColumnListWithTableName("rename.6ls\";g$he7w\"$ox2ez", stringArray0);
      assertEquals("rename.6ls\";g$he7w\"$ox2ez.null, rename.6ls\";g$he7w\"$ox2ez.null, rename.6ls\";g$he7w\"$ox2ez.null, rename.6ls\";g$he7w\"$ox2ez.null, rename.6ls\";g$he7w\"$ox2ez.null, rename.6ls\";g$he7w\"$ox2ez.null, rename.6ls\";g$he7w\"$ox2ez.null, rename.6ls\";g$he7w\"$ox2ez.null, rename.6ls\";g$he7w\"$ox2ez.null, rename.6ls\";g$he7w\"$ox2ez.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("rename.6ls\";g$he7w\"$ox2ez", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT rename.6ls\";g$he7w\"$ox2ez FOREIGN KEY (, , , , , , , , , ) REFERENCES null(, , , , , , , , , )", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(p7;QUECQ#nZrnQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (p7;QUECQ#nZrnQ
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JGrg.*p%c", defaultDBTable0, 31, "JGrg.*p%c");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("JGrg.*p%c, JGrg.*p%c", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setBlob(int, InputStream)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/VTO_%7yNoIT";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnListWithTableName(" AND ", stringArray0);
      // Undeclared exception!
      SQLUtil.isQuery(" 6$/*QJ7H,?Iz-#e");
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "CLOB";
      stringArray0[2] = " join ";
      stringArray0[3] = null;
      stringArray0[4] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CLOB", false, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7754337976947765
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("callsele^t;<rom");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select#}c7");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("r[Mp(7 |b}`P93468");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: r[Mp(7 |b}`P93468
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", "");
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = SQLUtil.typeAndName(dBSequence0);
      assertEquals("sequence ", string0);
      
      boolean boolean0 = SQLUtil.isQuery("sequence ");
      assertFalse(boolean0);
      
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "~qop", versionNumber0);
      String string1 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter materialized view");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[26];
      String string0 = SQLUtil.join("selectsn/celctlc", "selectsn/celctlc", stringArray0, "selectsn/celctlc", "selectsn/celctlc", stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "selectsn/celctlc";
      stringArray1[1] = string0;
      stringArray1[2] = "selectsn/celctlc";
      // Undeclared exception!
      try { 
        SQLUtil.join(string0, string0, stringArray0, "\"I+:9=8-5\"ljRId", "selectsn/celctlc", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[16];
      String string0 = SQLUtil.join("selectsn/celctbc", "selectsn/celctbc", stringArray0, "selectsn/celctbc", "selectsn/celctbc", stringArray0);
      assertEquals("selectsn/celctbc join selectsn/celctbc as selectsn/celctbc on selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null and selectsn/celctbc.null = selectsn/celctbc.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  PRIMARY KEY (, , , , , , , , , , , , , , , )", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(%y4[MPvAPsP|Zy";
      stringArray0[1] = "(%y4[MPvAPsP|Zy";
      stringArray0[2] = "(%y4[MPvAPsP|Zy";
      stringArray0[3] = "(%y4[MPvAPsP|Zy";
      stringArray0[4] = "(%y4[MPvAPsP|Zy";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "select into";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("(%y4[MPvAPsP|Zy", stringArray0, "(%y4[MPvAPsP|Zy", "select into", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.964763373583426
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
      
      boolean boolean0 = SQLUtil.isDDL("fvs<elj)ee)#/k");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null = null", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.459562444957137
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delgte");
      DBDataType dBDataType0 = DBDataType.getInstance(549, "delgte");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delgte", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.toString();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delgte : DELGTE(3,1)");
      assertNull(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("CclB", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3080561808079394
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized view", (DBTable) null, (-2561), "alter materialized view");
      defaultDBColumn0.toString();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ALTER MATERIALIZED VIEW", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[10];
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("4z^8Ext'rHhgY");
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("rename)nev|y y*egv` ,:hc", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setBlob(ing,gInputSream)", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("rename)nev|y y*egv` ,:hc.setBlob(ing,gInputSream)", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("jM$S.v/@", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.5407108604577937
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , )", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("CONSTRAINT ");
      assertNull(boolean0);
      
      String string1 = SQLUtil.renderValue("CONSTRAINT ");
      assertEquals("'CONSTRAINT '", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" _]W");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" _]W", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_&");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "_&", false, (String[]) null);
      StringBuilder stringBuilder1 = new StringBuilder(6);
      stringBuilder0.reverse();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      StringBuilder stringBuilder2 = new StringBuilder();
      assertEquals("", stringBuilder2.toString());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.459562444957137
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-12), "Bc");
      Integer integer0 = new Integer((-12));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Bc", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.toString();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Bc");
      assertNull(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ctreatemt", false, "ctreatemt", "ctreatemt");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT ctreatemt ", stringBuilder0.toString());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("B7", (DBTable) null, 2, "B7");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("B7", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("D^XsX*!", defaultDBTable0, 3041, "D^XsX*!");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("*", stringBuilder0);
      assertEquals("*", stringBuilder0.toString());
      
      SQLUtil.isDML("truncateexec");
      boolean boolean0 = SQLUtil.isProcedureCall("*");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[1];
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.958541141784395
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("6!$}");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.impl.sql.compile.TransactionStatementNode");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]Mw;DlKK,8", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "]Mw;DlKK,8";
      stringArray0[1] = "*/";
      stringArray0[2] = "6!$}";
      stringArray0[3] = "]Mw;DlKK,8";
      DBDataType dBDataType0 = DBDataType.getInstance((-1251), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("E2xrj@~?", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setName("org.h2.command.dml.ExecuteProcedure");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
      
      String string1 = SQLUtil.normalize("\u0001\u013C\u0003\uFFFF\u0001\u013D", false);
      assertEquals("\u0001 \u013C \u0003 \uFFFF \u0001 \u013D", string1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.7300848044193806
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "/VTO_%7yNoIT";
      stringArray0[2] = "/VTO_%7yNoIT";
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("/VTO_%7yNoIT");
      DBSchema dBSchema0 = new DBSchema("/VTO_%7yNoIT");
      SQLUtil.mutatesDataOrStructure("/VTO_%7yNoIT");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "D^XsX*!";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view%q^,^2h+&rj8\"vgi");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("truncatealtcr ta[leret.nton", true, defaultDBTable0, "createmt");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.7179367802622418
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.normalize("0,Jmo6jC3*C(-:\"tlH", true);
      assertEquals("0, Jmo6jC3  * C (- : \"tlH\"", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("0,Jmo6jC3*C(-:\"tlH", true, "Big5", "16");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.9085425248622063
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Dk `O%[0^U", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = dBForeignKeyConstraint0.toString();
      assertEquals("CONSTRAINT \"Dk `O%[0^U\" FOREIGN KEY (, , ) REFERENCES null(, , )", string0);
      
      String string1 = SQLUtil.removeComments("CONSTRAINT \"Dk `O%[0^U\" FOREIGN KEY (, , ) REFERENCES null(, , )");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Dk `O%[0^U", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = dBForeignKeyConstraint0.toString();
      assertEquals("CONSTRAINT \"Dk `O%[0^U\" FOREIGN KEY (, , ) REFERENCES null(, , )", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , ) REFERENCES null(, , )", string1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.582767809422592
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tableret.nton");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tableret.nton", (DBSchema) null);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "C-rif)}f{", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT C-rif)}f{ UNIQUE ()", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("exec", false, "exec", "exec");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK exec", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLUtil.isDDL("iUA@jXEzGNV;Wf");
      boolean boolean0 = SQLUtil.isDDL("iUA@jXEzGNV;Wf");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "iUA@jXEzGNV;Wf", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = null;
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, stringArray0, (String) null, "executeselect intoexjecute", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.3423901693012243
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join("selectselctbc", "selectselctbc", stringArray0, "selectselctbc", "selectselctbc", stringArray0);
      assertEquals("selectselctbc join selectselctbc as selectselctbc on selectselctbc.null = selectselctbc.null and selectselctbc.null = selectselctbc.null and selectselctbc.null = selectselctbc.null", string0);
      
      String[] stringArray1 = new String[0];
      String string1 = SQLUtil.join("selectselctbc join selectselctbc as selectselctbc on selectselctbc.null = selectselctbc.null and selectselctbc.null = selectselctbc.null and selectselctbc.null = selectselctbc.null", "selectselctbc", stringArray1, "selectselctbc join selectselctbc as selectselctbc on selectselctbc.null = selectselctbc.null and selectselctbc.null = selectselctbc.null and selectselctbc.null = selectselctbc.null", "selectselctbc", stringArray0);
      assertEquals("selectselctbc join selectselctbc as selectselctbc on selectselctbc.null = selectselctbc.null and selectselctbc.null = selectselctbc.null and selectselctbc.null = selectselctbc.null join selectselctbc join selectselctbc as selectselctbc on selectselctbc.null = selectselctbc.null and selectselctbc.null = selectselctbc.null and selectselctbc.null = selectselctbc.null as selectselctbc on ", string1);
      
      boolean boolean0 = SQLUtil.isProcedureCall("selectselctbc");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "K|~";
      String string1 = "V:f";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("V:f", (String[]) null, "K|~", "V:f", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join((String) null, " DENAULT ", stringArray0, " DENAULT ", " DENAULT ", stringArray0);
      assertEquals(" DENAULT  as  DENAULT  on  DENAULT .null =  DENAULT .null", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.4223665577792008
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{l[Z?MiH");
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM {l[Z?MiH WHERE null = null AND null = null", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("KxeDj", "KxeDj", (String[]) null, "KxeDj", "KxeDj", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = SQLUtil.normalize("0,Jmo6jC3*C(-:\"tlH", false);
      assertEquals("0, Jmo6jC3  * C (- : \"tlH\"", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = SQLUtil.normalize("^ri)#_RixLO[3.~S~I", false);
      assertEquals("^ ri) # _RixLO [ 3.~ S ~ I", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(";&L18$(&i", (String[]) null, " = ", " = ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = SQLUtil.normalize("S:%c`)b8n'.-X}wz", false);
      assertEquals("S : % c `) b8n '.-X}wz'", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("createmt", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(0, "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1io\":TVwVOMaDKGc#KC", (DBTable) null, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("(2,3)", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-97092231), "D^XsX*!");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("D^XsX*!", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("D^XsX*! D^XSX*!(2) NULL", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "(,el1h", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
      
      boolean boolean0 = SQLUtil.isDDL("null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.6851287363978404
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
      
      String string1 = SQLUtil.leftJoin("null = null", stringArray0, "null = null", "GLOBAL", stringArray0);
      assertEquals("left join null = null as GLOBAL on null = null.null = GLOBAL.null", string1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.6851287363978404
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
      
      String string1 = SQLUtil.leftJoin("h!mz!C", stringArray0, "null = null", "h!mz!C", stringArray0);
      assertEquals("left join null = null as h!mz!C on h!mz!C.null = h!mz!C.null", string1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F$|:6uk=zeM m");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("F$|:6uk=zeM m", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alwer session", false, "-- free", "SQLXML");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"alwer session\" ", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.594349100039163
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("xc", true, "xc", "xc");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("xc");
      assertNull(boolean0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT xc ", stringBuilder0.toString());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("exec", false, "exec", "exec");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT exec ", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("exec", true, "exec", "exec");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT exec CHECK exec", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "i%");
      SQLUtil.addOptionalCondition("i%", stringBuilder0);
      assertEquals("i% or i%", stringBuilder0.toString());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "jM$S.v/@");
      SQLUtil.addRequiredCondition("jM$S.v/@", stringBuilder0);
      assertEquals("jM$S.v/@ and jM$S.v/@", stringBuilder0.toString());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = SQLUtil.normalize("calljm$s.v/@", false);
      assertEquals("calljm $ s.v / @", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, (String) null, "execute", stringArray0);
      assertEquals("null as execute on ", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("alter index", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = SQLUtil.join("drop materialized view;&l13(&i", "*mFt3{", stringArray0, "*mFt3{", "drop materialized view;&l13(&i", stringArray0);
      assertEquals("drop materialized view;&l13(&i join *mFt3{ as drop materialized view;&l13(&i on *mFt3{.null = drop materialized view;&l13(&i.null and *mFt3{.null = drop materialized view;&l13(&i.null and *mFt3{.null = drop materialized view;&l13(&i.null and *mFt3{.null = drop materialized view;&l13(&i.null and *mFt3{.null = drop materialized view;&l13(&i.null and *mFt3{.null = drop materialized view;&l13(&i.null and *mFt3{.null = drop materialized view;&l13(&i.null and *mFt3{.null = drop materialized view;&l13(&i.null and *mFt3{.null = drop materialized view;&l13(&i.null and *mFt3{.null = drop materialized view;&l13(&i.null", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = SQLUtil.join("*mFt3{", "*mFt3{", stringArray0, "eOYs^8~-:s-M", "*mFt3{", stringArray0);
      assertEquals("*mFt3{ join eOYs^8~-:s-M as *mFt3{ on *mFt3{.null = *mFt3{.null and *mFt3{.null = *mFt3{.null and *mFt3{.null = *mFt3{.null and *mFt3{.null = *mFt3{.null and *mFt3{.null = *mFt3{.null and *mFt3{.null = *mFt3{.null and *mFt3{.null = *mFt3{.null and *mFt3{.null = *mFt3{.null and *mFt3{.null = *mFt3{.null and *mFt3{.null = *mFt3{.null", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = SQLUtil.normalize("//", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("U.SEECT * FROM ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("SELE^T c* F7OM@");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.6593387642402389
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
      
      String string1 = SQLUtil.innerJoin("null = null AND null = null", stringArray0, "null = null AND null = null", "null = null AND null = null", stringArray0);
      assertEquals("null = null AND null = null as null = null AND null = null on null = null AND null = null.null = null = null AND null = null.null and null = null AND null = null.null = null = null AND null = null.null", string1);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.leftJoin("r[Mp(7 |b}`P93468", stringArray0, "r[Mp(7 |b}`P93468", "r[Mp(7 |b}`P93468", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("3H.:YqXTJ^");
      assertFalse(boolean0);
      
      Character character0 = new Character('w');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'w'", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("#Wselect#}c7", "#Wselect#}c7", "#Wselect#}c7");
      assertEquals("'#Wselect#}c7'", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("table null", defaultDBTable0, 488, "table null");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("table null TABLE NULL NULL", string1);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Character.lowSurrogate(0);
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure(" NULL");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter index");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create unique index/vto_%7ynoit");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("RETENTION");
      assertNull(boolean0);
  }
}
