/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 13 20:02:46 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 487L, 65545L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.557207347873889
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-2069L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-2069L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 976L, 976L);
      Long long0 = new Long(3371L);
      range0.iterator();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(976L, (-4440L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.8442940079508654
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      List<Range> list0 = range1.complement(range0);
      Range range2 = Range.of((-2502L));
      // Undeclared exception!
      try { 
        range2.complementFrom(list0);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2502 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3317556181086943
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertEquals(1, list1.size());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.691848233250198
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of((-9223372036854774799L));
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      Range range1 = Range.of((-9223372036854774799L));
      range1.equals(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1347095035283017
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(2147483646L);
      Range range1 = Range.of(2147483646L);
      range0.equals(range1);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      Range range2 = Range.ofLength(2147483646L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 557L, 557L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5141286579756197
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(1319L, 4539L);
      String string0 = range0.toString();
      assertEquals("[ 1319 .. 4539 ]/0B", string0);
      
      Range range1 = Range.of(1319L);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4540L, long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.7539714171011047
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-2147483646L), (-1015L));
      Range range1 = Range.of(9223372032559808513L);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      range0.split(65535L);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4539L, 7791070673136L);
      range0.spliterator();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483646L), (-2147483646L));
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 9223372036854775321L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3886337366087376
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(127L, 9223372036854769211L);
      Range range1 = Range.ofLength(9223372036854769211L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(127L, 9223372036854769211L);
      Range range1 = Range.ofLength(9223372036854769211L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-1940L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.058455850968031
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.ofLength(2281L);
      assertFalse(range1.isEmpty());
      
      range0.equals(range0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(882L, (-9223372036854775808L));
      range_Builder0.shift(882L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854774926 would make range [1764 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 64657L, 64657L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.441371494503864
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.ofLength(4540L);
      Range range0 = Range.ofLength(4540L);
      assertFalse(range0.isEmpty());
      
      Range.of((-128L), 2147483638L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1914L, 4294967300L);
      range1.equals((Object) null);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 976L, 4294967295L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9785775358639506
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(0L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-192L));
      range1.equals((Object) null);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6482851312547284
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854769231L, 9223372036854769231L);
      Range range1 = Range.of(9223372036854769231L, 9223372036854769231L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder((-128L), (-1L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(2147483647L, 9223372036854769231L);
      boolean boolean1 = range3.isEmpty();
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.767474145167013
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem1);
      Range range2 = Range.of(9223372036854774926L);
      // Undeclared exception!
      try { 
        range0.complement(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483648 would make range [9223372036854774926 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.7184018912189094
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(127L, 9223372036854769211L);
      Range range1 = Range.ofLength(9223372036854769211L);
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
      
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertEquals(2, list0.size());
      //  // Unstable assertion: assertEquals(1, list1.size());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854769231L, 9223372036854769231L);
      Range range1 = Range.of(9223372036854769231L, 9223372036854769231L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("inputstream can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.inputstream can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.133033233229716
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854769231L, 9223372036854769231L);
      Range range1 = Range.of(9223372036854769231L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4432283254134135
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 695L, 9223372036854769231L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(9223372036854769231L);
      range0.complement(range1);
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("(d+)s*-s*(d+)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.(d+)s*-s*(d+)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483646L), (-2147483646L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(127L, 9223372036854769211L);
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 989L, 9223372036854775807L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.6243357253121498
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = Range.ofLength(127L);
      range0.equals(range1);
      Object object0 = new Object();
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2013835344355432
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(4294967295L);
      range1.equals((Object) null);
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1346325508541963
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(4547L);
      Range range1 = Range.ofLength(4547L);
      Range range2 = Range.of(2147483647L);
      assertFalse(range2.isEmpty());
      
      range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1341068345657535
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Long long0 = new Long((-1247L));
      Range range0 = Range.of((-1247L), 9223372036854769230L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1247L), 1L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(9223372034707292160L);
      boolean boolean0 = range0.equals("");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854769231L, 9223372036854769231L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2068395473491833
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(9223372036854769202L, 9223372036854769202L);
      Range range1 = Range.of(9223372036854769202L);
      //  // Unstable assertion: assertSame(range1, range0);
      
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1133442736467214
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.7931511307298944
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854774832L), (-9223372036854774832L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-9223372036854774832L), long0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 446L, 446L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1932L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1932L, 1932L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.613061895141897
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of((-2147483648L), 0L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-1L), (-1L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Long long0 = new Long((-1L));
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.449156929808095
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.of((-32768L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8938302321479643
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L));
      range0.equals(range1);
      Range range2 = Range.of((-3908L));
      boolean boolean0 = range2.equals(range1);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range2));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483646L), (-2147483646L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9223372036854769231L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854769231L, 9223372036854769230L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 976L, 4294967295L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.86488758596799
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.of((-32768L), (-32768L));
      Range.ofLength(9223372036854775251L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-2289L));
      range0.equals("");
      Object object0 = new Object();
      Range range1 = Range.of(9223372036854775251L);
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2290 would make range [9223372036854775251 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(9223372036854769052L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.ofLength(4547L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.980633145514497
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(191L);
      Range range1 = Range.of(191L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range range2 = Range.ofLength(191L);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.662622058922643
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854769231L, 9223372036854769231L);
      range0.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of(9223372036854769231L);
      range0.complement(range1);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("F&*FOP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.F&*FOP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(4294967295L);
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.0543110595891974
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(659L, 659L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.554061209984314
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(210L, 65535L);
      Range range1 = Range.ofLength(65535L);
      Object object0 = new Object();
      Long long0 = new Long(210L);
      boolean boolean0 = range1.equals(long0);
      Range range2 = Range.of(210L);
      boolean boolean1 = range1.endsBefore(range0);
      assertNotSame(range0, range2);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(9223372036854769231L, 9223372036854769231L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-2147483646L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483646 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(4548L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.267074362473433
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(311L);
      Range.ofLength(311L);
      Range range1 = Range.of(2240L);
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(1319L, 4539L);
      Range range1 = Range.of(1319L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.20405020110221
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 144L, 144L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-1674L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-1674L), 144L);
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-859L), 1266L);
      Range range1 = Range.of((-3886L), (-859L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.8922772952702807
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-303L));
      Range range1 = Range.of((-2147483648L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.0779132545548555
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of(2298L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of((-32768L));
      assertSame(range2, range0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.361539994608785
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.equals(range_CoordinateSystem0);
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 2147483647 .. 2147483647 ]/SB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals(2147483646L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 32767L, 32767L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(1213L);
      boolean boolean0 = range0.equals("!H;");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(4547L);
      Range range1 = Range.of(4547L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.4758751110620363
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854769231L, 9223372036854769231L);
      Range range0 = Range.of(9223372036854769231L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(2147483686L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(2147483686L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.386722122859669
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      Range range1 = Range.of((-2147483648L));
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(2147483647L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.6912004809506773
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.ofLength(255L);
      boolean boolean0 = range0.endsBefore(range0);
      assertSame(range0, range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.3353636284304113
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      Long long0 = new Long((-32768L));
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.4775764813786965
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Object object0 = new Object();
      Range range1 = Range.of((-2779L));
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4547L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.4414136615997566
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(311L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 311L, 311L);
      boolean boolean0 = range1.intersects(range0);
      Range range2 = Range.of(311L);
      boolean boolean1 = range1.equals(range2);
      assertSame(range2, range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.2023030746654286
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 144L, 144L);
      Range range1 = Range.of((-1674L));
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.3764058124683003
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.180624539878941
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(1326L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1326L, long0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.3429731311563033
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 144L);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getLength();
      assertEquals(145L, long0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.4396770744045355
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-117L), (-117L));
      long long0 = range0.getBegin();
      assertEquals((-117L), long0);
      
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-117L), long1);
      
      Range range1 = Range.of((-1005L));
      boolean boolean0 = range1.intersects(range0);
      long long2 = range1.getEnd();
      assertEquals((-1005L), long2);
      
      boolean boolean1 = range0.equals(range1);
      assertTrue(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      range1.iterator();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-950L), (-950L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(144L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.7561237122538333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(81L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 5796L, 5796L);
      Range range2 = range0.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem.values();
      Iterator<Long> iterator0 = range2.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2216L, 2216L);
      Range range1 = Range.ofLength(144L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-1L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      range0.iterator();
      boolean boolean1 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.551835206968696
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.of(4547L);
      Range range0 = Range.ofLength(4547L);
      Range.Builder range_Builder0 = new Range.Builder(882L, 65575L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.331792985540762
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-303L));
      Range range1 = Range.of((-2147483641L));
      long long0 = range1.getBegin();
      assertEquals((-2147483641L), long0);
      
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.8306371120560816
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range range1 = Range.of(32767L);
      range0.isEmpty();
      Range range2 = Range.ofLength(32767L);
      Object object1 = new Object();
      range2.equals(object1);
      Range range3 = range2.intersection(range1);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range1));
      
      range0.split(32767L);
      Range range4 = Range.of((-553L), 32767L);
      //  // Unstable assertion: assertFalse(range4.equals((Object)range3));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range5 = Range.of(range_CoordinateSystem0, (-2553L), 3389L);
      Range.ofLength(2186L);
      range1.intersects(range5);
      //  // Unstable assertion: assertNotSame(range1, range3);
      
      String string0 = range5.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ -2553 .. 3389 ]/RB", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.240804857920011
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 311L, 311L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.386722122859669
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(930L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 930L, 930L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.264235580268661
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      long long0 = 784L;
      Range.ofLength(784L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("bitLnh must be >=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.bitLnh must be >=0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.6016323405294126
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of((-2244L), (-2244L));
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(32767L);
      Range.of(32767L);
      boolean boolean0 = range1.intersects(range0);
      boolean boolean1 = range1.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.6748350239582988
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(4547L);
      assertFalse(range0.isEmpty());
      
      Range.of((-128L), 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder((-128L), (-128L));
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.679051395424917
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.intersects(range0);
      Range.ofLength(0L);
      range0.isEmpty();
      range1.getEnd();
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.6973686521787674
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      Long long0 = new Long((-32768L));
      range1.equals(range_CoordinateSystem0);
      Range range2 = range1.intersection(range0);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.20651607438154
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(311L);
      Range range1 = range0.intersection(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.1133442736467214
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.397806621157014
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(976L);
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.543287869822187
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(127L, 9223372036854769175L);
      Range range1 = Range.ofLength(9223372036854769175L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertEquals(2, list0.size());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.3553045499264176
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.508797103549135
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
      //  // Unstable assertion: assertFalse(list1.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.541916902498209
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      long long0 = new Long(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.split(1L);
      assertSame(range2, range1);
      assertTrue(list0.contains(range0));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-278L), (-278L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(311L, 311L);
      Object object0 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.2664158827336083
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      Long long0 = new Long((-32768L));
      boolean boolean1 = range1.equals(range_CoordinateSystem0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.16734873701776
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      long long0 = range0.getBegin();
      //  // Unstable assertion: assertEquals(4294967295L, long0);
      
      range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.5982977725310503
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.ofLength(4547L);
      long long0 = range0.getBegin();
      //  // Unstable assertion: assertEquals(0L, long0);
      
      Range range1 = Range.ofLength(4547L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range range2 = Range.of((-1L), (-1L));
      //  // Unstable assertion: assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.2774737549423403
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.431596566918501
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483646L), (-2147483646L));
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-2147483646L), long0);
      
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483650L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.8995138799786524
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(0L);
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Range range2 = Range.of(0L, 0L);
      Range range3 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B");
      range3.toString(range_CoordinateSystem0);
      List<Range> list0 = range0.complement(range2);
      assertFalse(range2.isEmpty());
      assertTrue(list0.contains(range0));
      assertSame(range0, range3);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B", range_CoordinateSystem1);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.4615383546099854
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(4547L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals((-1L), long0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.541211179445276
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      String string0 = range1.toString();
      assertEquals("[ 0 .. 2147483646 ]/0B", string0);
      
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.4406795806701997
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(1933L);
      Range range1 = Range.of(9223372036854773979L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-2297L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2296L), long0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.3597880171410632
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(311L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 311 .. 312 ]/SB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 311 .. 312 ]/SB", range_CoordinateSystem1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967294L, 4294967294L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.5886727851118687
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.7430425661343674
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(127L, 9223372036854769211L);
      Range range1 = Range.ofLength(9223372036854769211L);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.633469924431174
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(2147483668L);
      List<Range> list0 = range0.split(2147483668L);
      range0.complementFrom(list0);
      Range range1 = Range.ofLength(2488L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.8894206965271843
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483646L), (-2147483646L));
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.2942628478461247
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.getEnd();
      // Undeclared exception!
      try { 
        range0.split((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.5139182358940233
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4535L, 4535L);
      range0.getBegin();
      long long0 = range0.getEnd();
      //  // Unstable assertion: assertEquals(4534L, long0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(4535L);
      //  // Unstable assertion: assertNotSame(range1, range0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-2297L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2721L), (-2721L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.323283518756498
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 2 ]/SB", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(256L, long0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.4406795806701997
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.ofLength(4547L);
      range0.spliterator();
      Range range1 = Range.ofLength(4547L);
      Range.Builder range_Builder0 = new Range.Builder(882L, 65575L);
      range_Builder0.contractBegin(882L);
      range_Builder0.build();
      boolean boolean0 = range1.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.408275726120369
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L, 210L);
      range_Builder0.shift(210L);
      Range range0 = range_Builder0.build();
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      assertEquals("Zero Based", range_CoordinateSystem0.toString());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("yiL8+Oqofnjg#^*&m3", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse yiL8+Oqofnjg#^*&m3 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.1159572496416303
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(463L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 462 ]/0B", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.1995756248310236
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of(4535L, 4535L);
      range0.spliterator();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1551L, 144L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.387726255250662
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 954L, 954L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of((-552L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.44129432507839
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.of(4547L);
      Range range1 = Range.ofLength(4547L);
      Range.Builder range_Builder0 = new Range.Builder(882L, 65575L);
      range_Builder0.contractEnd(4547L);
      range_Builder0.build();
      boolean boolean0 = range1.isEmpty();
      assertFalse(boolean0);
      
      Range range2 = Range.ofLength(4547L);
      assertFalse(range2.equals((Object)range0));
      assertSame(range2, range1);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.202999696051705
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.3770742691085167
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L, 210L);
      Range range0 = range_Builder0.build();
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.of(311L);
      Range.Builder range_Builder0 = new Range.Builder(311L);
      range_Builder0.shift(268L);
      range_Builder0.expandEnd(311L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1084L), (-1084L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1183L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.of(1319L, 4547L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.3876979611047213
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      range1.equals(object0);
      Range range2 = Range.of(2147483647L);
      boolean boolean0 = range0.endsBefore(range1);
      assertSame(range0, range2);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      List<Range> list0 = range1.split(2147483647L);
      assertTrue(list0.contains(range1));
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.3318229150706533
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.of(127L, 9223372036854769211L);
      Range range0 = Range.ofLength(9223372036854769211L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854769211L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -13195 would make range [9223372036854769211 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of(32767L);
      List<Range> list0 = range0.split(32767L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("8T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 8T into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.expandBegin(1932L);
      Range range1 = Range.ofLength(3199L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.797321935099309
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range range0 = Range.of(4547L);
      Range range1 = Range.of(4547L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range range0 = Range.of((-32806L), (-32806L));
      assertFalse(range0.isEmpty());
  }
}
