* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.rules.JRip
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 14957
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 17:44:03.636 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 17:44:03.657 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 17:44:03.700 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 17:44:06.914 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 17:44:07.474 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 17:44:07.475 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.classifiers.rules.JRip
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 2767
* Using seed 1000
* Starting evolution
[MASTER] 17:44:13.107 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.NominalAntd.<init>(Lweka/classifiers/rules/JRip;Lweka/core/Attribute;)V
[MASTER] 17:47:12.778 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 233s and 262 generations, 94625 statements, best individual has fitness: 12600.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 37%
* Total number of goals: 705
* Number of covered goals: 261
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 27%
* Total number of goals: 416
* Number of covered goals: 113
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 55%
* Total number of goals: 993
* Number of covered goals: 542
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 93
* Number of covered goals: 27
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 27%
* Total number of goals: 416
* Number of covered goals: 111
* Generated 75 tests with total length 444
* Resulting test suite's coverage: 43% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 23%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing JUnit test case 'JRip_ESTest' to /home/ubuntu/termite/mosa/tests/s1000/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.core.stemmers.LovinsStemmer
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.Evaluation
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 14961
* Connecting to master process on port 14960
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class weka.core.stemmers.LovinsStemmer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1367
* Using seed 1000
* Starting evolution
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 18:08:20.226 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 18:08:20.230 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 18:08:20.231 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 18:08:21.003 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 18:08:21.919 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 18:08:21.920 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 18:08:25.529 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 18:08:25.574 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 18:08:25.575 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 18:08:25.575 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 18:08:25.576 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 18:08:25.576 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 18:08:25.577 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 18:08:25.578 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 18:08:25.579 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 18:08:25.682 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 18:08:25.707 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class weka.classifiers.Evaluation
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 3904
* Using seed 1000
* Starting evolution
[MASTER] 18:08:50.191 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: Line 3601
[MASTER] 18:08:50.191 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: Line 3602
[MASTER] 18:08:50.191 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: Line 3605
[MASTER] 18:08:50.195 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I496 Branch 354 IFEQ L3599 - false
[MASTER] 18:08:50.198 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I496 Branch 354 IFEQ L3599 - false in context: 
[MASTER] 18:08:57.405 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 18:09:07.089 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
[MASTER] 18:09:09.736 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.unclassified()D: Line 2114
[MASTER] 18:09:09.737 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTruePositives(I)D: Line 2784
[MASTER] 18:09:09.737 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTruePositives(I)D: Line 2785
[MASTER] 18:09:09.737 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTruePositives(I)D: Line 2790
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTrueNegatives(I)D: Line 2861
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTrueNegatives(I)D: Line 2862
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTrueNegatives(I)D: Line 2871
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalsePositives(I)D: Line 2946
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalsePositives(I)D: Line 2947
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalsePositives(I)D: Line 2956
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3112
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3113
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3114
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3115
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3116
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3117
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3119
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3120
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3121
[MASTER] 18:09:09.738 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3124
[MASTER] 18:09:09.740 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.unclassified()D: root-Branch
[MASTER] 18:09:09.740 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTrueNegatives(I)D: I12 Branch 265 IF_ICMPGE L2862 - true
[MASTER] 18:09:09.740 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalsePositives(I)D: I12 Branch 277 IF_ICMPGE L2947 - true
[MASTER] 18:09:09.741 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: I62 Branch 301 IFNE L3120 - false
[MASTER] 18:09:09.741 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTruePositives(I)D: I12 Branch 257 IF_ICMPGE L2785 - true
[MASTER] 18:09:09.748 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 4827: weka.classifiers.Evaluation.numTruePositives(I)D:2785 - ReplaceComparisonOperator >= -> >
[MASTER] 18:09:09.748 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 5455: weka.classifiers.Evaluation.numTrueNegatives(I)D:2862 - ReplaceComparisonOperator >= -> >
[MASTER] 18:09:09.748 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6173: weka.classifiers.Evaluation.numFalsePositives(I)D:2947 - ReplaceComparisonOperator >= -> >
[MASTER] 18:09:09.748 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 8093: weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D:3120 - ReplaceComparisonOperator != -> -1
[MASTER] 18:09:09.749 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.Evaluation.unclassified()D:Zero
[MASTER] 18:09:09.749 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D:Zero
[MASTER] 18:09:09.750 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.Evaluation.unclassified()D
[MASTER] 18:09:09.750 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D
[MASTER] 18:09:09.752 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.Evaluation.unclassified()D
[MASTER] 18:09:09.752 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D
[MASTER] 18:09:09.753 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.Evaluation.unclassified()D: root-Branch in context: weka.classifiers.Evaluation:unclassified()D
[MASTER] 18:09:09.753 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: I62 Branch 301 IFNE L3120 - false in context: weka.classifiers.Evaluation:matthewsCorrelationCoefficient(I)D
[MASTER] 18:09:19.272 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: Line 3648
[MASTER] 18:09:19.276 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;
[MASTER] 18:09:19.276 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;
* Search finished after 293s and 243 generations, 121059 statements, best individual has fitness: 2672.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 88%
* Total number of goals: 217
* Number of covered goals: 191
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 68%
* Total number of goals: 428
* Number of covered goals: 289
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 260
* Number of covered goals: 240
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 18
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 68%
* Total number of goals: 428
* Number of covered goals: 289
* Generated 83 tests with total length 239
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 277s and 118 generations, 55547 statements, best individual has fitness: 14648.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 61%
* Total number of goals: 1378
* Number of covered goals: 835
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 45%
* Total number of goals: 809
* Number of covered goals: 362
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 54
* Number of covered goals: 54
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 63%
* Total number of goals: 424
* Number of covered goals: 266
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 23%
* Total number of goals: 278
* Number of covered goals: 65
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 103
* Number of covered goals: 101
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 96%
* Total number of goals: 103
* Number of covered goals: 99
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 44%
* Total number of goals: 809
* Number of covered goals: 358
* Generated 148 tests with total length 1291
* Resulting test suite's coverage: 54% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 79%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'LovinsStemmer_ESTest' to /home/ubuntu/termite/mosa/tests/s1000/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 18:20:45.088 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 18:20:45.268 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 18:20:45.283 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.AllJavadoc: null
[MASTER] 18:20:45.794 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 18:20:45.794 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
[MASTER] 18:20:45.796 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.AllJavadoc
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing JUnit test case 'Evaluation_ESTest' to /home/ubuntu/termite/mosa/tests/s1000/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.filters.unsupervised.attribute.Discretize
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 14955
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 18:21:47.744 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 18:21:47.770 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 18:21:47.771 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 18:21:48.085 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 18:21:48.108 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 18:21:48.110 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.filters.unsupervised.attribute.Discretize
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1729
* Using seed 1000
* Starting evolution
* Search finished after 260s and 369 generations, 130408 statements, best individual has fitness: 5304.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 68%
* Total number of goals: 370
* Number of covered goals: 253
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 53%
* Total number of goals: 242
* Number of covered goals: 129
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 60%
* Total number of goals: 713
* Number of covered goals: 427
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 53%
* Total number of goals: 72
* Number of covered goals: 38
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 53%
* Total number of goals: 242
* Number of covered goals: 129
* Generated 78 tests with total length 493
* Resulting test suite's coverage: 62% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 24%
* Compiling and checking tests
[MASTER] 18:29:49.861 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 18:29:50.510 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 18:30:14.195 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 18:30:14.197 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
Attribute attribute0 = new Attribute("112,3548,2147483646,126,87,-4596,-969,69", 82);
arrayList0.add(attribute0);
Instances instances0 = new Instances("112,3548,2147483646,126,87,-4596,-969,69", arrayList0, 1);
discretize0.setInputFormat(instances0);
Properties properties0 = new Properties();
ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
Attribute attribute1 = new Attribute("string", protectedProperties0);
Attribute attribute2 = new Attribute("real", instances0);
arrayList0.add(attribute2);
Instances instances1 = new Instances("real", arrayList0, 86);
discretize0.setInputFormat(instances0);

[MASTER] 18:30:16.660 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 18:30:16.660 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
Attribute attribute0 = new Attribute("B^O");
Instances instances0 = new Instances("integer", arrayList0, 2885);
Attribute attribute1 = new Attribute("'B", instances0, (-2056));
arrayList0.add(attribute1);
Instances instances1 = new Instances("rv9nD/6-", arrayList0, 3);
discretize0.setInputFormat(instances1);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 8
* Writing JUnit test case 'Discretize_ESTest' to /home/ubuntu/termite/mosa/tests/s1000/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.experiment.ResultMatrix
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 14953
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 18:38:26.366 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 18:38:26.398 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 18:38:26.399 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 18:38:26.498 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.experiment.ResultMatrix
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 2699
* Using seed 1000
* Starting evolution
* Search finished after 398s and 49 generations, 29453 statements, best individual has fitness: 1920.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 647
* Number of covered goals: 635
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 97%
* Total number of goals: 441
* Number of covered goals: 426
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 678
* Number of covered goals: 628
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 45%
* Total number of goals: 244
* Number of covered goals: 110
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 124
* Number of covered goals: 124
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 124
* Number of covered goals: 122
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 94%
* Total number of goals: 441
* Number of covered goals: 414
* Generated 222 tests with total length 1618
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:50:43.641 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6686145833333333% of time used, but only 84/222 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 23%
* Compiling and checking tests
[MASTER] 18:51:45.262 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ArrayIndexOutOfBoundsException: 0
[MASTER] 18:51:45.272 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
assertFalse(resultMatrixPlainText0.getShowStdDev());
assertFalse(resultMatrixPlainText0.getShowAverage());
assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
assertEquals(0, resultMatrixPlainText0.getMeanWidth());
assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
assertTrue(resultMatrixPlainText0.getEnumerateColNames());
assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
assertEquals(2, resultMatrixPlainText0.getMeanPrec());
assertEquals(0, resultMatrixPlainText0.getColNameWidth());
assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
assertTrue(resultMatrixPlainText0.getPrintRowNames());
assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
assertEquals(5, resultMatrixPlainText0.getCountWidth());
assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
assertFalse(resultMatrixPlainText0.getRemoveFilterName());
assertEquals(1, resultMatrixPlainText0.getColCount());
assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
assertEquals(1, resultMatrixPlainText0.getRowCount());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
assertTrue(resultMatrixPlainText0.getPrintColNames());
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertNotNull(resultMatrixPlainText0);

resultMatrixPlainText0.setStdDevPrec(26);
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
assertFalse(resultMatrixPlainText0.getShowStdDev());
assertFalse(resultMatrixPlainText0.getShowAverage());
assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
assertEquals(0, resultMatrixPlainText0.getMeanWidth());
assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
assertTrue(resultMatrixPlainText0.getEnumerateColNames());
assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
assertEquals(2, resultMatrixPlainText0.getMeanPrec());
assertEquals(0, resultMatrixPlainText0.getColNameWidth());
assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
assertTrue(resultMatrixPlainText0.getPrintRowNames());
assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
assertEquals(5, resultMatrixPlainText0.getCountWidth());
assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
assertEquals(26, resultMatrixPlainText0.getStdDevPrec());
assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
assertFalse(resultMatrixPlainText0.getRemoveFilterName());
assertEquals(1, resultMatrixPlainText0.getColCount());
assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
assertEquals(1, resultMatrixPlainText0.getRowCount());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
assertTrue(resultMatrixPlainText0.getPrintColNames());
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);

int[][] intArray0 = new int[1][0];
resultMatrixPlainText0.setRanking(intArray0);
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
assertFalse(resultMatrixPlainText0.getShowStdDev());
assertFalse(resultMatrixPlainText0.getShowAverage());
assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
assertEquals(0, resultMatrixPlainText0.getMeanWidth());
assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
assertTrue(resultMatrixPlainText0.getEnumerateColNames());
assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
assertEquals(2, resultMatrixPlainText0.getMeanPrec());
assertEquals(0, resultMatrixPlainText0.getColNameWidth());
assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
assertTrue(resultMatrixPlainText0.getPrintRowNames());
assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
assertEquals(5, resultMatrixPlainText0.getCountWidth());
assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
assertEquals(26, resultMatrixPlainText0.getStdDevPrec());
assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
assertFalse(resultMatrixPlainText0.getRemoveFilterName());
assertEquals(1, resultMatrixPlainText0.getColCount());
assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
assertEquals(1, resultMatrixPlainText0.getRowCount());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
assertTrue(resultMatrixPlainText0.getPrintColNames());
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals(1, intArray0.length);

ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2536);
assertTrue(resultMatrixLatex0.getEnumerateColNames());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
assertEquals(0, resultMatrixLatex0.getMeanWidth());
assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
assertEquals(0, resultMatrixLatex0.getColCount());
assertEquals(0, resultMatrixLatex0.getStdDevWidth());
assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
assertFalse(resultMatrixLatex0.getShowAverage());
assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
assertTrue(resultMatrixLatex0.getPrintRowNames());
assertFalse(resultMatrixLatex0.getPrintColNames());
assertEquals(0, resultMatrixLatex0.getCountWidth());
assertFalse(resultMatrixLatex0.getShowStdDev());
assertEquals(2, resultMatrixLatex0.getMeanPrec());
assertEquals(0, resultMatrixLatex0.getColNameWidth());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
assertEquals(0, resultMatrixLatex0.getVisibleColCount());
assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
assertEquals(0, resultMatrixLatex0.getRowNameWidth());
assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
assertFalse(resultMatrixLatex0.getEnumerateRowNames());
assertFalse(resultMatrixLatex0.getRemoveFilterName());
assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
assertEquals(2536, resultMatrixLatex0.getRowCount());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
assertEquals(2, resultMatrixLatex0.getStdDevPrec());
assertFalse(resultMatrixLatex0.getDefaultShowAverage());
assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertNotNull(resultMatrixLatex0);

resultMatrixLatex0.toString();

[MASTER] 18:52:03.171 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing JUnit test case 'ResultMatrix_ESTest' to /home/ubuntu/termite/mosa/tests/s1000/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.bayes.NaiveBayesMultinomialText
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.core.Optimization
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 14953
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 14962
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 18:52:35.520 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 18:52:35.521 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 18:52:35.523 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 18:52:35.658 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 18:52:35.704 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 18:52:35.705 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class weka.classifiers.bayes.NaiveBayesMultinomialText
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1412
* Using seed 1000
* Starting evolution
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 18:52:45.090 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 18:52:45.101 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 18:52:45.102 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 18:52:45.132 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.core.Optimization
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 18:52:45.597 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Total number of test goals for MOSA: 2499
* Using seed 1000
* Starting evolution
[MASTER] 18:52:49.215 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 18:52:49.215 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 18:52:50.524 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.core.Optimization.DynamicIntArray.<init>(Lweka/core/Optimization;I)V
[MASTER] 18:56:14.862 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.bayes.NaiveBayesMultinomialText.getPeriodicPruning()I:Positive
* Search finished after 297s and 315 generations, 123689 statements, best individual has fitness: 1480.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 91%
* Total number of goals: 338
* Number of covered goals: 306
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 194
* Number of covered goals: 162
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 476
* Number of covered goals: 443
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 112
* Number of covered goals: 60
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 194
* Number of covered goals: 159
* Generated 77 tests with total length 548
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 299s and 128 generations, 85149 statements, best individual has fitness: 16704.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 10%
* Total number of goals: 620
* Number of covered goals: 59
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 28%
* Total number of goals: 926
* Number of covered goals: 258
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 10%
* Total number of goals: 21
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Generated 19 tests with total length 108
* Resulting test suite's coverage: 17% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'Optimization_ESTest' to /home/ubuntu/termite/mosa/tests/s1000/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 58%
* Compiling and checking tests
[MASTER] 19:02:35.489 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_67_1573671755446/weka/classifiers/bayes/NaiveBayesMultinomialText_67_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_67_1573671755446/weka/classifiers/bayes/NaiveBayesMultinomialText_67_tmp__ESTest_scaffolding.java]]
[MASTER] 19:02:35.489 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 19:02:35.489 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 19:02:35.493 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 28
[MASTER] 19:02:35.493 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 28
[MASTER] 19:02:35.493 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 29
[MASTER] 19:02:35.494 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_67_1573671755446/weka/classifiers/bayes/NaiveBayesMultinomialText_67_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Nov 13 19:02:35 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.HashMap;
11: import java.util.LinkedHashMap;
12: import java.util.Map;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: import weka.classifiers.bayes.NaiveBayesMultinomialText;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class NaiveBayesMultinomialText_67_tmp__ESTest extends NaiveBayesMultinomialText_67_tmp__ESTest_scaffolding {
20: 
21:   /**
22:   //Test case number: 0
23:   /*Coverage entropy=1.4682921994113465
24:   */
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
28:       HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
29:       naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
30:       naiveBayesMultinomialText0.setPeriodicPruning(51);
31:       naiveBayesMultinomialText0.pruneDictionary();
32:       assertEquals(51, naiveBayesMultinomialText0.getPeriodicPruning());
33:   }
34: }
RegularFileObject[/tmp/EvoSuite_67_1573671755446/weka/classifiers/bayes/NaiveBayesMultinomialText_67_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Nov 13 19:02:35 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_67_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_67_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.core.DistanceFunction",
91:       "weka.classifiers.AbstractClassifier",
92:       "org.pentaho.packageManagement.PackageConstraint",
93:       "weka.attributeSelection.AttributeEvaluator",
94:       "weka.attributeSelection.GainRatioAttributeEval",
95:       "org.pentaho.packageManagement.Package",
96:       "weka.core.OptionHandler",
97:       "weka.core.xml.XMLBasicSerialization",
98:       "weka.core.WekaException",
99:       "weka.core.logging.Logger$Level",
100:       "weka.core.scripting.JythonSerializableObject",
101:       "weka.classifiers.Classifier",
102:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
103:       "weka.core.Capabilities$Capability",
104:       "weka.core.SparseInstance",
105:       "weka.core.DenseInstance",
106:       "org.pentaho.packageManagement.PackageManager",
107:       "weka.core.stemmers.Stemmer",
108:       "weka.core.tokenizers.WordTokenizer",
109:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
110:       "org.pentaho.packageManagement.DefaultPackageManager",
111:       "weka.core.stemmers.SnowballStemmer",
112:       "weka.classifiers.Evaluation",
113:       "weka.classifiers.functions.supportVector.Kernel",
114:       "weka.core.WekaPackageManager",
115:       "org.bounce.net.DefaultAuthenticator",
116:       "weka.filters.SupervisedFilter",
117:       "weka.core.TechnicalInformationHandler",
118:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
119:       "weka.core.Option",
120:       "weka.core.stemmers.NullStemmer",
121:       "weka.core.EnvironmentHandler",
122:       "weka.classifiers.functions.SGDText",
123:       "weka.core.Utils",
124:       "weka.core.tokenizers.Tokenizer",
125:       "weka.core.NoSupportForMissingValuesException",
126:       "weka.core.Attribute",
127:       "weka.core.Stopwords",
128:       "weka.classifiers.UpdateableClassifier",
129:       "weka.core.tokenizers.AlphabeticTokenizer",
130:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
131:       "weka.core.FastVector",
132:       "weka.core.MultiInstanceCapabilitiesHandler",
133:       "weka.core.Copyable",
134:       "weka.core.Capabilities",
135:       "weka.classifiers.MultipleClassifiersCombiner",
136:       "weka.core.BinarySparseInstance",
137:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
138:       "weka.core.tokenizers.NGramTokenizer",
139:       "weka.core.UnassignedDatasetException",
140:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
141:       "weka.classifiers.RandomizableClassifier",
142:       "weka.core.SerializedObject",
143:       "weka.clusterers.UpdateableClusterer",
144:       "weka.core.Summarizable",
145:       "weka.classifiers.SingleClassifierEnhancer",
146:       "weka.core.RevisionUtils",
147:       "weka.core.AdditionalMeasureProducer",
148:       "weka.core.neighboursearch.balltrees.BallNode",
149:       "org.pentaho.packageManagement.PackageManager$1",
150:       "weka.core.Instance",
151:       "weka.core.Drawable",
152:       "weka.core.ProtectedProperties",
153:       "weka.classifiers.meta.Vote",
154:       "weka.core.matrix.Matrix",
155:       "weka.core.AttributeStats",
156:       "weka.core.WeightedInstancesHandler",
157:       "weka.core.CapabilitiesHandler",
158:       "weka.classifiers.trees.DecisionStump",
159:       "weka.core.Randomizable",
160:       "weka.attributeSelection.ASEvaluation",
161:       "weka.core.AbstractInstance",
162:       "weka.core.Instances",
163:       "weka.core.scripting.JythonObject",
164:       "weka.core.SelectedTag",
165:       "org.pentaho.packageManagement.DefaultPackage",
166:       "weka.classifiers.misc.InputMappedClassifier",
167:       "weka.core.UnassignedClassException",
168:       "weka.classifiers.rules.ZeroR",
169:       "weka.core.Version",
170:       "weka.core.UnsupportedAttributeTypeException",
171:       "weka.core.TechnicalInformation",
172:       "weka.classifiers.Sourcable",
173:       "weka.core.RevisionHandler",
174:       "weka.classifiers.evaluation.output.prediction.PlainText",
175:       "weka.core.xml.XMLSerialization",
176:       "weka.classifiers.xml.XMLClassifier",
177:       "weka.filters.Filter",
178:       "weka.filters.supervised.attribute.Discretize",
179:       "weka.core.Tag"
180:     );
181:   } 
182: 
183:   private static void resetClasses() {
184:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_67_tmp__ESTest_scaffolding.class.getClassLoader()); 
185: 
186:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
187:       "weka.classifiers.AbstractClassifier",
188:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
189:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
190:       "weka.core.Capabilities$Capability",
191:       "weka.core.tokenizers.Tokenizer",
192:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
193:       "weka.core.tokenizers.WordTokenizer",
194:       "weka.core.stemmers.NullStemmer",
195:       "weka.core.tokenizers.NGramTokenizer",
196:       "weka.core.Option",
197:       "weka.core.Utils",
198:       "weka.core.neighboursearch.NearestNeighbourSearch",
199:       "weka.core.neighboursearch.LinearNNSearch",
200:       "weka.core.NormalizableDistance",
201:       "weka.core.EuclideanDistance",
202:       "weka.core.Range",
203:       "weka.core.AbstractInstance",
204:       "weka.core.SparseInstance",
205:       "weka.core.BinarySparseInstance",
206:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
207:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
208:       "weka.core.stemmers.LovinsStemmer",
209:       "weka.core.stemmers.IteratedLovinsStemmer",
210:       "weka.core.TechnicalInformation",
211:       "weka.core.TechnicalInformation$Type",
212:       "weka.core.TechnicalInformation$Field",
213:       "weka.core.neighboursearch.balltrees.BallNode",
214:       "weka.core.SerializedObject",
215:       "weka.core.DenseInstance",
216:       "weka.core.Attribute",
217:       "weka.core.ProtectedProperties",
218:       "weka.classifiers.RandomizableClassifier",
219:       "weka.core.Tag",
220:       "weka.classifiers.functions.SGDText",
221:       "weka.core.Capabilities",
222:       "org.pentaho.packageManagement.PackageManager",
223:       "org.pentaho.packageManagement.DefaultPackageManager",
224:       "weka.core.Version",
225:       "weka.core.Environment",
226:       "weka.core.WekaPackageManager",
227:       "weka.attributeSelection.ASEvaluation",
228:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
229:       "weka.attributeSelection.PrincipalComponents",
230:       "weka.core.tokenizers.AlphabeticTokenizer",
231:       "weka.filters.Filter",
232:       "weka.filters.supervised.attribute.Discretize",
233:       "weka.core.RevisionUtils",
234:       "weka.classifiers.SingleClassifierEnhancer",
235:       "weka.classifiers.misc.InputMappedClassifier",
236:       "weka.classifiers.rules.ZeroR",
237:       "weka.core.TestInstances",
238:       "weka.core.Instances",
239:       "weka.core.UnassignedDatasetException",
240:       "weka.classifiers.bayes.BayesNet",
241:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
242:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
243:       "weka.classifiers.bayes.net.search.local.K2",
244:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
245:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
246:       "weka.core.neighboursearch.CoverTree",
247:       "weka.core.stemmers.SnowballStemmer",
248:       "weka.core.stemmers.Stemming",
249:       "weka.classifiers.Evaluation",
250:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
251:       "weka.classifiers.meta.CostSensitiveClassifier",
252:       "weka.classifiers.CostMatrix",
253:       "weka.core.Stopwords",
254:       "weka.classifiers.meta.CVParameterSelection",
255:       "weka.core.FastVector",
256:       "weka.classifiers.functions.supportVector.Kernel",
257:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
258:       "weka.classifiers.bayes.NaiveBayes",
259:       "weka.attributeSelection.ReliefFAttributeEval",
260:       "weka.classifiers.bayes.NaiveBayesMultinomial",
261:       "weka.classifiers.lazy.IBk",
262:       "weka.core.SelectedTag",
263:       "weka.core.WekaException",
264:       "weka.core.UnsupportedAttributeTypeException",
265:       "weka.core.neighboursearch.KDTree",
266:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
267:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
268:       "weka.classifiers.meta.RegressionByDiscretization",
269:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
270:       "weka.filters.unsupervised.attribute.Discretize",
271:       "weka.classifiers.trees.J48",
272:       "weka.classifiers.IteratedSingleClassifierEnhancer",
273:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
274:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
275:       "weka.classifiers.meta.RandomCommittee",
276:       "weka.classifiers.trees.RandomTree",
277:       "weka.classifiers.bayes.net.BIFReader",
278:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
279:       "weka.core.neighboursearch.BallTree",
280:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
281:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
282:       "weka.core.neighboursearch.balltrees.BallSplitter",
283:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
284:       "weka.classifiers.MultipleClassifiersCombiner",
285:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
286:       "weka.classifiers.meta.MultiScheme",
287:       "weka.attributeSelection.CorrelationAttributeEval",
288:       "weka.classifiers.meta.MultiClassClassifier",
289:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
290:       "weka.classifiers.functions.Logistic",
291:       "weka.classifiers.functions.supportVector.StringKernel",
292:       "weka.estimators.Estimator",
293:       "weka.estimators.KernelEstimator",
294:       "weka.classifiers.meta.FilteredClassifier",
295:       "weka.filters.supervised.attribute.AttributeSelection",
296:       "weka.attributeSelection.AttributeSelection",
297:       "weka.attributeSelection.CfsSubsetEval",
298:       "weka.attributeSelection.ASSearch",
299:       "weka.attributeSelection.GreedyStepwise",
300:       "weka.attributeSelection.BestFirst",
301:       "weka.classifiers.rules.PART",
302:       "weka.classifiers.rules.part.MakeDecList",
303:       "weka.classifiers.meta.AdditiveRegression",
304:       "weka.classifiers.trees.DecisionStump",
305:       "weka.classifiers.meta.AttributeSelectedClassifier",
306:       "weka.estimators.NormalEstimator",
307:       "weka.core.UnassignedClassException",
308:       "weka.classifiers.functions.supportVector.CachedKernel",
309:       "weka.classifiers.functions.supportVector.PolyKernel",
310:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
311:       "weka.classifiers.functions.supportVector.RBFKernel",
312:       "weka.classifiers.meta.Bagging",
313:       "weka.classifiers.trees.REPTree",
314:       "weka.core.WekaEnumeration",
315:       "weka.core.Attribute$1",
316:       "weka.classifiers.functions.LinearRegression",
317:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
318:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
319:       "weka.classifiers.meta.Stacking",
320:       "weka.classifiers.trees.LMT",
321:       "weka.classifiers.trees.m5.M5Base",
322:       "weka.classifiers.rules.M5Rules",
323:       "weka.classifiers.trees.j48.ClassifierTree",
324:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
325:       "weka.classifiers.meta.Vote",
326:       "weka.classifiers.functions.VotedPerceptron",
327:       "weka.classifiers.rules.DecisionTable",
328:       "weka.estimators.PoissonEstimator",
329:       "weka.core.FindWithCapabilities",
330:       "weka.core.SingleIndex",
331:       "weka.core.ClassDiscovery",
332:       "weka.classifiers.rules.OneR",
333:       "weka.classifiers.functions.SGD",
334:       "weka.classifiers.functions.SimpleLinearRegression",
335:       "weka.classifiers.functions.GaussianProcesses",
336:       "weka.classifiers.functions.supportVector.Puk",
337:       "weka.classifiers.trees.RandomForest",
338:       "weka.classifiers.functions.SMO",
339:       "weka.classifiers.misc.SerializedClassifier",
340:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
341:       "weka.classifiers.rules.JRip",
342:       "weka.classifiers.functions.SMOreg",
343:       "weka.classifiers.functions.supportVector.RegOptimizer",
344:       "weka.classifiers.functions.supportVector.RegSMO",
345:       "weka.classifiers.functions.supportVector.RegSMOImproved",
346:       "weka.classifiers.lazy.LWL",
347:       "weka.classifiers.lazy.KStar",
348:       "weka.core.converters.ArffLoader$ArffReader",
349:       "weka.filters.AllFilter",
350:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
351:       "weka.classifiers.bayes.NaiveBayesUpdateable",
352:       "weka.attributeSelection.GainRatioAttributeEval",
353:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
354:       "weka.attributeSelection.InfoGainAttributeEval",
355:       "weka.filters.SimpleFilter",
356:       "weka.filters.SimpleStreamFilter",
357:       "weka.filters.MultiFilter",
358:       "weka.core.matrix.Matrix",
359:       "weka.classifiers.functions.SimpleLogistic",
360:       "weka.classifiers.meta.ClassificationViaRegression",
361:       "weka.classifiers.trees.M5P",
362:       "weka.estimators.DiscreteEstimator",
363:       "weka.classifiers.functions.MultilayerPerceptron",
364:       "weka.filters.unsupervised.attribute.NominalToBinary",
365:       "weka.classifiers.functions.neural.SigmoidUnit",
366:       "weka.classifiers.functions.neural.LinearUnit",
367:       "weka.core.AttributeStats",
368:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
369:       "weka.classifiers.meta.LogitBoost",
370:       "weka.classifiers.meta.AdaBoostM1",
371:       "weka.attributeSelection.WrapperSubsetEval",
372:       "weka.attributeSelection.OneRAttributeEval",
373:       "weka.core.Javadoc",
374:       "weka.core.GlobalInfoJavadoc",
375:       "weka.core.Check",
376:       "weka.core.CheckOptionHandler",
377:       "weka.core.Queue",
378:       "weka.core.AttributeLocator",
379:       "weka.core.StringLocator",
380:       "weka.core.RelationalLocator",
381:       "weka.core.ContingencyTables",
382:       "weka.core.Queue$QueueNode",
383:       "weka.core.Statistics",
384:       "weka.filters.unsupervised.attribute.Remove",
385:       "weka.filters.unsupervised.attribute.Standardize",
386:       "weka.core.Matrix",
387:       "weka.core.matrix.EigenvalueDecomposition",
388:       "weka.classifiers.functions.neural.NeuralConnection",
389:       "weka.classifiers.functions.MultilayerPerceptron$NeuralEnd",
390:       "weka.core.SerializationHelper",
391:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
392:       "weka.core.neighboursearch.PerformanceStats",
393:       "weka.experiment.Stats",
394:       "weka.core.ManhattanDistance",
395:       "weka.core.ChebyshevDistance"
396:     );
397:   }
398: }

[MASTER] 19:02:35.494 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
naiveBayesMultinomialText0.setPeriodicPruning(51);
naiveBayesMultinomialText0.pruneDictionary();
assertEquals(51, naiveBayesMultinomialText0.getPeriodicPruning());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing JUnit test case 'NaiveBayesMultinomialText_ESTest' to /home/ubuntu/termite/mosa/tests/s1000/107_weka/evosuite-tests
* Done!

* Computation finished
