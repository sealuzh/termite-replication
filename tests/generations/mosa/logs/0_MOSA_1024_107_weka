* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.experiment.ResultMatrix
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.rules.JRip
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 8334
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 8336
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:19:56.754 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:19:56.765 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:19:56.765 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:19:56.899 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.experiment.ResultMatrix
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 2699
* Using seed 1024
* Starting evolution
[MASTER] 00:20:02.878 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:20:02.908 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:20:02.909 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:20:05.276 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 00:20:05.844 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 00:20:05.845 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.classifiers.rules.JRip
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 2767
* Using seed 1024
* Starting evolution
[MASTER] 00:21:07.463 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
* Search finished after 276s and 49 generations, 30467 statements, best individual has fitness: 2136.0
* Search finished after 275s and 262 generations, 103800 statements, best individual has fitness: 12544.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 37%
* Total number of goals: 705
* Number of covered goals: 260
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 27%
* Total number of goals: 416
* Number of covered goals: 113
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 55%
* Total number of goals: 993
* Number of covered goals: 546
* Coverage analysis for criterion OUTPUT
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion OUTPUT: 30%
* Total number of goals: 93
* Number of covered goals: 28
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 27%
* Total number of goals: 416
* Number of covered goals: 113
* Generated 76 tests with total length 491
* Resulting test suite's coverage: 44% (average coverage for all fitness functions)
* Generating assertions
* Coverage of criterion LINE: 98%
* Total number of goals: 647
* Number of covered goals: 633
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 95%
* Total number of goals: 441
* Number of covered goals: 420
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 678
* Number of covered goals: 620
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 244
* Number of covered goals: 108
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 124
* Number of covered goals: 124
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 124
* Number of covered goals: 124
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 92%
* Total number of goals: 441
* Number of covered goals: 405
* Generated 221 tests with total length 1546
* Resulting test suite's coverage: 90% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 24%
* Compiling and checking tests
[MASTER] 00:25:51.670 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 00:25:51.789 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 00:25:51.883 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 00:25:51.883 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing JUnit test case 'JRip_ESTest' to /home/ubuntu/termite/mosa/tests/s1024/107_weka/evosuite-tests
* Done!

* Computation finished
[MASTER] 00:30:19.344 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6833708333333334% of time used, but only 81/221 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 20%
* Compiling and checking tests
* Permissions denied during test execution: 
[MASTER] 00:31:46.954 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing JUnit test case 'ResultMatrix_ESTest' to /home/ubuntu/termite/mosa/tests/s1024/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.Evaluation
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.filters.unsupervised.attribute.Discretize
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 8338
* Connecting to master process on port 8340
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:32:26.810 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:32:26.830 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:32:26.852 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:32:27.033 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 00:32:27.049 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 00:32:27.050 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.filters.unsupervised.attribute.Discretize
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1729
* Using seed 1024
* Starting evolution
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:32:51.428 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:32:51.436 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:32:51.438 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:32:52.382 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 00:32:53.712 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 00:32:53.713 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 00:32:56.993 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 00:32:57.060 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 00:32:57.079 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 00:32:57.079 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 00:32:57.080 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 00:32:57.081 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 00:32:57.081 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 00:32:57.083 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 00:32:57.084 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 00:32:57.257 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 00:32:57.291 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class weka.classifiers.Evaluation
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 3904
* Using seed 1024
* Starting evolution
[MASTER] 00:33:04.952 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
[MASTER] 00:34:56.850 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 235s and 369 generations, 99135 statements, best individual has fitness: 8536.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 44%
* Total number of goals: 370
* Number of covered goals: 164
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 31%
* Total number of goals: 242
* Number of covered goals: 76
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 33%
* Total number of goals: 713
* Number of covered goals: 233
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 72
* Number of covered goals: 31
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 45
* Number of covered goals: 44
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 31%
* Total number of goals: 242
* Number of covered goals: 76
* Generated 66 tests with total length 282
* Resulting test suite's coverage: 39% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 256s and 118 generations, 55310 statements, best individual has fitness: 14560.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 61%
* Total number of goals: 1378
* Number of covered goals: 838
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 46%
* Total number of goals: 809
* Number of covered goals: 372
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 74
* Number of covered goals: 74
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 63%
* Total number of goals: 424
* Number of covered goals: 267
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 23%
* Total number of goals: 278
* Number of covered goals: 63
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 103
* Number of covered goals: 102
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 99%
* Total number of goals: 103
* Number of covered goals: 102
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 44%
* Total number of goals: 809
* Number of covered goals: 356
* Generated 171 tests with total length 1625
* Resulting test suite's coverage: 54% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 00:38:03.562 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:03.563 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
String string0 = discretize0.makeBinaryTipText();
assertFalse(discretize0.getMakeBinary());
assertFalse(discretize0.getFindNumBins());
assertFalse(discretize0.getUseBinNumbers());
assertFalse(discretize0.getUseEqualFrequency());
assertEquals(10, discretize0.getBins());
assertEquals("Make resulting attributes binary.", string0);
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);


[MASTER] 00:38:04.082 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: unable to create new native thread
[MASTER] 00:38:04.894 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 00:38:05.033 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 00:38:06.023 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:06.023 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.getBinRangesString(109);
assertFalse(discretize0.getFindNumBins());
assertEquals(10, discretize0.getBins());
assertFalse(discretize0.getMakeBinary());
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
assertFalse(discretize0.getUseBinNumbers());
assertFalse(discretize0.getUseEqualFrequency());


[MASTER] 00:38:07.968 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:07.968 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
assertFalse(discretize0.getUseBinNumbers());

discretize0.setUseBinNumbers(true);
assertTrue(discretize0.getUseBinNumbers());


[MASTER] 00:38:08.687 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:08.687 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
boolean boolean0 = discretize0.getMakeBinary();
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
assertFalse(discretize0.getFindNumBins());
assertFalse(discretize0.getUseBinNumbers());
assertFalse(discretize0.getUseEqualFrequency());
assertFalse(boolean0);
assertEquals(10, discretize0.getBins());


[MASTER] 00:38:09.728 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:09.728 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize("");
discretize0.setAttributeIndices("");
assertEquals(10, discretize0.getBins());
assertFalse(discretize0.getMakeBinary());
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
assertFalse(discretize0.getFindNumBins());
assertFalse(discretize0.getUseBinNumbers());
assertFalse(discretize0.getUseEqualFrequency());


[MASTER] 00:38:11.894 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:11.895 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
assertFalse(discretize0.getUseEqualFrequency());

discretize0.setUseEqualFrequency(true);
discretize0.listOptions();
assertTrue(discretize0.getUseEqualFrequency());


[MASTER] 00:38:13.869 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:13.869 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.findNumBins((-366));

[MASTER] 00:38:14.133 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:14.133 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
int int0 = discretize0.getBins();
assertEquals(10, int0);
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
assertFalse(discretize0.getUseBinNumbers());
assertFalse(discretize0.getMakeBinary());
assertFalse(discretize0.getUseEqualFrequency());
assertFalse(discretize0.getFindNumBins());


[MASTER] 00:38:16.753 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:16.753 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
assertFalse(discretize0.getFindNumBins());
assertFalse(discretize0.getUseEqualFrequency());
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
assertFalse(discretize0.getUseBinNumbers());
assertEquals(10, discretize0.getBins());
assertFalse(discretize0.getMakeBinary());

Discretize discretize1 = new Discretize("");
String[] stringArray0 = discretize1.getOptions();
assertEquals(10, discretize1.getBins());
assertEquals(4, stringArray0.length);
assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);


[MASTER] 00:38:18.136 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:18.136 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
assertFalse(discretize0.getMakeBinary());
assertFalse(discretize0.getFindNumBins());
assertEquals(10, discretize0.getBins());
assertFalse(discretize0.getUseBinNumbers());
assertEquals((-1.0), double0, 0.01);
assertFalse(discretize0.getUseEqualFrequency());


[MASTER] 00:38:21.648 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:21.649 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
int[] intArray0 = new int[1];
discretize0.setAttributeIndicesArray((int[]) null);

[MASTER] 00:38:22.017 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:22.017 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.setMakeBinary(true);
discretize0.setIgnoreClass(true);
discretize0.setInputFormat((Instances) null);

[MASTER] 00:38:22.331 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:22.331 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
assertFalse(discretize0.getFindNumBins());

discretize0.setFindNumBins(true);
discretize0.getOptions();
assertTrue(discretize0.getFindNumBins());


[MASTER] 00:38:22.652 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:22.652 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.m_DiscretizeCols = null;
FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8,yG5nw@?q|p<u");
double double0 = Double.NEGATIVE_INFINITY;
discretize0.setDesiredWeightOfInstancesPerInterval(Double.NEGATIVE_INFINITY);
discretize0.getAttributeIndices();

[MASTER] 00:38:24.118 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:24.118 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.setInvertSelection(true);
String[] stringArray0 = discretize0.getOptions();
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
assertEquals(7, stringArray0.length);
assertEquals(10, discretize0.getBins());


[MASTER] 00:38:26.492 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:26.492 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
assertFalse(discretize0.getUseBinNumbers());

discretize0.m_UseBinNumbers = true;
discretize0.getOptions();
boolean boolean0 = discretize0.getUseBinNumbers();
assertTrue(boolean0);


[MASTER] 00:38:27.533 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test12 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.533 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.convertInstance((Instance) null);

[MASTER] 00:38:27.533 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test13 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.533 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
int[] intArray0 = new int[0];
discretize0.setAttributeIndicesArray(intArray0);
assertEquals(10, discretize0.getBins());
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
assertFalse(discretize0.getFindNumBins());
assertFalse(discretize0.getUseEqualFrequency());
assertFalse(discretize0.getMakeBinary());
assertFalse(discretize0.getUseBinNumbers());


[MASTER] 00:38:27.534 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test14 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.534 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
Discretize.main((String[]) null);
discretize0.calculateCutPoints();

[MASTER] 00:38:27.534 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test15 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.534 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.setBins(659);
assertEquals(659, discretize0.getBins());


[MASTER] 00:38:27.534 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test16 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.535 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.batchFinished();

[MASTER] 00:38:27.535 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test07 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.535 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.setInvertSelection(false);
boolean boolean0 = discretize0.getInvertSelection();
assertFalse(discretize0.getMakeBinary());
assertFalse(discretize0.getUseEqualFrequency());
assertFalse(discretize0.getUseBinNumbers());
assertFalse(boolean0);
assertEquals(10, discretize0.getBins());
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
assertFalse(discretize0.getFindNumBins());


[MASTER] 00:38:27.535 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test42 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.535 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
double[][] doubleArray0 = new double[14][0];
discretize0.m_CutPoints = doubleArray0;
discretize0.getBinRangesString(11);

[MASTER] 00:38:27.535 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test43 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.535 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test04 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.535 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
String string0 = discretize0.globalInfo();
assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
assertFalse(discretize0.getFindNumBins());
assertFalse(discretize0.getUseEqualFrequency());
assertFalse(discretize0.getUseBinNumbers());
assertEquals(10, discretize0.getBins());
assertFalse(discretize0.getMakeBinary());
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);


[MASTER] 00:38:27.536 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test48 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.536 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test05 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.536 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
String string0 = discretize0.findNumBinsTipText();
assertFalse(discretize0.getUseEqualFrequency());
assertFalse(discretize0.getFindNumBins());
assertFalse(discretize0.getMakeBinary());
assertFalse(discretize0.getUseBinNumbers());
assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
assertEquals(10, discretize0.getBins());
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);


[MASTER] 00:38:27.536 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test49 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.536 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test40 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.540 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
String[] stringArray0 = new String[4];
stringArray0[0] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
stringArray0[1] = "zGbdE^;*hl*h(EW,";
stringArray0[2] = "";
stringArray0[3] = "-B";
discretize0.setOptions(stringArray0);

[MASTER] 00:38:27.541 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test41 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.541 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test39 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.541 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize("@)1y|=Q%(Z>");
SystemInUtil.addInputLine("@)1y|=Q%(Z>");
discretize0.getAttributeIndices();
SystemInUtil.addInputLine("@)1y|=Q%(Z>");
discretize0.getOptions();
discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
discretize0.getInvertSelection();
discretize0.binsTipText();
discretize0.attributeIndicesTipText();
discretize0.getOptions();
discretize0.getOptions();
FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
discretize0.getCutPoints((-1111));
discretize0.findNumBinsTipText();
discretize0.getCapabilities();
discretize0.getUseEqualFrequency();
discretize0.setOutputFormat();
discretize0.makeBinaryTipText();
discretize0.getUseEqualFrequency();
discretize0.getDesiredWeightOfInstancesPerInterval();
discretize0.findNumBinsTipText();
discretize0.getBins();
discretize0.findNumBins(4110);

[MASTER] 00:38:27.542 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test31 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.542 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
double[][] doubleArray0 = new double[3][1];
double[] doubleArray1 = new double[6];
doubleArray1[0] = 0.5;
doubleArray1[1] = 0.0;
doubleArray1[2] = 0.5;
doubleArray1[3] = (-569.4229141);
doubleArray1[4] = 0.5;
doubleArray1[5] = (-3468.46971551);
doubleArray0[1] = doubleArray1;
double[] doubleArray2 = new double[4];
discretize0.m_IgnoreClass = false;
doubleArray2[1] = (-569.4229141);
doubleArray2[2] = 0.5;
doubleArray0[2] = doubleArray2;
discretize0.m_CutPoints = doubleArray0;
FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{,\"}");
discretize0.getCutPoints(11);

[MASTER] 00:38:27.542 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test33 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.543 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.getCapabilities();
discretize0.m_DiscretizeCols = null;
discretize0.getOptions();

[MASTER] 00:38:27.543 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test34 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.544 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
String[] stringArray0 = new String[8];
stringArray0[0] = "acfi";
stringArray0[1] = "    // generate output format\n";
stringArray0[2] = "uy|!<A}[[l";
stringArray0[3] = "-B";
stringArray0[4] = "51}2ub#3+pU2n3";
stringArray0[5] = "e,vv^|[</ihq1hze6";
stringArray0[6] = "*";
stringArray0[7] = "   * @return\t\tthe Object array representing the instances\n";
discretize0.setOptions(stringArray0);

[MASTER] 00:38:27.544 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test35 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.545 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.m_NumBins = (-1967);
int int0 = discretize0.getBins();
assertEquals((-1967), int0);


[MASTER] 00:38:27.545 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test36 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:27.546 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test37 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.168 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test18 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
String string0 = discretize0.getRevision();
assertEquals(10, discretize0.getBins());
assertEquals("8964", string0);
assertFalse(discretize0.getFindNumBins());
assertFalse(discretize0.getMakeBinary());
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
assertFalse(discretize0.getUseEqualFrequency());
assertFalse(discretize0.getUseBinNumbers());


[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test19 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.input((Instance) null);

[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test02 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
assertFalse(discretize0.getUseEqualFrequency());

discretize0.setUseEqualFrequency(true);
discretize0.getOptions();
assertTrue(discretize0.getUseEqualFrequency());


[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test24 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.calculateCutPointsByEqualWidthBinning(115);

[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test03 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
String string0 = discretize0.useEqualFrequencyTipText();
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
assertFalse(discretize0.getUseBinNumbers());
assertFalse(discretize0.getUseEqualFrequency());
assertFalse(discretize0.getFindNumBins());
assertEquals(10, discretize0.getBins());
assertFalse(discretize0.getMakeBinary());


[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test04 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
Instances instances0 = new Instances("c:0J", arrayList0, 70);
discretize0.setInputFormat(instances0);

[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test26 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize((String) null);

[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test05 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.169 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
assertFalse(discretize0.getMakeBinary());
assertFalse(discretize0.getFindNumBins());
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
assertEquals(10, discretize0.getBins());
assertFalse(discretize0.getUseEqualFrequency());
assertFalse(discretize0.getUseBinNumbers());


[MASTER] 00:38:28.170 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test27 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.170 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test20 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.170 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.setDesiredWeightOfInstancesPerInterval((-1179.3554961546));
discretize0.getCapabilities();
assertEquals((-1179.3554961546), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);


[MASTER] 00:38:28.170 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test21 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.170 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
boolean boolean0 = discretize0.getUseBinNumbers();
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
assertFalse(boolean0);
assertFalse(discretize0.getUseEqualFrequency());
assertFalse(discretize0.getFindNumBins());
assertFalse(discretize0.getMakeBinary());
assertEquals(10, discretize0.getBins());


[MASTER] 00:38:28.170 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test00 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.170 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.setInvertSelection(true);
boolean boolean0 = discretize0.getInvertSelection();
assertEquals(10, discretize0.getBins());
assertFalse(discretize0.getUseBinNumbers());
assertFalse(discretize0.getUseEqualFrequency());
assertFalse(discretize0.getMakeBinary());
assertFalse(discretize0.getFindNumBins());
assertTrue(boolean0);
assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);


[MASTER] 00:38:28.170 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test22 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.170 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
String[] stringArray0 = Locale.getISOLanguages();
Filter.filterFile(discretize0, stringArray0);

[MASTER] 00:38:28.170 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test23 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.170 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test06 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:38:28.170 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
discretize0.setAttributeIndices((String) null);

[MASTER] 00:38:28.170 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test28 -> class java.lang.OutOfMemoryError: unable to create new native thread
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing JUnit test case 'Discretize_ESTest' to /home/ubuntu/termite/mosa/tests/s1024/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 8%
[MASTER] 00:45:28.323 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 00:45:37.444 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 00:45:37.962 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 00:45:37.962 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
[MASTER] 00:45:38.407 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:45:38.407 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Evaluation evaluation0 = new Evaluation((Instances) null);

[MASTER] 00:45:39.673 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 00:45:39.687 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.AllJavadoc: null
[MASTER] 00:45:40.153 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.AllJavadoc
[MASTER] 00:45:40.609 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: unable to create new native thread
[MASTER] 00:45:43.697 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:45:43.697 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
Instances instances0 = new Instances("globalInfo", arrayList0, 1326);
CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);

[MASTER] 00:45:45.834 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:45:45.834 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Evaluation.getGlobalInfo((Classifier) null);

[MASTER] 00:45:48.305 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:45:48.305 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate("");
Evaluation.handleCostOption((String) null, (-2));
Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
double double0 = evaluation0.numInstances();
assertEquals(0.0, double0, 0.01);
assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);


[MASTER] 00:45:51.217 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:45:51.218 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate(" ");
Evaluation evaluation0 = new Evaluation(instances0);
String string0 = evaluation0.toClassDetailsString(".arff");
assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);

evaluation0.KBMeanInformation();
assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);


[MASTER] 00:45:52.168 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:45:52.169 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate(" ");
Evaluation evaluation0 = new Evaluation(instances0);
double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
double double1 = evaluation0.meanPriorAbsoluteError();
assertEquals(double1, double0, 0.01);

Float float0 = new Float((double) (-2));
double double2 = evaluation0.KBRelativeInformation();
assertEquals(0.0, double2, 0.01);
assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);


[MASTER] 00:45:53.230 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:45:53.231 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
Instances instances0 = textDirectoryLoader0.getStructure();
Evaluation evaluation0 = new Evaluation(instances0);
double double0 = evaluation0.truePositiveRate((-939));
assertEquals(0.0, double0, 0.01);

double double1 = evaluation0.KBMeanInformation();
assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
assertNotEquals(double1, double0, 0.01);
assertEquals(Double.NaN, double1, 0.01);


[MASTER] 00:45:56.469 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:45:56.469 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate(" ");
Evaluation evaluation0 = new Evaluation(instances0);
WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
MockRandom mockRandom0 = new MockRandom(1);
evaluation0.crossValidateModel("1995", instances0, (-1), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);

[MASTER] 00:45:57.481 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:45:57.481 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate(" ");
Evaluation evaluation0 = new Evaluation(instances0);
double double0 = evaluation0.unclassified();
assertEquals(0.0, double0, 0.01);
assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);


[MASTER] 00:45:58.630 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:45:58.630 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
Instances instances0 = textDirectoryLoader0.getDataSet();
Evaluation evaluation0 = new Evaluation(instances0);
String string0 = evaluation0.toSummaryString(false);
assertEquals(0.0, evaluation0.unclassified(), 0.01);
assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);


[MASTER] 00:45:59.777 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:45:59.777 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
Instances instances0 = textDirectoryLoader0.getDataSet();
Evaluation evaluation0 = new Evaluation(instances0);
double double0 = evaluation0.SFEntropyGain();
assertEquals(0.0, double0, 0.01);

String string0 = evaluation0.toSummaryString(".arff", false);
assertEquals(".arff\nTotal Number of Instances                0     \n", string0);
assertEquals(0.0, evaluation0.unclassified(), 0.01);


[MASTER] 00:46:00.703 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:46:00.703 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate();
Evaluation evaluation0 = new Evaluation(instances0);
evaluation0.SFSchemeEntropy();
Evaluation.main(testInstances0.DEFAULT_WORDS);
assertFalse(testInstances0.getMultiInstance());


[MASTER] 00:46:02.927 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:46:02.927 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate("g");
Evaluation evaluation0 = new Evaluation(instances0);
evaluation0.priorEntropy();
evaluation0.KBRelativeInformation();
Evaluation.main(testInstances0.DEFAULT_WORDS);
M5P m5P0 = new M5P();
evaluation0.updatePriors((Instance) null);

[MASTER] 00:46:03.939 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:46:03.939 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate(" ");
Evaluation evaluation0 = new Evaluation(instances0);
evaluation0.KBMeanInformation();
double[] doubleArray0 = new double[4];
doubleArray0[0] = (double) (-1);
doubleArray0[1] = (double) (-1);
doubleArray0[2] = Double.NaN;
doubleArray0[3] = (double) (-2);
BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
evaluation0.updatePriors(binarySparseInstance0);

[MASTER] 00:46:06.230 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:46:06.231 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate(" ");
Evaluation evaluation0 = new Evaluation(instances0);
SparseInstance sparseInstance0 = new SparseInstance(14);
BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
RandomSubSpace randomSubSpace0 = new RandomSubSpace();
evaluation0.evaluationForSingleInstance((Classifier) randomSubSpace0, (Instance) sparseInstance0, false);

[MASTER] 00:46:07.184 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:46:07.184 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Stacking stacking0 = new Stacking();
Capabilities capabilities0 = new Capabilities(stacking0);
TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
AbstractClassifier.runClassifier((Classifier) null, testInstances0.DEFAULT_WORDS);
Evaluation.makeOptionString(stacking0, true);
Evaluation evaluation0 = new Evaluation(instances0);
LogitBoost logitBoost0 = new LogitBoost();
int[] intArray0 = new int[0];
BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(546, intArray0, 546);
evaluation0.evaluateModelOnce((Classifier) stacking0, (Instance) binarySparseInstance0);

[MASTER] 00:46:08.245 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:46:08.245 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate(" ");
Evaluation evaluation0 = new Evaluation(instances0);
double double0 = evaluation0.falseNegativeRate((-375));
assertEquals(0.0, double0, 0.01);

String string0 = evaluation0.getRevision();
assertEquals("9101", string0);
assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);


[MASTER] 00:46:09.714 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:46:09.715 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate(" ");
Evaluation evaluation0 = new Evaluation(instances0);
double double0 = evaluation0.weightedAreaUnderPRC();
assertEquals(Double.NaN, double0, 0.01);

Evaluation evaluation1 = new Evaluation(instances0);
double double1 = evaluation1.KBInformation();
assertEquals(0.0, double1, 0.01);
assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);


[MASTER] 00:46:12.905 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:46:12.905 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate(" ");
Evaluation evaluation0 = new Evaluation(instances0);
evaluation0.addNumericTrainClass((-1), (-2));
double double0 = evaluation0.weightedAreaUnderROC();
assertEquals(Double.NaN, double0, 0.01);

double double1 = evaluation0.falseNegativeRate((-1));
assertNotEquals(double1, double0, 0.01);


[MASTER] 00:46:13.959 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:46:13.960 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
Instances instances0 = textDirectoryLoader0.getDataSet();
Evaluation evaluation0 = new Evaluation(instances0);
String string0 = evaluation0.toMatrixString();
assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);


[MASTER] 00:46:19.447 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:46:19.447 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
Instances instances0 = textDirectoryLoader0.getStructure();
Evaluation evaluation0 = new Evaluation(instances0);
evaluation0.m_NumTrainClassVals = 1326;
double double0 = evaluation0.m_SumSqrClass;
double double1 = evaluation0.m_WithClass;
boolean boolean0 = evaluation0.getDiscardPredictions();
assertFalse(boolean0);
assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);


[MASTER] 00:46:20.393 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:46:20.393 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate(" ");
Evaluation evaluation0 = new Evaluation(instances0);
evaluation0.addNumericTrainClass((-1), (-2));
Evaluation.main(testInstances0.DEFAULT_WORDS);
assertEquals(0, testInstances0.getNumRelationalDate());


[MASTER] 00:46:22.470 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:46:22.470 [logback-1] WARN  JUnitAnalyzer - Failing test:
 String[] stringArray0 = new String[5];
TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
Instances instances0 = textDirectoryLoader0.getStructure();
int int0 = 20;
textDirectoryLoader0.setRetrieval(20);
TextDirectoryLoader.main(stringArray0);
double[] doubleArray0 = new double[1];
doubleArray0[0] = (-1058.5134);
DenseInstance denseInstance0 = new DenseInstance((-455.90939699211), doubleArray0);
instances0.add((Instance) denseInstance0);
Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);

[MASTER] 00:46:24.707 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:46:24.707 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LogitBoost logitBoost0 = new LogitBoost();
TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate(" ");
Evaluation evaluation0 = new Evaluation(instances0);
CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
costSensitiveClassifier0.getCostMatrix();
Evaluation evaluation1 = new Evaluation(instances0);
double[] doubleArray0 = new double[2];
doubleArray0[0] = (double) 1;
doubleArray0[1] = (double) (-1);
evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);

[MASTER] 00:46:25.745 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: unable to create new native thread
[MASTER] 00:46:25.745 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate("f");
Evaluation evaluation0 = new Evaluation(instances0);
evaluation0.kappa();
double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
assertEquals(0.0, double0, 0.01);

evaluation0.rootRelativeSquaredError();
assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing JUnit test case 'Evaluation_ESTest' to /home/ubuntu/termite/mosa/tests/s1024/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.bayes.NaiveBayesMultinomialText
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.core.Optimization
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 8336
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 8333
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:07:58.925 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 01:07:58.926 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 01:07:58.934 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 01:07:59.054 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:07:59.060 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:07:59.087 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class weka.classifiers.bayes.NaiveBayesMultinomialText
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1412
* Using seed 1024
* Starting evolution
[MASTER] 01:08:05.532 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 01:08:05.533 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:08:07.915 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:08:07.927 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:08:07.928 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:08:07.941 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.core.Optimization
[MASTER] 01:08:08.198 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setStemmer(Lweka/core/stemmers/Stemmer;)V: Line 525
[MASTER] 01:08:08.199 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.toString()Ljava/lang/String;: Line 1084
[MASTER] 01:08:08.199 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.toString()Ljava/lang/String;: Line 1085
[MASTER] 01:08:08.200 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setStemmer(Lweka/core/stemmers/Stemmer;)V: I3 Branch 47 IFNULL L524 - false
[MASTER] 01:08:08.200 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.toString()Ljava/lang/String;: I4 Branch 70 IFNONNULL L1084 - false
[MASTER] 01:08:08.210 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 240: weka.classifiers.bayes.NaiveBayesMultinomialText.setStemmer(Lweka/core/stemmers/Stemmer;)V:525 - ReplaceVariable value -> m_stemmer
[MASTER] 01:08:08.228 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 435: weka.classifiers.bayes.NaiveBayesMultinomialText.toString()Ljava/lang/String;:1084 - ReplaceComparisonOperator != null -> = null
[MASTER] 01:08:08.228 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 436: weka.classifiers.bayes.NaiveBayesMultinomialText.toString()Ljava/lang/String;:1085 - ReplaceConstant - NaiveBayesMultinomialText: No model built yet.
 -> 
[MASTER] 01:08:08.228 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.bayes.NaiveBayesMultinomialText.getStemmer()Lweka/core/stemmers/Stemmer;:NonNull
[MASTER] 01:08:08.228 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.bayes.NaiveBayesMultinomialText.getTokenizer()Lweka/core/tokenizers/Tokenizer;:NonNull
[MASTER] 01:08:08.228 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.bayes.NaiveBayesMultinomialText.getMinWordFrequency()D:Zero
[MASTER] 01:08:08.229 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.bayes.NaiveBayesMultinomialText.toString()Ljava/lang/String;:NonEmptyString
[MASTER] 01:08:08.229 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.bayes.NaiveBayesMultinomialText.setStemmer(Lweka/core/stemmers/Stemmer;)V
[MASTER] 01:08:08.229 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.bayes.NaiveBayesMultinomialText.getStemmer()Lweka/core/stemmers/Stemmer;
[MASTER] 01:08:08.229 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.bayes.NaiveBayesMultinomialText.getTokenizer()Lweka/core/tokenizers/Tokenizer;
[MASTER] 01:08:08.231 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.bayes.NaiveBayesMultinomialText.getMinWordFrequency()D
[MASTER] 01:08:08.232 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.bayes.NaiveBayesMultinomialText.toString()Ljava/lang/String;
[MASTER] 01:08:08.234 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.bayes.NaiveBayesMultinomialText.setStemmer(Lweka/core/stemmers/Stemmer;)V
[MASTER] 01:08:08.235 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.bayes.NaiveBayesMultinomialText.getStemmer()Lweka/core/stemmers/Stemmer;
[MASTER] 01:08:08.235 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.bayes.NaiveBayesMultinomialText.getTokenizer()Lweka/core/tokenizers/Tokenizer;
[MASTER] 01:08:08.235 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.bayes.NaiveBayesMultinomialText.getMinWordFrequency()D
[MASTER] 01:08:08.235 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.bayes.NaiveBayesMultinomialText.toString()Ljava/lang/String;
[MASTER] 01:08:08.235 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.toString()Ljava/lang/String;: I4 Branch 70 IFNONNULL L1084 - false in context: weka.classifiers.bayes.NaiveBayesMultinomialText:toString()Ljava/lang/String;
[MASTER] 01:08:08.235 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getTokenizer()Lweka/core/tokenizers/Tokenizer;: root-Branch in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getTokenizer()Lweka/core/tokenizers/Tokenizer;
[MASTER] 01:08:08.236 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setStemmer(Lweka/core/stemmers/Stemmer;)V: I3 Branch 47 IFNULL L524 - false in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setStemmer(Lweka/core/stemmers/Stemmer;)V
[MASTER] 01:08:08.236 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getMinWordFrequency()D: root-Branch in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getMinWordFrequency()D
[MASTER] 01:08:08.236 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getStemmer()Lweka/core/stemmers/Stemmer;: root-Branch in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getStemmer()Lweka/core/stemmers/Stemmer;
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 2499
* Using seed 1024
* Starting evolution
[MASTER] 01:08:13.062 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.core.Optimization.DynamicIntArray.<init>(Lweka/core/Optimization;I)V
[MASTER] 01:11:32.216 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 304s and 315 generations, 125433 statements, best individual has fitness: 1408.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 91%
* Total number of goals: 338
* Number of covered goals: 306
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 194
* Number of covered goals: 164
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 476
* Number of covered goals: 446
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 53%
* Total number of goals: 112
* Number of covered goals: 59
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 194
* Number of covered goals: 163
* Generated 81 tests with total length 550
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 319s and 128 generations, 82575 statements, best individual has fitness: 16712.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 10%
* Total number of goals: 620
* Number of covered goals: 59
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 28%
* Total number of goals: 926
* Number of covered goals: 258
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 10%
* Total number of goals: 21
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Generated 21 tests with total length 90
* Resulting test suite's coverage: 16% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 17%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing JUnit test case 'Optimization_ESTest' to /home/ubuntu/termite/mosa/tests/s1024/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 52%
* Compiling and checking tests
[MASTER] 01:17:06.448 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.AllJavadoc: null
[MASTER] 01:17:06.525 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.AllJavadoc
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing JUnit test case 'NaiveBayesMultinomialText_ESTest' to /home/ubuntu/termite/mosa/tests/s1024/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.core.stemmers.LovinsStemmer
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 8338
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class weka.core.stemmers.LovinsStemmer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1367
* Using seed 1024
* Starting evolution
* Search finished after 286s and 243 generations, 104662 statements, best individual has fitness: 2728.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 88%
* Total number of goals: 217
* Number of covered goals: 191
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 67%
* Total number of goals: 428
* Number of covered goals: 286
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 260
* Number of covered goals: 239
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 18
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 67%
* Total number of goals: 428
* Number of covered goals: 286
* Generated 86 tests with total length 227
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 77%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing JUnit test case 'LovinsStemmer_ESTest' to /home/ubuntu/termite/mosa/tests/s1024/107_weka/evosuite-tests
* Done!

* Computation finished
