* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: org.firebirdsql.jdbc.FBCachedFetcher
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/110_firebird/evosuite-files/evosuite.properties
* Connecting to master process on port 18389
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 17:57:45.204 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 17:57:45.217 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 17:57:45.220 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 17:57:45.594 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.sql.SQLType
[MASTER] 17:57:46.587 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 17:57:46.591 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 17:57:46.598 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 17:57:48.405 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 17:57:48.447 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 17:57:48.448 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 17:57:48.610 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 17:57:48.611 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 17:57:48.612 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 17:57:48.612 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 17:57:48.632 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 17:57:48.633 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 17:57:49.175 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 17:57:49.514 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.firebirdsql.jdbc.FBCachedFetcher
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 813
* Using seed 1018
* Starting evolution
[MASTER] 17:57:58.192 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] org.firebirdsql.jdbc.FBCachedFetcher.<init>(Lorg/firebirdsql/gds/impl/GDSHelper;IILorg/firebirdsql/gds/impl/AbstractIscStmtHandle;Lorg/firebirdsql/jdbc/FBObjectListener$FetcherListener;Z)V
[MASTER] 17:57:58.195 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] org.firebirdsql.jdbc.FBCachedFetcher.afterLast()V
[MASTER] 17:57:58.201 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.firebirdsql.jdbc.FBCachedFetcher.<init>(Lorg/firebirdsql/gds/impl/GDSHelper;IILorg/firebirdsql/gds/impl/AbstractIscStmtHandle;Lorg/firebirdsql/jdbc/FBObjectListener$FetcherListener;Z)V
[MASTER] 17:57:58.202 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.firebirdsql.jdbc.FBCachedFetcher.afterLast()V
[MASTER] 17:58:23.245 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 17:58:36.601 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 17:58:37.449 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 17:59:22.044 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.Class<T> : Type points to itself
[MASTER] 17:59:35.168 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 241s and 567 generations, 265497 statements, best individual has fitness: 1600.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 63%
* Total number of goals: 158
* Number of covered goals: 100
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 51%
* Total number of goals: 118
* Number of covered goals: 60
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 15
* Number of covered goals: 15
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 347
* Number of covered goals: 335
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 96%
* Total number of goals: 28
* Number of covered goals: 27
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 40%
* Total number of goals: 118
* Number of covered goals: 47
* Generated 53 tests with total length 304
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 64%
* Compiling and checking tests
[MASTER] 18:02:10.022 [logback-2] ERROR ClassStateSupport - Could not initialize org.firebirdsql.gds.impl.jni.JniGDSImpl: no jaybird22_x64 in java.library.path
[MASTER] 18:02:10.071 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class org.firebirdsql.gds.impl.jni.JniGDSImpl
* Permissions denied during test execution: 
  - java.security.SecurityPermission: 
         createAccessControlContext: 1
  - javax.security.auth.AuthPermission: 
         getSubject: 9
         doAs: 1
* Writing JUnit test case 'FBCachedFetcher_ESTest' to /home/ubuntu/termite/mosa/tests/s1018/110_firebird/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: org.firebirdsql.encodings.EncodingFactory
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/110_firebird/evosuite-files/evosuite.properties
* Connecting to master process on port 18385
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.firebirdsql.encodings.EncodingFactory
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1066
* Using seed 1018
* Starting evolution
* Search finished after 274s and 562 generations, 151324 statements, best individual has fitness: 624.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 242
* Number of covered goals: 228
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 195
* Number of covered goals: 188
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 387
* Number of covered goals: 351
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 25
* Number of covered goals: 12
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 195
* Number of covered goals: 188
* Generated 119 tests with total length 137
* Resulting test suite's coverage: 93% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 37%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'EncodingFactory_ESTest' to /home/ubuntu/termite/mosa/tests/s1018/110_firebird/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: org.firebirdsql.jdbc.FBProcedureCall
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/110_firebird/evosuite-files/evosuite.properties
* Connecting to master process on port 18386
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.firebirdsql.jdbc.FBProcedureCall
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 766
* Using seed 1018
* Starting evolution
* Search finished after 264s and 795 generations, 185640 statements, best individual has fitness: 592.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 117
* Number of covered goals: 111
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 98
* Number of covered goals: 87
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 347
* Number of covered goals: 323
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 71%
* Total number of goals: 70
* Number of covered goals: 50
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 94%
* Total number of goals: 18
* Number of covered goals: 17
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 94%
* Total number of goals: 18
* Number of covered goals: 17
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 98
* Number of covered goals: 87
* Generated 80 tests with total length 322
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 57%
* Compiling and checking tests
[MASTER] 18:38:23.898 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 18:38:23.899 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
FBProcedureCall fBProcedureCall1 = new FBProcedureCall();
boolean boolean0 = fBProcedureCall1.equals(fBProcedureCall0);
assertTrue(boolean0);

fBProcedureCall1.setName(",>X41y3!{JJN<`");
boolean boolean1 = fBProcedureCall1.equals(fBProcedureCall0);
assertFalse(fBProcedureCall0.equals((Object)fBProcedureCall1));
assertTrue(boolean1);


[MASTER] 18:38:25.892 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 18:38:25.892 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
FBProcedureParam fBProcedureParam0 = new FBProcedureParam();
fBProcedureCall0.addOutputParam(fBProcedureParam0);
FBProcedureParam fBProcedureParam1 = fBProcedureCall0.getInputParam(4);
assertEquals(1, fBProcedureParam1.getType());

fBProcedureParam0.setIndex(887);
fBProcedureCall0.registerOutParam(887, (-18));
FBProcedureParam fBProcedureParam2 = fBProcedureCall0.getOutputParam(887);
assertEquals((-18), fBProcedureParam2.getType());


[MASTER] 18:38:26.345 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[MASTER] 18:38:26.345 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
fBProcedureCall0.addParam(2147483645, " ");

[MASTER] 18:38:26.388 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[MASTER] 18:38:26.388 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
fBProcedureCall0.registerOutParam(2147483645, (-28766209));

[MASTER] 18:38:26.432 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[MASTER] 18:38:26.433 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
FBProcedureCall fBProcedureCall1 = new FBProcedureCall();
fBProcedureCall1.getInputParam(2147483645);

[MASTER] 18:38:26.741 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[MASTER] 18:38:26.741 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
int int0 = 2147483645;
FBProcedureParam fBProcedureParam0 = new FBProcedureParam(2147483645, "bd");
fBProcedureCall0.addInputParam(fBProcedureParam0);

[MASTER] 18:38:26.827 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[MASTER] 18:38:26.827 [logback-1] WARN  JUnitAnalyzer - Failing test:
 String string0 = "hn~";
FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
FBProcedureParam fBProcedureParam0 = new FBProcedureParam(2147483645, "hnb");
fBProcedureCall0.addOutputParam(fBProcedureParam0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'FBProcedureCall_ESTest' to /home/ubuntu/termite/mosa/tests/s1018/110_firebird/evosuite-tests
* Done!

* Computation finished
