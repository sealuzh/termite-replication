* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: org.firebirdsql.jdbc.FBProcedureCall
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/110_firebird/evosuite-files/evosuite.properties
* Connecting to master process on port 13276
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.firebirdsql.jdbc.FBProcedureCall
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 766
* Using seed 1013
* Starting evolution
* Search finished after 313s and 795 generations, 184059 statements, best individual has fitness: 600.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 117
* Number of covered goals: 111
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 98
* Number of covered goals: 87
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 347
* Number of covered goals: 323
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 70%
* Total number of goals: 70
* Number of covered goals: 49
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 94%
* Total number of goals: 18
* Number of covered goals: 17
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 94%
* Total number of goals: 18
* Number of covered goals: 17
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 98
* Number of covered goals: 87
* Generated 73 tests with total length 275
* Resulting test suite's coverage: 90% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 65%
* Compiling and checking tests
[MASTER] 10:30:02.354 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1845> but was:<0>
[MASTER] 10:30:02.354 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
fBProcedureCall0.mapOutParamIndexToPosition(0);
FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getOutputParam(0);
assertEquals(1845, fBProcedureParam0.getType());

fBProcedureParam0.setType(0);
fBProcedureParam0.clone();
fBProcedureParam0.clone();
fBProcedureCall0.addInputParam(fBProcedureParam0);
fBProcedureCall0.addInputParam(fBProcedureParam0);
FBProcedureParam fBProcedureParam1 = fBProcedureCall0.addParam(566, "HY009");
fBProcedureCall0.mapOutParamIndexToPosition(566);
fBProcedureParam1.setIndex(0);
fBProcedureCall0.getSQL(false);
fBProcedureCall0.addOutputParam(fBProcedureParam1);
fBProcedureCall0.setName("EXECUTE PROCEDURE null(null, HY009)");
FBProcedureParam fBProcedureParam2 = fBProcedureCall0.getOutputParam(0);
assertEquals(566, fBProcedureParam2.getPosition());


[MASTER] 10:30:03.000 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 10:30:03.001 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
fBProcedureCall0.setName("You cannot set value of an non-existing parameter.");
FBProcedureCall fBProcedureCall1 = new FBProcedureCall();
boolean boolean0 = fBProcedureCall0.equals(fBProcedureCall1);
assertFalse(fBProcedureCall1.equals((Object)fBProcedureCall0));
assertTrue(boolean0);


[MASTER] 10:30:04.589 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[MASTER] 10:30:04.589 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
fBProcedureCall0.addParam(2147483645, "You cannot set value of an non-existing parameter.");

[MASTER] 10:30:04.638 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[MASTER] 10:30:04.638 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
fBProcedureCall0.getInputParam(2147483645);

[MASTER] 10:30:04.696 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[MASTER] 10:30:04.696 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
fBProcedureCall0.registerOutParam(2147483645, 2147483645);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'FBProcedureCall_ESTest' to /home/ubuntu/termite/mosa/tests/s1013/110_firebird/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: org.firebirdsql.jdbc.FBCachedFetcher
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/110_firebird/evosuite-files/evosuite.properties
* Connecting to master process on port 13273
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 11:20:51.868 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 11:20:51.948 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 11:20:51.952 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 11:20:52.655 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.sql.SQLType
[MASTER] 11:20:54.093 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 11:20:54.094 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 11:20:54.125 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 11:20:56.205 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 11:20:56.230 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 11:20:56.230 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 11:20:56.352 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 11:20:56.353 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 11:20:56.359 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 11:20:56.360 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 11:20:56.361 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 11:20:56.362 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 11:20:56.858 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 11:20:57.261 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.firebirdsql.jdbc.FBCachedFetcher
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 813
* Using seed 1013
* Starting evolution
[MASTER] 11:21:26.956 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 11:21:34.661 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 11:22:28.218 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[MASTER] 11:24:12.652 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 239s and 567 generations, 246566 statements, best individual has fitness: 1624.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 63%
* Total number of goals: 158
* Number of covered goals: 100
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 51%
* Total number of goals: 118
* Number of covered goals: 60
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 15
* Number of covered goals: 15
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 347
* Number of covered goals: 333
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 96%
* Total number of goals: 28
* Number of covered goals: 27
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 40%
* Total number of goals: 118
* Number of covered goals: 47
* Generated 50 tests with total length 296
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 62%
* Compiling and checking tests
[MASTER] 11:25:12.570 [logback-2] ERROR ClassStateSupport - Could not initialize org.firebirdsql.gds.impl.jni.JniGDSImpl: no jaybird22_x64 in java.library.path
[MASTER] 11:25:12.618 [logback-2] ERROR ClassStateSupport - Could not initialize org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl: org.firebirdsql.gds.impl.jni.JniGDSImpl
[MASTER] 11:25:12.739 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class org.firebirdsql.gds.impl.jni.JniGDSImpl
[MASTER] 11:25:35.788 [logback-1] WARN  ClassResetter - java.lang.reflect.InvocationTargetException, caused by: java.lang.NoClassDefFoundError: Could not initialize class org.firebirdsql.gds.impl.jni.JniGDSImpl
[MASTER] 11:25:35.962 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test13 -> class java.lang.AssertionError: Exception was not thrown in org.firebirdsql.gds.impl.GDSFactory but in org.firebirdsql.jdbc.FBConnectionProperties.getGds(FBConnectionProperties.java:497): org.evosuite.runtime.mock.java.lang.MockThrowable: Unknown GDS type PURE_JAVA
[MASTER] 11:25:35.963 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
byte[][] byteArray0 = new byte[0][5];
linkedList0.add(byteArray0);
FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
fBResultSet0.afterLast();
linkedList0.add((byte[][]) null);
FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
fBCachedFetcher0.isFirst();
fBCachedFetcher0.getRowNum();
FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
fBManagedConnectionFactory0.getDefaultConnectionRequestInfo();

[MASTER] 11:25:36.744 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test36 -> class java.lang.AssertionError: Exception was not thrown in org.firebirdsql.gds.impl.GDSFactory but in org.firebirdsql.jdbc.FBConnectionProperties.getGds(FBConnectionProperties.java:497): org.evosuite.runtime.mock.java.lang.MockThrowable: Unknown GDS type PURE_JAVA
[MASTER] 11:25:36.745 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
byte[][] byteArray0 = new byte[0][5];
linkedList0.add(byteArray0);
FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
fBResultSet0.afterLast();
linkedList0.add((byte[][]) null);
FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
fBCachedFetcher0.isFirst();
fBCachedFetcher0.getRowNum();
FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
fBManagedConnectionFactory0.getDefaultConnectionRequestInfo();

* Permissions denied during test execution: 
  - java.security.SecurityPermission: 
         createAccessControlContext: 1
  - javax.security.auth.AuthPermission: 
         getSubject: 5
* Writing JUnit test case 'FBCachedFetcher_ESTest' to /home/ubuntu/termite/mosa/tests/s1013/110_firebird/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: org.firebirdsql.encodings.EncodingFactory
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/110_firebird/evosuite-files/evosuite.properties
* Connecting to master process on port 13271
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.firebirdsql.encodings.EncodingFactory
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1066
* Using seed 1013
* Starting evolution
* Search finished after 278s and 562 generations, 144059 statements, best individual has fitness: 624.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 242
* Number of covered goals: 228
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 195
* Number of covered goals: 188
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 387
* Number of covered goals: 351
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 25
* Number of covered goals: 12
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 195
* Number of covered goals: 188
* Generated 109 tests with total length 125
* Resulting test suite's coverage: 93% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 42%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing JUnit test case 'EncodingFactory_ESTest' to /home/ubuntu/termite/mosa/tests/s1013/110_firebird/evosuite-tests
* Done!

* Computation finished
