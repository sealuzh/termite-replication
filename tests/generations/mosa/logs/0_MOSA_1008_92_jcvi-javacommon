* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 2404
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 03:27:49.013 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 03:27:49.036 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 03:27:49.064 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 03:27:49.181 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 03:27:49.202 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 03:27:49.203 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 03:27:49.401 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 03:27:49.403 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 03:27:49.404 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 03:27:49.405 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 03:27:49.407 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 03:27:49.424 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 03:27:49.425 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 03:27:49.436 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 03:27:49.470 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 232
* Using seed 1008
* Starting evolution
* Search finished after 239s and 1172 generations, 175751 statements, best individual has fitness: 64.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 93
* Number of covered goals: 93
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 27
* Number of covered goals: 27
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 13
* Number of covered goals: 13
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 100%
* Total number of goals: 47
* Number of covered goals: 47
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 16
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 27
* Number of covered goals: 27
* Generated 27 tests with total length 130
* Resulting test suite's coverage: 97% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 03:32:05.273 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[MASTER] 03:32:05.273 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
doReturn(2147483647L).when(nucleotideSequence0).getLength();
QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd("", nucleotideSequence0, qualitySequence0);
PhdBuilder phdBuilder0 = new PhdBuilder(artificialPhd0);

* Writing JUnit test case 'PhdBuilder_ESTest' to /home/ubuntu/termite/mosa/tests/s1008/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: org.jcvi.jillion.core.Range
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 2399
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 03:33:26.769 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 03:33:26.812 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 03:33:26.814 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToDoubleFunction
[MASTER] 03:33:26.815 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToIntFunction
[MASTER] 03:33:26.816 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToLongFunction
[MASTER] 03:33:26.935 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 03:33:26.936 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.Range
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 2577
* Using seed 1008
* Starting evolution
[MASTER] 03:34:58.214 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 327: org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;:541 - ReplaceComparisonOperator > -> >=
[MASTER] 03:35:02.624 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.jcvi.jillion.core.Range.parseRange(Ljava/lang/String;Lorg/jcvi/jillion/core/Range$CoordinateSystem;)Lorg/jcvi/jillion/core/Range;
[MASTER] 03:35:18.664 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 569: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:951 - ReplaceComparisonOperator >= -> ==
[MASTER] 03:35:47.979 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range.split(J)Ljava/util/List;: Line 954
[MASTER] 03:35:47.979 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range.split(J)Ljava/util/List;: Line 955
[MASTER] 03:35:47.979 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range.split(J)Ljava/util/List;: Line 956
[MASTER] 03:35:47.979 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range.split(J)Ljava/util/List;: Line 957
[MASTER] 03:35:47.979 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range.split(J)Ljava/util/List;: Line 958
[MASTER] 03:35:47.979 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range.split(J)Ljava/util/List;: Line 959
[MASTER] 03:35:47.979 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range.split(J)Ljava/util/List;: Line 960
[MASTER] 03:35:47.984 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 578: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:956 - ReplaceComparisonOperator > -> !=
[MASTER] 03:35:47.984 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 589: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:957 - ReplaceArithmeticOperator + -> %
[MASTER] 03:35:47.984 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 590: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:957 - ReplaceArithmeticOperator + -> -
[MASTER] 03:35:47.984 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 591: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:957 - ReplaceArithmeticOperator + -> *
[MASTER] 03:35:47.984 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 592: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:957 - ReplaceArithmeticOperator + -> /
[MASTER] 03:35:47.984 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 596: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:957 - ReplaceArithmeticOperator - -> +
[MASTER] 03:35:47.984 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 597: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:957 - ReplaceArithmeticOperator - -> %
[MASTER] 03:35:47.984 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 598: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:957 - ReplaceArithmeticOperator - -> *
[MASTER] 03:35:47.984 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 599: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:957 - ReplaceArithmeticOperator - -> /
[MASTER] 03:35:47.984 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 616: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:959 - ReplaceArithmeticOperator + -> %
[MASTER] 03:35:47.984 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 617: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:959 - ReplaceArithmeticOperator + -> -
[MASTER] 03:35:47.984 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 618: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:959 - ReplaceArithmeticOperator + -> *
[MASTER] 03:35:47.984 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 619: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:959 - ReplaceArithmeticOperator + -> /
[MASTER] 03:35:47.987 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range.split(J)Ljava/util/List;: I61 Branch 62 IFGT L956 - false in context: org.jcvi.jillion.core.Range:split(J)Ljava/util/List;
[MASTER] 03:35:47.987 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range.split(J)Ljava/util/List;: I38 Branch 61 IFGE L951 - true in context: org.jcvi.jillion.core.Range:split(J)Ljava/util/List;
* Search finished after 186s and 91 generations, 34717 statements, best individual has fitness: 7608.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 71%
* Total number of goals: 632
* Number of covered goals: 448
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 74%
* Total number of goals: 426
* Number of covered goals: 315
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 54%
* Total number of goals: 802
* Number of covered goals: 431
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 77
* Number of covered goals: 39
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 37%
* Total number of goals: 107
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 37%
* Total number of goals: 107
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 426
* Number of covered goals: 312
* Generated 174 tests with total length 743
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 27%
* Compiling and checking tests
[MASTER] 03:41:20.031 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 03:41:20.031 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Object object0 = new Object();
Range.Builder range_Builder0 = new Range.Builder();
Range.Builder range_Builder1 = range_Builder0.shift(65554L);
Range range0 = Range.of(65554L);
Range range1 = range_Builder1.build();
assertTrue(range1.equals((Object)range0));
assertNotSame(range1, range0);


[MASTER] 03:41:22.179 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:41:22.179 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(9223372036854775253L, 9223372036854775253L);
range0.split(9223372036854775253L);
range0.split(1L);

[MASTER] 03:41:23.415 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 03:41:23.415 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(9223372036854775253L, 9223372036854775253L);
List<Range> list0 = range0.split(9223372036854775253L);
List<Range> list1 = range0.complementFrom(list0);
assertTrue(list1.contains(range0));
assertFalse(range0.isEmpty());


[MASTER] 03:41:23.494 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 03:41:23.494 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.ofLength(9223372036854775253L);
List<Range> list0 = range0.complement(range0);
List<Range> list1 = range0.complementFrom(list0);
assertTrue(list1.equals((Object)list0));
assertFalse(list1.contains(range0));
assertEquals(1, list1.size());


[MASTER] 03:41:23.575 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 03:41:23.575 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(9223372036854775807L);
Range range1 = Range.of(9223372036854775807L);
range0.equals(range1);
List<Range> list0 = range1.complement(range0);
assertTrue(list0.contains(range0));


[MASTER] 03:41:25.266 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 03:41:25.267 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range0 = Range.of(range_CoordinateSystem0, 176L, 176L);
Object object0 = new Object();
range0.equals(object0);
assertFalse(range0.isEmpty());


[MASTER] 03:41:26.233 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 03:41:26.233 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range0 = Range.of(range_CoordinateSystem0, (-476L), (-476L));
boolean boolean0 = range0.isEmpty();
assertFalse(boolean0);

Object object0 = new Object();
Range range1 = Range.ofLength(2147483647L);
assertFalse(range1.isEmpty());


[MASTER] 03:41:28.830 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 03:41:28.831 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
long long0 = range0.getEnd();
assertEquals(9223372036854775807L, long0);

Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range0.forEach(consumer0);
List<Range> list0 = range0.complement(range0);
assertTrue(list0.contains(range0));


[MASTER] 03:41:29.907 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IndexOutOfBoundsException: given length -9223372036854775808 would make range [690 - ? ] beyond max allowed end offset
[MASTER] 03:41:29.907 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.Builder range_Builder0 = new Range.Builder();
Range.of(690L, (-9223372036854775808L));

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing JUnit test case 'Range_ESTest' to /home/ubuntu/termite/mosa/tests/s1008/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: org.jcvi.jillion.core.util.FileIterator
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 2402
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 04:00:48.590 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 04:00:49.026 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 04:00:49.043 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 04:00:49.092 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.util.FileIterator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 424
* Using seed 1008
* Starting evolution
[MASTER] 04:01:33.625 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.jcvi.jillion.core.util.FileIterator.remove()V
* Search finished after 388s and 959 generations, 315366 statements, best individual has fitness: 600.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 107
* Number of covered goals: 102
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 99%
* Total number of goals: 67
* Number of covered goals: 66
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 98%
* Total number of goals: 53
* Number of covered goals: 52
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 74
* Number of covered goals: 40
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 67
* Number of covered goals: 61
* Generated 33 tests with total length 207
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 54%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing JUnit test case 'FileIterator_ESTest' to /home/ubuntu/termite/mosa/tests/s1008/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 2404
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 04:11:11.080 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 04:11:11.101 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 04:11:11.102 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 04:11:11.300 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 836
* Using seed 1008
* Starting evolution
[MASTER] 04:11:30.309 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 04:11:57.989 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 04:11:57.989 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
* Search finished after 261s and 436 generations, 241847 statements, best individual has fitness: 336.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 131
* Number of covered goals: 130
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 99%
* Total number of goals: 74
* Number of covered goals: 73
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 48
* Number of covered goals: 48
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 469
* Number of covered goals: 466
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 65%
* Total number of goals: 52
* Number of covered goals: 34
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 74
* Number of covered goals: 61
* Generated 87 tests with total length 445
* Resulting test suite's coverage: 95% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 72%
* Compiling and checking tests
[MASTER] 04:16:27.176 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 04:16:27.176 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
byte[] byteArray0 = new byte[8];
byteArray0[0] = (byte)82;
DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
defaultNucleotideCodec1.toString(byteArray0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing JUnit test case 'DefaultNucleotideCodec_ESTest' to /home/ubuntu/termite/mosa/tests/s1008/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
