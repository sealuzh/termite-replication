* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.filters.unsupervised.attribute.Discretize
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 2869
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 08:45:55.593 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 08:45:55.630 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 08:45:55.671 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 08:45:56.148 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 08:45:56.193 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 08:45:56.207 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.filters.unsupervised.attribute.Discretize
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1729
* Using seed 1012
* Starting evolution
* Search finished after 267s and 369 generations, 131049 statements, best individual has fitness: 4224.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 71%
* Total number of goals: 370
* Number of covered goals: 264
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 58%
* Total number of goals: 242
* Number of covered goals: 141
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 31
* Number of covered goals: 31
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 74%
* Total number of goals: 713
* Number of covered goals: 529
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 53%
* Total number of goals: 72
* Number of covered goals: 38
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 58%
* Total number of goals: 242
* Number of covered goals: 141
* Generated 72 tests with total length 446
* Resulting test suite's coverage: 70% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 28%
* Compiling and checking tests
[MASTER] 08:53:23.828 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 08:53:24.695 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 08:53:46.749 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:53:46.751 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
Instances instances0 = new Instances("   * Directly filters the instance.\n", arrayList0, 1238);
Instances instances1 = new Instances(instances0);
Attribute attribute0 = new Attribute("^S@i1eW?n+[<", instances1, 1238);
arrayList0.add(attribute0);
Discretize discretize0 = new Discretize();
Instances instances2 = new Instances((String) null, arrayList0, 3);
discretize0.setInputFormat(instances1);

[MASTER] 08:53:48.810 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:53:48.811 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
Instances instances0 = new Instances("6&c/0U=ynJ2R*7'", arrayList0, 531);
Attribute attribute0 = new Attribute("[m\"/>", instances0);
arrayList0.add(attribute0);
Instances instances1 = new Instances(".arff", arrayList0, 5017);
discretize0.setInputFormat(instances1);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing JUnit test case 'Discretize_ESTest' to /home/ubuntu/termite/mosa/tests/s1012/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.core.Optimization
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.bayes.NaiveBayesMultinomialText
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.rules.JRip
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 2865
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 2867
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 2868
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 08:58:09.516 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 08:58:09.517 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 08:58:09.519 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 08:58:09.613 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 08:58:09.631 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 08:58:09.638 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 08:58:11.450 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 08:58:11.463 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 08:58:11.474 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 08:58:15.836 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.classifiers.bayes.NaiveBayesMultinomialText
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 08:58:16.952 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 08:58:16.953 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Total number of test goals for MOSA: 1412
* Using seed 1012
* Starting evolution
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class weka.classifiers.rules.JRip
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 08:58:20.277 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 08:58:20.292 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 08:58:20.293 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 08:58:20.306 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Total number of test goals for MOSA: 2767
* Using seed 1012
* Starting evolution
* Generating tests for class weka.core.Optimization
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 2499
* Using seed 1012
* Starting evolution
[MASTER] 08:58:25.383 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.core.Optimization.DynamicIntArray.<init>(Lweka/core/Optimization;I)V
[MASTER] 08:58:30.195 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: Line 1051
[MASTER] 08:58:30.196 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I115 Branch 65 IFEQ L1050 - false
[MASTER] 08:58:30.197 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 253: weka.classifiers.bayes.NaiveBayesMultinomialText.getUseWordFrequencies()Z:605 - ReplaceVariable m_wordFrequencies -> m_useStopList
[MASTER] 08:58:30.197 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 266: weka.classifiers.bayes.NaiveBayesMultinomialText.getLowercaseTokens()Z:635 - ReplaceVariable m_lowercaseTokens -> m_useStopList
[MASTER] 08:58:30.198 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 297: weka.classifiers.bayes.NaiveBayesMultinomialText.getNormalizeDocLength()Z:733 - ReplaceVariable m_normalize -> m_useStopList
[MASTER] 08:58:30.201 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getOptions()[Ljava/lang/String;: I115 Branch 65 IFEQ L1050 - false in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getOptions()[Ljava/lang/String;
[MASTER] 08:58:49.577 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 08:58:49.577 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 09:00:06.652 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 09:01:24.830 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
* Search finished after 270s and 128 generations, 89951 statements, best individual has fitness: 16704.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 10%
* Total number of goals: 620
* Number of covered goals: 59
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 28%
* Total number of goals: 926
* Number of covered goals: 258
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 10%
* Total number of goals: 21
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Generated 15 tests with total length 98
* Resulting test suite's coverage: 17% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 276s and 262 generations, 105400 statements, best individual has fitness: 12296.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 37%
* Total number of goals: 705
* Number of covered goals: 264
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 28%
* Total number of goals: 416
* Number of covered goals: 115
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 13
* Number of covered goals: 13
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 57%
* Total number of goals: 993
* Number of covered goals: 567
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 34%
* Total number of goals: 93
* Number of covered goals: 32
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 27%
* Total number of goals: 416
* Number of covered goals: 114
* Generated 77 tests with total length 570
* Resulting test suite's coverage: 45% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing JUnit test case 'Optimization_ESTest' to /home/ubuntu/termite/mosa/tests/s1012/107_weka/evosuite-tests
* Done!

* Computation finished
* Search finished after 298s and 315 generations, 143448 statements, best individual has fitness: 1176.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 338
* Number of covered goals: 320
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 194
* Number of covered goals: 172
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 476
* Number of covered goals: 446
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 112
* Number of covered goals: 61
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 87%
* Total number of goals: 194
* Number of covered goals: 169
* Generated 80 tests with total length 596
* Resulting test suite's coverage: 90% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 27%
* Compiling and checking tests
[MASTER] 09:04:30.694 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 09:04:30.829 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 09:04:31.362 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 09:04:31.362 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing JUnit test case 'JRip_ESTest' to /home/ubuntu/termite/mosa/tests/s1012/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 55%
* Compiling and checking tests
[MASTER] 09:08:31.457 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_40_1573722511389/weka/classifiers/bayes/NaiveBayesMultinomialText_40_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_40_1573722511389/weka/classifiers/bayes/NaiveBayesMultinomialText_40_tmp__ESTest_scaffolding.java]]
[MASTER] 09:08:31.457 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 09:08:31.457 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 09:08:31.462 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 28
[MASTER] 09:08:31.462 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 28
[MASTER] 09:08:31.463 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 29
[MASTER] 09:08:31.464 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_40_1573722511389/weka/classifiers/bayes/NaiveBayesMultinomialText_40_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Nov 14 09:08:31 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.LinkedHashMap;
11: import java.util.Map;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: import weka.classifiers.bayes.NaiveBayesMultinomialText;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class NaiveBayesMultinomialText_40_tmp__ESTest extends NaiveBayesMultinomialText_40_tmp__ESTest_scaffolding {
19: 
20:   /**
21:   //Test case number: 0
22:   /*Coverage entropy=0.4
23:   */
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
27:       naiveBayesMultinomialText0.m_periodicP = 41;
28:       LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> linkedHashMap0 = new LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
29:       naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) linkedHashMap0;
30:       naiveBayesMultinomialText0.pruneDictionary();
31:       assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
32:       assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
33:       assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
34:       assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
35:       assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
36:   }
37: }
RegularFileObject[/tmp/EvoSuite_40_1573722511389/weka/classifiers/bayes/NaiveBayesMultinomialText_40_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Nov 14 09:08:31 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_40_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_40_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.filters.unsupervised.attribute.NominalToBinary",
90:       "weka.core.TestInstances",
91:       "weka.core.DistanceFunction",
92:       "org.pentaho.packageManagement.PackageConstraint",
93:       "weka.attributeSelection.AttributeEvaluator",
94:       "org.pentaho.packageManagement.Package",
95:       "weka.core.xml.XMLBasicSerialization",
96:       "weka.classifiers.trees.m5.M5Base",
97:       "weka.classifiers.CostMatrix",
98:       "weka.classifiers.bayes.net.search.local.K2",
99:       "weka.filters.UnsupervisedFilter",
100:       "weka.core.logging.Logger$Level",
101:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
102:       "weka.core.DenseInstance",
103:       "weka.classifiers.functions.LinearRegression",
104:       "weka.core.stemmers.Stemmer",
105:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
106:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
107:       "org.pentaho.packageManagement.DefaultPackageManager",
108:       "org.bounce.net.DefaultAuthenticator",
109:       "weka.estimators.IncrementalEstimator",
110:       "weka.estimators.Estimator$Builder",
111:       "weka.core.stemmers.NullStemmer",
112:       "weka.core.EnvironmentHandler",
113:       "weka.classifiers.trees.m5.RuleNode",
114:       "weka.classifiers.functions.SGDText",
115:       "weka.core.RelationalLocator",
116:       "weka.core.Utils",
117:       "weka.core.CustomDisplayStringProvider",
118:       "weka.core.tokenizers.Tokenizer",
119:       "weka.core.NormalizableDistance",
120:       "weka.core.NoSupportForMissingValuesException",
121:       "weka.classifiers.UpdateableClassifier",
122:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
123:       "weka.core.MultiInstanceCapabilitiesHandler",
124:       "weka.core.Copyable",
125:       "weka.core.Capabilities",
126:       "weka.core.BinarySparseInstance",
127:       "weka.filters.supervised.attribute.NominalToBinary",
128:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
129:       "weka.core.AttributeLocator",
130:       "weka.core.SerializedObject",
131:       "weka.clusterers.UpdateableClusterer",
132:       "weka.core.Summarizable",
133:       "weka.core.AdditionalMeasureProducer",
134:       "org.pentaho.packageManagement.PackageManager$1",
135:       "weka.core.Drawable",
136:       "weka.core.matrix.Matrix",
137:       "weka.core.CapabilitiesHandler",
138:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
139:       "weka.attributeSelection.ASEvaluation",
140:       "weka.core.AbstractInstance",
141:       "weka.core.scripting.JythonObject",
142:       "weka.core.SelectedTag",
143:       "org.pentaho.packageManagement.DefaultPackage",
144:       "weka.classifiers.misc.InputMappedClassifier",
145:       "weka.classifiers.bayes.BayesNet",
146:       "weka.core.Version",
147:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
148:       "weka.filters.unsupervised.attribute.RemoveUseless",
149:       "weka.core.converters.ArffLoader$ArffReader",
150:       "weka.core.Tag",
151:       "weka.classifiers.AbstractClassifier",
152:       "weka.filters.unsupervised.attribute.Center",
153:       "weka.core.OptionHandler",
154:       "weka.core.WekaException",
155:       "weka.filters.StreamableFilter",
156:       "weka.core.Range",
157:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
158:       "weka.core.scripting.JythonSerializableObject",
159:       "weka.classifiers.Classifier",
160:       "weka.core.Capabilities$Capability",
161:       "weka.core.SparseInstance",
162:       "org.pentaho.packageManagement.PackageManager",
163:       "weka.estimators.PoissonEstimator",
164:       "weka.attributeSelection.AttributeTransformer",
165:       "weka.core.tokenizers.WordTokenizer",
166:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
167:       "weka.attributeSelection.PrincipalComponents",
168:       "weka.core.stemmers.SnowballStemmer",
169:       "weka.core.stemmers.LovinsStemmer",
170:       "weka.classifiers.Evaluation",
171:       "weka.classifiers.functions.supportVector.Kernel",
172:       "weka.core.WekaPackageManager",
173:       "weka.filters.SupervisedFilter",
174:       "weka.core.TechnicalInformationHandler",
175:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
176:       "weka.core.neighboursearch.LinearNNSearch",
177:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
178:       "weka.core.Option",
179:       "weka.classifiers.meta.CostSensitiveClassifier",
180:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
181:       "weka.core.neighboursearch.PerformanceStats",
182:       "weka.filters.Sourcable",
183:       "weka.core.Attribute",
184:       "weka.core.Stopwords",
185:       "weka.core.tokenizers.AlphabeticTokenizer",
186:       "weka.core.FastVector",
187:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
188:       "weka.core.UnassignedDatasetException",
189:       "weka.classifiers.RandomizableClassifier",
190:       "weka.classifiers.SingleClassifierEnhancer",
191:       "weka.core.RevisionUtils",
192:       "weka.core.Instance",
193:       "weka.estimators.Estimator",
194:       "weka.core.ProtectedProperties",
195:       "weka.core.StringLocator",
196:       "weka.classifiers.bayes.net.ADNode",
197:       "weka.core.AttributeStats",
198:       "weka.core.WeightedInstancesHandler",
199:       "weka.core.neighboursearch.NearestNeighbourSearch",
200:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
201:       "weka.filters.unsupervised.attribute.Remove",
202:       "weka.core.Randomizable",
203:       "weka.classifiers.functions.SGD",
204:       "weka.classifiers.rules.M5Rules",
205:       "weka.core.EuclideanDistance",
206:       "weka.core.Instances",
207:       "weka.filters.unsupervised.attribute.Normalize",
208:       "weka.core.UnassignedClassException",
209:       "weka.classifiers.bayes.net.BIFReader",
210:       "weka.classifiers.bayes.net.ParentSet",
211:       "weka.classifiers.rules.ZeroR",
212:       "weka.core.stemmers.IteratedLovinsStemmer",
213:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
214:       "weka.filters.unsupervised.attribute.Standardize",
215:       "weka.core.TechnicalInformation",
216:       "weka.core.UnsupportedAttributeTypeException",
217:       "weka.classifiers.Sourcable",
218:       "weka.core.RevisionHandler",
219:       "weka.classifiers.evaluation.output.prediction.PlainText",
220:       "weka.core.xml.XMLSerialization",
221:       "weka.classifiers.xml.XMLClassifier",
222:       "weka.filters.Filter",
223:       "weka.filters.supervised.attribute.Discretize"
224:     );
225:   } 
226: 
227:   private static void resetClasses() {
228:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_40_tmp__ESTest_scaffolding.class.getClassLoader()); 
229: 
230:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
231:       "weka.classifiers.AbstractClassifier",
232:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
233:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
234:       "weka.core.Capabilities$Capability",
235:       "weka.core.tokenizers.Tokenizer",
236:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
237:       "weka.core.tokenizers.WordTokenizer",
238:       "weka.core.stemmers.NullStemmer",
239:       "weka.classifiers.Evaluation",
240:       "weka.core.Utils",
241:       "weka.core.Option",
242:       "weka.core.Capabilities",
243:       "org.pentaho.packageManagement.PackageManager",
244:       "org.pentaho.packageManagement.DefaultPackageManager",
245:       "weka.core.Version",
246:       "weka.core.Environment",
247:       "weka.core.WekaPackageManager",
248:       "weka.core.TestInstances",
249:       "weka.core.Attribute",
250:       "weka.core.ProtectedProperties",
251:       "weka.core.Instances",
252:       "weka.core.AbstractInstance",
253:       "weka.core.DenseInstance",
254:       "weka.core.neighboursearch.balltrees.BallNode",
255:       "weka.classifiers.RandomizableClassifier",
256:       "weka.core.Tag",
257:       "weka.classifiers.functions.SGDText",
258:       "weka.core.SerializedObject",
259:       "weka.core.SparseInstance",
260:       "weka.core.BinarySparseInstance",
261:       "weka.core.UnassignedDatasetException",
262:       "weka.core.neighboursearch.NearestNeighbourSearch",
263:       "weka.core.neighboursearch.KDTree",
264:       "weka.core.NormalizableDistance",
265:       "weka.core.EuclideanDistance",
266:       "weka.core.Range",
267:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
268:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
269:       "weka.filters.Filter",
270:       "weka.filters.supervised.attribute.Discretize",
271:       "weka.core.neighboursearch.CoverTree",
272:       "weka.core.stemmers.SnowballStemmer",
273:       "weka.core.RevisionUtils",
274:       "weka.classifiers.functions.supportVector.Kernel",
275:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
276:       "weka.attributeSelection.ASEvaluation",
277:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
278:       "weka.attributeSelection.PrincipalComponents",
279:       "weka.core.converters.ArffLoader$ArffReader",
280:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
281:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
282:       "weka.core.tokenizers.AlphabeticTokenizer",
283:       "weka.classifiers.SingleClassifierEnhancer",
284:       "weka.classifiers.misc.InputMappedClassifier",
285:       "weka.classifiers.rules.ZeroR",
286:       "weka.classifiers.functions.LinearRegression",
287:       "weka.classifiers.bayes.BayesNet",
288:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
289:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
290:       "weka.classifiers.bayes.net.search.local.K2",
291:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
292:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
293:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
294:       "weka.classifiers.meta.CostSensitiveClassifier",
295:       "weka.classifiers.CostMatrix",
296:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
297:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
298:       "weka.core.neighboursearch.balltrees.BallSplitter",
299:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
300:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
301:       "weka.core.stemmers.LovinsStemmer",
302:       "weka.core.stemmers.IteratedLovinsStemmer",
303:       "weka.classifiers.functions.SimpleLogistic",
304:       "weka.classifiers.bayes.NaiveBayesMultinomial",
305:       "weka.classifiers.bayes.NaiveBayes",
306:       "weka.core.TechnicalInformation",
307:       "weka.core.TechnicalInformation$Type",
308:       "weka.core.TechnicalInformation$Field",
309:       "weka.core.SelectedTag",
310:       "weka.core.Stopwords",
311:       "weka.core.WekaException",
312:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
313:       "weka.core.stemmers.Stemming",
314:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
315:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
316:       "weka.classifiers.lazy.IBk",
317:       "weka.core.neighboursearch.LinearNNSearch",
318:       "weka.core.neighboursearch.BallTree",
319:       "weka.classifiers.trees.m5.M5Base",
320:       "weka.classifiers.rules.M5Rules",
321:       "weka.classifiers.misc.SerializedClassifier",
322:       "weka.core.tokenizers.NGramTokenizer",
323:       "weka.classifiers.meta.MultiClassClassifier",
324:       "weka.classifiers.functions.Logistic",
325:       "weka.core.UnassignedClassException",
326:       "weka.core.UnsupportedAttributeTypeException",
327:       "weka.classifiers.functions.SMOreg",
328:       "weka.classifiers.functions.supportVector.RegOptimizer",
329:       "weka.classifiers.functions.supportVector.RegSMO",
330:       "weka.classifiers.functions.supportVector.RegSMOImproved",
331:       "weka.classifiers.functions.supportVector.CachedKernel",
332:       "weka.classifiers.functions.supportVector.PolyKernel",
333:       "weka.classifiers.rules.OneR",
334:       "weka.core.FindWithCapabilities",
335:       "weka.core.SingleIndex",
336:       "weka.filters.AllFilter",
337:       "weka.classifiers.MultipleClassifiersCombiner",
338:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
339:       "weka.classifiers.meta.MultiScheme",
340:       "weka.attributeSelection.GainRatioAttributeEval",
341:       "weka.classifiers.IteratedSingleClassifierEnhancer",
342:       "weka.classifiers.meta.AdditiveRegression",
343:       "weka.classifiers.functions.SGD",
344:       "weka.classifiers.meta.RegressionByDiscretization",
345:       "weka.filters.unsupervised.attribute.Discretize",
346:       "weka.classifiers.trees.J48",
347:       "weka.attributeSelection.InfoGainAttributeEval",
348:       "weka.classifiers.rules.JRip",
349:       "weka.classifiers.trees.LMT",
350:       "weka.attributeSelection.OneRAttributeEval",
351:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
352:       "weka.classifiers.meta.AdaBoostM1",
353:       "weka.classifiers.trees.DecisionStump",
354:       "weka.classifiers.functions.GaussianProcesses",
355:       "weka.classifiers.lazy.LWL",
356:       "weka.classifiers.rules.PART",
357:       "weka.classifiers.rules.part.MakeDecList",
358:       "weka.classifiers.meta.FilteredClassifier",
359:       "weka.filters.supervised.attribute.AttributeSelection",
360:       "weka.attributeSelection.AttributeSelection",
361:       "weka.attributeSelection.CfsSubsetEval",
362:       "weka.attributeSelection.ASSearch",
363:       "weka.attributeSelection.GreedyStepwise",
364:       "weka.attributeSelection.BestFirst",
365:       "weka.core.WekaEnumeration",
366:       "weka.core.matrix.Matrix",
367:       "weka.classifiers.bayes.net.BIFReader",
368:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
369:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
370:       "weka.classifiers.meta.Stacking",
371:       "weka.estimators.Estimator",
372:       "weka.estimators.NormalEstimator",
373:       "weka.classifiers.functions.VotedPerceptron",
374:       "weka.classifiers.functions.supportVector.RBFKernel",
375:       "weka.estimators.KernelEstimator",
376:       "weka.core.Queue",
377:       "weka.core.AttributeLocator",
378:       "weka.core.StringLocator",
379:       "weka.core.RelationalLocator",
380:       "weka.core.Queue$QueueNode",
381:       "weka.filters.supervised.attribute.NominalToBinary",
382:       "weka.core.FastVector",
383:       "weka.filters.unsupervised.attribute.Normalize",
384:       "weka.estimators.DiscreteEstimator",
385:       "weka.classifiers.functions.SimpleLinearRegression",
386:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
387:       "weka.classifiers.functions.MultilayerPerceptron",
388:       "weka.filters.unsupervised.attribute.NominalToBinary",
389:       "weka.classifiers.functions.neural.SigmoidUnit",
390:       "weka.classifiers.functions.neural.LinearUnit",
391:       "weka.attributeSelection.CorrelationAttributeEval",
392:       "weka.classifiers.trees.M5P",
393:       "weka.classifiers.functions.supportVector.Puk",
394:       "weka.classifiers.trees.RandomTree",
395:       "weka.filters.SimpleFilter",
396:       "weka.filters.SimpleStreamFilter",
397:       "weka.filters.MultiFilter",
398:       "weka.core.Javadoc",
399:       "weka.core.GlobalInfoJavadoc",
400:       "weka.classifiers.rules.DecisionTable",
401:       "weka.classifiers.meta.Vote",
402:       "weka.classifiers.meta.CVParameterSelection",
403:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
404:       "weka.attributeSelection.WrapperSubsetEval",
405:       "weka.classifiers.lazy.KStar",
406:       "weka.classifiers.meta.LogitBoost",
407:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
408:       "weka.classifiers.functions.SMO",
409:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
410:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
411:       "weka.classifiers.meta.Bagging",
412:       "weka.classifiers.trees.REPTree",
413:       "weka.classifiers.meta.ClassificationViaRegression",
414:       "weka.core.Attribute$1",
415:       "weka.attributeSelection.ReliefFAttributeEval",
416:       "weka.classifiers.trees.j48.ClassifierTree",
417:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
418:       "weka.core.ManhattanDistance",
419:       "weka.classifiers.trees.RandomForest",
420:       "weka.core.neighboursearch.PerformanceStats",
421:       "weka.core.neighboursearch.TreePerformanceStats",
422:       "weka.classifiers.meta.RandomCommittee",
423:       "weka.core.SerializationHelper",
424:       "weka.classifiers.functions.supportVector.StringKernel",
425:       "weka.classifiers.meta.AttributeSelectedClassifier",
426:       "weka.core.ClassDiscovery",
427:       "weka.estimators.PoissonEstimator",
428:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
429:       "weka.core.ContingencyTables",
430:       "weka.estimators.Estimator$Builder",
431:       "weka.core.AttributeStats",
432:       "weka.experiment.Stats",
433:       "weka.classifiers.bayes.NaiveBayesUpdateable",
434:       "weka.core.MinkowskiDistance",
435:       "weka.core.neighboursearch.kdtrees.MidPointOfWidestDimension"
436:     );
437:   }
438: }

[MASTER] 09:08:31.464 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText0.m_periodicP = 41;
LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> linkedHashMap0 = new LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) linkedHashMap0;
naiveBayesMultinomialText0.pruneDictionary();
assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing JUnit test case 'NaiveBayesMultinomialText_ESTest' to /home/ubuntu/termite/mosa/tests/s1012/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.Evaluation
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 2864
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 09:45:23.166 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 09:45:23.171 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 09:45:23.172 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 09:45:24.230 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 09:45:25.573 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 09:45:25.575 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 09:45:28.986 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 09:45:29.038 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 09:45:29.039 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 09:45:29.039 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 09:45:29.040 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 09:45:29.041 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 09:45:29.041 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 09:45:29.042 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 09:45:29.043 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 09:45:29.200 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 09:45:29.234 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class weka.classifiers.Evaluation
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 3904
* Using seed 1012
* Starting evolution
[MASTER] 09:45:35.577 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
[MASTER] 09:45:44.785 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.pctCorrect()D: Line 2102
[MASTER] 09:45:44.789 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTruePositives(I)D: Line 2784
[MASTER] 09:45:44.789 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTruePositives(I)D: Line 2785
[MASTER] 09:45:44.789 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTruePositives(I)D: Line 2786
[MASTER] 09:45:44.795 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTruePositives(I)D: Line 2787
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTruePositives(I)D: Line 2790
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTrueNegatives(I)D: Line 2861
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTrueNegatives(I)D: Line 2862
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTrueNegatives(I)D: Line 2863
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTrueNegatives(I)D: Line 2864
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTrueNegatives(I)D: Line 2865
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTrueNegatives(I)D: Line 2866
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numTrueNegatives(I)D: Line 2871
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalsePositives(I)D: Line 2946
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalsePositives(I)D: Line 2947
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalsePositives(I)D: Line 2948
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalsePositives(I)D: Line 2949
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalsePositives(I)D: Line 2950
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalsePositives(I)D: Line 2951
[MASTER] 09:45:44.796 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalsePositives(I)D: Line 2956
[MASTER] 09:45:44.821 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalseNegatives(I)D: Line 3031
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalseNegatives(I)D: Line 3032
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalseNegatives(I)D: Line 3033
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalseNegatives(I)D: Line 3034
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalseNegatives(I)D: Line 3035
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalseNegatives(I)D: Line 3036
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.numFalseNegatives(I)D: Line 3041
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3112
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3113
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3114
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3115
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3116
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3117
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3119
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3120
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3121
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: Line 3124
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: Line 3133
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: Line 3134
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: Line 3136
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: Line 3137
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: Line 3138
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: Line 3140
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: Line 3143
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: Line 3144
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: Line 3145
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: Line 3146
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: Line 3147
[MASTER] 09:45:44.822 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: Line 3151
[MASTER] 09:45:44.840 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 4826: weka.classifiers.Evaluation.numTruePositives(I)D:2785 - ReplaceComparisonOperator >= -> -1
[MASTER] 09:45:44.840 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 4827: weka.classifiers.Evaluation.numTruePositives(I)D:2785 - ReplaceComparisonOperator >= -> >
[MASTER] 09:45:44.840 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 4845: weka.classifiers.Evaluation.numTruePositives(I)D:2786 - ReplaceComparisonOperator != -> -1
[MASTER] 09:45:44.840 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 4846: weka.classifiers.Evaluation.numTruePositives(I)D:2786 - ReplaceComparisonOperator != -> <
[MASTER] 09:45:44.840 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 4847: weka.classifiers.Evaluation.numTruePositives(I)D:2786 - ReplaceComparisonOperator != -> >
[MASTER] 09:45:44.840 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 5454: weka.classifiers.Evaluation.numTrueNegatives(I)D:2862 - ReplaceComparisonOperator >= -> -1
[MASTER] 09:45:44.840 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 5455: weka.classifiers.Evaluation.numTrueNegatives(I)D:2862 - ReplaceComparisonOperator >= -> >
[MASTER] 09:45:44.840 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 5473: weka.classifiers.Evaluation.numTrueNegatives(I)D:2863 - ReplaceComparisonOperator == -> -2
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 5474: weka.classifiers.Evaluation.numTrueNegatives(I)D:2863 - ReplaceComparisonOperator == -> >=
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 5475: weka.classifiers.Evaluation.numTrueNegatives(I)D:2863 - ReplaceComparisonOperator == -> <=
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 5492: weka.classifiers.Evaluation.numTrueNegatives(I)D:2864 - ReplaceComparisonOperator >= -> -1
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 5493: weka.classifiers.Evaluation.numTrueNegatives(I)D:2864 - ReplaceComparisonOperator >= -> >
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 5513: weka.classifiers.Evaluation.numTrueNegatives(I)D:2865 - ReplaceComparisonOperator == -> -2
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 5514: weka.classifiers.Evaluation.numTrueNegatives(I)D:2865 - ReplaceComparisonOperator == -> >=
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 5515: weka.classifiers.Evaluation.numTrueNegatives(I)D:2865 - ReplaceComparisonOperator == -> <=
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6172: weka.classifiers.Evaluation.numFalsePositives(I)D:2947 - ReplaceComparisonOperator >= -> -1
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6173: weka.classifiers.Evaluation.numFalsePositives(I)D:2947 - ReplaceComparisonOperator >= -> >
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6191: weka.classifiers.Evaluation.numFalsePositives(I)D:2948 - ReplaceComparisonOperator == -> -2
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6192: weka.classifiers.Evaluation.numFalsePositives(I)D:2948 - ReplaceComparisonOperator == -> >=
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6193: weka.classifiers.Evaluation.numFalsePositives(I)D:2948 - ReplaceComparisonOperator == -> <=
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6210: weka.classifiers.Evaluation.numFalsePositives(I)D:2949 - ReplaceComparisonOperator >= -> -1
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6211: weka.classifiers.Evaluation.numFalsePositives(I)D:2949 - ReplaceComparisonOperator >= -> >
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6231: weka.classifiers.Evaluation.numFalsePositives(I)D:2950 - ReplaceComparisonOperator != -> -1
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6232: weka.classifiers.Evaluation.numFalsePositives(I)D:2950 - ReplaceComparisonOperator != -> <
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6233: weka.classifiers.Evaluation.numFalsePositives(I)D:2950 - ReplaceComparisonOperator != -> >
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6890: weka.classifiers.Evaluation.numFalseNegatives(I)D:3032 - ReplaceComparisonOperator >= -> -1
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6891: weka.classifiers.Evaluation.numFalseNegatives(I)D:3032 - ReplaceComparisonOperator >= -> >
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6909: weka.classifiers.Evaluation.numFalseNegatives(I)D:3033 - ReplaceComparisonOperator != -> -1
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6910: weka.classifiers.Evaluation.numFalseNegatives(I)D:3033 - ReplaceComparisonOperator != -> <
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6911: weka.classifiers.Evaluation.numFalseNegatives(I)D:3033 - ReplaceComparisonOperator != -> >
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6928: weka.classifiers.Evaluation.numFalseNegatives(I)D:3034 - ReplaceComparisonOperator >= -> -1
[MASTER] 09:45:44.841 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6929: weka.classifiers.Evaluation.numFalseNegatives(I)D:3034 - ReplaceComparisonOperator >= -> >
[MASTER] 09:45:44.842 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6949: weka.classifiers.Evaluation.numFalseNegatives(I)D:3035 - ReplaceComparisonOperator == -> -2
[MASTER] 09:45:44.842 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6950: weka.classifiers.Evaluation.numFalseNegatives(I)D:3035 - ReplaceComparisonOperator == -> >=
[MASTER] 09:45:44.842 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 6951: weka.classifiers.Evaluation.numFalseNegatives(I)D:3035 - ReplaceComparisonOperator == -> <=
[MASTER] 09:45:44.842 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 8093: weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D:3120 - ReplaceComparisonOperator != -> -1
[MASTER] 09:45:44.842 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 8189: weka.classifiers.Evaluation.weightedMatthewsCorrelation()D:3136 - ReplaceComparisonOperator >= -> -1
[MASTER] 09:45:44.842 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 8190: weka.classifiers.Evaluation.weightedMatthewsCorrelation()D:3136 - ReplaceComparisonOperator >= -> >
[MASTER] 09:45:44.842 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 8207: weka.classifiers.Evaluation.weightedMatthewsCorrelation()D:3137 - ReplaceComparisonOperator >= -> -1
[MASTER] 09:45:44.842 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 8208: weka.classifiers.Evaluation.weightedMatthewsCorrelation()D:3137 - ReplaceComparisonOperator >= -> >
[MASTER] 09:45:44.843 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 8301: weka.classifiers.Evaluation.weightedMatthewsCorrelation()D:3144 - ReplaceComparisonOperator >= -> -1
[MASTER] 09:45:44.843 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 8302: weka.classifiers.Evaluation.weightedMatthewsCorrelation()D:3144 - ReplaceComparisonOperator >= -> >
[MASTER] 09:45:44.843 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 8340: weka.classifiers.Evaluation.weightedMatthewsCorrelation()D:3146 - ReplaceComparisonOperator != -> ==
[MASTER] 09:45:44.844 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.Evaluation.pctCorrect()D
[MASTER] 09:45:44.845 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.Evaluation.weightedMatthewsCorrelation()D
[MASTER] 09:45:44.845 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.Evaluation.pctCorrect()D
[MASTER] 09:45:44.845 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.Evaluation.weightedMatthewsCorrelation()D
[MASTER] 09:45:44.850 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I70 Branch 304 IF_ICMPGE L3144 - true in context: weka.classifiers.Evaluation:weightedMatthewsCorrelation()D
[MASTER] 09:45:44.851 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I27 Branch 303 IF_ICMPGE L3137 - true in context: weka.classifiers.Evaluation:weightedMatthewsCorrelation()D
[MASTER] 09:45:44.851 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I70 Branch 304 IF_ICMPGE L3144 - false in context: weka.classifiers.Evaluation:weightedMatthewsCorrelation()D
[MASTER] 09:45:44.851 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I81 Branch 305 IFNE L3146 - false in context: weka.classifiers.Evaluation:weightedMatthewsCorrelation()D
[MASTER] 09:45:44.851 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.Evaluation.pctCorrect()D: root-Branch in context: weka.classifiers.Evaluation:pctCorrect()D
[MASTER] 09:45:44.851 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I27 Branch 303 IF_ICMPGE L3137 - false in context: weka.classifiers.Evaluation:weightedMatthewsCorrelation()D
[MASTER] 09:45:44.851 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I18 Branch 302 IF_ICMPGE L3136 - true in context: weka.classifiers.Evaluation:weightedMatthewsCorrelation()D
[MASTER] 09:45:44.852 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I18 Branch 302 IF_ICMPGE L3136 - false in context: weka.classifiers.Evaluation:weightedMatthewsCorrelation()D
[MASTER] 09:47:03.499 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 297s and 118 generations, 57967 statements, best individual has fitness: 14496.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 61%
* Total number of goals: 1378
* Number of covered goals: 841
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 45%
* Total number of goals: 809
* Number of covered goals: 368
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 78
* Number of covered goals: 78
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 64%
* Total number of goals: 424
* Number of covered goals: 273
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 20%
* Total number of goals: 278
* Number of covered goals: 56
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 97%
* Total number of goals: 103
* Number of covered goals: 100
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 45%
* Total number of goals: 809
* Number of covered goals: 366
* Generated 155 tests with total length 1476
* Resulting test suite's coverage: 54% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 09:58:43.590 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 09:58:55.755 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 09:58:56.174 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 09:58:56.174 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
[MASTER] 09:58:58.028 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing JUnit test case 'Evaluation_ESTest' to /home/ubuntu/termite/mosa/tests/s1012/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.core.stemmers.LovinsStemmer
* Configuration: MOSA
* Going to generate test cases for class: weka.experiment.ResultMatrix
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 2861
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 2863
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class weka.core.stemmers.LovinsStemmer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1367
* Using seed 1012
* Starting evolution
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 10:00:03.626 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 10:00:03.686 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 10:00:03.686 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 10:00:03.847 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.experiment.ResultMatrix
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 2699
* Using seed 1012
* Starting evolution
* Search finished after 257s and 243 generations, 95022 statements, best individual has fitness: 2784.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 88%
* Total number of goals: 217
* Number of covered goals: 191
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 66%
* Total number of goals: 428
* Number of covered goals: 284
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 260
* Number of covered goals: 238
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 18
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 66%
* Total number of goals: 428
* Number of covered goals: 282
* Generated 77 tests with total length 225
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 260s and 49 generations, 33518 statements, best individual has fitness: 2064.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 647
* Number of covered goals: 627
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 95%
* Total number of goals: 441
* Number of covered goals: 417
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 678
* Number of covered goals: 628
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 244
* Number of covered goals: 114
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 124
* Number of covered goals: 124
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 124
* Number of covered goals: 124
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 441
* Number of covered goals: 409
* Generated 223 tests with total length 1805
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 77%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing JUnit test case 'LovinsStemmer_ESTest' to /home/ubuntu/termite/mosa/tests/s1012/107_weka/evosuite-tests
* Done!

* Computation finished
[MASTER] 10:10:22.718 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7062291666666667% of time used, but only 89/223 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 21%
* Compiling and checking tests
[MASTER] 10:11:43.994 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ArrayIndexOutOfBoundsException: 0
[MASTER] 10:11:44.014 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
assertFalse(resultMatrixSignificance0.getShowAverage());
assertEquals(1, resultMatrixSignificance0.getRowCount());
assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
assertTrue(resultMatrixSignificance0.getEnumerateColNames());
assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
assertEquals(1, resultMatrixSignificance0.getColCount());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
assertFalse(resultMatrixSignificance0.getRemoveFilterName());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
assertTrue(resultMatrixSignificance0.getPrintRowNames());
assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
assertEquals(0, resultMatrixSignificance0.getMeanWidth());
assertEquals(0, resultMatrixSignificance0.getColNameWidth());
assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
assertFalse(resultMatrixSignificance0.getShowStdDev());
assertEquals(2, resultMatrixSignificance0.getMeanPrec());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
assertEquals(0, resultMatrixSignificance0.getCountWidth());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
assertFalse(resultMatrixSignificance0.getPrintColNames());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
assertNotNull(resultMatrixSignificance0);

ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
assertFalse(resultMatrixSignificance0.getShowAverage());
assertEquals(1, resultMatrixSignificance0.getRowCount());
assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
assertTrue(resultMatrixSignificance0.getEnumerateColNames());
assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
assertEquals(1, resultMatrixSignificance0.getColCount());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
assertFalse(resultMatrixSignificance0.getRemoveFilterName());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
assertTrue(resultMatrixSignificance0.getPrintRowNames());
assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
assertEquals(0, resultMatrixSignificance0.getMeanWidth());
assertEquals(0, resultMatrixSignificance0.getColNameWidth());
assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
assertFalse(resultMatrixSignificance0.getShowStdDev());
assertEquals(2, resultMatrixSignificance0.getMeanPrec());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
assertEquals(0, resultMatrixSignificance0.getCountWidth());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
assertFalse(resultMatrixSignificance0.getPrintColNames());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
assertEquals(40, resultMatrixHTML0.getRowNameWidth());
assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
assertFalse(resultMatrixHTML0.getDefaultShowAverage());
assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
assertEquals(2, resultMatrixHTML0.getMeanPrec());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
assertFalse(resultMatrixHTML0.getEnumerateRowNames());
assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
assertEquals(1, resultMatrixHTML0.getColCount());
assertTrue(resultMatrixHTML0.getPrintRowNames());
assertEquals(1, resultMatrixHTML0.getVisibleColCount());
assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
assertEquals(0, resultMatrixHTML0.getMeanWidth());
assertTrue(resultMatrixHTML0.getEnumerateColNames());
assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
assertEquals(0, resultMatrixHTML0.getStdDevWidth());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
assertFalse(resultMatrixHTML0.getShowStdDev());
assertEquals("HTML", resultMatrixHTML0.getDisplayName());
assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
assertFalse(resultMatrixHTML0.getRemoveFilterName());
assertEquals(2, resultMatrixHTML0.getStdDevPrec());
assertEquals(0, resultMatrixHTML0.getCountWidth());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
assertEquals(1, resultMatrixHTML0.getRowCount());
assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
assertFalse(resultMatrixHTML0.getPrintColNames());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
assertFalse(resultMatrixHTML0.getShowAverage());
assertEquals(0, resultMatrixHTML0.getColNameWidth());
assertNotNull(resultMatrixHTML0);

resultMatrixHTML0.setPrintRowNames(true);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
assertFalse(resultMatrixSignificance0.getShowAverage());
assertEquals(1, resultMatrixSignificance0.getRowCount());
assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
assertTrue(resultMatrixSignificance0.getEnumerateColNames());
assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
assertEquals(1, resultMatrixSignificance0.getColCount());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
assertFalse(resultMatrixSignificance0.getRemoveFilterName());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
assertTrue(resultMatrixSignificance0.getPrintRowNames());
assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
assertEquals(0, resultMatrixSignificance0.getMeanWidth());
assertEquals(0, resultMatrixSignificance0.getColNameWidth());
assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
assertFalse(resultMatrixSignificance0.getShowStdDev());
assertEquals(2, resultMatrixSignificance0.getMeanPrec());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
assertEquals(0, resultMatrixSignificance0.getCountWidth());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
assertFalse(resultMatrixSignificance0.getPrintColNames());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
assertEquals(40, resultMatrixHTML0.getRowNameWidth());
assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
assertFalse(resultMatrixHTML0.getDefaultShowAverage());
assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
assertEquals(2, resultMatrixHTML0.getMeanPrec());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
assertFalse(resultMatrixHTML0.getEnumerateRowNames());
assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
assertEquals(1, resultMatrixHTML0.getColCount());
assertTrue(resultMatrixHTML0.getPrintRowNames());
assertEquals(1, resultMatrixHTML0.getVisibleColCount());
assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
assertEquals(0, resultMatrixHTML0.getMeanWidth());
assertTrue(resultMatrixHTML0.getEnumerateColNames());
assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
assertEquals(0, resultMatrixHTML0.getStdDevWidth());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
assertFalse(resultMatrixHTML0.getShowStdDev());
assertEquals("HTML", resultMatrixHTML0.getDisplayName());
assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
assertFalse(resultMatrixHTML0.getRemoveFilterName());
assertEquals(2, resultMatrixHTML0.getStdDevPrec());
assertEquals(0, resultMatrixHTML0.getCountWidth());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
assertEquals(1, resultMatrixHTML0.getRowCount());
assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
assertFalse(resultMatrixHTML0.getPrintColNames());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
assertFalse(resultMatrixHTML0.getShowAverage());
assertEquals(0, resultMatrixHTML0.getColNameWidth());

ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 1725);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
assertFalse(resultMatrixGnuPlot0.getShowStdDev());
assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
assertEquals(0, resultMatrixGnuPlot0.getColCount());
assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
assertEquals(1725, resultMatrixGnuPlot0.getRowCount());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
assertEquals(1725, resultMatrixGnuPlot0.getVisibleRowCount());
assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
assertFalse(resultMatrixGnuPlot0.getShowAverage());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
assertTrue(resultMatrixGnuPlot0.getPrintColNames());
assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
assertNotNull(resultMatrixGnuPlot0);

resultMatrixGnuPlot0.toString();

[MASTER] 10:11:46.027 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing JUnit test case 'ResultMatrix_ESTest' to /home/ubuntu/termite/mosa/tests/s1012/107_weka/evosuite-tests
* Done!

* Computation finished
