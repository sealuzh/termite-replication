* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.classifiers.rules.JRip
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 5945
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:32:20.950 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:32:20.974 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:32:20.979 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:32:23.272 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 00:32:23.988 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 00:32:23.990 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.classifiers.rules.JRip
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1011
* Starting evolution
[MASTER] 00:32:37.459 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.setMinNo(D)V: Line 500
[MASTER] 00:32:37.459 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.setMinNo(D)V: Line 501
[MASTER] 00:32:37.462 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.setMinNo(D)V: root-Branch
[MASTER] 00:32:37.465 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 195: weka.classifiers.rules.JRip.setMinNo(D)V:500 - InsertUnaryOp Negation of m
[MASTER] 00:32:37.467 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.setMinNo(D)V
[MASTER] 00:32:37.467 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.RipperRule.<init>(Lweka/classifiers/rules/JRip;)V
[MASTER] 00:32:37.468 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.rules.JRip.setMinNo(D)V
[MASTER] 00:32:37.468 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.rules.JRip.setMinNo(D)V: root-Branch in context: weka.classifiers.rules.JRip:setMinNo(D)V
[MASTER] 00:33:21.497 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 123s and 101 generations, 50290 statements, best individual has fitness: 13368.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 33%
* Total number of goals: 705
* Number of covered goals: 236
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 24%
* Total number of goals: 416
* Number of covered goals: 98
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 50%
* Total number of goals: 993
* Number of covered goals: 500
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 28%
* Total number of goals: 93
* Number of covered goals: 26
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 24%
* Total number of goals: 416
* Number of covered goals: 98
* Generated 65 tests with total length 498
* Resulting test suite's coverage: 40% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
* Writing JUnit test case 'JRip_ESTest' to /home/ubuntu/termite/rmosa/tests/s1011/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.classifiers.Evaluation
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 5947
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:37:33.009 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:37:33.019 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:37:33.022 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:37:34.322 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 00:37:35.879 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 00:37:35.881 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 00:37:40.125 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 00:37:40.259 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 00:37:40.260 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 00:37:40.260 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 00:37:40.261 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 00:37:40.263 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 00:37:40.264 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 00:37:40.265 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 00:37:40.266 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 00:37:40.350 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 00:37:40.368 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class weka.classifiers.Evaluation
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1011
* Starting evolution
[MASTER] 00:37:45.596 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
[MASTER] 00:38:08.369 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 127s and 36 generations, 26499 statements, best individual has fitness: 16088.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 57%
* Total number of goals: 1378
* Number of covered goals: 779
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 42%
* Total number of goals: 809
* Number of covered goals: 337
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 53
* Number of covered goals: 53
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 58%
* Total number of goals: 424
* Number of covered goals: 245
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 19%
* Total number of goals: 278
* Number of covered goals: 53
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 90%
* Total number of goals: 103
* Number of covered goals: 93
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 90%
* Total number of goals: 103
* Number of covered goals: 93
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 38%
* Total number of goals: 809
* Number of covered goals: 309
* Generated 116 tests with total length 1715
* Resulting test suite's coverage: 49% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 6%
* Compiling and checking tests
[MASTER] 00:45:48.345 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_45_1575593148298/weka/classifiers/Evaluation_45_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_45_1575593148298/weka/classifiers/Evaluation_45_tmp__ESTest_scaffolding.java]]
[MASTER] 00:45:48.345 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 00:45:48.345 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 00:45:48.351 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   variable double3
  location: class weka.classifiers.Evaluation_45_tmp__ESTest: 59
[MASTER] 00:45:48.352 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_45_1575593148298/weka/classifiers/Evaluation_45_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Dec 06 00:45:48 GMT 2019
4:  */
5: 
6: package weka.classifiers;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import org.evosuite.runtime.EvoRunner;
11: import org.evosuite.runtime.EvoRunnerParameters;
12: import org.junit.runner.RunWith;
13: import weka.classifiers.Evaluation;
14: import weka.classifiers.bayes.NaiveBayesUpdateable;
15: import weka.classifiers.evaluation.output.prediction.CSV;
16: import weka.classifiers.meta.Stacking;
17: import weka.core.ChebyshevDistance;
18: import weka.core.Instances;
19: import weka.core.TestInstances;
20: import weka.core.converters.TextDirectoryLoader;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
23: public class Evaluation_45_tmp__ESTest extends Evaluation_45_tmp__ESTest_scaffolding {
24: 
25:   /**
26:   //Test case number: 0
27:   /*Coverage entropy=0.49019607843137253
28:   */
29:   @Test(timeout = 4000)
30:   public void test0()  throws Throwable  {
31:       TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
32:       TestInstances testInstances0 = new TestInstances();
33:       Instances instances0 = testInstances0.generate("Deselected colinear attribute:");
34:       Evaluation evaluation0 = new Evaluation(instances0);
35:       evaluation0.equals("");
36:       evaluation0.KBInformation();
37:       NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
38:       naiveBayesUpdateable0.buildClassifier(instances0);
39:       evaluation0.weightedTruePositiveRate();
40:       Evaluation evaluation1 = new Evaluation(instances0);
41:       evaluation0.equals(textDirectoryLoader0);
42:       ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
43:       Stacking stacking0 = new Stacking();
44:       boolean boolean0 = evaluation0.equals(evaluation1);
45:       assertTrue(boolean0);
46:       
47:       evaluation1.KBInformation();
48:       double double0 = evaluation1.weightedTruePositiveRate();
49:       assertEquals(Double.NaN, double0, 0.01);
50:       
51:       CSV cSV0 = new CSV();
52:       evaluation0.equals("");
53:       Evaluation evaluation2 = new Evaluation(instances0);
54:       double double1 = evaluation1.numFalsePositives(0);
55:       assertEquals(0.0, double1, 0.01);
56:       
57:       Evaluation evaluation3 = new Evaluation(instances0);
58:       double double2 = evaluation3.m_Incorrect;
59:       assertNotEquals(double2, double3, 0.01);
60:   }
61: }
RegularFileObject[/tmp/EvoSuite_45_1575593148298/weka/classifiers/Evaluation_45_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Dec 06 00:45:48 GMT 2019
5:  */
6: 
7: package weka.classifiers;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Evaluation_45_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.Evaluation"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Evaluation_45_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.filters.unsupervised.attribute.NominalToBinary",
91:       "weka.core.converters.ConverterUtils",
92:       "weka.core.DistanceFunction",
93:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
94:       "weka.core.converters.TextDirectoryLoader",
95:       "org.pentaho.packageManagement.PackageConstraint",
96:       "weka.attributeSelection.AttributeEvaluator",
97:       "org.pentaho.packageManagement.Package",
98:       "weka.core.xml.XMLBasicSerialization",
99:       "weka.classifiers.trees.m5.M5Base",
100:       "weka.attributeSelection.SubsetEvaluator",
101:       "weka.classifiers.rules.RuleStats",
102:       "weka.classifiers.CostMatrix",
103:       "weka.filters.UnsupervisedFilter",
104:       "weka.core.logging.Logger$Level",
105:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
106:       "weka.core.DenseInstance",
107:       "weka.core.ConjugateGradientOptimization",
108:       "weka.classifiers.functions.LinearRegression",
109:       "weka.classifiers.rules.DecisionTable$DummySubsetEvaluator",
110:       "weka.core.converters.IncrementalConverter",
111:       "weka.classifiers.evaluation.output.prediction.CSV",
112:       "weka.filters.supervised.attribute.ClassOrder",
113:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
114:       "org.pentaho.packageManagement.DefaultPackageManager",
115:       "weka.estimators.UnivariateIntervalEstimator",
116:       "weka.classifiers.meta.LogitBoost",
117:       "org.bounce.net.DefaultAuthenticator",
118:       "weka.classifiers.bayes.NaiveBayes",
119:       "weka.core.ChebyshevDistance",
120:       "weka.classifiers.meta.MultiClassClassifier$RandomCode",
121:       "weka.estimators.IncrementalEstimator",
122:       "weka.estimators.Estimator$Builder",
123:       "weka.core.EnvironmentHandler",
124:       "weka.classifiers.trees.m5.RuleNode",
125:       "weka.classifiers.functions.Logistic",
126:       "weka.core.RelationalLocator",
127:       "weka.core.Utils",
128:       "weka.classifiers.meta.AdaBoostM1",
129:       "weka.core.CustomDisplayStringProvider",
130:       "weka.filters.unsupervised.instance.RemoveWithValues",
131:       "weka.core.NormalizableDistance",
132:       "weka.core.NoSupportForMissingValuesException",
133:       "weka.classifiers.rules.Rule",
134:       "weka.classifiers.UpdateableClassifier",
135:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
136:       "weka.core.MultiInstanceCapabilitiesHandler",
137:       "weka.classifiers.meta.MultiClassClassifier$ExhaustiveCode",
138:       "weka.core.Copyable",
139:       "weka.core.Capabilities",
140:       "weka.core.BinarySparseInstance",
141:       "weka.core.AttributeLocator",
142:       "weka.filters.supervised.attribute.NominalToBinary",
143:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
144:       "weka.classifiers.functions.supportVector.CachedKernel",
145:       "weka.core.SerializedObject",
146:       "weka.clusterers.UpdateableClusterer",
147:       "weka.core.Summarizable",
148:       "weka.attributeSelection.BestFirst",
149:       "weka.core.AdditionalMeasureProducer",
150:       "org.pentaho.packageManagement.PackageManager$1",
151:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
152:       "weka.classifiers.meta.MultiClassClassifier",
153:       "weka.core.Drawable",
154:       "weka.core.Optimization",
155:       "weka.core.matrix.Matrix",
156:       "weka.classifiers.ConditionalDensityEstimator",
157:       "weka.core.CapabilitiesHandler",
158:       "weka.attributeSelection.ASEvaluation",
159:       "weka.core.AbstractInstance",
160:       "weka.core.converters.LibSVMLoader",
161:       "weka.core.scripting.JythonObject",
162:       "weka.core.SelectedTag",
163:       "org.pentaho.packageManagement.DefaultPackage",
164:       "weka.estimators.DiscreteEstimator",
165:       "weka.classifiers.bayes.NaiveBayesUpdateable",
166:       "weka.classifiers.misc.InputMappedClassifier",
167:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
168:       "weka.core.Version",
169:       "weka.core.converters.AbstractLoader",
170:       "weka.classifiers.meta.MultiClassClassifier$Code",
171:       "weka.filters.AllFilter",
172:       "weka.filters.unsupervised.attribute.RemoveUseless",
173:       "weka.core.converters.BatchConverter",
174:       "weka.core.converters.ArffLoader$ArffReader",
175:       "weka.core.Tag",
176:       "weka.classifiers.IteratedSingleClassifierEnhancer",
177:       "weka.classifiers.AbstractClassifier",
178:       "weka.estimators.UnivariateDensityEstimator",
179:       "weka.core.converters.ArffLoader",
180:       "weka.filters.unsupervised.attribute.Center",
181:       "weka.classifiers.meta.Stacking",
182:       "weka.core.OptionHandler",
183:       "weka.core.WekaException",
184:       "weka.classifiers.rules.JRip",
185:       "weka.filters.StreamableFilter",
186:       "weka.core.Range",
187:       "weka.core.Attribute$1",
188:       "weka.core.PartitionGenerator",
189:       "weka.core.scripting.JythonSerializableObject",
190:       "weka.classifiers.Classifier",
191:       "weka.core.Capabilities$Capability",
192:       "weka.core.SparseInstance",
193:       "org.pentaho.packageManagement.PackageManager",
194:       "weka.estimators.PoissonEstimator",
195:       "weka.core.WekaEnumeration",
196:       "weka.attributeSelection.AttributeTransformer",
197:       "weka.classifiers.misc.SerializedClassifier",
198:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
199:       "weka.attributeSelection.PrincipalComponents",
200:       "weka.classifiers.meta.Bagging",
201:       "weka.classifiers.Evaluation",
202:       "weka.attributeSelection.ASSearch",
203:       "weka.classifiers.functions.supportVector.Kernel",
204:       "weka.core.WekaPackageManager",
205:       "weka.filters.SupervisedFilter",
206:       "weka.classifiers.evaluation.ThresholdCurve",
207:       "weka.core.TechnicalInformationHandler",
208:       "weka.core.converters.URLSourcedLoader",
209:       "weka.core.converters.FileSourcedConverter",
210:       "weka.attributeSelection.StartSetHandler",
211:       "weka.classifiers.meta.CostSensitiveClassifier",
212:       "weka.core.Option",
213:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
214:       "weka.core.neighboursearch.PerformanceStats",
215:       "weka.filters.Sourcable",
216:       "weka.classifiers.meta.MultiClassClassifier$StandardCode",
217:       "weka.core.Attribute",
218:       "weka.classifiers.rules.DecisionTable",
219:       "weka.classifiers.meta.MultiScheme",
220:       "weka.core.FastVector",
221:       "weka.estimators.UnivariateKernelEstimator",
222:       "weka.classifiers.MultipleClassifiersCombiner",
223:       "weka.core.UnassignedDatasetException",
224:       "weka.classifiers.meta.CVParameterSelection",
225:       "weka.classifiers.trees.RandomTree",
226:       "weka.classifiers.SingleClassifierEnhancer",
227:       "weka.core.RevisionUtils",
228:       "weka.core.Instance",
229:       "weka.classifiers.meta.RandomCommittee",
230:       "weka.core.converters.Loader",
231:       "weka.classifiers.functions.supportVector.PolyKernel",
232:       "weka.estimators.Estimator",
233:       "weka.core.ProtectedProperties",
234:       "weka.classifiers.IntervalEstimator",
235:       "weka.core.converters.C45Loader",
236:       "weka.classifiers.meta.Vote",
237:       "weka.core.StringLocator",
238:       "weka.core.AttributeStats",
239:       "weka.core.WeightedInstancesHandler",
240:       "weka.classifiers.functions.GaussianProcesses",
241:       "weka.classifiers.trees.DecisionStump",
242:       "weka.estimators.UnivariateQuantileEstimator",
243:       "weka.filters.unsupervised.attribute.Discretize",
244:       "weka.filters.unsupervised.attribute.Remove",
245:       "weka.core.Randomizable",
246:       "weka.classifiers.rules.M5Rules",
247:       "weka.core.Instances",
248:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
249:       "weka.core.converters.AbstractFileLoader",
250:       "weka.filters.unsupervised.attribute.Normalize",
251:       "weka.classifiers.rules.OneR",
252:       "weka.core.converters.ConverterUtils$DataSink",
253:       "weka.core.UnassignedClassException",
254:       "weka.classifiers.rules.ZeroR",
255:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
256:       "weka.filters.unsupervised.attribute.Standardize",
257:       "weka.core.UnsupportedAttributeTypeException",
258:       "weka.core.TechnicalInformation",
259:       "weka.classifiers.Sourcable",
260:       "weka.classifiers.functions.Logistic$OptEngCG",
261:       "weka.classifiers.functions.Logistic$OptEng",
262:       "weka.core.RevisionHandler",
263:       "weka.classifiers.evaluation.output.prediction.PlainText",
264:       "weka.experiment.Stats",
265:       "weka.core.converters.ConverterUtils$DataSource",
266:       "weka.classifiers.rules.OneR$OneRRule",
267:       "weka.core.xml.XMLSerialization",
268:       "weka.classifiers.xml.XMLClassifier",
269:       "weka.filters.unsupervised.attribute.MakeIndicator",
270:       "weka.filters.Filter",
271:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
272:       "weka.classifiers.lazy.IBk",
273:       "weka.filters.supervised.attribute.Discretize",
274:       "weka.classifiers.rules.JRip$RipperRule"
275:     );
276:   } 
277: 
278:   private static void resetClasses() {
279:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Evaluation_45_tmp__ESTest_scaffolding.class.getClassLoader()); 
280: 
281:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
282:       "weka.classifiers.Evaluation",
283:       "weka.core.pmml.PMMLFactory$ModelType",
284:       "weka.core.pmml.PMMLFactory$1",
285:       "weka.core.xml.KOML",
286:       "weka.core.Version",
287:       "weka.core.Utils",
288:       "weka.core.converters.ConverterUtils$DataSource",
289:       "weka.core.converters.AbstractLoader",
290:       "weka.core.converters.AbstractFileLoader",
291:       "weka.core.converters.ArffLoader",
292:       "org.pentaho.packageManagement.PackageManager",
293:       "org.pentaho.packageManagement.DefaultPackageManager",
294:       "weka.core.Environment",
295:       "weka.core.WekaPackageManager",
296:       "weka.gui.GenericPropertiesCreator",
297:       "weka.core.ClassDiscovery",
298:       "weka.core.ClassCache",
299:       "weka.gui.GenericObjectEditor",
300:       "weka.core.converters.ConverterUtils",
301:       "weka.core.Instances",
302:       "weka.core.TestInstances",
303:       "weka.core.Attribute",
304:       "weka.core.ProtectedProperties",
305:       "weka.core.AbstractInstance",
306:       "weka.core.DenseInstance",
307:       "weka.classifiers.CostMatrix",
308:       "weka.classifiers.AbstractClassifier",
309:       "weka.classifiers.SingleClassifierEnhancer",
310:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
311:       "weka.core.Tag",
312:       "weka.classifiers.meta.CostSensitiveClassifier",
313:       "weka.classifiers.rules.ZeroR",
314:       "weka.core.UnassignedClassException",
315:       "weka.classifiers.bayes.BayesNet",
316:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
317:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
318:       "weka.classifiers.bayes.net.search.local.K2",
319:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
320:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
321:       "weka.classifiers.lazy.IBk",
322:       "weka.core.neighboursearch.NearestNeighbourSearch",
323:       "weka.core.neighboursearch.LinearNNSearch",
324:       "weka.core.NormalizableDistance",
325:       "weka.core.EuclideanDistance",
326:       "weka.core.Range",
327:       "weka.core.SparseInstance",
328:       "weka.core.BinarySparseInstance",
329:       "weka.attributeSelection.ASEvaluation",
330:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
331:       "weka.attributeSelection.PrincipalComponents",
332:       "weka.core.converters.ArffLoader$ArffReader",
333:       "weka.core.converters.LibSVMLoader",
334:       "weka.core.converters.JSONLoader",
335:       "weka.core.converters.TextDirectoryLoader",
336:       "weka.filters.Filter",
337:       "weka.filters.AllFilter",
338:       "weka.core.converters.CSVLoader",
339:       "weka.core.converters.DatabaseLoader",
340:       "weka.experiment.DatabaseUtils",
341:       "weka.core.converters.DatabaseConnection",
342:       "weka.core.Option",
343:       "weka.core.converters.SerializedInstancesLoader",
344:       "weka.clusterers.AbstractClusterer",
345:       "weka.clusterers.RandomizableClusterer",
346:       "weka.clusterers.SimpleKMeans",
347:       "weka.core.neighboursearch.CoverTree",
348:       "weka.classifiers.IteratedSingleClassifierEnhancer",
349:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
350:       "weka.classifiers.meta.LogitBoost",
351:       "weka.classifiers.trees.DecisionStump",
352:       "weka.core.converters.SVMLightLoader",
353:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
354:       "weka.classifiers.evaluation.output.prediction.XML",
355:       "weka.core.UnassignedDatasetException",
356:       "weka.core.converters.MatlabLoader",
357:       "weka.core.RevisionUtils",
358:       "weka.estimators.Estimator",
359:       "weka.estimators.DiscreteEstimator",
360:       "weka.core.Capabilities",
361:       "weka.core.Capabilities$Capability",
362:       "weka.core.tokenizers.Tokenizer",
363:       "weka.core.tokenizers.AlphabeticTokenizer",
364:       "weka.classifiers.rules.DecisionTable",
365:       "weka.attributeSelection.ASSearch",
366:       "weka.attributeSelection.BestFirst",
367:       "weka.core.WekaEnumeration",
368:       "weka.core.Attribute$1",
369:       "weka.classifiers.bayes.NaiveBayes",
370:       "weka.classifiers.bayes.NaiveBayesUpdateable",
371:       "weka.classifiers.bayes.NaiveBayesMultinomial",
372:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
373:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
374:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
375:       "weka.core.TechnicalInformation",
376:       "weka.core.TechnicalInformation$Type",
377:       "weka.core.TechnicalInformation$Field",
378:       "weka.core.converters.C45Loader",
379:       "weka.core.FindWithCapabilities",
380:       "weka.core.SingleIndex",
381:       "weka.classifiers.meta.RegressionByDiscretization",
382:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
383:       "weka.filters.unsupervised.attribute.Discretize",
384:       "weka.classifiers.trees.J48",
385:       "weka.core.SelectedTag",
386:       "weka.core.ChebyshevDistance",
387:       "weka.classifiers.evaluation.output.prediction.CSV",
388:       "weka.classifiers.RandomizableClassifier",
389:       "weka.classifiers.functions.SGDText",
390:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
391:       "weka.core.tokenizers.WordTokenizer",
392:       "weka.core.stemmers.NullStemmer",
393:       "weka.classifiers.trees.RandomForest",
394:       "weka.classifiers.functions.SGD",
395:       "weka.experiment.InstanceQuery",
396:       "weka.core.MinkowskiDistance",
397:       "weka.core.Javadoc",
398:       "weka.core.GlobalInfoJavadoc",
399:       "weka.classifiers.misc.InputMappedClassifier",
400:       "weka.classifiers.meta.AdaBoostM1",
401:       "weka.classifiers.trees.REPTree",
402:       "weka.estimators.UnivariateKernelEstimator",
403:       "weka.core.WekaException",
404:       "weka.core.UnsupportedAttributeTypeException",
405:       "weka.classifiers.MultipleClassifiersCombiner",
406:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
407:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
408:       "weka.classifiers.meta.Stacking",
409:       "weka.classifiers.functions.VotedPerceptron",
410:       "weka.classifiers.misc.SerializedClassifier",
411:       "weka.classifiers.functions.SimpleLogistic",
412:       "weka.classifiers.trees.RandomTree",
413:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
414:       "weka.classifiers.meta.MultiScheme",
415:       "weka.filters.SimpleFilter",
416:       "weka.filters.SimpleStreamFilter",
417:       "weka.filters.MultiFilter",
418:       "weka.core.SerializedObject",
419:       "weka.classifiers.trees.m5.M5Base",
420:       "weka.classifiers.rules.M5Rules",
421:       "weka.classifiers.meta.MultiClassClassifier",
422:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
423:       "weka.classifiers.functions.Logistic",
424:       "weka.classifiers.pmml.consumer.PMMLClassifier",
425:       "weka.classifiers.pmml.consumer.GeneralRegression",
426:       "weka.classifiers.pmml.consumer.GeneralRegression$ModelType",
427:       "weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction",
428:       "weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction",
429:       "weka.classifiers.pmml.consumer.GeneralRegression$Distribution",
430:       "weka.classifiers.functions.LinearRegression",
431:       "weka.core.neighboursearch.balltrees.BallNode",
432:       "weka.clusterers.HierarchicalClusterer",
433:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
434:       "weka.classifiers.rules.JRip",
435:       "weka.classifiers.lazy.KStar",
436:       "weka.core.AllJavadoc",
437:       "weka.classifiers.rules.OneR",
438:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
439:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
440:       "weka.classifiers.meta.RandomCommittee",
441:       "weka.core.OptionHandlerJavadoc",
442:       "weka.core.ManhattanDistance",
443:       "weka.core.xml.XMLDocument",
444:       "weka.core.xml.XMLInstances",
445:       "weka.core.converters.XRFFLoader",
446:       "weka.classifiers.trees.LMT",
447:       "weka.core.ListOptions",
448:       "weka.classifiers.functions.GaussianProcesses",
449:       "weka.classifiers.functions.supportVector.Kernel",
450:       "weka.classifiers.functions.supportVector.CachedKernel",
451:       "weka.classifiers.functions.supportVector.PolyKernel",
452:       "weka.core.neighboursearch.BallTree",
453:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
454:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
455:       "weka.core.neighboursearch.balltrees.BallSplitter",
456:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
457:       "weka.classifiers.functions.SMOreg",
458:       "weka.classifiers.functions.supportVector.RegOptimizer",
459:       "weka.classifiers.functions.supportVector.RegSMO",
460:       "weka.classifiers.functions.supportVector.RegSMOImproved",
461:       "weka.classifiers.misc.InputMappedClassifierBeanInfo",
462:       "weka.classifiers.lazy.LWL",
463:       "weka.classifiers.evaluation.output.prediction.Null",
464:       "weka.classifiers.functions.SimpleLinearRegression",
465:       "weka.estimators.NormalEstimator",
466:       "weka.core.AttributeStats",
467:       "weka.classifiers.trees.M5P",
468:       "weka.core.Check",
469:       "weka.core.CheckGOE",
470:       "weka.core.neighboursearch.KDTree",
471:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
472:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
473:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
474:       "weka.classifiers.rules.OneR$OneRRule",
475:       "weka.classifiers.meta.AttributeSelectedClassifier",
476:       "weka.attributeSelection.CfsSubsetEval",
477:       "weka.clusterers.FarthestFirst",
478:       "weka.classifiers.meta.RandomSubSpace",
479:       "weka.classifiers.functions.MultilayerPerceptron",
480:       "weka.core.FastVector",
481:       "weka.filters.unsupervised.attribute.NominalToBinary",
482:       "weka.classifiers.functions.neural.SigmoidUnit",
483:       "weka.classifiers.functions.neural.LinearUnit",
484:       "weka.core.TechnicalInformationHandlerJavadoc",
485:       "weka.core.CheckOptionHandler",
486:       "weka.classifiers.evaluation.output.prediction.HTML",
487:       "weka.classifiers.evaluation.output.prediction.PlainText",
488:       "weka.classifiers.pmml.consumer.Regression",
489:       "weka.classifiers.pmml.consumer.Regression$Normalization",
490:       "weka.classifiers.functions.supportVector.Puk",
491:       "weka.estimators.KernelEstimator",
492:       "weka.core.tokenizers.NGramTokenizer",
493:       "weka.classifiers.functions.SMO",
494:       "weka.classifiers.meta.FilteredClassifier",
495:       "weka.filters.supervised.attribute.AttributeSelection",
496:       "weka.attributeSelection.AttributeSelection",
497:       "weka.attributeSelection.GreedyStepwise",
498:       "weka.filters.supervised.attribute.Discretize",
499:       "weka.classifiers.meta.CVParameterSelection",
500:       "weka.experiment.Stats",
501:       "weka.classifiers.rules.PART",
502:       "weka.classifiers.rules.part.MakeDecList",
503:       "weka.classifiers.meta.AdditiveRegression",
504:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
505:       "weka.classifiers.meta.Vote",
506:       "weka.estimators.PoissonEstimator",
507:       "weka.classifiers.evaluation.ThresholdCurve"
508:     );
509:   }
510: }

[MASTER] 00:45:48.353 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate("Deselected colinear attribute:");
Evaluation evaluation0 = new Evaluation(instances0);
evaluation0.equals("");
evaluation0.KBInformation();
NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
naiveBayesUpdateable0.buildClassifier(instances0);
evaluation0.weightedTruePositiveRate();
Evaluation evaluation1 = new Evaluation(instances0);
evaluation0.equals(textDirectoryLoader0);
ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
Stacking stacking0 = new Stacking();
boolean boolean0 = evaluation0.equals(evaluation1);
assertTrue(boolean0);

evaluation1.KBInformation();
double double0 = evaluation1.weightedTruePositiveRate();
assertEquals(Double.NaN, double0, 0.01);

CSV cSV0 = new CSV();
evaluation0.equals("");
Evaluation evaluation2 = new Evaluation(instances0);
double double1 = evaluation1.numFalsePositives(0);
assertEquals(0.0, double1, 0.01);

Evaluation evaluation3 = new Evaluation(instances0);
double double2 = evaluation3.m_Incorrect;
assertNotEquals(double2, double3, 0.01);


[MASTER] 00:45:51.778 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 00:45:52.477 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 00:45:52.478 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
[MASTER] 00:45:54.141 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 00:45:54.154 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.AllJavadoc: null
[MASTER] 00:45:54.565 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.AllJavadoc
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 10
* Writing JUnit test case 'Evaluation_ESTest' to /home/ubuntu/termite/rmosa/tests/s1011/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.classifiers.bayes.NaiveBayesMultinomialText
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.filters.unsupervised.attribute.Discretize
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.experiment.ResultMatrix
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 5946
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 5949
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 5948
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:53:15.671 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:53:15.714 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:53:15.717 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:53:15.963 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 00:53:16.018 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 00:53:16.036 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 00:53:16.057 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:53:16.062 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:53:16.063 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:53:16.084 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.experiment.ResultMatrix
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 00:53:17.089 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 00:53:17.089 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 00:53:17.099 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 00:53:17.158 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:53:17.171 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:53:17.175 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Finished analyzing classpath
* Generating tests for class weka.filters.unsupervised.attribute.Discretize
* Using seed 1011
* Starting evolution
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1011
* Starting evolution
* Finished analyzing classpath
* Generating tests for class weka.classifiers.bayes.NaiveBayesMultinomialText
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1011
* Starting evolution
[MASTER] 00:53:49.470 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 00:53:49.470 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
* Search finished after 123s and 134 generations, 68973 statements, best individual has fitness: 5440.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 68%
* Total number of goals: 370
* Number of covered goals: 250
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 53%
* Total number of goals: 242
* Number of covered goals: 128
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 28
* Number of covered goals: 28
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 60%
* Total number of goals: 713
* Number of covered goals: 425
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 46%
* Total number of goals: 72
* Number of covered goals: 33
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 52%
* Total number of goals: 242
* Number of covered goals: 126
* Generated 84 tests with total length 675
* Resulting test suite's coverage: 61% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 125s and 137 generations, 87109 statements, best individual has fitness: 2384.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 338
* Number of covered goals: 280
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 75%
* Total number of goals: 194
* Number of covered goals: 145
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 85%
* Total number of goals: 476
* Number of covered goals: 403
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 112
* Number of covered goals: 49
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 194
* Number of covered goals: 142
* Generated 73 tests with total length 633
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 137s and 20 generations, 21728 statements, best individual has fitness: 3328.0
[MASTER] 00:55:39.244 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 21 seconds more than allowed.
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 647
* Number of covered goals: 607
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 441
* Number of covered goals: 397
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 678
* Number of covered goals: 599
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 37%
* Total number of goals: 244
* Number of covered goals: 90
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 94%
* Total number of goals: 124
* Number of covered goals: 116
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 94%
* Total number of goals: 124
* Number of covered goals: 116
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 441
* Number of covered goals: 364
* Generated 158 tests with total length 3387
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
[MASTER] 00:57:52.133 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 00:57:52.905 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing JUnit test case 'Discretize_ESTest' to /home/ubuntu/termite/rmosa/tests/s1011/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 43%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing JUnit test case 'NaiveBayesMultinomialText_ESTest' to /home/ubuntu/termite/rmosa/tests/s1011/107_weka/evosuite-tests
* Done!

* Computation finished
[MASTER] 01:01:16.149 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6761666666666667% of time used, but only 63/158 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 19%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 8
* Writing JUnit test case 'ResultMatrix_ESTest' to /home/ubuntu/termite/rmosa/tests/s1011/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.core.stemmers.LovinsStemmer
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 5946
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class weka.core.stemmers.LovinsStemmer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1011
* Starting evolution
* Search finished after 125s and 60 generations, 54177 statements, best individual has fitness: 3040.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 217
* Number of covered goals: 183
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 65%
* Total number of goals: 428
* Number of covered goals: 277
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 260
* Number of covered goals: 226
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 18
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 65%
* Total number of goals: 428
* Number of covered goals: 277
* Generated 65 tests with total length 268
* Resulting test suite's coverage: 72% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 77%
* Compiling and checking tests
* Writing JUnit test case 'LovinsStemmer_ESTest' to /home/ubuntu/termite/rmosa/tests/s1011/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.core.Optimization
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 5950
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:10:19.554 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:10:19.573 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:10:19.577 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:10:19.593 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.core.Optimization
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1011
* Starting evolution
[MASTER] 01:10:21.972 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.core.Optimization.DynamicIntArray.<init>(Lweka/core/Optimization;I)V
* Search finished after 123s and 77 generations, 36309 statements, best individual has fitness: 16712.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 10%
* Total number of goals: 620
* Number of covered goals: 59
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 28%
* Total number of goals: 926
* Number of covered goals: 258
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 10%
* Total number of goals: 21
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Generated 19 tests with total length 146
* Resulting test suite's coverage: 16% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 17%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 29
* Writing JUnit test case 'Optimization_ESTest' to /home/ubuntu/termite/rmosa/tests/s1011/107_weka/evosuite-tests
* Done!

* Computation finished
