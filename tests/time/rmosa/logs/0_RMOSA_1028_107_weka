* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.core.stemmers.LovinsStemmer
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.filters.unsupervised.attribute.Discretize
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.classifiers.bayes.NaiveBayesMultinomialText
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.classifiers.Evaluation
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 20774
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 20771
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 20780
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 20777
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class weka.core.stemmers.LovinsStemmer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 13:44:11.872 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
* Using seed 1028
* Starting evolution
[MASTER] 13:44:11.886 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 13:44:11.895 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 13:44:12.121 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 13:44:12.155 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 13:44:12.157 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.filters.unsupervised.attribute.Discretize
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1028
* Starting evolution
[MASTER] 13:44:15.703 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 13:44:15.717 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 13:44:15.719 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 13:44:15.784 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 13:44:15.807 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 13:44:15.824 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class weka.classifiers.bayes.NaiveBayesMultinomialText
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1028
* Starting evolution
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 13:44:35.422 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 13:44:35.430 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 13:44:35.436 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 13:44:35.994 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 13:44:36.633 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 13:44:36.634 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 13:44:39.851 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 13:44:39.887 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 13:44:39.888 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 13:44:39.888 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 13:44:39.889 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 13:44:39.889 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 13:44:39.889 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 13:44:39.890 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 13:44:39.891 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 13:44:39.975 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 13:44:40.003 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class weka.classifiers.Evaluation
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1028
* Starting evolution
[MASTER] 13:44:44.349 [logback-2] ERROR TestCluster - Failed to check cache for javax.swing.RowFilter<M, I>.ComparisonType : Type points to itself
[MASTER] 13:44:49.675 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
[MASTER] 13:44:58.549 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 13:44:58.549 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 13:46:07.716 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;
[MASTER] 13:46:07.717 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;
* Search finished after 122s and 156 generations, 58244 statements, best individual has fitness: 9096.0
* Search finished after 125s and 64 generations, 49041 statements, best individual has fitness: 3168.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 41%
* Total number of goals: 370
* Number of covered goals: 153
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 28%
* Total number of goals: 242
* Number of covered goals: 67
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion WEAKMUTATION
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion WEAKMUTATION: 27%
* Total number of goals: 713
* Number of covered goals: 194
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 40%
* Total number of goals: 72
* Number of covered goals: 29
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 45
* Number of covered goals: 44
* Coverage analysis for criterion CBRANCH
* Coverage of criterion LINE: 82%
* Total number of goals: 217
* Number of covered goals: 179
* Coverage analysis for criterion BRANCH
* Coverage of criterion CBRANCH: 28%
* Total number of goals: 242
* Number of covered goals: 67
* Coverage of criterion BRANCH: 63%
* Total number of goals: 428
* Number of covered goals: 270
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 260
* Number of covered goals: 228
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 18
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Generated 64 tests with total length 378
* Resulting test suite's coverage: 35% (average coverage for all fitness functions)
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Generating assertions
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 63%
* Total number of goals: 428
* Number of covered goals: 270
* Generated 72 tests with total length 371
* Resulting test suite's coverage: 71% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 123s and 93 generations, 55895 statements, best individual has fitness: 1864.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 88%
* Total number of goals: 338
* Number of covered goals: 296
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 78%
* Total number of goals: 194
* Number of covered goals: 151
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 476
* Number of covered goals: 434
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 46%
* Total number of goals: 112
* Number of covered goals: 51
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 77%
* Total number of goals: 194
* Number of covered goals: 149
* Generated 63 tests with total length 659
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 128s and 54 generations, 28119 statements, best individual has fitness: 16216.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 57%
* Total number of goals: 1378
* Number of covered goals: 782
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 40%
* Total number of goals: 809
* Number of covered goals: 327
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 54
* Number of covered goals: 54
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 59%
* Total number of goals: 424
* Number of covered goals: 249
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 17%
* Total number of goals: 278
* Number of covered goals: 48
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 103
* Number of covered goals: 94
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 89%
* Total number of goals: 103
* Number of covered goals: 92
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 37%
* Total number of goals: 809
* Number of covered goals: 299
* Generated 124 tests with total length 1290
* Resulting test suite's coverage: 49% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 73%
* Compiling and checking tests
* Writing JUnit test case 'LovinsStemmer_ESTest' to /home/ubuntu/termite/rmosa/tests/s1028/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 13:47:41.532 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 13:47:42.041 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
* Writing JUnit test case 'Discretize_ESTest' to /home/ubuntu/termite/rmosa/tests/s1028/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 59%
* Compiling and checking tests
[MASTER] 13:50:07.892 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_53_1575640207860/weka/classifiers/bayes/NaiveBayesMultinomialText_53_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_53_1575640207860/weka/classifiers/bayes/NaiveBayesMultinomialText_53_tmp__ESTest_scaffolding.java]]
[MASTER] 13:50:07.892 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 13:50:07.892 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 13:50:07.897 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 28
[MASTER] 13:50:07.897 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 28
[MASTER] 13:50:07.897 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 29
[MASTER] 13:50:07.898 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_53_1575640207860/weka/classifiers/bayes/NaiveBayesMultinomialText_53_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Dec 06 13:50:07 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.HashMap;
11: import java.util.LinkedHashMap;
12: import java.util.Map;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: import weka.classifiers.bayes.NaiveBayesMultinomialText;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class NaiveBayesMultinomialText_53_tmp__ESTest extends NaiveBayesMultinomialText_53_tmp__ESTest_scaffolding {
20: 
21:   /**
22:   //Test case number: 0
23:   /*Coverage entropy=1.1217186091313738
24:   */
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
28:       HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
29:       naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
30:       String string0 = naiveBayesMultinomialText0.lowercaseTokensTipText();
31:       assertEquals("Whether to convert all tokens to lowercase", string0);
32:       
33:       naiveBayesMultinomialText0.m_periodicP = 33;
34:       naiveBayesMultinomialText0.pruneDictionary();
35:       assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
36:       assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
37:       assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
38:       assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
39:       assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
40:   }
41: }
RegularFileObject[/tmp/EvoSuite_53_1575640207860/weka/classifiers/bayes/NaiveBayesMultinomialText_53_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Dec 06 13:50:07 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_53_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_53_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.filters.unsupervised.attribute.NominalToBinary",
91:       "weka.core.DistanceFunction",
92:       "org.pentaho.packageManagement.PackageConstraint",
93:       "weka.attributeSelection.AttributeEvaluator",
94:       "org.pentaho.packageManagement.Package",
95:       "weka.core.xml.XMLBasicSerialization",
96:       "weka.filters.UnsupervisedFilter",
97:       "weka.core.logging.Logger$Level",
98:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
99:       "weka.core.DenseInstance",
100:       "weka.core.stemmers.Stemmer",
101:       "weka.classifiers.functions.SimpleLinearRegression",
102:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
103:       "org.pentaho.packageManagement.DefaultPackageManager",
104:       "org.bounce.net.DefaultAuthenticator",
105:       "weka.core.stemmers.NullStemmer",
106:       "weka.core.EnvironmentHandler",
107:       "weka.classifiers.functions.SGDText",
108:       "weka.core.RelationalLocator",
109:       "weka.core.Utils",
110:       "weka.classifiers.meta.AdaBoostM1",
111:       "weka.core.CustomDisplayStringProvider",
112:       "weka.core.tokenizers.Tokenizer",
113:       "weka.core.NormalizableDistance",
114:       "weka.core.NoSupportForMissingValuesException",
115:       "weka.classifiers.UpdateableClassifier",
116:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
117:       "weka.core.MultiInstanceCapabilitiesHandler",
118:       "weka.core.Copyable",
119:       "weka.core.Capabilities",
120:       "weka.core.BinarySparseInstance",
121:       "weka.core.AttributeLocator",
122:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
123:       "weka.core.SerializedObject",
124:       "weka.clusterers.UpdateableClusterer",
125:       "weka.core.Summarizable",
126:       "weka.core.AdditionalMeasureProducer",
127:       "weka.core.neighboursearch.balltrees.BallNode",
128:       "org.pentaho.packageManagement.PackageManager$1",
129:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
130:       "weka.core.Drawable",
131:       "weka.core.matrix.Matrix",
132:       "weka.core.CapabilitiesHandler",
133:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
134:       "weka.attributeSelection.ASEvaluation",
135:       "weka.core.AbstractInstance",
136:       "weka.core.scripting.JythonObject",
137:       "weka.core.SelectedTag",
138:       "org.pentaho.packageManagement.DefaultPackage",
139:       "weka.classifiers.misc.InputMappedClassifier",
140:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
141:       "weka.classifiers.meta.AdditiveRegression",
142:       "weka.core.Version",
143:       "weka.core.Tag",
144:       "weka.classifiers.IteratedSingleClassifierEnhancer",
145:       "weka.classifiers.AbstractClassifier",
146:       "weka.filters.unsupervised.attribute.Center",
147:       "weka.core.OptionHandler",
148:       "weka.core.WekaException",
149:       "weka.filters.StreamableFilter",
150:       "weka.core.Range",
151:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
152:       "weka.core.PartitionGenerator",
153:       "weka.core.scripting.JythonSerializableObject",
154:       "weka.classifiers.Classifier",
155:       "weka.core.Capabilities$Capability",
156:       "weka.core.SparseInstance",
157:       "org.pentaho.packageManagement.PackageManager",
158:       "weka.attributeSelection.AttributeTransformer",
159:       "weka.core.tokenizers.WordTokenizer",
160:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
161:       "weka.attributeSelection.PrincipalComponents",
162:       "weka.core.stemmers.SnowballStemmer",
163:       "weka.core.stemmers.LovinsStemmer",
164:       "weka.classifiers.Evaluation",
165:       "weka.classifiers.functions.supportVector.Kernel",
166:       "weka.core.WekaPackageManager",
167:       "weka.filters.SupervisedFilter",
168:       "weka.core.TechnicalInformationHandler",
169:       "weka.core.neighboursearch.LinearNNSearch",
170:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
171:       "weka.core.Option",
172:       "weka.core.neighboursearch.PerformanceStats",
173:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
174:       "weka.filters.Sourcable",
175:       "weka.core.Attribute",
176:       "weka.core.Stopwords",
177:       "weka.core.FastVector",
178:       "weka.core.UnassignedDatasetException",
179:       "weka.classifiers.RandomizableClassifier",
180:       "weka.classifiers.trees.RandomTree",
181:       "weka.classifiers.SingleClassifierEnhancer",
182:       "weka.core.RevisionUtils",
183:       "weka.core.Instance",
184:       "weka.classifiers.meta.RandomCommittee",
185:       "weka.core.ProtectedProperties",
186:       "weka.core.StringLocator",
187:       "weka.core.AttributeStats",
188:       "weka.core.WeightedInstancesHandler",
189:       "weka.core.neighboursearch.NearestNeighbourSearch",
190:       "weka.classifiers.trees.DecisionStump",
191:       "weka.filters.unsupervised.attribute.Remove",
192:       "weka.core.Randomizable",
193:       "weka.core.EuclideanDistance",
194:       "weka.core.Instances",
195:       "weka.core.UnassignedClassException",
196:       "weka.classifiers.rules.ZeroR",
197:       "weka.core.stemmers.IteratedLovinsStemmer",
198:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
199:       "weka.filters.unsupervised.attribute.Standardize",
200:       "weka.core.UnsupportedAttributeTypeException",
201:       "weka.core.TechnicalInformation",
202:       "weka.classifiers.Sourcable",
203:       "weka.core.RevisionHandler",
204:       "weka.classifiers.evaluation.output.prediction.PlainText",
205:       "weka.core.xml.XMLSerialization",
206:       "weka.classifiers.xml.XMLClassifier",
207:       "weka.classifiers.lazy.IBk",
208:       "weka.filters.Filter",
209:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
210:       "weka.filters.supervised.attribute.Discretize"
211:     );
212:   } 
213: 
214:   private static void resetClasses() {
215:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_53_tmp__ESTest_scaffolding.class.getClassLoader()); 
216: 
217:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
218:       "weka.classifiers.AbstractClassifier",
219:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
220:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
221:       "weka.core.Capabilities$Capability",
222:       "weka.core.tokenizers.Tokenizer",
223:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
224:       "weka.core.tokenizers.WordTokenizer",
225:       "weka.core.stemmers.NullStemmer",
226:       "weka.core.Capabilities",
227:       "weka.core.Utils",
228:       "org.pentaho.packageManagement.PackageManager",
229:       "org.pentaho.packageManagement.DefaultPackageManager",
230:       "weka.core.Version",
231:       "weka.core.Environment",
232:       "weka.core.WekaPackageManager",
233:       "weka.attributeSelection.ASEvaluation",
234:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
235:       "weka.attributeSelection.PrincipalComponents",
236:       "weka.core.RevisionUtils",
237:       "weka.core.Option",
238:       "weka.classifiers.bayes.BayesNet",
239:       "weka.classifiers.bayes.net.BIFReader",
240:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
241:       "weka.core.Tag",
242:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
243:       "weka.classifiers.bayes.net.search.local.K2",
244:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
245:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
246:       "weka.core.Instances",
247:       "weka.core.stemmers.SnowballStemmer",
248:       "weka.classifiers.RandomizableClassifier",
249:       "weka.classifiers.functions.SGDText",
250:       "weka.core.AbstractInstance",
251:       "weka.core.SparseInstance",
252:       "weka.core.BinarySparseInstance",
253:       "weka.core.UnassignedDatasetException",
254:       "weka.core.DenseInstance",
255:       "weka.classifiers.Evaluation",
256:       "weka.classifiers.MultipleClassifiersCombiner",
257:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
258:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
259:       "weka.classifiers.meta.Stacking",
260:       "weka.classifiers.rules.ZeroR",
261:       "weka.core.TechnicalInformation",
262:       "weka.core.TechnicalInformation$Type",
263:       "weka.core.TechnicalInformation$Field",
264:       "weka.core.neighboursearch.NearestNeighbourSearch",
265:       "weka.core.neighboursearch.CoverTree",
266:       "weka.core.NormalizableDistance",
267:       "weka.core.EuclideanDistance",
268:       "weka.core.Range",
269:       "weka.classifiers.SingleClassifierEnhancer",
270:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
271:       "weka.classifiers.meta.CostSensitiveClassifier",
272:       "weka.classifiers.CostMatrix",
273:       "weka.core.Stopwords",
274:       "weka.filters.Filter",
275:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
276:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
277:       "weka.core.Attribute",
278:       "weka.core.ProtectedProperties",
279:       "weka.classifiers.functions.supportVector.Kernel",
280:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
281:       "weka.core.SerializedObject",
282:       "weka.core.neighboursearch.balltrees.BallNode",
283:       "weka.core.neighboursearch.KDTree",
284:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
285:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
286:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
287:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
288:       "weka.core.tokenizers.AlphabeticTokenizer",
289:       "weka.classifiers.misc.InputMappedClassifier",
290:       "weka.core.TestInstances",
291:       "weka.core.tokenizers.NGramTokenizer",
292:       "weka.core.stemmers.Stemming",
293:       "weka.core.stemmers.LovinsStemmer",
294:       "weka.classifiers.functions.supportVector.StringKernel",
295:       "weka.filters.supervised.attribute.Discretize",
296:       "weka.classifiers.misc.SerializedClassifier",
297:       "weka.classifiers.bayes.NaiveBayes",
298:       "weka.classifiers.functions.SGD",
299:       "weka.classifiers.lazy.IBk",
300:       "weka.core.neighboursearch.LinearNNSearch",
301:       "weka.core.converters.ArffLoader$ArffReader",
302:       "weka.core.neighboursearch.BallTree",
303:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
304:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
305:       "weka.core.neighboursearch.balltrees.BallSplitter",
306:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
307:       "weka.classifiers.functions.supportVector.CachedKernel",
308:       "weka.classifiers.functions.supportVector.PolyKernel",
309:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
310:       "weka.classifiers.rules.OneR",
311:       "weka.classifiers.functions.MultilayerPerceptron",
312:       "weka.core.FastVector",
313:       "weka.filters.unsupervised.attribute.NominalToBinary",
314:       "weka.classifiers.functions.neural.SigmoidUnit",
315:       "weka.classifiers.functions.neural.LinearUnit",
316:       "weka.classifiers.IteratedSingleClassifierEnhancer",
317:       "weka.classifiers.meta.AdditiveRegression",
318:       "weka.classifiers.trees.DecisionStump",
319:       "weka.core.WekaException",
320:       "weka.core.UnsupportedAttributeTypeException",
321:       "weka.classifiers.functions.SimpleLinearRegression",
322:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
323:       "weka.classifiers.meta.LogitBoost",
324:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
325:       "weka.core.stemmers.IteratedLovinsStemmer",
326:       "weka.core.SerializationHelper",
327:       "weka.attributeSelection.CfsSubsetEval",
328:       "weka.classifiers.bayes.NaiveBayesMultinomial",
329:       "weka.attributeSelection.WrapperSubsetEval",
330:       "weka.classifiers.trees.J48",
331:       "weka.classifiers.trees.j48.ClassifierTree",
332:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
333:       "weka.classifiers.meta.AttributeSelectedClassifier",
334:       "weka.attributeSelection.ASSearch",
335:       "weka.attributeSelection.BestFirst",
336:       "weka.core.WekaEnumeration",
337:       "weka.core.Attribute$1",
338:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
339:       "weka.classifiers.functions.supportVector.Puk",
340:       "weka.classifiers.functions.supportVector.RBFKernel",
341:       "weka.estimators.Estimator",
342:       "weka.estimators.PoissonEstimator",
343:       "weka.classifiers.lazy.KStar",
344:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
345:       "weka.core.AttributeStats",
346:       "weka.estimators.KernelEstimator",
347:       "weka.classifiers.trees.m5.M5Base",
348:       "weka.classifiers.rules.M5Rules",
349:       "weka.classifiers.functions.LinearRegression",
350:       "weka.classifiers.functions.Logistic",
351:       "weka.classifiers.functions.SimpleLogistic",
352:       "weka.classifiers.meta.MultiClassClassifier",
353:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
354:       "weka.core.UnassignedClassException",
355:       "weka.classifiers.rules.JRip",
356:       "weka.attributeSelection.InfoGainAttributeEval",
357:       "weka.classifiers.rules.PART",
358:       "weka.classifiers.rules.part.MakeDecList",
359:       "weka.classifiers.rules.DecisionTable",
360:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
361:       "weka.classifiers.meta.Vote",
362:       "weka.attributeSelection.ReliefFAttributeEval",
363:       "weka.classifiers.meta.RegressionByDiscretization",
364:       "weka.filters.unsupervised.attribute.Discretize",
365:       "weka.classifiers.trees.RandomTree",
366:       "weka.classifiers.trees.LMT",
367:       "weka.classifiers.functions.VotedPerceptron",
368:       "weka.core.FindWithCapabilities",
369:       "weka.core.SingleIndex",
370:       "weka.classifiers.trees.REPTree",
371:       "weka.filters.SimpleFilter",
372:       "weka.filters.SimpleStreamFilter",
373:       "weka.filters.MultiFilter",
374:       "weka.filters.AllFilter",
375:       "weka.estimators.DiscreteEstimator",
376:       "weka.classifiers.meta.MultiScheme",
377:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
378:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
379:       "weka.classifiers.meta.Bagging",
380:       "weka.attributeSelection.GainRatioAttributeEval",
381:       "weka.classifiers.meta.AdaBoostM1",
382:       "weka.classifiers.functions.SMO",
383:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
384:       "weka.classifiers.lazy.LWL",
385:       "weka.classifiers.meta.FilteredClassifier",
386:       "weka.filters.supervised.attribute.AttributeSelection",
387:       "weka.attributeSelection.AttributeSelection",
388:       "weka.attributeSelection.GreedyStepwise",
389:       "weka.classifiers.functions.GaussianProcesses",
390:       "weka.attributeSelection.OneRAttributeEval",
391:       "weka.core.matrix.Matrix",
392:       "weka.estimators.MahalanobisEstimator",
393:       "weka.core.ManhattanDistance",
394:       "weka.estimators.NormalEstimator",
395:       "weka.attributeSelection.CorrelationAttributeEval",
396:       "weka.classifiers.functions.SMOreg",
397:       "weka.classifiers.functions.supportVector.RegOptimizer",
398:       "weka.classifiers.functions.supportVector.RegSMO",
399:       "weka.classifiers.functions.supportVector.RegSMOImproved",
400:       "weka.classifiers.meta.RandomCommittee",
401:       "weka.core.Javadoc",
402:       "weka.core.ClassDiscovery",
403:       "weka.core.ClassCache",
404:       "weka.core.AllJavadoc",
405:       "weka.classifiers.meta.ClassificationViaRegression",
406:       "weka.classifiers.trees.M5P"
407:     );
408:   }
409: }

[MASTER] 13:50:07.898 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
String string0 = naiveBayesMultinomialText0.lowercaseTokensTipText();
assertEquals("Whether to convert all tokens to lowercase", string0);

naiveBayesMultinomialText0.m_periodicP = 33;
naiveBayesMultinomialText0.pruneDictionary();
assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());


[MASTER] 13:50:11.044 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.AllJavadoc: null
[MASTER] 13:50:11.145 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.AllJavadoc
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing JUnit test case 'NaiveBayesMultinomialText_ESTest' to /home/ubuntu/termite/rmosa/tests/s1028/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 7%
* Compiling and checking tests
[MASTER] 13:51:07.479 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_57_1575640267443/weka/classifiers/Evaluation_57_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_57_1575640267443/weka/classifiers/Evaluation_57_tmp__ESTest_scaffolding.java]]
[MASTER] 13:51:07.480 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 13:51:07.480 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 13:51:07.485 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   variable double3
  location: class weka.classifiers.Evaluation_57_tmp__ESTest: 58
[MASTER] 13:51:07.486 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_57_1575640267443/weka/classifiers/Evaluation_57_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Dec 06 13:51:07 GMT 2019
4:  */
5: 
6: package weka.classifiers;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import org.evosuite.runtime.EvoRunner;
11: import org.evosuite.runtime.EvoRunnerParameters;
12: import org.junit.runner.RunWith;
13: import weka.classifiers.Evaluation;
14: import weka.core.Instances;
15: import weka.core.TestInstances;
16: import weka.core.converters.ArffLoader;
17: import weka.core.converters.SVMLightLoader;
18: import weka.core.converters.TextDirectoryLoader;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class Evaluation_57_tmp__ESTest extends Evaluation_57_tmp__ESTest_scaffolding {
22: 
23:   /**
24:   //Test case number: 0
25:   /*Coverage entropy=1.1693376567504215
26:   */
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       TestInstances testInstances0 = new TestInstances();
30:       Instances instances0 = testInstances0.generate();
31:       Evaluation evaluation0 = new Evaluation(instances0);
32:       instances0.enumerateAttributes();
33:       double[][] doubleArray0 = evaluation0.confusionMatrix();
34:       assertEquals(2, doubleArray0.length);
35:       
36:       double double0 = evaluation0.m_ConfLevel;
37:       assertEquals(0.95, double0, 0.01);
38:       
39:       double double1 = evaluation0.m_SumKBInfo;
40:       double[] doubleArray1 = new double[8];
41:       doubleArray1[1] = 0.2;
42:       doubleArray1[2] = (double) (-2);
43:       doubleArray1[3] = 0.0;
44:       SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
45:       sVMLightLoader0.setRetrieval((-2));
46:       ArffLoader arffLoader0 = new ArffLoader();
47:       TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
48:       Instances instances1 = textDirectoryLoader0.getStructure();
49:       Evaluation evaluation1 = new Evaluation(instances1);
50:       String string0 = evaluation0.toSummaryString("~f+Qv|OXIi3;b{ESCo", false);
51:       assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
52:       assertEquals("~f+Qv|OXIi3;b{ESCo\nTotal Number of Instances                0     \n", string0);
53:       
54:       evaluation1.rootMeanPriorSquaredError();
55:       assertEquals(0.0, evaluation1.unclassified(), 0.01);
56:       
57:       double double2 = evaluation1.m_Unclassified;
58:       assertNotEquals(double2, double3, 0.01);
59:   }
60: }
RegularFileObject[/tmp/EvoSuite_57_1575640267443/weka/classifiers/Evaluation_57_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Dec 06 13:51:07 GMT 2019
5:  */
6: 
7: package weka.classifiers;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Evaluation_57_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.Evaluation"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Evaluation_57_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.filters.unsupervised.attribute.NominalToBinary",
90:       "weka.core.converters.TextDirectoryLoader",
91:       "org.pentaho.packageManagement.PackageConstraint",
92:       "weka.core.converters.Saver",
93:       "weka.core.xml.XMLBasicSerialization",
94:       "weka.classifiers.evaluation.output.prediction.XML",
95:       "weka.filters.UnsupervisedFilter",
96:       "weka.core.converters.XRFFSaver",
97:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
98:       "weka.core.DenseInstance",
99:       "weka.core.converters.DatabaseConverter",
100:       "weka.classifiers.trees.J48",
101:       "weka.classifiers.functions.SimpleLinearRegression",
102:       "weka.classifiers.rules.DecisionTable$DummySubsetEvaluator",
103:       "org.pentaho.packageManagement.DefaultPackageManager",
104:       "weka.estimators.UnivariateIntervalEstimator",
105:       "weka.gui.GenericPropertiesCreator",
106:       "org.bounce.net.DefaultAuthenticator",
107:       "weka.estimators.IncrementalEstimator",
108:       "weka.core.stemmers.NullStemmer",
109:       "weka.core.ContingencyTables",
110:       "weka.classifiers.functions.SGDText",
111:       "weka.core.CustomDisplayStringProvider",
112:       "weka.core.NormalizableDistance",
113:       "weka.core.TechnicalInformation$Type",
114:       "weka.core.Copyable",
115:       "weka.filters.supervised.attribute.NominalToBinary",
116:       "weka.core.SerializedObject",
117:       "weka.clusterers.UpdateableClusterer",
118:       "weka.core.AdditionalMeasureProducer",
119:       "weka.core.neighboursearch.balltrees.BallNode",
120:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
121:       "weka.core.converters.AbstractSaver",
122:       "weka.attributeSelection.GreedyStepwise",
123:       "weka.classifiers.meta.MultiClassClassifier",
124:       "weka.core.Optimization",
125:       "weka.classifiers.lazy.kstar.KStarConstants",
126:       "weka.classifiers.meta.FilteredClassifier",
127:       "weka.classifiers.misc.InputMappedClassifier",
128:       "weka.experiment.ResultProducer",
129:       "weka.core.Version",
130:       "weka.attributeSelection.AttributeSelection",
131:       "weka.classifiers.meta.MultiClassClassifier$Code",
132:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
133:       "weka.classifiers.AbstractClassifier",
134:       "weka.core.converters.ArffLoader",
135:       "weka.filters.unsupervised.attribute.Center",
136:       "weka.classifiers.meta.Stacking",
137:       "weka.core.WekaException",
138:       "weka.filters.StreamableFilter",
139:       "weka.gui.GenericObjectEditor$1",
140:       "weka.core.Attribute$1",
141:       "weka.core.PartitionGenerator",
142:       "weka.core.converters.SerializedInstancesSaver",
143:       "weka.core.SparseInstance",
144:       "weka.classifiers.trees.j48.ClassifierSplitModel",
145:       "weka.attributeSelection.AttributeTransformer",
146:       "weka.core.tokenizers.WordTokenizer",
147:       "weka.classifiers.trees.j48.ClassifierTree",
148:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
149:       "weka.attributeSelection.PrincipalComponents",
150:       "weka.classifiers.trees.j48.PruneableClassifierTree",
151:       "weka.classifiers.Evaluation",
152:       "weka.classifiers.functions.supportVector.Kernel",
153:       "weka.core.converters.CSVLoader",
154:       "weka.gui.CustomPanelSupplier",
155:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
156:       "weka.core.converters.FileSourcedConverter",
157:       "weka.core.converters.URLSourcedLoader",
158:       "weka.core.neighboursearch.LinearNNSearch",
159:       "weka.core.converters.CSVSaver",
160:       "weka.core.converters.ArffSaver",
161:       "weka.core.Stopwords",
162:       "weka.core.tokenizers.AlphabeticTokenizer",
163:       "weka.estimators.UnivariateKernelEstimator",
164:       "weka.core.UnassignedDatasetException",
165:       "weka.classifiers.RandomizableClassifier",
166:       "weka.classifiers.meta.CVParameterSelection",
167:       "weka.attributeSelection.RankedOutputSearch",
168:       "weka.core.Queue$QueueNode",
169:       "weka.core.RevisionUtils",
170:       "weka.classifiers.meta.RandomCommittee",
171:       "weka.core.converters.Loader",
172:       "weka.estimators.Estimator",
173:       "weka.core.ProtectedProperties",
174:       "weka.core.converters.C45Loader",
175:       "weka.core.StringLocator",
176:       "weka.core.AttributeStats",
177:       "weka.classifiers.trees.DecisionStump",
178:       "weka.estimators.UnivariateQuantileEstimator",
179:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
180:       "weka.filters.unsupervised.attribute.Remove",
181:       "weka.core.Randomizable",
182:       "weka.classifiers.rules.M5Rules",
183:       "weka.classifiers.trees.j48.NoSplit",
184:       "weka.core.EuclideanDistance",
185:       "weka.core.Instances",
186:       "weka.core.converters.AbstractFileLoader",
187:       "weka.classifiers.bayes.NaiveBayesMultinomial",
188:       "weka.core.converters.ConverterUtils$DataSink",
189:       "weka.classifiers.bayes.net.BIFReader",
190:       "weka.classifiers.bayes.net.ParentSet",
191:       "weka.core.converters.DatabaseConnection",
192:       "weka.attributeSelection.Ranker",
193:       "weka.core.TechnicalInformation",
194:       "weka.core.UnsupportedAttributeTypeException",
195:       "weka.classifiers.functions.Logistic$OptEngCG",
196:       "weka.core.RevisionHandler",
197:       "weka.experiment.Stats",
198:       "weka.core.converters.ConverterUtils$DataSource",
199:       "weka.classifiers.rules.OneR$OneRRule",
200:       "weka.classifiers.xml.XMLClassifier",
201:       "weka.filters.Filter",
202:       "weka.filters.supervised.attribute.Discretize",
203:       "weka.core.TestInstances",
204:       "weka.core.converters.ConverterUtils",
205:       "weka.core.DistanceFunction",
206:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
207:       "weka.attributeSelection.AttributeEvaluator",
208:       "org.pentaho.packageManagement.Package",
209:       "weka.core.converters.AbstractFileSaver",
210:       "weka.classifiers.trees.m5.M5Base",
211:       "weka.attributeSelection.SubsetEvaluator",
212:       "weka.classifiers.CostMatrix",
213:       "weka.classifiers.bayes.net.search.local.K2",
214:       "weka.core.logging.Logger$Level",
215:       "weka.classifiers.rules.PART",
216:       "weka.attributeSelection.CfsSubsetEval",
217:       "weka.core.ConjugateGradientOptimization",
218:       "weka.classifiers.functions.LinearRegression",
219:       "weka.core.stemmers.Stemmer",
220:       "weka.gui.PropertyPanel",
221:       "weka.core.converters.IncrementalConverter",
222:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
223:       "weka.classifiers.meta.LogitBoost",
224:       "weka.classifiers.bayes.NaiveBayes",
225:       "weka.classifiers.meta.MultiClassClassifier$RandomCode",
226:       "weka.core.EnvironmentHandler",
227:       "weka.classifiers.trees.j48.C45ModelSelection",
228:       "weka.classifiers.trees.m5.RuleNode",
229:       "weka.classifiers.functions.Logistic",
230:       "weka.core.RelationalLocator",
231:       "weka.core.Utils",
232:       "weka.core.converters.XRFFLoader",
233:       "weka.core.tokenizers.Tokenizer",
234:       "weka.filters.unsupervised.instance.RemoveWithValues",
235:       "weka.gui.GenericObjectEditor$JTreePopupMenu",
236:       "weka.core.NoSupportForMissingValuesException",
237:       "weka.classifiers.UpdateableClassifier",
238:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
239:       "weka.core.MultiInstanceCapabilitiesHandler",
240:       "weka.classifiers.meta.MultiClassClassifier$ExhaustiveCode",
241:       "weka.core.Capabilities",
242:       "weka.core.AttributeLocator",
243:       "weka.core.converters.SVMLightLoader",
244:       "weka.classifiers.functions.supportVector.CachedKernel",
245:       "weka.classifiers.meta.RegressionByDiscretization",
246:       "weka.core.Summarizable",
247:       "weka.classifiers.trees.j48.ModelSelection",
248:       "weka.attributeSelection.BestFirst",
249:       "org.pentaho.packageManagement.PackageManager$1",
250:       "weka.core.Drawable",
251:       "weka.classifiers.ConditionalDensityEstimator",
252:       "weka.core.CapabilitiesHandler",
253:       "weka.classifiers.trees.REPTree",
254:       "weka.attributeSelection.ASEvaluation",
255:       "weka.core.AbstractInstance",
256:       "weka.core.scripting.JythonObject",
257:       "weka.core.SelectedTag",
258:       "org.pentaho.packageManagement.DefaultPackage",
259:       "weka.estimators.DiscreteEstimator",
260:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
261:       "weka.classifiers.bayes.BayesNet",
262:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
263:       "weka.core.Queue",
264:       "weka.core.converters.AbstractLoader",
265:       "weka.filters.unsupervised.attribute.RemoveUseless",
266:       "weka.core.converters.BatchConverter",
267:       "weka.core.converters.ArffLoader$ArffReader",
268:       "weka.core.Tag",
269:       "weka.classifiers.IteratedSingleClassifierEnhancer",
270:       "weka.classifiers.trees.j48.BinC45ModelSelection",
271:       "weka.estimators.UnivariateDensityEstimator",
272:       "weka.core.OptionHandler",
273:       "weka.core.converters.MatlabLoader",
274:       "weka.filters.supervised.attribute.AttributeSelection",
275:       "weka.classifiers.trees.REPTree$Tree",
276:       "weka.core.Range",
277:       "weka.attributeSelection.WrapperSubsetEval",
278:       "weka.core.scripting.JythonSerializableObject",
279:       "weka.classifiers.Classifier",
280:       "weka.core.Capabilities$Capability",
281:       "org.pentaho.packageManagement.PackageManager",
282:       "weka.core.WekaEnumeration",
283:       "weka.gui.GenericObjectEditor",
284:       "weka.attributeSelection.ASSearch",
285:       "weka.core.WekaPackageManager",
286:       "weka.estimators.UnivariateEqualFrequencyHistogramEstimator",
287:       "weka.filters.SupervisedFilter",
288:       "weka.core.TechnicalInformationHandler",
289:       "weka.experiment.DatabaseUtils",
290:       "weka.classifiers.functions.SimpleLogistic",
291:       "weka.classifiers.lazy.LWL",
292:       "weka.attributeSelection.StartSetHandler",
293:       "weka.classifiers.meta.CostSensitiveClassifier",
294:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
295:       "weka.core.Option",
296:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
297:       "weka.filters.Sourcable",
298:       "weka.classifiers.meta.MultiClassClassifier$StandardCode",
299:       "weka.classifiers.meta.RandomSubSpace",
300:       "weka.core.Attribute",
301:       "weka.classifiers.rules.DecisionTable",
302:       "weka.core.FastVector",
303:       "weka.classifiers.MultipleClassifiersCombiner",
304:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
305:       "weka.core.BatchPredictor",
306:       "weka.classifiers.trees.RandomTree",
307:       "weka.classifiers.SingleClassifierEnhancer",
308:       "weka.core.Instance",
309:       "weka.core.converters.SerializedInstancesLoader",
310:       "weka.classifiers.lazy.KStar",
311:       "weka.classifiers.functions.supportVector.PolyKernel",
312:       "weka.classifiers.IntervalEstimator",
313:       "weka.core.Matchable",
314:       "weka.classifiers.bayes.net.ADNode",
315:       "weka.core.WeightedInstancesHandler",
316:       "weka.core.neighboursearch.NearestNeighbourSearch",
317:       "weka.classifiers.functions.GaussianProcesses",
318:       "weka.core.TechnicalInformation$Field",
319:       "weka.core.converters.DatabaseLoader",
320:       "weka.filters.unsupervised.attribute.Discretize",
321:       "weka.classifiers.functions.SGD",
322:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
323:       "weka.classifiers.rules.OneR",
324:       "weka.filters.unsupervised.attribute.Normalize",
325:       "weka.core.UnassignedClassException",
326:       "weka.classifiers.rules.ZeroR",
327:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
328:       "weka.filters.unsupervised.attribute.Standardize",
329:       "weka.classifiers.Sourcable",
330:       "weka.classifiers.functions.Logistic$OptEng",
331:       "weka.classifiers.evaluation.output.prediction.PlainText",
332:       "weka.core.xml.XMLSerialization",
333:       "weka.filters.unsupervised.attribute.MakeIndicator",
334:       "weka.gui.GenericObjectEditor$GOEPanel",
335:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer"
336:     );
337:   } 
338: 
339:   private static void resetClasses() {
340:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Evaluation_57_tmp__ESTest_scaffolding.class.getClassLoader()); 
341: 
342:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
343:       "weka.classifiers.Evaluation",
344:       "weka.core.pmml.PMMLFactory$ModelType",
345:       "weka.core.pmml.PMMLFactory$1",
346:       "weka.core.xml.KOML",
347:       "weka.core.Version",
348:       "weka.core.Utils",
349:       "weka.core.converters.AbstractLoader",
350:       "weka.core.converters.AbstractFileLoader",
351:       "weka.core.converters.JSONLoader",
352:       "weka.core.neighboursearch.NearestNeighbourSearch",
353:       "weka.core.neighboursearch.CoverTree",
354:       "weka.core.NormalizableDistance",
355:       "weka.core.EuclideanDistance",
356:       "weka.core.Range",
357:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
358:       "weka.classifiers.evaluation.output.prediction.HTML",
359:       "weka.core.neighboursearch.balltrees.BallNode",
360:       "weka.core.Instances",
361:       "weka.classifiers.CostMatrix",
362:       "weka.core.converters.ArffLoader",
363:       "weka.core.converters.C45Loader",
364:       "weka.core.converters.SVMLightLoader",
365:       "weka.classifiers.AbstractClassifier",
366:       "weka.core.converters.TextDirectoryLoader",
367:       "weka.core.Attribute",
368:       "weka.core.ProtectedProperties",
369:       "weka.core.WekaEnumeration",
370:       "weka.core.Attribute$1",
371:       "weka.core.TestInstances",
372:       "weka.core.xml.XMLDocument",
373:       "weka.core.xml.XMLInstances",
374:       "weka.core.converters.XRFFLoader",
375:       "weka.filters.Filter",
376:       "weka.filters.AllFilter",
377:       "weka.core.converters.LibSVMLoader",
378:       "weka.core.converters.DatabaseLoader",
379:       "weka.core.Environment",
380:       "weka.experiment.DatabaseUtils",
381:       "weka.core.converters.DatabaseConnection",
382:       "org.pentaho.packageManagement.PackageManager",
383:       "org.pentaho.packageManagement.DefaultPackageManager",
384:       "weka.core.WekaPackageManager",
385:       "weka.experiment.InstanceQuery",
386:       "weka.core.Option",
387:       "weka.core.AbstractInstance",
388:       "weka.core.SparseInstance",
389:       "weka.core.BinarySparseInstance",
390:       "weka.core.converters.MatlabLoader",
391:       "weka.core.converters.ConverterUtils$DataSource",
392:       "weka.core.converters.CSVLoader",
393:       "weka.classifiers.functions.SimpleLogistic",
394:       "weka.core.TechnicalInformation",
395:       "weka.core.TechnicalInformation$Type",
396:       "weka.core.TechnicalInformation$Field",
397:       "weka.core.DenseInstance",
398:       "weka.classifiers.SingleClassifierEnhancer",
399:       "weka.classifiers.IteratedSingleClassifierEnhancer",
400:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
401:       "weka.classifiers.meta.LogitBoost",
402:       "weka.classifiers.rules.ZeroR",
403:       "weka.classifiers.trees.DecisionStump",
404:       "weka.clusterers.AbstractClusterer",
405:       "weka.clusterers.RandomizableClusterer",
406:       "weka.clusterers.SimpleKMeans",
407:       "weka.attributeSelection.ASEvaluation",
408:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
409:       "weka.attributeSelection.PrincipalComponents",
410:       "weka.core.converters.SerializedInstancesLoader",
411:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
412:       "weka.core.Tag",
413:       "weka.classifiers.meta.MultiClassClassifier",
414:       "weka.classifiers.functions.Logistic",
415:       "weka.core.neighboursearch.KDTree",
416:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
417:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
418:       "weka.classifiers.meta.CostSensitiveClassifier",
419:       "weka.core.converters.ArffLoader$ArffReader",
420:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
421:       "weka.classifiers.bayes.BayesNet",
422:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
423:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
424:       "weka.classifiers.bayes.net.search.local.K2",
425:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
426:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
427:       "weka.gui.GenericPropertiesCreator",
428:       "weka.gui.GenericObjectEditor",
429:       "weka.core.converters.ConverterUtils",
430:       "weka.attributeSelection.AttributeSelection",
431:       "weka.classifiers.misc.InputMappedClassifier",
432:       "weka.classifiers.functions.supportVector.Kernel",
433:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
434:       "weka.core.RevisionUtils",
435:       "weka.classifiers.RandomizableClassifier",
436:       "weka.classifiers.functions.SGDText",
437:       "weka.core.tokenizers.Tokenizer",
438:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
439:       "weka.core.tokenizers.WordTokenizer",
440:       "weka.core.stemmers.NullStemmer",
441:       "weka.core.Capabilities",
442:       "weka.core.Capabilities$Capability",
443:       "weka.classifiers.evaluation.output.prediction.XML",
444:       "weka.classifiers.functions.MultilayerPerceptron",
445:       "weka.core.FastVector",
446:       "weka.filters.unsupervised.attribute.NominalToBinary",
447:       "weka.classifiers.functions.neural.SigmoidUnit",
448:       "weka.classifiers.functions.neural.LinearUnit",
449:       "weka.clusterers.FarthestFirst",
450:       "weka.core.UnassignedClassException",
451:       "weka.classifiers.bayes.NaiveBayesMultinomial",
452:       "weka.core.AttributeStats",
453:       "weka.core.SelectedTag",
454:       "weka.classifiers.lazy.IBk",
455:       "weka.core.neighboursearch.LinearNNSearch",
456:       "weka.core.SerializedObject",
457:       "weka.classifiers.trees.m5.M5Base",
458:       "weka.classifiers.rules.M5Rules",
459:       "weka.classifiers.functions.LinearRegression",
460:       "weka.core.WekaException",
461:       "weka.core.UnsupportedAttributeTypeException",
462:       "weka.classifiers.MultipleClassifiersCombiner",
463:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
464:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
465:       "weka.classifiers.meta.Stacking",
466:       "weka.core.UnassignedDatasetException",
467:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
468:       "weka.core.neighboursearch.BallTree",
469:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
470:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
471:       "weka.core.neighboursearch.balltrees.BallSplitter",
472:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
473:       "weka.classifiers.functions.SimpleLinearRegression",
474:       "weka.filters.SimpleFilter",
475:       "weka.filters.SimpleStreamFilter",
476:       "weka.filters.MultiFilter",
477:       "weka.experiment.Stats",
478:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
479:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
480:       "weka.classifiers.meta.RandomCommittee",
481:       "weka.classifiers.trees.RandomTree",
482:       "weka.classifiers.meta.AdaBoostM1",
483:       "weka.classifiers.meta.RandomSubSpace",
484:       "weka.classifiers.trees.REPTree",
485:       "weka.classifiers.meta.FilteredClassifier",
486:       "weka.filters.supervised.attribute.AttributeSelection",
487:       "weka.attributeSelection.CfsSubsetEval",
488:       "weka.attributeSelection.ASSearch",
489:       "weka.attributeSelection.GreedyStepwise",
490:       "weka.attributeSelection.BestFirst",
491:       "weka.classifiers.trees.J48",
492:       "weka.filters.supervised.attribute.Discretize",
493:       "weka.filters.unsupervised.attribute.Remove",
494:       "weka.core.Queue",
495:       "weka.core.AttributeLocator",
496:       "weka.core.StringLocator",
497:       "weka.core.RelationalLocator",
498:       "weka.core.Queue$QueueNode",
499:       "weka.classifiers.trees.REPTree$Tree",
500:       "weka.core.ContingencyTables",
501:       "weka.classifiers.misc.SerializedClassifier",
502:       "weka.attributeSelection.WrapperSubsetEval",
503:       "weka.classifiers.functions.GaussianProcesses",
504:       "weka.classifiers.functions.supportVector.CachedKernel",
505:       "weka.classifiers.functions.supportVector.PolyKernel",
506:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
507:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
508:       "weka.classifiers.meta.MultiScheme",
509:       "weka.classifiers.meta.Bagging",
510:       "weka.classifiers.functions.SMOreg",
511:       "weka.classifiers.functions.supportVector.RegOptimizer",
512:       "weka.classifiers.functions.supportVector.RegSMO",
513:       "weka.classifiers.functions.supportVector.RegSMOImproved",
514:       "weka.classifiers.trees.M5P",
515:       "weka.classifiers.meta.ClassificationViaRegression",
516:       "weka.classifiers.functions.supportVector.RBFKernel",
517:       "weka.core.Javadoc",
518:       "weka.core.TechnicalInformationHandlerJavadoc",
519:       "weka.classifiers.rules.DecisionTable",
520:       "weka.clusterers.SingleClustererEnhancer",
521:       "weka.clusterers.FilteredClusterer",
522:       "weka.clusterers.AbstractDensityBasedClusterer",
523:       "weka.clusterers.MakeDensityBasedClusterer",
524:       "weka.classifiers.meta.AttributeSelectedClassifier",
525:       "weka.classifiers.functions.VotedPerceptron",
526:       "weka.classifiers.meta.AdditiveRegression",
527:       "weka.classifiers.lazy.LWL",
528:       "weka.classifiers.meta.RegressionByDiscretization",
529:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
530:       "weka.filters.unsupervised.attribute.Discretize",
531:       "weka.classifiers.functions.supportVector.Puk",
532:       "weka.classifiers.functions.SMO",
533:       "weka.classifiers.meta.CVParameterSelection",
534:       "weka.core.FindWithCapabilities",
535:       "weka.core.SingleIndex",
536:       "weka.classifiers.trees.j48.ClassifierTree",
537:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
538:       "weka.estimators.Estimator",
539:       "weka.estimators.NormalEstimator",
540:       "weka.classifiers.bayes.NaiveBayes",
541:       "weka.classifiers.lazy.KStar",
542:       "weka.classifiers.rules.JRip",
543:       "weka.classifiers.meta.Vote",
544:       "weka.classifiers.rules.OneR",
545:       "weka.classifiers.trees.RandomForest",
546:       "weka.clusterers.HierarchicalClusterer",
547:       "weka.classifiers.rules.PART",
548:       "weka.clusterers.RandomizableDensityBasedClusterer",
549:       "weka.clusterers.EM",
550:       "weka.core.matrix.Matrix",
551:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
552:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
553:       "weka.core.Check",
554:       "weka.core.CheckGOE",
555:       "weka.attributeSelection.GainRatioAttributeEval",
556:       "weka.estimators.UnivariateKernelEstimator",
557:       "weka.estimators.PoissonEstimator",
558:       "weka.classifiers.rules.part.MakeDecList",
559:       "weka.classifiers.evaluation.output.prediction.Null",
560:       "weka.classifiers.functions.SGD",
561:       "weka.classifiers.evaluation.output.prediction.CSV",
562:       "weka.estimators.KernelEstimator",
563:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
564:       "weka.core.tokenizers.NGramTokenizer",
565:       "weka.classifiers.trees.LMT",
566:       "weka.estimators.UnivariateEqualFrequencyHistogramEstimator",
567:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
568:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
569:       "weka.classifiers.bayes.NaiveBayesUpdateable",
570:       "weka.classifiers.evaluation.output.prediction.PlainText",
571:       "weka.core.tokenizers.AlphabeticTokenizer",
572:       "weka.classifiers.functions.supportVector.StringKernel",
573:       "weka.estimators.DiscreteEstimator",
574:       "weka.core.ChebyshevDistance"
575:     );
576:   }
577: }

[MASTER] 13:51:07.487 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate();
Evaluation evaluation0 = new Evaluation(instances0);
instances0.enumerateAttributes();
double[][] doubleArray0 = evaluation0.confusionMatrix();
assertEquals(2, doubleArray0.length);

double double0 = evaluation0.m_ConfLevel;
assertEquals(0.95, double0, 0.01);

double double1 = evaluation0.m_SumKBInfo;
double[] doubleArray1 = new double[8];
doubleArray1[1] = 0.2;
doubleArray1[2] = (double) (-2);
doubleArray1[3] = 0.0;
SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
sVMLightLoader0.setRetrieval((-2));
ArffLoader arffLoader0 = new ArffLoader();
TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
Instances instances1 = textDirectoryLoader0.getStructure();
Evaluation evaluation1 = new Evaluation(instances1);
String string0 = evaluation0.toSummaryString("~f+Qv|OXIi3;b{ESCo", false);
assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
assertEquals("~f+Qv|OXIi3;b{ESCo\nTotal Number of Instances                0     \n", string0);

evaluation1.rootMeanPriorSquaredError();
assertEquals(0.0, evaluation1.unclassified(), 0.01);

double double2 = evaluation1.m_Unclassified;
assertNotEquals(double2, double3, 0.01);


[MASTER] 13:51:10.694 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 13:51:10.863 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 13:51:11.230 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 13:51:11.230 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing JUnit test case 'Evaluation_ESTest' to /home/ubuntu/termite/rmosa/tests/s1028/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.core.Optimization
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 20776
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 13:52:28.659 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 13:52:28.710 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 13:52:28.711 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 13:52:28.732 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.core.Optimization
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1028
* Starting evolution
[MASTER] 13:52:30.294 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.core.Optimization.DynamicIntArray.<init>(Lweka/core/Optimization;I)V
* Search finished after 123s and 60 generations, 37921 statements, best individual has fitness: 16704.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 10%
* Total number of goals: 620
* Number of covered goals: 59
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 28%
* Total number of goals: 926
* Number of covered goals: 258
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 10%
* Total number of goals: 21
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Generated 17 tests with total length 135
* Resulting test suite's coverage: 17% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
* Writing JUnit test case 'Optimization_ESTest' to /home/ubuntu/termite/rmosa/tests/s1028/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.experiment.ResultMatrix
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 20775
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 14:07:01.676 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 14:07:01.712 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 14:07:01.714 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 14:07:01.802 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.experiment.ResultMatrix
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1028
* Starting evolution
* Search finished after 137s and 17 generations, 16494 statements, best individual has fitness: 2864.0
[MASTER] 14:09:25.377 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 21 seconds more than allowed.
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 647
* Number of covered goals: 617
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 92%
* Total number of goals: 441
* Number of covered goals: 406
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 678
* Number of covered goals: 611
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 40%
* Total number of goals: 244
* Number of covered goals: 97
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 93%
* Total number of goals: 124
* Number of covered goals: 115
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 93%
* Total number of goals: 124
* Number of covered goals: 115
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 87%
* Total number of goals: 441
* Number of covered goals: 383
* Generated 165 tests with total length 3160
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 14:14:58.890 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6710020833333333% of time used, but only 37/165 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
* Permissions denied during test execution: 
[MASTER] 14:16:41.658 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 8
* Writing JUnit test case 'ResultMatrix_ESTest' to /home/ubuntu/termite/rmosa/tests/s1028/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: RMOSA
* Going to generate test cases for class: weka.classifiers.rules.JRip
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 20779
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 14:17:34.300 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 14:17:34.335 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 14:17:34.337 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 14:17:37.875 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 14:17:38.549 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 14:17:38.550 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.classifiers.rules.JRip
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Ranking Type: org.evosuite.ga.metaheuristics.mosa.EntropyBasedPreferenceSorting
* Using seed 1028
* Starting evolution
[MASTER] 14:17:43.846 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.NominalAntd.<init>(Lweka/classifiers/rules/JRip;Lweka/core/Attribute;)V
[MASTER] 14:18:13.742 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip$RipperRule.toString(Lweka/core/Attribute;)Ljava/lang/String;: Line 1424
[MASTER] 14:18:13.745 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 643: weka.classifiers.rules.JRip$RipperRule.toString(Lweka/core/Attribute;)Ljava/lang/String;:1421 - ReplaceConstant - = -> 
[MASTER] 14:18:13.745 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 644: weka.classifiers.rules.JRip$RipperRule.toString(Lweka/core/Attribute;)Ljava/lang/String;:1421 - InsertUnaryOp Negation
[MASTER] 14:18:13.747 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.rules.JRip.RipperRule.toString(Lweka/core/Attribute;)Ljava/lang/String;
* Search finished after 123s and 115 generations, 57030 statements, best individual has fitness: 13160.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 34%
* Total number of goals: 705
* Number of covered goals: 238
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 25%
* Total number of goals: 416
* Number of covered goals: 102
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 52%
* Total number of goals: 993
* Number of covered goals: 516
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 28%
* Total number of goals: 93
* Number of covered goals: 26
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 25%
* Total number of goals: 416
* Number of covered goals: 102
* Generated 70 tests with total length 652
* Resulting test suite's coverage: 41% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 24%
* Compiling and checking tests
[MASTER] 14:21:17.289 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<121> but was:<120>
[MASTER] 14:21:17.290 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JRip jRip0 = new JRip();
BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, (int[]) null, 70);
double[] doubleArray0 = new double[3];
doubleArray0[0] = 841.39;
doubleArray0[1] = (double) (-3050);
doubleArray0[2] = (double) 0;
BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(896.0977647, doubleArray0);
BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
Environment environment0 = new Environment();
Environment environment1 = Environment.getSystemWide();
Set<String> set0 = environment0.getVariableNames();
List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
Attribute attribute0 = new Attribute("", list0, 33);
environment1.getRevision();
Attribute attribute1 = attribute0.copy("   * Returns only the toString() method.\n");
JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
jRip_NumericAntd0.covers(binarySparseInstance2);
jRip0.minNoTipText();
JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
jRip_NominalAntd0.getAccu();
jRip_NominalAntd0.copy();
assertEquals(121, set0.size());


* Writing JUnit test case 'JRip_ESTest' to /home/ubuntu/termite/rmosa/tests/s1028/107_weka/evosuite-tests
* Done!

* Computation finished
