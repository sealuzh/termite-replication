/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 22:40:53 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(809);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.getDebugNonBlockingMode();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(809, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3274662176194347
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1525));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize((-1525));
      String string0 = "";
      advancedSettings0.toXML("");
      advancedSettings0.toXML("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-send-buffer-size>-1525</client-socket-send-buffer-size>\n</advanced-settings>\n");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getCharset();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.net.server.impl.OptimisticClientIdentifier");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.net.server.impl.OptimisticClientIdentifier
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.537855771056755
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize((-1853));
      advancedSettings0.setPerformancePreferencesBandwidth((-1853));
      advancedSettings0.setClientSocketSendBufferSize(10);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setBacklog(1352);
      advancedSettings1.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings1.setPerformancePreferencesConnectionTime(10);
      advancedSettings1.toXML((String) null);
      advancedSettings1.getQSObjectPoolMaker();
      advancedSettings1.getBacklog();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings1.getPerformancePreferencesConnectionTime();
      advancedSettings1.getQSObjectPoolMaker();
      assertEquals(10, advancedSettings1.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-752));
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals((-752), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("", string0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setQSObjectPoolMaker((String) null);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketSendBufferSize(2071);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings2.getClientSocketSendBufferSize();
      advancedSettings0.getBacklog();
      advancedSettings2.setClientIdentifier("J");
      assertEquals("J", advancedSettings2.getClientIdentifier());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setCharset("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog(2759);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("ZBD&E%");
      advancedSettings0.setByteBufferSize((-398));
      advancedSettings0.getPerformancePreferencesLatency();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setByteBufferSize((-398));
      advancedSettings0.setPerformancePreferencesLatency((-398));
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings1.setPerformancePreferencesLatency((-5356));
      assertEquals((-5356), advancedSettings1.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setBacklog(2759);
      advancedSettings0.setClientSocketReceiveBufferSize(2759);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setMaxThreadsForNioWrite((-402));
      assertEquals((-402), advancedSettings1.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(165);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setSocketLinger(65536);
      advancedSettings0.setClientSocketReceiveBufferSize(198);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setQSObjectPoolMaker("V!2^Wxn)<");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(198, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-101));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setCharset("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog(2759);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("</use-direct-byte-buffer>\n");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientIdentifier("DATv+z.W18Wb)C^M");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("DATv+z.W18Wb)C^M");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // DATv+z.W18Wb)C^M
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(false);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setCharset("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setByteBufferSize((-2839));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setCharset("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setByteBufferSize(0);
      advancedSettings0.getDebugNonBlockingMode();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings2.setCharset("6");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 6
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4397660819701787
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getSocketLinger();
      advancedSettings1.setDebugNonBlockingMode(false);
      advancedSettings0.setByteBufferSize((-506));
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesConnectionTime((-753));
      advancedSettings1.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.toXML("uwyZPKOu^It");
      advancedSettings1.getQSObjectPoolMaker();
      advancedSettings0.getBacklog();
      advancedSettings1.getQSObjectPoolMaker();
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getPerformancePreferencesConnectionTime();
      advancedSettings0.setCharset("");
      assertEquals((-753), advancedSettings0.getPerformancePreferencesConnectionTime());
      
      advancedSettings2.toXML("\t<qsobject-pool-maker>");
      String string0 = advancedSettings2.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setMaxThreadsForNioWrite((-2607));
      advancedSettings0.getPerformancePreferencesBandwidth();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-2607), int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(24);
      assertEquals(24, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setByteBufferSize(598);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setBacklog(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(2164);
      advancedSettings0.toXML("</advanced-settings>\n");
      assertEquals(2164, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      String string0 = advancedSettings0.toXML(",");
      assertEquals(",<advanced-settings>\n,\t<charset>ISO-8859-1</charset>\n,\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n,\t<byte-buffer-size>65536</byte-buffer-size>\n,\t<backlog>0</backlog>\n,\t<socket-linger>-1</socket-linger>\n,\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n,\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n,\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n,\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n,\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n,\t<performance-preferences-latency>0</performance-preferences-latency>\n,\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n,\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n,\t<client-socket-traffic-class></client-socket-traffic-class>\n,</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertNotNull(string0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(1225);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(1225, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("-");
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getDebugNonBlockingMode();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertNotNull(string0);
      
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1956));
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getDebugNonBlockingMode();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setSocketLinger(0);
      advancedSettings1.getSocketLinger();
      advancedSettings0.getSocketLinger();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      String string0 = ".v}~M\\E=9#*$eM2r";
      // Undeclared exception!
      try { 
        advancedSettings2.setCharset(".v}~ME=9#*$eM2r");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .v}~ME=9#*$eM2r
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setBacklog(1441);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setPerformancePreferencesLatency(2759);
      advancedSettings3.setClientIdentifier("</client-socket-traffic-class>\n");
      advancedSettings2.setByteBufferSize(2759);
      advancedSettings3.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency(2759);
      assertEquals(2759, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("CV;B6<4=)CvY\"(:[8gl");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // CV;B6<4=)CvY\"(:[8gl
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertNotNull(string0);
      
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(10, int0);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-736));
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals((-736), advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(boolean0);
  }
}
