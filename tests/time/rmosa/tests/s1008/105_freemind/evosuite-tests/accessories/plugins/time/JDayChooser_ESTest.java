/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 22:33:16 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.StructuredMenuHolder;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.filemode.FileMode;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.image.IndexColorModel;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.text.NumberFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.basic.BasicToolBarUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.svggen.ImageHandler;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.xalan.templates.ElemCopy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.tilesources.BingAerialTileSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BingAerialTileSource bingAerialTileSource0 = new BingAerialTileSource();
      Image image0 = bingAerialTileSource0.getAttributionImage();
      ImageIcon imageIcon0 = new ImageIcon(image0, "orur;Ypzpf");
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("West", imageIcon0, true);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      JMenuBar jMenuBar0 = new JMenuBar();
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem("orur;Ypzpf", imageIcon0);
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      JMenuItem jMenuItem0 = structuredMenuHolder0.addMenuItem(jRadioButtonMenuItem0, "day");
      JMenuItem jMenuItem1 = new JMenuItem("7XA:H4@[>C", imageIcon0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[9];
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jMenuItem0;
      menuElementArray0[3] = (MenuElement) jRadioButtonMenuItem1;
      menuElementArray0[4] = (MenuElement) jMenuBar0;
      imageIcon0.getIconHeight();
      menuElementArray0[5] = (MenuElement) jRadioButtonMenuItem1;
      ActionEvent actionEvent0 = new ActionEvent(imageIcon0, 16, "AMOUNT_OF_VISIBLE_MENU_ITEMS", 9, 16);
      actionEvent0.setSource(menuSelectionManager0);
      actionEvent0.setSource((Object) null);
      jDayChooser0.setMonth((-1437625606));
      jDayChooser0.getMaxDayCharacters();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWidth();
      jDayChooser0.firePropertyChange("8o{'1", 0, 686);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-988), "day");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      actionEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.setName("");
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.getAlignmentX();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getDecorationBackgroundColor();
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D((SVGGeneratorContext) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // generatorContext should not be null
         //
         verifyException("org.apache.batik.svggen.SVGGraphics2D", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.578527464897386
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWidth();
      jDayChooser0.firePropertyChange("8o{'1", 0, (-4476));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setName("");
      jDayChooser0.setDay(1);
      System.setCurrentTimeMillis(40L);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setWeekOfYearVisible(false);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BingAerialTileSource bingAerialTileSource0 = new BingAerialTileSource();
      Image image0 = bingAerialTileSource0.getAttributionImage();
      ImageIcon imageIcon0 = new ImageIcon(image0, "orur;Ypzpf");
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      JMenuBar jMenuBar0 = new JMenuBar();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("orur;Ypzpf", imageIcon0);
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      JMenuItem jMenuItem0 = new JMenuItem("7XA:H4@[>C", imageIcon0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[9];
      menuElementArray0[3] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[4] = (MenuElement) jMenuBar0;
      menuElementArray0[5] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[7] = (MenuElement) jPopupMenu0;
      StructuredMenuHolder.lastItemIsASeparator(jPopupMenu0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(175, 90, 90);
      FileMode fileMode0 = new FileMode();
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jRadioButtonMenuItem0, 16);
      jDayChooser0.focusLost(focusEvent0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9843078473927918
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setVisible(false);
      PanelUI panelUI0 = jDayChooser0.getUI();
      jDayChooser0.setUI(panelUI0);
      jDayChooser0.selectedDay = null;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getSelectedObjects();
      jDayChooser_DecoratorButton0.setFocusCycleRoot(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton1.isFocusable();
      jDayChooser0.initDecorations();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.clone();
      Color color0 = new Color(5, 26, 1);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser1.getDay();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.isDecorationBordersVisible();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.696303767023144
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object object0 = new Object();
      ActionEvent actionEvent0 = new ActionEvent(object0, 2251, "day");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      actionEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.setName((String) null);
      Vector<String> vector0 = new Vector<String>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      actionEvent0.setSource(defaultTableModel0);
      JButton jButton0 = new JButton();
      actionEvent0.setSource(jButton0);
      JButton jButton1 = new JButton();
      actionEvent0.setSource(jButton1);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Color color0 = MapView.standardNodeTextColor;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(48);
      jDayChooser0.setMaxSelectableDate((Date) null);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "28");
      Color color0 = MapView.standardNodeTextColor;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWidth();
      jDayChooser0.firePropertyChange("8o{'1", 0, 674);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-988), "day");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      actionEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.setName("");
      jDayChooser0.getDay();
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(48);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWidth();
      jDayChooser0.firePropertyChange("8o{'1", 0, 686);
      jDayChooser0.setDay(22);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWidth();
      jDayChooser0.firePropertyChange("8o{'1", 0, 686);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jDayChooser0.setName("4Y6P+_G)");
      jDayChooser0.setDayBordersVisible(true);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWidth();
      jDayChooser0.firePropertyChange("8o{'1", 0, 674);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-988), "day");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      actionEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.setName("");
      actionEvent0.setSource("8o{'1");
      actionEvent0.setSource(jDayChooser0);
      jDayChooser0.setDay(30);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      NumberFormat.getIntegerInstance(locale0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDayPanel();
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxDayCharacters();
      boolean boolean0 = true;
      jDayChooser0.setDecorationBackgroundVisible(false);
      int int0 = 0;
      int int1 = 8832;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(8832);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDebugGraphicsOptions();
      jDayChooser0.getAlignmentX();
      jDayChooser0.getVisibleRect();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.clone();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BingAerialTileSource bingAerialTileSource0 = new BingAerialTileSource();
      Image image0 = bingAerialTileSource0.getAttributionImage();
      ImageIcon imageIcon0 = new ImageIcon(image0, "orur;Ypzpf");
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("West", imageIcon0, true);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      JMenuBar jMenuBar0 = new JMenuBar();
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem("orur;Ypzpf", imageIcon0);
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      JMenuItem jMenuItem0 = structuredMenuHolder0.addMenuItem(jRadioButtonMenuItem0, "day");
      JMenuItem jMenuItem1 = new JMenuItem("7XA:H4@[>C", imageIcon0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[9];
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jMenuItem0;
      menuElementArray0[3] = (MenuElement) jRadioButtonMenuItem1;
      menuElementArray0[4] = (MenuElement) jMenuBar0;
      menuElementArray0[5] = (MenuElement) jRadioButtonMenuItem1;
      menuElementArray0[6] = (MenuElement) jMenuItem0;
      menuElementArray0[7] = (MenuElement) jPopupMenu0;
      menuElementArray0[8] = (MenuElement) jRadioButtonMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 16, 16, 9, 9, 'z', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(175, 90, 90);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BingAerialTileSource bingAerialTileSource0 = new BingAerialTileSource();
      Image image0 = bingAerialTileSource0.getAttributionImage();
      ImageIcon imageIcon0 = new ImageIcon(image0, "orur;Ypzpf");
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("West", imageIcon0, true);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      JMenuBar jMenuBar0 = new JMenuBar();
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem("orur;Ypzpf", imageIcon0);
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      structuredMenuHolder0.addMenuItem(jRadioButtonMenuItem0, "day");
      JMenuItem jMenuItem0 = new JMenuItem("day", imageIcon0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPopupMenu0, 9, 16, 157, 157, '@', menuElementArray0, menuSelectionManager0);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.firePropertyChange("8o{'1", (-988), 674);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-988), "day");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.setFirstDayOfWeek((-1242));
      actionEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.setName("");
      actionEvent0.setSource("8o{'1");
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setDay(8656);
      System.setCurrentTimeMillis((-1242));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[0];
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDebugGraphicsOptions();
      jDayChooser0.getAlignmentX();
      jDayChooser0.getVisibleRect();
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.setEnabled(false);
      jDayChooser0.getDecorationBackgroundColor();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getVisibleRect();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.isDecorationBordersVisible();
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.800854989187817
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("9xj<SM]uu$j0Q%!?AxF", (-923.8780265887796), (-923.8780265887796));
      jDayChooser0.setDecorationBackgroundVisible(false);
      MockDate mockDate0 = new MockDate(0, 49, 49, 0, 3039, 210);
      mockDate0.clone();
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getSelectedObjects();
      jDayChooser_DecoratorButton0.setFocusCycleRoot(true);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.initDecorations();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9xj<SM]uu$j0Q%!?AxF";
      stringArray0[1] = "9xj<SM]uu$j0Q%!?AxF";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.clone();
      Color color0 = null;
      try {
        color0 = new Color((-1), 1240, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Red Green
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.983245520219895
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = JComponent.getDefaultLocale();
      locale0.getDisplayName(locale1);
      jDayChooser0.setLocale(locale0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 349, 0, 7, 0);
      focusEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setLocale(locale0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.800866879935626
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BingAerialTileSource bingAerialTileSource0 = new BingAerialTileSource();
      Image image0 = bingAerialTileSource0.getAttributionImage();
      ImageIcon imageIcon0 = new ImageIcon(image0, "orur;Ypzpf");
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("West", imageIcon0, true);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      JMenuBar jMenuBar0 = new JMenuBar();
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem("orur;Ypzpf", imageIcon0);
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      JMenuItem jMenuItem0 = structuredMenuHolder0.addMenuItem(jRadioButtonMenuItem0, "day");
      JMenuItem jMenuItem1 = new JMenuItem("7XA:H4@[>C", imageIcon0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[9];
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jMenuItem0;
      menuElementArray0[3] = (MenuElement) jRadioButtonMenuItem1;
      menuElementArray0[4] = (MenuElement) jMenuBar0;
      menuElementArray0[5] = (MenuElement) jRadioButtonMenuItem1;
      menuElementArray0[6] = (MenuElement) jMenuItem0;
      menuElementArray0[7] = (MenuElement) jPopupMenu0;
      menuElementArray0[8] = (MenuElement) jRadioButtonMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 16, 16, 9, 9, 'z', menuElementArray0, menuSelectionManager0);
      jDayChooser0.setMonth(9);
      jDayChooser0.getSelectedDay();
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(164, color0.getRed());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(16, 16, 38, 55295, 3);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date1.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.firePropertyChange("28", false, false);
      BrowseMode browseMode0 = new BrowseMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay((-3259));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.BLACK;
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDebugGraphicsOptions();
      jDayChooser0.getAlignmentX();
      jDayChooser0.getVisibleRect();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.clone();
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDayBordersVisible();
      Color color0 = Color.CYAN;
      int[] intArray0 = new int[6];
      intArray0[0] = 960;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 960;
      intArray0[3] = 960;
      intArray0[4] = 960;
      intArray0[5] = 960;
      BigInteger bigInteger0 = BigInteger.ZERO;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(960, 960, intArray0, 960, 0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAutoscrolls(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1920, 1920, 10, (-826), 'N');
      KeyEvent.getExtendedKeyCodeForChar(1);
      int int0 = 430;
      keyEvent0.setKeyCode(430);
      jDayChooser0.keyTyped(keyEvent0);
      ElemCopy elemCopy0 = new ElemCopy();
      ImageHandler imageHandler0 = null;
      // Undeclared exception!
      try { 
        elemCopy0.getDocumentElement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont("1K(_cmC*gt)}Cc;*Oe", 4017, 4017);
      jDayChooser0.setFont(font0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BingAerialTileSource bingAerialTileSource0 = new BingAerialTileSource();
      Image image0 = bingAerialTileSource0.getAttributionImage();
      ImageIcon imageIcon0 = new ImageIcon(image0, "orur;Ypzpf");
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day", imageIcon0, true);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      JMenuBar jMenuBar0 = new JMenuBar();
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem("orur;Ypzpf", imageIcon0);
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      JMenuItem jMenuItem0 = structuredMenuHolder0.addMenuItem(jRadioButtonMenuItem0, "day");
      JMenuItem jMenuItem1 = new JMenuItem("7XA:H4@[>C", imageIcon0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[9];
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      menuElementArray0[2] = (MenuElement) jMenuItem0;
      menuElementArray0[3] = (MenuElement) jRadioButtonMenuItem1;
      menuElementArray0[4] = (MenuElement) jMenuBar0;
      menuElementArray0[5] = (MenuElement) jRadioButtonMenuItem1;
      ActionEvent actionEvent0 = new ActionEvent(imageIcon0, 16, "AMOUNT_OF_VISIBLE_MENU_ITEMS", 9, 16);
      actionEvent0.setSource(menuSelectionManager0);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.ORANGE;
      Color color1 = color0.brighter();
      jDayChooser0.setForeground(color1);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponents();
      Color color0 = Color.darkGray;
      Color color1 = color0.darker();
      jDayChooser0.decorationBackgroundColor = color1;
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.addListeners(0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      float[] floatArray0 = new float[3];
      jDayChooser0.getActionMap();
      floatArray0[0] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[2] = (float) 0;
      color0.getColorComponents(floatArray0);
      jDayChooser0.focusGained(focusEvent0);
      try { 
        MockURI.URI("1", "1", "1");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 1:1#1
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDebugGraphicsOptions();
      jDayChooser0.getAlignmentX();
      Rectangle rectangle0 = jDayChooser0.getVisibleRect();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ActionEvent actionEvent0 = new ActionEvent(locale0, 0, "", 0);
      actionEvent0.setSource(rectangle0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Rectangle cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDebugGraphicsOptions();
      jDayChooser0.getAlignmentX();
      jDayChooser0.getVisibleRect();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ActionEvent actionEvent0 = new ActionEvent(timeUnit0, 0, "1");
      timeUnit0.sleep((-552L));
      actionEvent0.setSource("1");
      Object object0 = new Object();
      actionEvent0.setSource(object0);
      jDayChooser0.setDay((-2007));
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setMaxSelectableDate(date1);
      jDayChooser0.initDecorations();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.initDecorations();
      jDayChooser0.initDecorations();
      jDayChooser0.getLocale();
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      basicToolBarUI0.getFloatingColor();
      jDayChooser0.dayBordersVisible = true;
      try { 
        Controller.showCommonJColorChooserDialog(jDayChooser0, "Creating a new last state map storage as there was no old one or it was corrupt.", (Color) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDebugGraphicsOptions();
      jDayChooser0.getAlignmentX();
      jDayChooser0.getVisibleRect();
      jDayChooser0.setFocus();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5777233286214165
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDebugGraphicsOptions();
      jDayChooser0.getAlignmentX();
      jDayChooser0.getVisibleRect();
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.setEnabled(false);
      jDayChooser0.getMinSelectableDate();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.addListeners(2);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInheritsPopupMenu();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-762), 916, 0, 916, '\"');
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }
}
