/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 22:52:13 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      jSONObject0.put("17+ZWF`n6lt)(FE]", (Map) hashMap0);
      HashMap<JSONObject, Double> hashMap2 = new HashMap<JSONObject, Double>();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9106969340870663
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject.quote("Expected a ',' or ']'");
      JSONObject jSONObject0 = new JSONObject((Object) "\"Expected a ',' or ']'\"");
      jSONObject0.put("Expected a ',' or ']'", 0.0);
      JSONObject.getNames((Object) "Expected a ',' or ']'");
      double double0 = jSONObject0.getDouble("Expected a ',' or ']'");
      assertEquals(4, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9740866340645037
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject.getNames((Object) "");
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-827));
      jSONObject0.append("", short0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject.valueToString(jSONArray0);
      Double double0 = new Double(Double.NaN);
      Double.min(1595.74079664114, 0.0);
      linkedList0.toArray();
      Double.max(Double.NaN, 1595.74079664114);
      try { 
        JSONObject.valueToString(double0, (-32864431), (-32864431));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float float0 = new Float((-2843.0F));
      linkedList0.add((Object) float0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      jSONObject0.toString(8192);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0983268013229894
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.remove("8R2P$o]=x1*1~]");
      Float.isFinite((-2702.162F));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("8R2P$o]=x1*1~]", (Collection) linkedList0);
      Float.max((-2313.9F), 221.67813F);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 1632, 1632);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("*a1Z50sr`7i6", false);
      JSONObject jSONObject2 = new JSONObject((Object) "*a1Z50sr`7i6");
      assertEquals(3, jSONObject2.length());
      
      boolean boolean0 = jSONObject1.getBoolean("*a1Z50sr`7i6");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1841.9878);
      assertEquals("1841.9878", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.optString("1841.9878", "");
      assertEquals("", string1);
      
      jSONObject0.put("1841.9878", true);
      double double0 = jSONObject0.optDouble("", (-3093.43201));
      assertEquals((-3093.43201), double0, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Short short0 = new Short((short)93);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("G?+$7^_eE4lS%H", (Object) short0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "G?+$7^_eE4lS%H");
      stringWriter1.close();
      stringWriter0.write(93);
      StringWriter stringWriter2 = new StringWriter(93);
      stringWriter1.append('B');
      jSONObject1.write(stringWriter1);
      String string0 = "wheel.json.JSONException";
      JSONTokener jSONTokener0 = new JSONTokener("TX/<U89|");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of TX/<U89|
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      String string0 = JSONObject.doubleToString((-12437199));
      assertEquals("-1.2437199E7", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "l*2?/pMwj");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("l*2?/pMwj", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{-/!m+");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {-/!m+
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.872290625104585
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("sC", 5173.796571);
      jSONObject1.putOpt("sC", jSONObject0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("sC");
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      JSONObject jSONObject1 = jSONObject0.put("17+ZWF`n6lt)(FE]", (Map) hashMap0);
      HashMap<JSONObject, Double> hashMap2 = new HashMap<JSONObject, Double>();
      jSONObject1.put("getintValue", (Map) hashMap2);
      Boolean.compare(true, false);
      Float float0 = new Float((float) 1);
      JSONObject.quote("Expected '");
      JSONObject jSONObject2 = jSONObject0.getJSONObject("getintValue");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray("islogicalr");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("islowestOneBit", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(jSONObject0, jSONObject0);
      String string0 = ")";
      JSONObject jSONObject1 = jSONObject0.put(")", false);
      jSONObject1.get(")");
      jSONObject0.isNull(")");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) ")");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("U;t]SjR%k%bEP?B3>[", (-1.0));
      jSONObject1.optLong("U;t]SjR%k%bEP?B3>[");
      JSONArray jSONArray0 = jSONObject1.names();
      jSONObject0.names();
      String string0 = JSONObject.valueToString(jSONArray0, 64, 64);
      assertNotNull(string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject.doubleToString(896.65370416934);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("rX", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Short short0 = new Short((short) (-2095));
      try { 
        jSONObject0.accumulate((String) null, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2756304369699905
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject0.put("/CSHvF", 1367L);
      jSONObject0.optLong("/CSHvF");
      JSONObject jSONObject3 = jSONObject2.put("/CSHvF", 2106.426333371);
      assertSame(jSONObject3, jSONObject0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4245271514834905
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.max(0.0F, 0.0F);
      jSONObject0.put("A!vp~DI{,0|lW ", false);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float((-1.0));
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Byte byte0 = new Byte((byte)37);
      hashMap1.put(jSONObject0, byte0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", 800.797);
      jSONObject1.getLong("ishashCode");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      Integer integer0 = new Integer((-3357));
      JSONObject.doubleToString((-600.0));
      HashMap<Byte, JSONObject> hashMap2 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("-600", (Map) hashMap2);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("s @7;v", (-1020.0));
      jSONObject1.remove("s @7;v");
      try { 
        jSONObject1.getBoolean("s @7;v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"s @7;v\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float(Double.NaN);
      hashMap0.put(boolean0, float0);
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", 0.0);
      jSONObject1.getLong("ishashCode");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      Integer integer0 = new Integer(61);
      Float float1 = new Float((float) 0L);
      JSONObject.testValidity(float1);
      double double0 = jSONObject1.optDouble("ishashCode");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("sp", 5173.796571);
      try { 
        jSONObject0.getJSONObject("sp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sp\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap2 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap3 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap2);
      Object object0 = new Object();
      hashMap1.put(jSONObject0, object0);
      hashMap2.put(jSONObject1, jSONObject1);
      JSONObject jSONObject2 = jSONObject0.put("OSw_U)2{~e|PcFCL", true);
      boolean boolean0 = jSONObject2.isNull(")");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) ")");
      boolean boolean1 = jSONObject0.optBoolean("OSw_U)2{~e|PcFCL");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float(Double.NaN);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", 0.0);
      jSONObject1.getLong("ishashCode");
      try { 
        Integer.parseUnsignedInt("ishashCode");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ishashCode\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Boolean boolean0 = Boolean.valueOf(false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Boolean.logicalOr(false, false);
      Boolean boolean1 = Boolean.TRUE;
      Object object0 = new Object();
      JSONObject.getNames((Object) boolean0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Float float0 = new Float((-986.96387F));
      Float float1 = new Float(0.0);
      jSONObject0.append("gettoString", float1);
      JSONObject jSONObject1 = new JSONObject(float0);
      jSONObject0.optJSONArray("flo");
      jSONObject0.optString("gettoString");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("Iq~5*m%&ju$u", (Object) "Iq~5*m%&ju$u");
      try { 
        jSONObject0.getLong("Iq~5*m%&ju$u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Iq~5*m%&ju$u\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "getparseUnsignedLong";
      JSONObject jSONObject1 = jSONObject0.put("getparseUnsignedLong", (-361.64));
      jSONObject1.getLong("getparseUnsignedLong");
      try { 
        Integer.parseUnsignedInt("getparseUnsignedLong");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getparseUnsignedLong\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2842967826608906
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = (-1837L);
      Long long1 = new Long((-1837L));
      JSONObject jSONObject0 = new JSONObject(long1);
      String string0 = "\"$ZRxiR";
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject1 = jSONObject0.put("\"$ZRxiR", (Map) hashMap0);
      Long.max((-1837L), (-259L));
      jSONObject0.toString();
      JSONObject.numberToString(long1);
      hashMap0.put(long1, "{\"java.lang.String@0000000005\":wheel.json.JSONObject@0000000004,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      int int0 = (-4492);
      jSONObject0.accumulate("val", hashMap0);
      jSONObject1.has("\"$ZRxiR");
      jSONObject0.optLong("isvalueOf");
      try { 
        jSONObject1.getBoolean("\"$ZRxiR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"$ZRxiR\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1732.1F);
      JSONObject jSONObject1 = jSONObject0.append("gettoString", object0);
      jSONObject1.keys();
      JSONObject jSONObject2 = jSONObject1.append("gettoString", float0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "getjoin";
      JSONObject jSONObject1 = jSONObject0.put("getjoin", true);
      try { 
        jSONObject1.append("getjoin", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[getjoin] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~\"W |<{oX#;J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~\"W |<{oX#;J
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)46);
      Short.compare((short)46, (short)46);
      try { 
        jSONObject0.append((String) null, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = JSONObject.quote("toJ");
      assertEquals("\"toJ\"", string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = new Object();
      String string1 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("<RB5P@", false);
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)110);
      jSONObject1.accumulate("<RB5P@", byte0);
      String string0 = jSONObject1.toString((int) (byte)110, 875);
      assertNotNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray0);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("1F#nmBprX*", 1.0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Short short0 = new Short((short)2292);
      Short.toUnsignedInt((short) (-6031));
      String[] stringArray0 = new String[7];
      stringArray0[2] = ";IJ3]k/Yb8{)R9#$;u";
      Short.toUnsignedInt((short)2292);
      stringArray0[4] = "JSONObject[";
      stringArray0[5] = " of ";
      stringArray0[6] = "RBNCCnx\"e`z";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.opt(stringArray0[0]);
      JSONObject jSONObject1 = jSONObject0.put("get", 1888);
      JSONObject.valueToString("RBNCCnx\"e`z", 1888, 0);
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Float float0 = new Float((-908.1339F));
      String string0 = "r3";
      jSONObject0.put("r3", (Object) hashMap1);
      StringWriter stringWriter0 = new StringWriter(4239);
      try { 
        jSONObject0.getInt("r3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"r3\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\"n]\"/bp", (Map) hashMap0);
      try { 
        jSONObject1.getDouble("\"n]\"/bp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"n]\\\"/bp\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("%zk*]H yy6s;u<d", true);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "U;t]SjR%k%bEP?B3>[";
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Float float0 = new Float(5173.796571);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "val";
      stringArray0[1] = "su";
      stringArray0[2] = "{}";
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{}");
      int int0 = 48;
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "{}", 48, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {F
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Short short0 = new Short((short) (-3973));
      hashMap0.put(short0, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(1.0);
      hashMap0.put("] is not a JSONArray.", double0);
      hashMap0.put("r#I43HkGOU$'=%", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("r#I43HkGOU$'=%");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.8964366845326991
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = JSONObject.quote("%zk*]H yy6s;u<d");
      assertEquals("\"%zk*]H yy6s;u<d\"", string0);
      
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("get");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      String string0 = JSONObject.valueToString(hashMap0, (-1880), 1228);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5943387843946053
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "4.s1dV)s");
      JSONObject.getNames((Object) "4.s1dV)s");
      JSONObject.valueToString("4.s1dV)s");
      JSONObject.valueToString("\"java.lang.String@0000000025\"");
      jSONObject0.toString(27, 27);
      // Undeclared exception!
      jSONObject0.toString(1652, (-63));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("<RB5P@", false);
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)110);
      jSONObject1.accumulate("getsubstring", byte0);
      jSONObject1.toString((int) (byte)110, 875);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject2 = jSONObject1.put("getoptJSONObject", (Object) hashMap1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "getoptJSONObject");
      stringWriter0.close();
      StringWriter stringWriter2 = stringWriter1.append('-');
      stringWriter2.write(10);
      stringWriter1.append('y');
      jSONObject2.write(stringWriter2);
      JSONObject.quote("#1,!</)&w.I");
      try { 
        jSONObject0.getJSONObject("\"#1,!</)&w.I\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"#1,!<\\/)&w.I\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate(" at character ", jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      stringWriter0.write(charArray0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      String string0 = "l*c?/pMwj";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("l*c?/pMwj", 3570.381906325);
      try { 
        jSONObject1.getJSONArray("l*c?/pMwj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"l*c?/pMwj\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.286604830052797
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("-", (Collection) linkedList0);
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      Float float0 = new Float((-427.79F));
      hashMap0.put(float0, (JSONArray) null);
      jSONObject1.put("'(@Va9?!", (Map) hashMap0);
      Boolean.compare(true, true);
      JSONObject jSONObject3 = new JSONObject("-", stringArray0);
      JSONObject jSONObject4 = jSONObject2.putOpt(".", stringArray0[0]);
      JSONObject jSONObject5 = new JSONObject((Object) "");
      jSONObject5.toString(0, 0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject4.toString(12);
      JSONObject jSONObject6 = jSONObject2.optJSONObject("'(@Va9?!");
      assertFalse(jSONObject6.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.1015014044975926
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      Float float0 = new Float((-427.79F));
      jSONObject1.put(".'(@Va9?!", (Map) hashMap0);
      Boolean.compare(true, true);
      JSONObject jSONObject2 = new JSONObject("-", stringArray0);
      JSONObject jSONObject3 = jSONObject1.putOpt(".", stringArray0[0]);
      JSONObject jSONObject4 = new JSONObject((Object) "");
      JSONObject.valueToString(jSONObject4);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject3.toString(12);
      JSONObject jSONObject5 = jSONObject1.optJSONObject(".'(@Va9?!");
      assertNotSame(jSONObject0, jSONObject5);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("0", "0");
      int int0 = Boolean.compare(false, false);
      Float float0 = new Float(0.0F);
      jSONObject0.toString(0, 0);
      int int1 = jSONObject1.length();
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      double double0 = 0.0;
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject.doubleToString(910.5420133);
      JSONObject.doubleToString(896.65370416934);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optString("oz]Yl)p fp!@}>U", "rf");
      jSONObject1.optString(" of ", "] is not a JSONObject.");
      jSONObject0.optString("] is not a JSONObject.", "4");
      String string0 = "su";
      jSONObject0.put("oz]Yl)p fp!@}>U", true);
      jSONObject1.put("896.65370416934", false);
      Byte byte0 = new Byte((byte)7);
      jSONObject0.accumulate("4", byte0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = 2709;
      jSONObject0.optDouble("4", (-1080.9625008));
      // Undeclared exception!
      try { 
        linkedList0.add(2709, (Object) "rf");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2709, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (-1765));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = JSONObject.quote("{-/!m+");
      assertEquals("\"{-/!m+\"", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("`I,tH,?d)n]f,j1z", 476.131353);
      Object object0 = jSONObject0.opt("N");
      assertNull(object0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.8734738482993778
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Boolean.valueOf(false);
      boolean boolean0 = new Boolean(false);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(764.0879241);
      JSONObject jSONObject1 = jSONObject0.put("-", (Object) double0);
      StringWriter stringWriter0 = new StringWriter(80);
      stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter1 = new StringWriter();
      jSONObject1.write(stringWriter1);
      jSONObject1.getInt("-");
      jSONObject0.opt("-");
      JSONObject jSONObject2 = jSONObject0.put("'", 80);
      String string0 = jSONObject2.optString("is");
      assertEquals("", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) "] not found.");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = jSONObject0.optInt("] not found.", (-2400));
      assertEquals((-2400), int0);
      
      String string0 = JSONObject.quote("not");
      assertEquals("\"not\"", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(4172.6455F);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      hashMap0.put((JSONObject) null, (Short) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1980810759150633
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = JSONObject.quote("l*c?/pMwj");
      assertEquals("\"l*c?/pMwj\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "l*c?/pMwj");
      double double0 = jSONObject0.optDouble("l*c?/pMwj", 490.5869);
      assertEquals(490.5869, double0, 0.01);
      
      jSONObject0.toString(1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("getsubList", "c;p95I)o6d-Y%o");
      jSONObject0.optString("getcopyValueOf", "ldnBFD}5");
      jSONObject0.put("{l9R", true);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("qiS:z/", object0);
      JSONObject.valueToString("c;p95I)o6d-Y%o");
      jSONObject1.toString((-136), (-622));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Boolean.valueOf(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "</91Qq#";
      Boolean.logicalAnd(false, true);
      Boolean boolean0 = new Boolean("");
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(5322.322363);
      JSONObject jSONObject1 = jSONObject0.put("</91Qq#", (Object) "-");
      Boolean boolean1 = new Boolean(true);
      String string0 = jSONObject1.optString("</91Qq#", "bNU2&<]");
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float(Double.NaN);
      hashMap0.put(boolean0, float0);
      Object object0 = JSONObject.NULL;
      Boolean.compare(true, true);
      Float float1 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("x", float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{-/!m+");
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      hashMap0.put(jSONObject0, jSONObject0);
      String string0 = ")";
      Float float0 = new Float(4172.6455F);
      jSONObject0.put(")", (Object) null);
      StringWriter stringWriter0 = new StringWriter(128);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) ")");
      jSONObject0.write(stringWriter2);
      try { 
        jSONObject0.getInt(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\r", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Boolean, Short> hashMap0 = new HashMap<Boolean, Short>();
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("iscompareTo", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-566));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("t]SjR%k%bEP?B3>[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t]SjR%k%bEP?B3>[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Short short0 = new Short((short)2809);
      Boolean boolean0 = Boolean.valueOf((String) null);
      hashMap0.put(short0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.doubleToString(752.0);
      assertEquals("752", string0);
      
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (-4001L));
      assertEquals((-4001L), long0);
      
      String string0 = JSONObject.quote("sp");
      assertEquals("\"sp\"", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("Missing value");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Short short0 = new Short((short)32);
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put(" of ", " of ");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      hashMap0.put((JSONObject) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      hashMap0.put((JSONObject) null, (Object) null);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 1228, (short)36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("lo", false);
      StringWriter stringWriter0 = new StringWriter(44);
      StringWriter stringWriter1 = stringWriter0.append('t');
      Writer writer0 = jSONObject1.write(stringWriter1);
      assertSame(writer0, stringWriter1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(4172.6455F);
      jSONObject0.put("G?+$7^_eE4lS%H", (Object) "G?+$7^_eE4lS%H");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      stringWriter0.write(93);
      StringWriter stringWriter1 = new StringWriter('1');
      Boolean.compare(false, true);
      Float float1 = new Float(0.0F);
      String string0 = jSONObject0.toString((-1), 93);
      assertNotNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.valueToString(jSONObject0, 66, (-2545));
      assertEquals("{}", string0);
      
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames((Object) "{}");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      int int0 = 2862;
      JSONObject.valueToString(linkedList0, 1951, 2862);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(5, 5);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null, 1228, (-4484));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.quote("a-RE8=TZ0IOGmC[jHS\"");
      assertEquals("\"a-RE8=TZ0IOGmC[jHS\\\"\"", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1918, 34);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(1L);
      Integer integer0 = new Integer(110);
      hashMap0.put(long0, integer0);
      JSONObject jSONObject1 = jSONObject0.put("", 8192);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(1206.345F);
      hashMap0.put(float0, float0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("A JSONObject text must begin with '{'", (Collection) linkedList0);
      jSONObject0.optJSONObject("getforEach");
      String string0 = JSONObject.valueToString((Object) null, (-1343), (-171));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("> Nv", (-1020.0));
      try { 
        jSONObject1.getBoolean("> Nv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"> Nv\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getjoin", true);
      boolean boolean0 = jSONObject1.getBoolean("getjoin");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("cW1!,!kY\f$TR/");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of cW1!,!kY\f$TR/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("/yA", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.putOpt("4!zHn!", object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)10);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, byte0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("oNJl5sD[:z<,>[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of oNJl5sD[:z<,>[
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double double0 = Double.valueOf(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Short short0 = new Short((short)13);
      Function<Object, JSONObject> function0 = (Function<Object, JSONObject>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      hashMap0.computeIfAbsent(short0, function0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean(" of ", true);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("islogicalr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"islogicalr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      jSONObject0.optLong("9'0~~Pgyh", 0L);
      jSONObject0.remove("|OiYjZT.mJHH`-oe{4");
      String string0 = "Expected a ',' or ']'";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("9qD", 0);
      jSONObject0.optJSONArray("islogicalr");
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0218020909681602
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject.quote("l*c?/pMwj");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("l*c?/pMwj", 61L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.421929470136808
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject.doubleToString(5173.796571);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("5173.796571", stringArray0);
      jSONObject0.optLong("o(`$");
      try { 
        jSONObject0.getJSONObject("o(`$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o(`$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      int int0 = (-2991);
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.optInt("Expected a ',' or '}'", 29);
      Double.isFinite(2212);
      Double.isFinite(29);
      Float float0 = new Float((double) 0L);
      Double double0 = new Double(2212);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("issplit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issplit\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("U;t]SjR%k%bEP?B3>[", 3570.381906325);
      jSONObject1.getString("U;t]SjR%k%bEP?B3>[");
      try { 
        jSONObject0.getJSONArray("U;t]SjR%k%bEP?B3>[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U;t]SjR%k%bEP?B3>[\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("j");
      assertEquals("", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = JSONObject.quote("@pAk?Wx9`:e>H");
      assertEquals("\"@pAk?Wx9`:e>H\"", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-49));
      try { 
        jSONObject0.put((String) null, (Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Byte, Short> hashMap0 = new HashMap<Byte, Short>();
      Byte byte0 = null;
      short short0 = (short)121;
      Short short1 = new Short((short)121);
      Function<Byte, Short> function0 = (Function<Byte, Short>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.lang.Byte.class));
      Short.compare((short)121, (short)2095);
      hashMap0.computeIfAbsent((Byte) null, function0);
      hashMap0.put((Byte) null, short1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short.toUnsignedInt((short)2083);
      Short.compare((short)1365, (short)2095);
      hashMap0.put((Byte) null, (Short) null);
      jSONObject0.optBoolean("~?;SCcc !mM^;Mqe", false);
      String string0 = null;
      hashMap0.put((Byte) null, (Short) null);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("V");
      assertFalse(boolean0);
      
      String string0 = JSONObject.doubleToString(1917.0);
      assertEquals("1917", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("#)03mXOCz/wFxi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#)03mXOCz/wFxi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(4172.6455F);
      jSONObject0.put(")", (Object) float0);
      jSONObject0.getInt(")");
      JSONTokener jSONTokener0 = new JSONTokener(")");
      Float.min(1.0F, 80);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      boolean boolean0 = jSONObject0.has("JSONArray initial value should be a string or collection or array.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Short short0 = new Short((short)2292);
      String string0 = JSONObject.valueToString(short0, 1888, (short)2292);
      assertNotNull(string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String string0 = JSONObject.valueToString(boolean0, (-4), 1888);
      assertNotNull(string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Byte byte0 = new Byte((byte)58);
      JSONObject.testValidity(byte0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Float float0 = new Float(1523.6911);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Byte byte0 = new Byte((byte)40);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("-", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
