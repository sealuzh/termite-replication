/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 05:32:58 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isOmitEncoding());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-xhtmlFh])tQ8b_frhwe";
      stringArray0[1] = "-omitEncoding";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isOmitEncoding());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[1] = "-encoding";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = new OutputFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-encoding";
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "-trimhdTdKext";
      stringArray0[2] = "-xhtmlFh])tQ8bQfrhw3";
      stringArray0[3] = "-encoding";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isNewlines());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-ni|rimhdText";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "@";
      stringArray0[3] = "`fsB<";
      stringArray0[4] = "-ni|rimhdText";
      stringArray0[5] = "-ni|rimhdText";
      stringArray0[6] = "-ni|rimhdText";
      stringArray0[7] = "-ni|rimhdText";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isNewlines());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.795122406426881
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndentSize(47);
      outputFormat0.setEncoding((String) null);
      outputFormat0.getAttributeQuoteCharacter();
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 47);
      outputFormat0.setSuppressDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setAttributeQuoteCharacter('\"');
      outputFormat0.setLineSeparator((String) null);
      outputFormat1.setIndent(false);
      outputFormat0.getLineSeparator();
      assertTrue(outputFormat0.isSuppressDeclaration());
      
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat1.parseOptions(stringArray0, 47);
      outputFormat1.setIndent((String) null);
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      char char0 = outputFormat2.getAttributeQuoteCharacter();
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "CN";
      OutputFormat outputFormat0 = new OutputFormat("CN");
      // Undeclared exception!
      outputFormat0.setIndentSize(2147483645);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-indent";
      stringArray0[1] = "-nrimhTex";
      stringArray0[2] = "-nrimhTex";
      stringArray0[3] = "-nrimhTex";
      stringArray0[4] = "-nrimhTex";
      stringArray0[5] = "-nrimhTex";
      stringArray0[6] = "-nrimhTex";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(2, int0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("-nrimhTex", outputFormat0.getIndent());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indentSize");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-indent";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1645693257162542
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("%G]8>.Z");
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%G]8>.Z";
      stringArray0[1] = "";
      outputFormat0.setLineSeparator("");
      outputFormat0.parseOptions(stringArray0, 0);
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml-xhtml3ZL*f'{]Uyr%T@SY", true, (String) null);
      assertEquals("-xhtml-xhtml3ZL*f'{]Uyr%T@SY", outputFormat0.getIndent());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "-xhtml-xhtml3ZL*f'{]Uyr%T@SY";
      outputFormat0.setIndentSize(1);
      stringArray0[3] = null;
      outputFormat0.parseOptions(stringArray0, 2616);
      outputFormat0.getEncoding();
      assertTrue(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml3ZL*f'{]Uyr%T@SY", false, (String) null);
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      outputFormat0.setExpandEmptyElements(true);
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setXHTML(false);
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat1.setIndent("-xhtml3ZL*f'{]Uyr%T@SY");
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimhdTdKext");
      assertFalse(outputFormat0.isPadText());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-padText";
      stringArray0[1] = "-trimhdTdKext";
      stringArray0[2] = "-trimhdTdKext";
      stringArray0[3] = "-trimhdTdKext";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isPadText());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("FDLX&o2", true, "");
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-expandEmpty ";
      stringArray1[1] = "-xhtml3ZL*f'{]Uyr%T@SY";
      stringArray1[2] = "+3/&";
      stringArray1[3] = "FDLX&o2";
      stringArray1[4] = "-xhtml3ZL*f'{]Uyr%T@SY";
      stringArray1[5] = "-xhtml3ZL*f'{]Uyr%T@SY";
      stringArray1[6] = "-xhtml3ZL*f'{]Uyr%T@SY";
      stringArray1[7] = "YrGaq]";
      outputFormat0.parseOptions(stringArray1, 0);
      outputFormat0.setIndent("-expandEmpty-xhtml3ZL*f'");
      outputFormat0.getEncoding();
      assertTrue(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("J-Q}fPkM");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-indentSize";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9396395458476661
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Invalid attribute quote character (", false, "Invalid attribute quote character (");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-trimText";
      outputFormat0.setIndentSize((-1602));
      assertFalse(outputFormat0.isTrimText());
      
      stringArray0[1] = "-trimText";
      stringArray0[2] = "Invalid attribute quote character (";
      stringArray0[3] = "U";
      stringArray0[4] = "SU_skO,-YUAaJ=J+a|";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isTrimText());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterNTags(1746);
      String[] stringArray0 = new String[0];
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(1746, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[0];
      outputFormat0.setNewLineAfterNTags((-3190));
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals((-3190), int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.setNewlines(true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndentSize(1871);
      outputFormat0.setTrimText(true);
      outputFormat0.getLineSeparator();
      outputFormat0.getEncoding();
      outputFormat0.setIndent("  ");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setIndentSize('\"');
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.isOmitEncoding();
      String string1 = OutputFormat.STANDARD_INDENT;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "  ";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isOmitEncoding());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isNewlines());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setAttributeQuoteCharacter('\'');
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      outputFormat0.parseOptions(stringArray0, 881);
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty", true, "-expandEmpty");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ( )
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setAttributeQuoteCharacter('\"');
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      outputFormat0.parseOptions(stringArray0, 208);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isNewlines();
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setEncoding(stringArray0[0]);
      outputFormat0.getNewLineAfterNTags();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1578));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1578
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-ni|rimhdText");
      outputFormat0.setEncoding((String) null);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("-ni|rimhdText", outputFormat0.getIndent());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(" ", true);
      outputFormat0.setLineSeparator(" ");
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent(true);
      outputFormat0.isXHTML();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ($)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      boolean boolean0 = outputFormat0.isNewlines();
      assertTrue(outputFormat0.isTrimText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertTrue(boolean0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("  ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimhdText");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-trimhdText";
      outputFormat0.parseOptions(stringArray0, 0);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("-trimhdText", outputFormat0.getIndent());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', char0);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize((-690));
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("", outputFormat0.getIndent());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("J-Q}fPkM");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expandEmptyFDLX&o2";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.isTrimText();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setPadText(true);
      outputFormat0.isPadText();
      String string0 = OutputFormat.STANDARD_INDENT;
      assertEquals("  ", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.getIndent();
      outputFormat0.isNewlines();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "aAjB";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags((-1474));
      String[] stringArray0 = new String[4];
      stringArray0[1] = "-encoZing";
      outputFormat0.parseOptions(stringArray0, 1);
      assertEquals((-1474), outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setPadText(false);
      int int0 = 208;
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      outputFormat0.parseOptions(stringArray0, 208);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setEncoding(stringArray0[0]);
      outputFormat0.getNewLineAfterNTags();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('#');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (#)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Fh])tQvb_,hwe", false, "-expandEmpty*r+|iyx+(MlxJ;{");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "Fh])tQvb_,hwe";
      outputFormat0.parseOptions(stringArray0, 1);
      String string0 = outputFormat0.getEncoding();
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("-expandEmpty*r+|iyx+(MlxJ;{", string0);
      assertEquals("Fh])tQvb_,hwe", outputFormat0.getIndent());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('?');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (?)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimhdText");
      outputFormat0.setXHTML(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-trimhdText";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-trimhdText", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent((String) null);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimhdText", false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-xhtml";
      outputFormat0.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('E');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (E)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("n[@o");
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(0, int0);
      assertEquals("n[@o", outputFormat0.getIndent());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9535817885271314
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indentSize");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "9@=K^s^U]Vl";
      stringArray0[2] = "9@=K^s^U]Vl";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setIndent("rNHp[n");
      outputFormat0.getLineSeparator();
      assertEquals("rNHp[n", outputFormat0.getIndent());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(true);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("  ", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("c)jEAT)x^\"o", true, "-expandEmpty*r+|iyx+(MlxJ;{");
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "FDLX&o2";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "-expandEmpty*r+|iyx+(MlxJ;{";
      stringArray1[1] = "FDLX&o2";
      outputFormat0.parseOptions(stringArray0, 1);
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertEquals("-expandEmpty*r+|iyx+(MlxJ;{", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("c)jEAT)x^\"o", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      boolean boolean0 = outputFormat0.isXHTML();
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("", outputFormat0.getIndent());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      boolean boolean0 = outputFormat0.isTrimText();
      assertFalse(outputFormat0.isOmitEncoding());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(boolean0);
      assertTrue(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("  ", outputFormat0.getIndent());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("W");
      outputFormat0.setIndent("W");
      assertEquals("W", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.549749826558804
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "-ncoing";
      outputFormat0.parseOptions(stringArray0, 1);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat1.isOmitEncoding());
      assertTrue(outputFormat1.isNewlines());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isXHTML());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("  ", outputFormat1.getIndent());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isPadText());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertTrue(outputFormat1.isTrimText());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "j");
      boolean boolean0 = outputFormat0.isPadText();
      assertFalse(outputFormat0.isXHTML());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("", outputFormat0.getIndent());
      assertEquals("j", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setExpandEmptyElements(false);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "-ncoing";
      outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-expandEmpty", false);
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("-expandEmpty-expandEmpty", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      outputFormat0.setSuppressDeclaration(true);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "-encoZing";
      stringArray0[2] = "-encoZing";
      outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isOmitEncoding());
      
      String[] stringArray0 = new String[5];
      outputFormat0.setOmitEncoding(true);
      stringArray0[0] = "-nrimhdText";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indentSize");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-indentSize";
      outputFormat0.setLineSeparator("-indentSize");
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = "-indentSize";
      stringArray0[3] = "9@=K^s^U]Vl";
      stringArray0[4] = "ZMhJ<`\"}gR*|,+1`";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals("-indentSize", outputFormat0.getLineSeparator());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.3755754015654476
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "-ncoing";
      outputFormat0.parseOptions(stringArray0, 1);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isNewlines());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isPadText());
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isTrimText());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isXHTML());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(false);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("K0EwHc", false, "Fh])tQ8b_fhwe");
      assertFalse(outputFormat0.isPadText());
      
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Fh])tQ8b_fhwe";
      outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isPadText());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isTrimText());
      
      String[] stringArray0 = new String[2];
      outputFormat0.setTrimText(true);
      stringArray0[1] = "-ni|rimhdText";
      outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimhdText");
      outputFormat0.setNewLineAfterDeclaration(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-trimhdText";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("-trimhdText", outputFormat0.getIndent());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-ni|rimhdText");
      outputFormat0.setEncoding("-ni|rimhdText");
      assertEquals("-ni|rimhdText", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      outputFormat0.setNewlines(false);
      stringArray0[1] = "-ni|rimhdText";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals(1, int0);
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("y8M8[nr;$?*M@ecb4g");
      outputFormat0.setIndentSize(0);
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertTrue(boolean0);
      
      outputFormat0.getIndent();
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize(1163);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty*r+|iyx+(MlxJ;{", false, "c)jEAT)x^\"o");
      String string0 = outputFormat0.getIndent();
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("c)jEAT)x^\"o", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("-expandEmpty*r+|iyx+(MlxJ;{", string0);
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("|!~75mEE*i~", false);
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("|!~75mEE*i~", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(boolean0);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
  }
}
