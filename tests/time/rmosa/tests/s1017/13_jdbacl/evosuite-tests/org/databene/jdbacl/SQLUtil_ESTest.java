/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 05:41:55 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.lib.HsqlByteArrayOutputStream;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "LM*bG|T,ZuuTj/UR";
      stringArray0[1] = "LM*bG|T,ZuuTj/UR";
      stringArray0[2] = "LM*bG|T,ZuuTj/UR";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[3] = "LM*bG|T,ZuuTj/UR";
      stringArray0[4] = "LM*bG|T,ZuuTj/UR";
      stringArray0[5] = "LM*bG|T,ZuuTj/UR";
      stringArray0[6] = "LM*bG|T,ZuuTj/UR";
      SQLUtil.leftJoin("LM*bG|T,ZuuTj/UR", stringArray0, "XCL52.S", "LM*bG|T,ZuuTj/UR", stringArray0);
      SQLUtil.renderColumnListWithTableName("LM*bG|T,ZuuTj/UR", stringArray0);
      SQLUtil.renderValue((Object) null);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "XCL52.S";
      stringArray1[1] = "&I@}2FC0q'ByK[";
      stringArray1[2] = "XCL52.S";
      stringArray1[3] = "LM*bG|T,ZuuTj/UR.LM*bG|T,ZuuTj/UR, LM*bG|T,ZuuTj/UR.LM*bG|T,ZuuTj/UR, LM*bG|T,ZuuTj/UR.LM*bG|T,ZuuTj/UR, LM*bG|T,ZuuTj/UR.LM*bG|T,ZuuTj/UR, LM*bG|T,ZuuTj/UR.LM*bG|T,ZuuTj/UR, LM*bG|T,ZuuTj/UR.LM*bG|T,ZuuTj/UR, LM*bG|T,ZuuTj/UR.LM*bG|T,ZuuTj/UR";
      stringArray1[4] = "LM*bG|T,ZuuTj/UR";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("/6", stringArray0, "&I@}2FC0q'ByK[", "&I@}2FC0q'ByK[", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4387424672740177
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selecl intoK");
      assertNull(boolean0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selecl intoK", (DBTable) null, (-2110), "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("selecl intoK");
      VersionNumber.valueOf("renaye");
      DBSchema dBSchema0 = new DBSchema("truncate");
      dBSchema0.getTable("truncate");
      DBDataType dBDataType0 = DBDataType.getInstance(1, "truncate");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("renaye", (DBTable) null, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "selecl intoK");
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = 'k';
      charArray0[2] = 'e';
      charArray0[3] = '\"';
      StringBuilder stringBuilder1 = stringBuilder0.insert(1, charArray0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("renaye", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder3);
      assertEquals("s|ke\"elecl intoK or renaye|ke\"TRUNCATE", stringBuilder3.toString());
      assertEquals("s|ke\"elecl intoK or renaye|ke\"TRUNCATE", stringBuilder0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execup0ateelect:nto$");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.derby.impl.services.reflect.DatabaseClasses";
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(org.apache.derby.impl.services.reflect.DatabaseClasses)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.derby.impl.services.reflect.DatabaseClasses\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DBDataType dBDataType0 = DBDataType.getInstance(13, "#:60m2tKYVL");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#:60m2tKYVL", defaultDBTable0, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      defaultDBColumn0.setNullable(false);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("#:60m2tKYVL #:60M2TKYVL(1) NOT NULL", string0);
      
      String string1 = SQLUtil.renderColumnTypeWithSize(dBColumnArray0[0]);
      assertEquals("#:60M2TKYVL(1)", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(K<8V{T1Su");
      VersionNumber.valueOf("<Q9%c'm^rqA^e&Y 3");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.add((Object) "(K<8V{T1Su");
      columnDescriptorList0.ensureCapacity(3490);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(732);
      SQLUtil.addRequiredCondition("1o<%r?|;v", stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("callzizlbyy");
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("[u%9-a#@5", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      Boolean boolean0 = new Boolean("[u%9-a#@5");
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.postgresql.jdbc3.AbstractJdbc3ResultSet", defaultDBTable0, (DBDataType) null, integer0, (Integer) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(13, "t");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index,", defaultDBTable0, dBDataType0, integer0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "t");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ">~3zh`XQ9I&", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT >~3zh`XQ9I& PRIMARY KEY ()", string0);
      
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT >~3zh`XQ9I& PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "query timeout must be ";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("3nuf1Ymx{G*(=p;f|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 3nuf1Ymx{G*(=p;f|
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("callzizlbyy");
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("callzizlbyy", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.mutatesDataOrStructure("select into");
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("callzizlbyy");
      assertEquals("callzizlbyy", defaultDBTable1.getName());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      System.setCurrentTimeMillis(17L);
      Random.setNextRandom((-334951280));
      String string0 = " NOT NULL";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NOT NULL");
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = " NOT NULL";
      stringArray0[2] = " NOT NULL";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = " NOT NULL";
      stringArray0[7] = " NOT NULL";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      int int0 = 41;
      // Undeclared exception!
      try { 
        stringBuilder3.insert(41, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 41
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      StringBuilder stringBuilder1 = stringBuilder0.append("Z*");
      StringBuilder stringBuilder2 = stringBuilder1.append(1960L);
      stringBuilder2.append(0.0);
      TableContainer tableContainer0 = new TableContainer("n^MWUma!a!l", defaultDBTable0);
      tableContainer0.getSchema();
      dBUniqueConstraint0.isIdentical((DBObject) null);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      assertEquals("Z*19600.0", stringBuilder1.toString());
      assertEquals("Z*19600.0", stringBuilder0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(90);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":<`");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ":<`", true, (String[]) null);
      StringBuilder stringBuilder1 = stringBuilder0.append(":<`");
      stringBuilder1.append(0.0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals(":<`0.0CONSTRAINT :<` ", stringBuilder0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      rowOutputBinary0.writeIntData(1);
      DBSchema dBSchema0 = new DBSchema("V1j&6");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "V1j&6";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "^l";
      stringArray0[4] = "V1j&6";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V1j&6";
      objectArray0[1] = (Object) stringArray0[2];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selecl intoK");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBTable0.setOwner(compositeDBObject0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray1 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("execupd", true, defaultDBTable0, stringArray1, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
      
      boolean boolean0 = SQLUtil.isDDL("selecl intoK");
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-1163), "selecl intoK");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" on ", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setDefaultValue("Y>V:@J;}4s");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" on  SELECL INTOK DEFAULT Y>V:@J;}4s NULL", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID("execute");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      SQLUtil.isDML("'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'";
      stringArray0[1] = "'";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "'", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("'", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(41);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dynamicByteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "create materialized view", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "execupdateselect intox";
      stringArray0[1] = "execupdateselect intox";
      stringArray0[2] = "execupdateselect intox";
      stringArray0[3] = "execupdateselect intox";
      stringArray0[4] = "execupdateselect intox";
      stringArray0[5] = "execupdateselect intox";
      stringArray0[6] = "execupdateselect intox";
      stringArray0[7] = "execupdateselect intox";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("execupdateselect intox", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      System.setCurrentTimeMillis(458L);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = new Integer(41);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized viewrenaye");
      DBDataType dBDataType0 = DBDataType.getInstance((-559), "ROWNUM");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execupdateelect ntox", defaultDBTable0, dBDataType0, (Integer) null);
      String string0 = "callrenaye";
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("callrenaye", defaultDBTable0, dBDataType0, integer3, integer4);
      defaultDBColumn1.toString();
      defaultDBColumn1.isIdentical(defaultDBTable0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("callrenaye : ROWNUM(0,2)", false, "ROWNUM", "J$l6dOqP");
      String string1 = "eHU!`v e";
      boolean boolean0 = false;
      String string2 = SQLUtil.normalize(string1, boolean0);
      String string3 = ";tZuFs=C;";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(string3, stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(string2);
      int int0 = 641;
      char[] charArray0 = new char[2];
      char char0 = '3';
      charArray0[0] = char0;
      char char1 = 'x';
      charArray0[1] = char1;
      int int1 = 1234;
      int int2 = (-934);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(int0, charArray0, int1, int2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 641
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema("trZPU(+[", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("trZPU(+[", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "trZPU(+[";
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = "trZPU(+[";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex((String) null, false, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBNonUniqueIndex0);
      assertEquals("trZPU(+[.null", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*/";
      stringArray0[1] = "43Y57.U";
      stringArray0[4] = "nNY";
      stringArray0[5] = "At#6'lptxrx";
      stringArray0[6] = "S";
      DBDataType dBDataType0 = DBDataType.getInstance(13, "nNY");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("At#6'lptxrx", defaultDBTable0, dBDataType0, integer1);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "S", true, stringArray0);
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      assertNull(dataDictionaryImpl1.getAuthorizationDatabaseOwner());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("drop index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jD4o-(CUKETYs38M", (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("&o.j(]@-?kd/", defaultDBTable0, 1, "&o.j(]@-?kd/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: &o.j(]@-?kd/
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("alter materialized view");
      DBSchema dBSchema0 = new DBSchema("43Y57.U");
      dBSchema0.getTable("alter materialized view");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("!{3FY}", (DBTable) null, (-2147483622), "1p!';?u(tJcQ)7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"tJcQ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ob)q-zlc", defaultDBTable0, (DBDataType) null);
      defaultDBColumn0.getForeignKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(K<8V{T1Su");
      DBDataType dBDataType0 = DBDataType.getInstance((-1480), "(K<8V{T1Su");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(K<8V{T1Su", defaultDBTable0, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("(K<8V{T1Su", string0);
      
      Character character0 = new Character('+');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'+'", string1);
      
      boolean boolean0 = SQLUtil.isQuery("(K<8V{T1Su");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(K<8V{T1Su");
      DBDataType dBDataType0 = DBDataType.getInstance((-1480), "(K<8V{T1Su");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(K<8V{T1Su", defaultDBTable0, dBDataType0, integer0);
      Character character0 = new Character('c');
      String string0 = SQLUtil.substituteMarkers("execexecupdateelect ntox", "8$O\"", character0);
      assertEquals("execexecupdateelect ntox", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      rowOutputBinary0.writeIntData(1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getUniqueConstraints(false);
      String[] stringArray0 = new String[4];
      stringArray0[2] = "calltruncateat#6'lptxrx";
      stringArray0[1] = "calltruncateat#6'lptxrx";
      stringArray0[3] = "calltruncateat#6'lptxrx";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("calltruncateat#6'lptxrx", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-3);
      byteArray0[7] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec1);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "calltruncateat#6'lptxrx", versionNumber0);
      assertFalse(defaultDatabase0.isImportedUKs());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = SQLUtil.normalize("jD4o-(CUKETYs38M", true);
      assertEquals("jD4o - (CUKETYs38M", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      stringArray0[0] = "selecl intoK";
      stringArray0[1] = "selecl intoK";
      stringArray0[2] = "selecl intoK";
      stringArray0[3] = "08006";
      stringArray0[4] = "selecl intoK";
      stringArray0[5] = "selecl intoK";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("selecl intoK = 'selecl intoK' AND selecl intoK = 'selecl intoK' AND selecl intoK = 'selecl intoK' AND 08006 = '08006' AND selecl intoK = 'selecl intoK' AND selecl intoK = 'selecl intoK' AND null = null", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = SQLUtil.substituteMarkers("", "EsPRVJ", (Object) null);
      assertEquals("", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(13, "#:60m2tKYVL");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#:60m2tKYVL", defaultDBTable0, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("#:60m2tKYVL #:60M2TKYVL(1) NULL", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      String string1 = "selecl intoK";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selecl intoK");
      defaultDBTable0.getIndexes();
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.ordinaryChar(1750);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = new Boolean(",fj+5V<6Thl#$");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "qj]buky";
      stringArray0[1] = "qj]buky";
      stringArray0[2] = "qj]buky";
      stringArray0[3] = ",fj+5V<6Thl#$";
      stringArray0[4] = ",fj+5V<6Thl#$";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "qj]buky", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (qj]buky, qj]buky, qj]buky, ,fj+5V<6Thl#$, ,fj+5V<6Thl#$)", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableContainer tableContainer0 = new TableContainer((String) null);
      String string0 = SQLUtil.renderValue(tableContainer0);
      assertNull(string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selecl intoK");
      defaultDBTable0.getIndex("selecl intoK");
      defaultDBTable0.getIndexes();
      SQLUtil.mutatesDataOrStructure("updateselecl intok");
      VersionNumber.valueOf("z!");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("?:^K0O]lzdmwS&&% ");
      assertNull(defaultDBTable1.getDoc());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9077822229539516
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = SQLUtil.normalize("g xXh|p-/&%/\"RU", true);
      assertEquals("g xXh | p - / & % / \"RU\"", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "g xXh|p-/&%/\"RU";
      stringArray0[1] = "g xXh | p - / & % / \"RU\"";
      stringArray0[2] = "g xXh | p - / & % / \"RU\"";
      stringArray0[3] = "g xXh | p - / & % / \"RU\"";
      stringArray0[4] = "g xXh | p - / & % / \"RU\"";
      stringArray0[5] = "g xXh | p - / & % / \"RU\"";
      SQLUtil.renderColumnNames(stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("g xXh | p - / & % / \"RU\"", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("left", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "y2`;1z|p^", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (g xXh|p-/&%/\"RU, g xXh | p - / & % / \"RU\", g xXh | p - / & % / \"RU\", g xXh | p - / & % / \"RU\", g xXh | p - / & % / \"RU\", g xXh | p - / & % / \"RU\")", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBTable0.setOwner(compositeDBObject0);
      String string0 = SQLUtil.normalize("%/p),RlKBH(,i=re(", false);
      assertEquals("% / p), RlKBH (, i = re (", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = null;
      TableContainer tableContainer0 = new TableContainer((String) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Random.setNextRandom(1365);
      String[] stringArray0 = new String[2];
      stringArray0[1] = null;
      SQLUtil.join("Y2`;1Z|p^", stringArray0[0], stringArray0, "k}G&vIg_vkT<,", "SET AUTOCOMMIT TRUE", stringArray0);
      SQLUtil.isDML("yO:J&Hi8-");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SET AUTOCOMMIT TRUE", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      byte[] byteArray0 = new byte[0];
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[12];
      Random.setNextRandom(1365);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "Y2`;1Z|p^";
      stringArray1[1] = null;
      stringArray1[2] = " _J2wgog`kZWPsK.a9";
      stringArray1[3] = "SET AUTOCOMMIT TRUE";
      stringArray1[4] = ";%8H,t^Y`9o+IYnS=";
      stringArray1[5] = ";%8H,t^Y`9o+IYnS=";
      stringArray1[6] = "";
      stringArray1[7] = "";
      stringArray1[8] = "SET AUTOCOMMIT TRUE";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, stringArray0, ";%8H,t^Y`9o+IYnS=", "", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'L(i#q");
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'L(i#q";
      stringArray0[1] = "'L(i#q";
      stringArray0[2] = "delete lob ";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "delete lob ";
      stringArray1[1] = "SET AUTOCOMMIT TRUE";
      stringArray0[1] = "'L(i#q";
      stringArray1[3] = "delete lob ";
      stringArray1[4] = "'L(i#q";
      stringArray1[5] = "delete lob ";
      stringArray1[6] = "delete lob ";
      stringArray1[7] = "'L(i#q";
      String string0 = SQLUtil.innerJoin("SET AUTOCOMMIT TRUE", stringArray0, "delete lob ", "'L(i#q", stringArray1);
      assertEquals("delete lob  as 'L(i#q on SET AUTOCOMMIT TRUE.'L(i#q = 'L(i#q.delete lob  and SET AUTOCOMMIT TRUE.'L(i#q = 'L(i#q.SET AUTOCOMMIT TRUE and SET AUTOCOMMIT TRUE.delete lob  = 'L(i#q.null", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ">toRX_|RFS!o");
      SQLUtil.addOptionalCondition("05|,*H[sGb!t}t.~", stringBuilder0);
      assertEquals(">toRX_|RFS!o or 05|,*H[sGb!t}t.~", stringBuilder0.toString());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "(KD<8V{T1Su";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("(KD<8V{T1Su", (DBTable) null, (-2147483618), "(KD<8V{T1Su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (KD<8V{T1Su
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.7613746079864251
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLUtil.normalize("g xXh|p-/&%/\"RU", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "NCLOB";
      stringArray0[2] = null;
      stringArray0[3] = "g xXh | p - / & % / \"RU\"";
      stringArray0[4] = "g xXh|p-/&%/\"RU";
      stringArray0[5] = "g xXh | p - / & % / \"RU\"";
      stringArray0[6] = "g xXh|p-/&%/\"RU";
      SQLUtil.join((String) null, (String) null, stringArray0, "g xXh|p-/&%/\"RU", (String) null, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Z");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = SQLUtil.normalize("Query timeout must be a value greater than or equals to 0.", true);
      assertEquals("Query timeout must be a value greater than or equals to 0.", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = SQLUtil.normalize(".~58@%", true);
      assertEquals(".~ 58 @ %", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      rowOutputBinary0.writeIntData(1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getReferrers();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(24, rowOutputBinary0.size());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      HsqlByteArrayOutputStream hsqlByteArrayOutputStream0 = rowOutputBinary0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(hsqlByteArrayOutputStream0, true);
      rowOutputBinary0.writeIntData((-1793644219));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("b7%J`");
      defaultDBTable0.getReferrers();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      rowOutputBinary0.writeIntData(1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getReferrers();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      boolean boolean0 = SQLUtil.isDDL("alter table");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("D6]'?L");
      DBSchema dBSchema0 = new DBSchema("lock", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "D6]'?L";
      stringArray0[1] = "D6]'?L";
      stringArray0[2] = "D6]'?L";
      stringArray0[3] = "D6]'?L";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(K<8V{T1Su");
      DBDataType dBDataType0 = DBDataType.getInstance((-1480), "(K<8V{T1Su");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(K<8V{T1Su", defaultDBTable0, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "select";
      stringArray0[1] = "select";
      stringArray0[2] = "select";
      stringArray0[3] = "select";
      stringArray0[4] = "select";
      stringArray0[5] = "select";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("select", "select", stringArray0, "select", "select", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(K<8V{T1Su");
      DBDataType dBDataType0 = DBDataType.getInstance((-1480), "(K<8V{T1Su");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(K<8V{T1Su", defaultDBTable0, dBDataType0, integer0);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join(",", "(K<8V{T1Su", stringArray0, "(K<8V{T1Su", "(K<8V{T1Su", (String[]) null);
      assertEquals(", join (K<8V{T1Su as (K<8V{T1Su on ", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[9];
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBTable0.setOwner(compositeDBObject0);
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append("3Q)T(Q93Cjv");
      SQLUtil.addRequiredCondition("create unique index", stringBuilder0);
      StringBuffer stringBuffer0 = new StringBuffer();
      SQLUtil.renderColumnListWithTableName("rename'l(i#q", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("3Q)T(Q93Cjv", (String[]) null, "=@SytQcb", "St#/>*R", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.7689528313755152
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLUtil.normalize("3nuf1Ymx{G*(=p;f|", false);
      DBUniqueConstraint dBUniqueConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      StringBuilder stringBuilder0 = new StringBuilder(",1xhGnZB'<");
      SQLUtil.addRequiredCondition("selecl intoK", stringBuilder0);
      assertEquals(",1xhGnZB'< and selecl intoK", stringBuilder0.toString());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^]n:xl`g");
      defaultDBTable0.getIndex("YpsXQS&7");
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]n:xl`g";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" CHECK", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.columnReferencedBy("YpsXQS&7", false);
      defaultDBTable0.getComponents();
      Boolean boolean0 = new Boolean("YpsXQS&7");
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("^]n:xl`g");
      assertNull(defaultDBTable1.getDoc());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 13;
      DBDataType dBDataType0 = DBDataType.getInstance(13, "delete");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = new Integer(13);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("J$l6dOqP", defaultDBTable0, dBDataType0, integer2);
      TableContainer tableContainer0 = new TableContainer("}]kC)z6c:!&),`p?L");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("alter index^]n:xl`g2tltkyu`h");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "}]kC)z6c:!&),`p?L";
      String string0 = "rename^]n:xl`g2tltkyu`h";
      stringArray0[1] = "rename^]n:xl`g2tltkyu`h";
      stringArray0[2] = "#:60m2tKYVL";
      stringArray0[3] = "alter index^]n:xl`g2tltkyu`h";
      stringArray0[4] = "delete";
      stringArray0[5] = "alter index^]n:xl`g2tltkyu`h";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create table", false, defaultDBTable1, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(231);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.delete((-856), 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -856
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("callzizlbyy");
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create unique index", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.getComponents();
      Boolean boolean0 = new Boolean("create unique index");
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("CONSTRAINT \"create unique index\" ");
      assertFalse(defaultDBTable1.equals((Object)defaultDBTable0));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("callzizlbyy");
      String[] stringArray0 = new String[9];
      String string0 = "4`j6`Fvy-$IE'";
      String string1 = "h2.maxFileRetry";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "h2.maxFileRetry", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "4`j6`Fvy-$IE'");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringBuilder1.insert(1995, charArray0, 1995, 1995);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1995
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("callzizlbyy");
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "callzizlbyy";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String[] stringArray1 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("[u%9-a#@5", false, defaultDBTable0, stringArray1, defaultDBTable0, stringArray1);
      Boolean boolean0 = new Boolean("[u%9-a#@5");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("[u%9-a#@5");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.937566794583933
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = SQLUtil.normalize("3nuf1Ymx{G*(=p;f|", false);
      assertEquals("3nuf1Ymx { G * (= p ; f |", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wKyixBd525";
      stringArray0[1] = "wKyixBd525";
      stringArray0[2] = "wKyixBd525";
      stringArray0[3] = "3nuf1Ymx { G * (= p ; f |";
      String string1 = SQLUtil.join("3nuf1Ymx{G*(=p;f|", "wKyixBd525", stringArray0, "3nuf1Ymx { G * (= p ; f |", "wKyixBd525", stringArray0);
      assertEquals("3nuf1Ymx{G*(=p;f| join 3nuf1Ymx { G * (= p ; f | as wKyixBd525 on wKyixBd525.wKyixBd525 = wKyixBd525.wKyixBd525 and wKyixBd525.wKyixBd525 = wKyixBd525.wKyixBd525 and wKyixBd525.wKyixBd525 = wKyixBd525.wKyixBd525 and wKyixBd525.3nuf1Ymx { G * (= p ; f | = wKyixBd525.3nuf1Ymx { G * (= p ; f |", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("execute:iux^59ebn+de-8isw", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (wKyixBd525, wKyixBd525, wKyixBd525, 3nuf1Ymx { G * (= p ; f |) REFERENCES null(wKyixBd525, wKyixBd525, wKyixBd525, 3nuf1Ymx { G * (= p ; f |)", string2);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "drop table";
      String string0 = SQLUtil.join((String) null, "drop table", stringArray0, "G$-SN{8}A_]nMu@QvC", "LqIS7#]<Dz&v", stringArray0);
      assertEquals("G$-SN{8}A_]nMu@QvC as LqIS7#]<Dz&v on drop table.drop table = LqIS7#]<Dz&v.drop table", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("alter tabled", "alter tabled", (String[]) null, "rename<f@snc,jilhp1b|", ".D<Rq\"=o'lld.I~F", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = SQLUtil.normalize("~M?O~s{,bga1e", true);
      assertEquals("~ M ?  O ~ s {, bga1e", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execupdateselect intox");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execupdateelect ntox");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(";B,BE<Z5o3+1f");
      assertNull(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("+ejLevWFxwq$", "update", stringArray0, "\u0001\u012D", "update", stringArray0);
      assertEquals("+ejLevWFxwq$ join \u0001\u012D as update on update.null = update.null", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectqhhi");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tabledrop table");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.mutatesDataOrStructure("alter session");
      VersionNumber.valueOf("alter session");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("renaye");
      Random.setNextRandom((-5312));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("*^Zf]fJ=Z~u%", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("Unknown constraint type: ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("3nuf1Ymx{G*(=p;f|");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("INSERTPRIV");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(195, "DbZOS1.=x#v_s+cQ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("m`xMl%qW6(x", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.toString();
      boolean boolean0 = false;
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("m`xMl%qW6(x", false, "F@p!wA.NJ%.|l", "DbZOS1.=x#v_s+cQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("selectx");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("s#[@={DUBWKH6");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create unique index");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("create tablealter tabledro5 table", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[14];
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("AF\"QX<&bnqKB/Y8+");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("!w[vvF", stringArray0);
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "inner";
      String string0 = SQLUtil.join("inner", "inner", stringArray0, "left", "YAnXd&>", stringArray0);
      assertEquals("left as YAnXd&> on inner.inner = YAnXd&>.inner", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("selecl intoK", (String[]) null, "I#q[OSNoe(zKr7&az!", "UtS+e5G$6*z", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VersionNumber.valueOf("inaer");
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = SQLUtil.normalize("'L(i#q", false);
      assertEquals("'L(i#q'", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("{SVGpme;Wu", "DATA_TYPE INT", "DATA_TYPE INT");
      assertEquals("{SVGpme;Wu", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "\u0001B\u0001\uFFFF\u0001A\u000E\uFFFF\u0001C";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.7790538414765251
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLUtil.normalize("3nuf1Ymx{G*(=p;f|", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Wr(q");
      defaultDBTable0.getForeignKeyConstraints();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C$hd!", defaultDBTable0, 34, ">m!y^I}{j");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Random.setNextRandom(3347);
      String string0 = "s";
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(")");
      String string0 = SQLUtil.removeComments(")");
      assertEquals(")", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(")");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container )", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("htN1v", "`*]RC*A", stringArray0, "htN1v", "htN1v", stringArray0);
      assertEquals("htN1v join htN1v as htN1v on ", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = SQLUtil.renderValue("");
      assertEquals("''", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(K<8V{T1Su");
      DBDataType dBDataType0 = DBDataType.getInstance((-1480), "(K<8V{T1Su");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(K<8V{T1Su", defaultDBTable0, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(K<8V{T1Su";
      stringArray0[1] = "TABLE ( ";
      stringArray0[2] = "(K<8V{T1Su";
      stringArray0[3] = "(K<8V{T1Su";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
