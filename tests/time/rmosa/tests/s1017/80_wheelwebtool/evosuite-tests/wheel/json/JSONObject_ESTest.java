/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 05:33:43 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long((-344L));
      Double double0 = new Double((-344L));
      hashMap0.put(long0, double0);
      JSONObject jSONObject1 = jSONObject0.put("}!~/sU9qh", (-1680.9));
      jSONObject0.getDouble("}!~/sU9qh");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      jSONObject1.length();
      Integer integer0 = new Integer(1);
      JSONObject.getNames((Object) integer0);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("O%?=8)oW/MVD6Su");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "";
      JSONObject.getNames((Object) "");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONArray0.put(628, (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2826685601371457
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%R7Jm^h5$rviz1-T5";
      stringArray0[1] = "{>A74FNd";
      stringArray0[2] = "]G@V^A=#eYZSt";
      stringArray0[3] = "getputIfAbsent";
      stringArray0[4] = "b<B@-9g8Np?&xrxOCb&";
      stringArray0[5] = "wheel.json.JSONException";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      Boolean boolean0 = new Boolean("com");
      Float float0 = new Float(0.0F);
      hashMap0.put(boolean0, float0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      double double0 = jSONObject0.optDouble("{>A74FNd");
      assertEquals(Double.NaN, double0, 0.01);
      
      jSONObject0.put("", false);
      int int0 = jSONObject1.optInt("e3mf");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.101241191122625
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "wheel.json.JSONException";
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONException", object0);
      hashMap0.values();
      jSONObject1.getJSONArray("wheel.json.JSONException");
      jSONObject0.optBoolean("null");
      jSONObject1.names();
      jSONObject0.optJSONObject("' and instead saw '");
      jSONObject0.length();
      JSONObject jSONObject2 = jSONObject0.put("w*s1i6H8P2xx&o", (Map) hashMap0);
      Float float0 = new Float((float) 1);
      jSONObject2.put("wheel.json.JSONException", (Object) float0);
      try { 
        jSONObject2.getLong("pvatK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pvatK\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4417779176503545
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Byte byte0 = new Byte((byte)29);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.toUnsignedInt((byte)12);
      Byte.toUnsignedLong((byte) (-80));
      JSONObject jSONObject1 = jSONObject0.putOpt("$P{{}U|`20}HeT", (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      jSONArray0.optInt((int) (byte) (-80));
      JSONArray jSONArray1 = jSONArray0.put((long) (byte)29);
      JSONObject jSONObject2 = jSONObject1.accumulate("xSN", jSONArray0);
      jSONObject1.toString();
      Byte.toUnsignedLong((byte)12);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.toString((int) (byte)29, (-2451));
      JSONObject jSONObject3 = jSONObject2.put("$P{{}U|`20}HeT", (-2451));
      jSONObject3.optLong("{\n\"java.lang.String@0000000007\": [[\njava.lang.Boolean@0000000009,\njava.lang.Long@000000001\n]],\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      jSONObject3.optInt("mRbaB8JT7jx8?", 3091);
      JSONObject.valueToString(jSONObject2);
      jSONObject2.keys();
      jSONObject0.length();
      JSONObject jSONObject4 = jSONObject2.put("s", (-1130));
      jSONObject4.names();
      jSONObject1.putOpt("xSN", jSONArray1);
      jSONObject4.put("U3'{VS= b=\"", (Object) byte0);
      assertEquals(5, jSONObject2.length());
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "{}";
      JSONObject jSONObject0 = new JSONObject("{}");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("EzTCf)HOxs2 sP2", (Collection) linkedList0);
      try { 
        jSONObject0.append((String) null, "{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.append("Bad value from toJSONString: ", (Object) null);
      boolean boolean0 = jSONObject1.isNull("Bad value from toJSONString: ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1846726042887588
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.append("ispJarseLo@g", double0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      Double double1 = new Double(0.0);
      jSONObject2.append("ispJarseLo@g", double1);
      jSONObject2.names();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      Writer writer1 = jSONObject0.write(writer0);
      assertSame(writer1, stringWriter0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("|@ZX?H&q34t", true);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONObject1);
      jSONObject0.getBoolean("|@ZX?H&q34t");
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject2 = jSONObject1.put(",:]}/\"[{;=#", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject2.putOpt("(0ZEO#6Z?1", "(0ZEO#6Z?1");
      assertSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("|@ZX?H&q34t", false);
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = jSONObject0.getBoolean("|@ZX?H&q34t");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Map) null);
      String string0 = null;
      try { 
        jSONObject1.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0894379124341005
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("uYSZKJc@%1A-$=zLya", 1L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      jSONObject1.put("", (-3743));
      JSONObject.getNames(jSONObject0);
      String string0 = jSONObject1.optString("", "");
      assertNotNull(string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.976592899728664
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject.getNames((Object) "X^4#&=bsE~K8");
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>(1587);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("X^4#&=bsE~K8", hashMap0);
      jSONObject1.optString("X^4#&=bsE~K8");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Byte, Short> hashMap0 = new HashMap<Byte, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-94));
      Short short0 = new Short((byte) (-94));
      hashMap0.put(byte0, short0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("", object0);
      String string0 = jSONObject1.optString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("Missing value", (Collection) linkedList0);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      JSONArray jSONArray1 = jSONObject0.optJSONArray("Missing value");
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.119031859650177
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (-2652));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\f";
      JSONObject jSONObject1 = jSONObject0.append("\f", "\f");
      jSONObject1.get("\f");
      try { 
        jSONObject0.getJSONObject("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ispJarseLo@g";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("ispJarseLo@g", (Collection) linkedList0);
      Double double0 = new Double(0.0);
      jSONObject0.append("ispJarseLo@g", double0);
      try { 
        jSONObject0.getDouble("d\"W `<P\".1! `+^[.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"d\\\"W `<P\\\".1! `+^[.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("N: ", 0.0);
      try { 
        jSONObject0.append("N: ", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[N: ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Double double0 = new Double((-1351.1943010812631));
      BiFunction<Double, Object, Double> biFunction0 = (BiFunction<Double, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONObject0, double0, biFunction0);
      Double.isFinite((-1351.1943010812631));
      Double double1 = new Double(Double.NaN);
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      Double double2 = new Double(0.0);
      hashMap1.put(jSONObject0, double2);
      Double.max(1428.1697892, 2495.266943276064);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, double0);
      jSONObject1.names();
      byte byte0 = (byte)81;
      Byte byte1 = new Byte((byte)81);
      jSONObject0.putOpt("iscompare", hashMap1);
      jSONObject0.optJSONObject((String) null);
      String string0 = "*_[T^BjWkb.";
      try { 
        JSONObject.valueToString(double1, 1611, 1611);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0935773141956315
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double double0 = new Double((-375.8438529));
      JSONObject.doubleToString(0.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("dec");
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Long long0 = new Long(0L);
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.put("isparseDouble", true);
      assertEquals(6, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Double double0 = new Double(Double.NaN);
      Float float0 = new Float(2138.885);
      hashMap0.putIfAbsent((Double) null, float0);
      Float float1 = Float.valueOf(0.0F);
      Float.isFinite(0.0F);
      hashMap0.put(double0, float1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("#j~W!Svd@&Y", hashMap0);
      jSONObject0.keys();
      jSONObject0.toString();
      Byte byte0 = new Byte((byte)3);
      JSONObject.valueToString(byte0, (-1902), (-2439));
      JSONObject jSONObject2 = jSONObject1.put("qE/XjK", (long) (-1902));
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.keys();
      int int0 = 34;
      String string0 = "~KrtKB?*(Q**";
      JSONObject jSONObject1 = jSONObject0.put("~KrtKB?*(Q**", 70);
      jSONObject1.optLong("~KrtKB?*(Q**");
      try { 
        jSONObject0.getJSONObject("~KrtKB?*(Q**");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~KrtKB?*(Q**\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject.valueToString(hashMap0, 1325, 1325);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 1325, 1325);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject.valueToString(jSONObject0, 31, 31);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{x_sKmz+");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {x_sKmz+
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONArray0.put((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("\b");
      JSONObject jSONObject1 = new JSONObject((Object) "\b");
      StringWriter stringWriter0 = new StringWriter(42);
      jSONObject1.write(stringWriter0);
      String[] stringArray0 = JSONObject.getNames((Object) stringWriter0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = JSONObject.quote("/k}e#OqmUeYew<v:");
      assertEquals("\"/k}e#OqmUeYew<v:\"", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = new Integer((-124622385));
      String string0 = JSONObject.doubleToString((-124622385));
      assertEquals("-1.24622385E8", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) "~;5A14IY");
      // Undeclared exception!
      jSONObject0.toString(4169, 4169);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "^YQN;f)B";
      long long0 = (-919L);
      jSONObject0.optLong("^YQN;f)B", (-919L));
      try { 
        jSONObject0.getJSONArray("B|LVGccCMpa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"B|LVGccCMpa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Float float0 = new Float(2057.94372);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(1111, 372);
      jSONObject0.remove("] is not a JSONObject.");
      jSONObject0.toString(25, 25);
      jSONObject0.optDouble(".");
      JSONObject.doubleToString(0.0);
      String string0 = jSONObject0.optString("sp", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      Byte.toUnsignedInt((byte)120);
      Byte.compare((byte)120, (byte) (-67));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.toUnsignedInt((byte) (-67));
      jSONObject0.put("] is not a JSONArray.", (-39L));
      jSONObject0.keys();
      String string0 = "\\u";
      jSONObject0.optJSONArray(string0);
      jSONObject0.getInt("] is not a JSONArray.");
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Double double0 = new Double((-2657.1));
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Object object0 = new Object();
      String[] stringArray0 = new String[10];
      stringArray0[0] = " {yNt+Wz\fl";
      stringArray0[1] = " {yNt+Wz\fl";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Double double1 = new Double((-1.0));
      Double.min(0.0, 2743.410610415);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONObject0, double1, biFunction0);
      Double.isFinite((-2657.1));
      Double double2 = new Double((-1.0));
      Double double3 = new Double(0.0);
      hashMap0.put(jSONObject0, double3);
      Double.max((-3544.852897495483), (-2657.1));
      Integer integer0 = new Integer(2051);
      JSONObject jSONObject1 = jSONObject0.putOpt(" {yNt+Wz\fl", integer0);
      Byte byte0 = new Byte((byte)125);
      Long long0 = new Long((byte)125);
      JSONObject jSONObject2 = jSONObject1.putOpt("] is not a JSONArray.", long0);
      jSONObject2.optJSONObject("true");
      jSONObject2.getInt(" {yNt+Wz\fl");
      long long1 = jSONObject1.optLong("istoUpperCase");
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONObject0, double1, biFunction0);
      Double double2 = new Double(0.0);
      hashMap0.put(jSONObject0, double2);
      Long long0 = new Long((-1L));
      jSONObject0.accumulate("O8{m>e_Uns#$y\"L2_", (Object) null);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-6502.068506002603));
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONObject0, double0, biFunction0);
      Double double1 = new Double(0.0);
      hashMap0.put(jSONObject0, double1);
      Long long0 = new Long(563L);
      jSONObject0.accumulate("O8{m>e_Uns#$y\"L2_", "O8{m>e_Uns#$y\"L2_");
      try { 
        jSONObject0.getBoolean("O8{m>e_Uns#$y\"L2_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"O8{m>e_Uns#$y\\\"L2_\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(252.15208398);
      JSONObject jSONObject1 = jSONObject0.accumulate("n3Sts$", double0);
      try { 
        jSONObject1.getBoolean("n3Sts$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n3Sts$\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Integer integer0 = new Integer(32);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", integer0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      JSONObject.valueToString(hashMap1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("isremove");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of isremove
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONObject0, double0, biFunction0);
      Double.isFinite(3957.37054);
      Double double1 = new Double(3957.37054);
      hashMap0.put(jSONObject0, double0);
      Double.max(1428.1697892, 1428.1697892);
      JSONObject jSONObject1 = jSONObject0.putOpt("V$l>woPJ;tYE", double1);
      Byte byte0 = new Byte((byte)125);
      jSONObject0.putOpt("V$l>woPJ;tYE", "V$l>woPJ;tYE");
      jSONObject1.optJSONObject("V$l>woPJ;tYE");
      try { 
        jSONObject0.getInt("V$l>woPJ;tYE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"V$l>woPJ;tYE\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("X^4#&=bs ~K8");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 32;
      String string0 = ",\n";
      JSONObject.quote(",\n");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Byte, Short> hashMap0 = new HashMap<Byte, Short>();
      Byte byte0 = new Byte((byte)2);
      Short short0 = Short.valueOf((short) (-3823));
      hashMap0.put(byte0, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(2214);
      StringWriter stringWriter1 = stringWriter0.append('=');
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Double double0 = new Double(2825.0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("JSONArray initial value should be a string or collection or array.", object0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.getString("JSONArray initial value should be a string or collection or array.");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, Object> hashMap1 = new HashMap<Boolean, Object>(hashMap0);
      double double0 = jSONObject0.optDouble("h`j+rA_K9On2<hlTcY6", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, 32, (-3793));
      Short short0 = new Short((short)499);
      hashMap0.replace(short0, jSONObject0, jSONObject0);
      jSONObject0.putOpt("isadd", hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-4600), 9);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      Integer integer0 = new Integer(4);
      JSONObject.valueToString(integer0, 4, 4);
      int int0 = 46;
      jSONObject1.toString(46, 34);
      jSONObject0.remove("p@#[pV[K-<<[2sI5e");
      jSONObject0.toString(16, 2174);
      jSONObject1.opt("{}");
      hashMap0.put("p@#[pV[K-<<[2sI5e", "p@#[pV[K-<<[2sI5e");
      int int1 = (-4785);
      try { 
        jSONObject0.getBoolean("{\"java.lang.String@0000000002\": null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": null}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      Byte byte0 = new Byte((byte)60);
      Boolean boolean0 = new Boolean(true);
      hashMap0.put(byte0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(2884, 2884);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-4600), (-4600));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      Byte byte0 = new Byte((byte)60);
      Boolean boolean0 = new Boolean(true);
      hashMap0.put(byte0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append(">9lu/+Y?Dc`)", (Object) null);
      // Undeclared exception!
      jSONObject0.toString(2884, 2884);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("7}y'n3#,4$f;Akjg+.", (Object) null);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float float0 = new Float((-2469.12357));
      String string0 = ")fP";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject.quote("WA5uEh1; >Y/j");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("getputIfAbsent", "] is not a number.");
      JSONObject jSONObject2 = jSONObject1.accumulate("getputIfAbsent", "?");
      Byte byte0 = new Byte((byte)125);
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      try { 
        jSONObject2.getBoolean("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(": ", 0.0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("J#g4vI", 13L);
      jSONObject1.getDouble("J#g4vI");
      long long0 = jSONObject0.getLong("J#g4vI");
      assertEquals(13L, long0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1247461453644627
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      JSONObject jSONObject1 = jSONObject0.put("0", 0.0);
      jSONObject0.getLong("0");
      jSONObject1.optJSONObject("0");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("false", 0L);
      try { 
        jSONObject0.get("wheel.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$Null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Double double0 = new Double(Double.NaN);
      Integer integer0 = new Integer(8192);
      hashMap0.put(double0, integer0);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("#j~W!Svd@&Y", hashMap0);
      jSONObject0.keys();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_s]";
      stringArray0[1] = "_s]";
      JSONObject jSONObject0 = new JSONObject("_s]", stringArray0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject1 = new JSONObject((Object) "_s]");
      jSONObject1.accumulate("_s]", "_s]");
      jSONObject1.opt((String) null);
      assertEquals(4, jSONObject1.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "?";
      JSONObject jSONObject0 = new JSONObject((Object) "?");
      jSONObject0.accumulate("?", "?");
      Byte byte0 = new Byte((byte)2);
      try { 
        jSONObject0.getLong("?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject.quote("q$:i;0@O< gG+ZPb");
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-1631);
      jSONObject0.optInt("\"q$:i;0@O< gG+ZPb\"", (-1631));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1631));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("Expected '", "Expected '");
      JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(2534);
      Object object0 = new Object();
      hashMap0.put(integer0, object0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put(":h2jk&!-r", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      Boolean boolean0 = Boolean.valueOf(true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      JSONObject.valueToString(linkedList0, (-1), 58);
      String string0 = "_=";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("_=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of _=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Float float0 = new Float((-1.0));
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0132682509196822
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject.quote("i82:JAcbUz<UV/");
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short) (-896));
      Short.toUnsignedInt((short) (-3));
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a number.", short0);
      JSONObject.getNames((Object) "] is not a number.");
      jSONObject1.toString(65533);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("isintBitsToFloat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isintBitsToFloat\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("\"\"", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected a ':' after a key";
      jSONObject0.optBoolean("Expected a ':' after a key", false);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("N: ", 0.0);
      jSONObject0.keys();
      try { 
        jSONObject0.getJSONArray("N: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N: \"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("_s]", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject.doubleToString(1246.79699887081);
      Long long0 = new Long(2067L);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1v-qJ:L|H}bk";
      stringArray0[1] = "1246.79699887081";
      stringArray0[2] = "1v-qJ:L|H}bk";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "1v-qJ:L|H}bk");
      try { 
        jSONObject1.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("] is not a number.");
      JSONObject jSONObject1 = jSONObject0.put("7*", 1388);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("_s]", stringArray0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((-3931.2939962));
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject2 = jSONObject0.accumulate("_s]", jSONObject1);
      Float.max(0.0F, 0.0F);
      BiFunction<Object, Float, Float> biFunction0 = (BiFunction<Object, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("Bad value from toJSONString: ", float0, biFunction0);
      Boolean boolean0 = Boolean.TRUE;
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.putOpt("7}y'n3#,4$f;Akjg+.", jSONArray0);
      jSONObject1.accumulate("7}y'n3#,4$f;Akjg+.", "_s]");
      jSONObject2.opt("_s]");
      assertEquals(1, jSONObject0.length());
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.append("ispJarseLo@g", double0);
      jSONObject1.accumulate("ispJarseLo@g", "ispJarseLo@g");
      try { 
        jSONObject1.getJSONObject("ispJarseLo@g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ispJarseLo@g\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float((-494.42386F));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(object0, (-4600), (-4600));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong((String) null, 1507L);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("ilT&N8PRif|\"#iN0hO");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{qfr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {qfr
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)62);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_s]";
      stringArray0[1] = "_s]";
      stringArray0[2] = "_s]";
      stringArray0[3] = "_s]";
      stringArray0[4] = "_s]";
      stringArray0[5] = "4!#";
      stringArray0[6] = "_s]";
      stringArray0[7] = "_s]";
      stringArray0[8] = "_s]";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Short short1 = new Short((short)1082);
      JSONObject jSONObject2 = new JSONObject(short1);
      JSONObject jSONObject3 = jSONObject2.accumulate("_s]", "_s]");
      jSONObject3.opt("m6G(fxL_<+$");
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject3.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, 15, 2);
      Long long0 = new Long((-2446L));
      Float float0 = new Float((float) 2);
      hashMap0.putIfAbsent(long0, float0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = JSONObject.quote("- uT\"^L");
      assertEquals("\"- uT\\\"^L\"", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.154327141142871
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1246.79699887081);
      assertEquals("1246.79699887081", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double double0 = new Double(53.029827);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("^}~(oY0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^}~(oY0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("getsubList", "ispJarseLo@g");
      StringWriter stringWriter0 = new StringWriter(701);
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("LyS]'yA@rQTm!g)c<y");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = jSONObject0.optString("=2kR^Ecm[Lpdn5Ng@");
      assertEquals("", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.5688032438074955
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2187), (-2187));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2187));
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"");
      jSONObject1.length();
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"", 2937.854);
      jSONObject0.has("\"java.lang.Object@0000000001\"");
      try { 
        jSONObject1.getString("Uzp;'=7s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Uzp;'=7s\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject.valueToString(jSONArray0, (-3088), (-62353088));
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      jSONTokener0.toString();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of []
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray1, (-945), (-945));
      JSONTokener jSONTokener0 = new JSONTokener("Unclosed comment");
      try { 
        jSONTokener0.next(8448);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Substring bounds error at character 0 of Unclosed comment
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONArray0.put(1L);
      Float float0 = new Float((float) 0L);
      String string0 = JSONObject.valueToString(float0, (-1545), (-1545));
      assertNotNull(string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray("get");
      jSONObject0.put("getput", 13L);
      try { 
        jSONObject0.getDouble("=e2.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=e2.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("Z", (double) 32);
      assertEquals(32.0, double0, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Byte, Short> hashMap0 = new HashMap<Byte, Short>();
      BiConsumer<Object, Short> biConsumer0 = (BiConsumer<Object, Short>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      double double0 = jSONObject0.optDouble("wJ`GVOls RT");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("#y=");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      String string0 = "?";
      stringArray0[0] = "?";
      String string1 = "";
      stringArray0[1] = "";
      stringArray0[2] = "\b";
      jSONObject0.length();
      jSONObject0.optDouble("#_jcR", 0.0);
      jSONObject0.has("\b");
      try { 
        jSONObject0.getString("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"c\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object1 = JSONObject.NULL;
      jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object1);
      jSONObject0.optInt("getreplaceAll", 0);
      JSONObject.valueToString("p@#[pV[K-<<[2sI5e");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("s*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of s*
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-1131), 622);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.quote("w");
      assertEquals("\"w\"", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", jSONArray0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 73);
      JSONObject.valueToString("p@#[pV[K-<<[2sI5e");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("\"java.lang.String@0000000003\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"java.lang.String@0000000003\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.append("8`CP&nKW`'gwNlA$h)", ",:]}/\"[{;=#");
      try { 
        jSONObject1.getDouble("8`CP&nKW`'gwNlA$h)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8`CP&nKW`'gwNlA$h)\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("N: ", 0.0);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble("N: ");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      try { 
        jSONObject0.append((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.append("iscopyValueOf", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Short short0 = new Short((short)814);
      Short.toUnsignedLong((short)0);
      JSONObject.testValidity(short0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("|4z}^ 5o", (Object) "|4z}^ 5o");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("!-G((MLwC", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(252.15208398);
      jSONObject0.accumulate("n3Sts$", "n3Sts$");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("^Ll/rd.");
      try { 
        jSONObject0.accumulate((String) null, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("n3Sts$", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-5));
      JSONObject jSONObject1 = jSONObject0.putOpt("rXlpv7a)?", byte0);
      int int0 = jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 1434);
      assertEquals(1, jSONObject0.length());
      assertEquals(1434, int0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      hashMap0.remove((Object) jSONObject0, (Object) float0);
      int int0 = jSONObject0.optInt("getgetJSONArray");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("joi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"joi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONTokener jSONTokener1 = new JSONTokener("~S'ERg*9C>Y");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~S'ERg*9C>Y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-2458));
      try { 
        jSONObject0.put((String) null, (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-421.539));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      jSONObject0.optString((String) null, "Zy,d.I'QHsof.)9zQP-");
      StringWriter stringWriter0 = new StringWriter(701);
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("O84(1'&");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("J/@e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"J/@e\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("getforEach");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getforEach
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("brp{-ZiKl9jbd9dj");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of brp{-ZiKl9jbd9dj
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
