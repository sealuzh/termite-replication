/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 05:35:10 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1123L;
      long long1 = 9223372036854773733L;
      Range.of(range_CoordinateSystem0, 4294967316L, 9223372036854773733L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1123L, (-2043L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-1L));
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long((-1715L));
      Long long1 = new Long(219L);
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1351203217412427
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-664L), 2048L);
      Long long0 = new Long(2464L);
      Range.ofLength(2464L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2128L), 2288L);
      range1.getEnd();
      range1.getBegin();
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.978882553402459
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 11L, 2147484056L);
      Range range0 = Range.ofLength(2147484056L);
      range0.equals(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("\u0018~", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse \u0018~ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1360270265849555
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-109L));
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long((-109L));
      range1.equals(long0);
      range0.equals(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4744L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3872271038081148
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 331L, 4294967316L);
      Range.of((-1388L));
      Range.of(2147483647L);
      Range.of((-32768L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 331L, 4294967316L);
      Long long0 = new Long((-749L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      Range range1 = Range.of(65535L, 4294967295L);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 1123L, 4294967316L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(65535L, 4294967316L);
      boolean boolean1 = range1.equals(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1123L, 4294967316L);
      Range range1 = Range.of(1123L, 4294967316L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2064000360857086
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775381L, 9223372036854775381L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(9223372036854775380L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 9223372036854775381L, 9223372036854775381L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      
      Range range2 = Range.of(range_CoordinateSystem1, 9223372036854775380L, 9223372036854775381L);
      range2.equals(range1);
      Range range3 = Range.of(range_CoordinateSystem2, 9223372036854775381L, 9223372036854775380L);
      Long long1 = new Long(2173L);
      Object object0 = new Object();
      Object object1 = new Object();
      range3.equals(object1);
      assertFalse(range3.equals((Object)range2));
      assertSame(range3, range0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8942981504962124
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775381L, 9223372036854775381L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals(9223372036854775380L, long0);
      
      Range range1 = Range.of(range_CoordinateSystem1, 9223372036854775381L, 9223372036854775381L);
      List<Range> list0 = new LinkedList<Range>();
      Range range2 = Range.of(range_CoordinateSystem1, 9223372036854775380L, 9223372036854775381L);
      boolean boolean0 = range1.equals(range2);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range1));
      //  // Unstable assertion: assertNotSame(range2, range1);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1938L), (-1938L));
      Long long0 = new Long((-1938L));
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8921481463615892
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 420L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 420L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long(1718L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.136167156204854
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(1889L);
      Range.ofLength(0L);
      range0.toString();
      range0.toString();
      Range.ofLength(0L);
      Range range1 = Range.of(0L);
      // Undeclared exception!
      try { 
        range1.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9795303057019797
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of((-668L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-668L), (-668L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Long long0 = new Long(2048L);
      boolean boolean1 = range1.equals(range0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3866123593999244
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(2075L, 2075L);
      range0.toString();
      Range range1 = Range.parseRange("[ 2075 .. 2075 ]/0B");
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$RangeIterator", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$RangeIterator into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4417067387292817
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(2L, 1L);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.ofLength(1L);
      Range range2 = Range.of(2L, 2L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2L, 2L);
      List<Range> list0 = range2.complement(range1);
      assertTrue(list0.contains(range2));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8921481463615892
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775381L, 9223372036854775381L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 9223372036854775381L, 9223372036854775381L);
      Object object0 = new Object();
      range1.equals((Object) null);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483622L, 2147483622L);
      // Undeclared exception!
      try { 
        Range.parseRange("#P1Ha#E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse #P1Ha#E into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.491856304561743
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(2075L);
      range0.toString();
      Range range1 = Range.of(32767L, 9223372036854775807L);
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("[ 0 .. 2074 ]/0B", (Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 4294967295L);
      Long long0 = new Long(0L);
      range0.equals((Object) null);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0577029806499434
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 420L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.iterator();
      int int0 = 1996;
      try { 
        Long.valueOf("org.jcvi.jillion.core.Range$EmptyLongRange", (-2564));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -2564 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(278L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.135872616239462
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.ofLength(2075L);
      Range range0 = Range.ofLength(32767L);
      Range range1 = Range.of(2075L);
      Range range2 = Range.of(1776L);
      range1.equals(range2);
      Long long0 = new Long(2075L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1108L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(1L, 9223372036854775807L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L, 1L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.541166733025435
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.ofLength(2052L);
      assertFalse(range1.isEmpty());
      
      Range.of((-664L));
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.386970397351947
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = Range.of(32767L);
      Object object0 = new Object();
      range0.toString();
      range1.equals(object0);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("can not add null range to cache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.can not add null range to cache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 252L, 1214L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(253L, long0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.208037734450503
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 11L, 2147484056L);
      Range range1 = Range.ofLength(2147484056L);
      range1.equals(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem2);
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Long long0 = new Long(4294967316L);
      Range range0 = Range.of(4294967316L);
      boolean boolean0 = range0.equals("U%a'v~o*ygdFK");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-1938L), (-1938L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3295L, 9223372036854774231L);
      Long long0 = new Long((-1872L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147484054L), 1816L);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 2147484056L);
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(65535L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.269042622949001
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(2075L);
      Range range1 = Range.of(2075L, 2075L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem1);
      assertEquals(2075L, long0);
      
      Object object0 = new Object();
      Range range2 = Range.of(2075L, 2124L);
      boolean boolean1 = range1.equals(range2);
      assertFalse(boolean1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(1599L);
      Range range1 = Range.of(2075L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6892880693997117
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-32768L));
      Long long0 = new Long(0L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2021678481610336
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(254L);
      Range range1 = Range.of((-933L), 2147483647L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range1.iterator();
      long long0 = new Long((-128L));
      range1.equals(range0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(323L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(323L, long0);
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.796837966557264
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-664L), 2048L);
      Range range1 = Range.of(range_CoordinateSystem0, (-664L), (-664L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-4592L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4592 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147484056L, 2147484056L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.328162839005711
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ -128 .. -128 ]/0B", string0);
      
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range2.intersects(range1);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
      
      Long long0 = new Long((-128L));
      range0.equals("XJ%iS)HuHaxK^UbXG");
      Range range3 = range1.asRange();
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.797321935099309
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-664L), (-664L));
      Range range1 = Range.of(range_CoordinateSystem0, (-3576L), (-3576L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.5415638578417648
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(2075L);
      Range range1 = Range.of(2075L, 2075L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 2075 .. 2075 ]/0B", string0);
      
      range2.equals((Object) null);
      assertTrue(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string1 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 1 .. 2075 ]/RB", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 278L, 278L);
      Long long0 = new Long(278L);
      Long long1 = new Long((-716L));
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.691848233250198
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      Long long0 = new Long(1L);
      boolean boolean1 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertSame(range1, range0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.977660272976407
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(0L);
      assertTrue(range0.isEmpty());
      
      Long long0 = new Long(0L);
      Range range1 = Range.ofLength(3338L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(127L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of(32767L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      
      range0.equals(range0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.6922740822867146
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Range range1 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      boolean boolean0 = range1.equals(range1);
      assertTrue(boolean0);
      
      boolean boolean1 = range0.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      boolean boolean2 = range0.equals("[ 0 .. -1 ]/0B");
      assertTrue(range0.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertSame(range0, range1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.iterator();
      Long long0 = new Long((-128L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.79709058749954
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-664L), 2048L);
      Range range1 = Range.of(range_CoordinateSystem0, (-880L), (-700L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-3256L));
      Range range1 = Range.of((-3256L), 32767L);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Long long0 = new Long(0L);
      Object object0 = new Object();
      Range range0 = Range.ofLength(2147483646L);
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 0L);
      Long long0 = new Long(0L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      long long1 = range0.getLength();
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.7978231882321407
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-664L), 2048L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem4, (-664L), (-664L));
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      range0.getBegin(range_CoordinateSystem3);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-664L), long0);
      
      boolean boolean1 = range0.equals(range_CoordinateSystem2);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(0L, (-2469L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long((-1872L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.687420655767592
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      Range range0 = Range.ofLength(0L);
      Long long2 = new Long(0L);
      Long.getLong("ft` R", long1);
      boolean boolean0 = range0.equals(long2);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/SB", string0);
      
      long long3 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long3);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(297L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-2192L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-2186L), 4294967295L);
      Long long0 = new Long(2057L);
      range0.equals(range_CoordinateSystem0);
      range0.getLength();
      // Undeclared exception!
      try { 
        range0.split((-1115L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of(255L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.062186926522311
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775381L, 9223372036854775381L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775381L, long0);
      
      range0.getEnd();
      Range range1 = Range.of(range_CoordinateSystem0, (-668L), 1556L);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = range_Builder0.build();
      Range range3 = range_Builder0.build();
      assertSame(range3, range2);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(1105L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1210L, 9223372036854710273L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2712L, 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1049L), 9223372034707292161L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.693159536685813
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-9223372032559806437L));
      Range range1 = Range.of((-9223372032559806437L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = range_Builder0.build();
      assertSame(range2, range0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-32770L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-89L), 1210L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-665L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-2432L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      long long0 = new Long(1L);
      // Undeclared exception!
      try { 
        range0.split((-1130L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1L);
      range1.equals(range0);
      range1.getEnd();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.7969671154659554
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-664L), 2048L);
      Long long0 = new Long(2464L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-2128L), 2288L);
      long long1 = range0.getEnd();
      assertEquals(2287L, long1);
      
      long long2 = range0.getBegin();
      assertEquals((-2128L), long2);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.797321935099309
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 901L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-664L), 2048L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Zero Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Zero Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Long long0 = new Long(0L);
      Object object0 = new Object();
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      Range range1 = range0.asRange();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.3867746355940067
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-1211L));
      String string0 = range0.toString();
      assertEquals("[ -1211 .. -1211 ]/0B", string0);
      
      Range range1 = Range.ofLength(4294967295L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Long long0 = new Long((-32768L));
      Object object0 = new Object();
      Long long1 = new Long(935L);
      range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range2));
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Long long0 = new Long((-474L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.endsBefore(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = 1198L;
      Range range0 = Range.of(1198L);
      range0.getBegin();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.1352405357221285
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1938L), (-1938L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, (-1938L), (-1938L));
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem3, (-1938L), (-1938L));
      Object object0 = new Object();
      range1.equals(object0);
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-664L), 2048L);
      range0.isEmpty();
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("RB", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.1342029606832194
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775381L, 9223372036854775381L);
      Range range1 = range0.asRange();
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.9812029460842977
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.ofLength(1210L);
      Range range0 = Range.ofLength(240L);
      Range range1 = Range.of(240L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(241L, long0);
      
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(882L);
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(64202L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.0538382463504266
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 576L, 576L);
      Range range1 = range0.asRange();
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        range0.split((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.1362948986760317
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(4744L);
      Range range1 = Range.of(1816L);
      Range range2 = Range.of(2084L);
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
      
      String string0 = range2.toString();
      assertEquals("[ 2084 .. 2084 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.parseRange("[ 2084 .. 2084 ]/0B", range_CoordinateSystem0);
      assertFalse(range3.equals((Object)range1));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.6897618907690553
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Long long0 = new Long(0L);
      Object object0 = new Object();
      Range range0 = Range.ofLength(0L);
      long long1 = range0.getEnd();
      assertEquals((-1L), long1);
      
      long long2 = range0.getBegin();
      assertEquals(0L, long2);
      
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range1.equals(long0);
      assertFalse(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.9805588237010445
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 545L, 545L);
      range0.toString();
      Range range1 = Range.of(range_CoordinateSystem0, 545L, 545L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.parseRange("[ 545 .. 544 ]/0B", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      range_Builder1.expandBegin((-743L));
      String string0 = "org.jcvi.jillion.core.Range$Builder";
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-128L);
      long long1 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), 0L);
      String string0 = "*GU";
      range_Builder0.expandBegin((-128L));
      // Undeclared exception!
      try { 
        Range.parseRange("*GU", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse *GU into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.2013835344355432
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Long long0 = new Long(1L);
      Object object0 = new Object();
      Long long1 = new Long((-128L));
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4767L, 4767L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      List<Range> list0 = range0.split(1L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(range0.isEmpty());
      assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of((-2165L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.ofLength(1210L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.205126224494023
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-1261L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-1261L));
      Range range2 = Range.of((-2185L));
      range2.complement(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Long long0 = new Long(9223372036854775381L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 9223372036854775380L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775381L, 9223372036854775380L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.0612997224250416
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 48L, 1210L);
      Range range1 = Range.ofLength(1210L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.ofLength(1210L);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.387726255250662
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-128L));
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(2, list1.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals((-128L), long0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.2068737305139745
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      range0.toString(range_CoordinateSystem0);
      long long0 = 859L;
      Range.Builder range_Builder0 = new Range.Builder(859L);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 859L, 859L);
      Range range1 = range_Builder0.build();
      range1.complement(range0);
      try { 
        Long.valueOf("[ 255 .. 255 ]/RB", 1993);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1993 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 409L;
      Range range0 = Range.of(range_CoordinateSystem0, 409L, 409L);
      long long1 = 1722L;
      range0.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(235L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.0599988624120327
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.8936935921261018
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-681L), (-681L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range1.isSubRangeOf(range0);
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        range0.split((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-2147483648L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.6890278560247443
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1592L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = 1210L;
      Range range0 = Range.ofLength(1210L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775381L, (-3311L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3312 would make range [9223372036854775380 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.7969671154659554
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.toString();
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getEnd(range_CoordinateSystem0);
      range2.equals(range1);
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("@\u0007bmm 8)AFo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.@\u0007bmm 8)AFo
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.6884526475116584
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-89L));
      String string0 = range0.toString();
      assertEquals("[ -89 .. -89 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-88L), long0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("@\u0007bmm 8)AFo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.@\u0007bmm 8)AFo
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.6910517378300467
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.toString();
      Range range1 = Range.ofLength(0L);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Range range1 = Range.ofLength(0L);
      range0.intersection(range1);
      Long long0 = new Long((-679L));
      Object object0 = new Object();
      Long long1 = new Long(2409L);
      boolean boolean0 = range1.equals(long1);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Long long0 = new Long(9223372036854775381L);
      Long long1 = new Long(0L);
      Long.compareUnsigned((-2091L), (-2091L));
      Range range0 = Range.ofLength(9223372036854775381L);
      range0.equals(long1);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Long long0 = new Long(1552L);
      Range range0 = Range.ofLength(2075L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.9846095612556187
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.ofLength(408L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals((-127L), long0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-928L), 1552L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      range_Builder0.expandBegin(2048L);
      range_Builder1.contractEnd(2482L);
      Range.Builder range_Builder2 = range_Builder1.shift(0L);
      assertSame(range_Builder2, range_Builder1);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      long long0 = 1626L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1626L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.8906488959867764
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9L, 9L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1040L), 2288L);
      long long0 = range0.getEnd();
      assertEquals(2287L, long0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-1846L);
      range_Builder0.expandEnd((-1846L));
      // Undeclared exception!
      try { 
        Range.parseRange("P\"'kf", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse P\"'kf into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.204453078800052
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 420L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.iterator();
      int int0 = 1996;
      String string0 = "org.jcvi.jillion.core.Range$EmptyLongRange";
      int int1 = (-2564);
      // Undeclared exception!
      try { 
        range0.split(9223372034707292161L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4294966875 would make range [9223372034707292581 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.05979471828628
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Long long0 = new Long(1717L);
      Object object0 = new Object();
      Range range0 = Range.ofLength(1717L);
      range0.getBegin();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.split(1717L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of(3380L);
      range0.getEnd();
      range0.split(1015L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1890L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1890L, 1178L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of(2477L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(859L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      boolean boolean0 = range0.equals(range_Builder0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1105L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(4294967977L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1125L), (-1125L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of((-3368L), (-3368L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = 547L;
      long long1 = (-498L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(547L, (-498L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(2075L, 247L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1587L), (-341L));
      String string0 = "9vpjzZ1p:]%LaLVrw7z";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("9vpjzZ1p:]%LaLVrw7z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.9vpjzZ1p:]%LaLVrw7z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1507L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = 9223372036854775381L;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 9223372036854775381L, 9223372036854775381L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-341L), (-1587L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
