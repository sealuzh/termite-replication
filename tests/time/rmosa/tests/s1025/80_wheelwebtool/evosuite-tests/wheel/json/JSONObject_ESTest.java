/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 11:47:35 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Double double0 = new Double(Double.NaN);
      Float float0 = new Float(Double.NaN);
      hashMap0.put(double0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Object) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject1.write(stringWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.49230769230769234
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("5o<QS=A)+2sH#}<5", false);
      try { 
        jSONObject1.getDouble("5o<QS=A)+2sH#}<5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5o<QS=A)+2sH#}<5\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3939596245886303
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("o/>pC", true);
      boolean boolean0 = jSONObject1.optBoolean("o/>pC");
      assertTrue(boolean0);
      
      int int0 = jSONObject1.optInt("o/>pC");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("[", (Collection) linkedList0);
      JSONObject.getNames((Object) linkedList0);
      JSONObject.getNames(jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      String string0 = jSONObject0.toString(1031, 1031);
      assertNotNull(string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5888083670994821
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("c&U];", hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("/8=*xw?pJfj", 2042);
      jSONObject2.getLong("/8=*xw?pJfj");
      Float float0 = new Float(508.46826F);
      JSONObject.getNames((Object) float0);
      jSONObject1.toString(83, 65);
      jSONObject1.put("7", (Object) jSONObject0);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("%$@Q=m=", (Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject1.put("%$@Q=m=", (Collection) linkedList0);
      jSONObject0.getJSONArray("%$@Q=m=");
      jSONObject1.toString();
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("wheel.json.JSONObject", jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("1CGSI", 2664);
      Double double0 = new Double(2664);
      jSONObject1.accumulate("wheel.json.JSONObject", double0);
      JSONObject.getNames(jSONObject1);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of is
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("%$@Q=m=", (Map) hashMap0);
      jSONObject0.getString("%$@Q=m=");
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.getJSONArray("%$@Q=m=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%$@Q=m=\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5696376201112083
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", jSONArray0);
      jSONObject1.optLong("Eo] RQ9&WCt+VJx");
      JSONObject jSONObject2 = jSONObject0.put("1CGSI", 2664);
      jSONObject2.getInt("1CGSI");
      JSONObject.getNames(jSONObject2);
      boolean boolean0 = jSONObject1.optBoolean((String) null);
      assertEquals(2, jSONObject1.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(hashMap0, 2243, 45);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("&<rF\"", jSONObject0);
      jSONObject0.optJSONObject("&<rF\"");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Object) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.names();
      String string0 = jSONObject1.optString("wheel.json.JSONArray");
      assertNotNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("co", object0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.names();
      String string1 = jSONObject1.optString("co", "co");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "%$@Q=m=";
      JSONObject jSONObject1 = jSONObject0.put("%$@Q=m=", (Map) hashMap0);
      jSONObject1.get("%$@Q=m=");
      try { 
        jSONObject0.append("%$@Q=m=", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[%$@Q=m=] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4999704299485481
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(8448, false);
      jSONArray0.put(9, (Collection) null);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.693465178839979
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Short short0 = new Short((short) (-1138));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (-511));
      jSONObject0.put("wheel.json.JSONArray", 1857);
      jSONObject0.optInt("$g+W+e9]kaZmYkGL*", 32);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject2 = jSONObject0.put("$g+W+e9]kaZmYkGL*", (Map) hashMap0);
      jSONObject2.toJSONArray((JSONArray) null);
      jSONObject2.toString((-511));
      jSONObject0.toString(32);
      jSONObject1.toString((-511), 32);
      jSONObject1.put("{\n\"java.lang.String@0000000007\": {},\n\"java.lang.String@0000000002\": java.lang.Integer@0000000004\n                                }", false);
      jSONObject0.remove("{\n                                \"java.lang.String@0000000007\": {},\n                                \"java.lang.String@0000000002\": java.lang.Integer@0000000004\n}");
      JSONObject jSONObject3 = jSONObject2.accumulate("_ET;2I", (Object) null);
      boolean boolean0 = jSONObject3.isNull("$g+W+e9]kaZmYkGL*");
      assertEquals(3, jSONObject2.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "Eh`nIx42ix;\\V";
      JSONTokener jSONTokener0 = new JSONTokener("Eh`nIx42ix;V");
      int int0 = 6;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("\r", 6);
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("Eh`nIx42ix;V", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.numberToString(double0);
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double.min(0.0, 1930.95);
      JSONObject.quote("to");
      try { 
        jSONObject0.put((String) null, 1774L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("Eh`nIx42ix;V");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject.getNames((Object) jSONTokener0);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      hashMap0.put("{}", "Eh`nIx42ix;V");
      jSONObject0.put("Eh`nIx42ix;V", (Map) hashMap0);
      jSONObject0.getJSONObject("Eh`nIx42ix;V");
      JSONObject.quote("Eh`nIx42ix;V");
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject0.putOpt("", boolean0);
      boolean boolean1 = jSONObject0.optBoolean("");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("false", (Object) "false");
      boolean boolean0 = jSONObject1.optBoolean("false");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5901377123969231
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-3));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = "/&{]e2;}RkJ'A2a8?*";
      Short short0 = Short.valueOf((short) (byte) (-3));
      Byte.toUnsignedInt((byte) (-3));
      JSONObject jSONObject1 = jSONObject0.accumulate("/&{]e2;}RkJ'A2a8?*", short0);
      jSONObject0.getLong("/&{]e2;}RkJ'A2a8?*");
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject1.accumulate("A*uo=lA", boolean0);
      jSONObject1.optDouble("/&{]e2;}RkJ'A2a8?*");
      jSONObject0.get("/&{]e2;}RkJ'A2a8?*");
      short short1 = (short) (-3179);
      Short.toUnsignedLong((short) (-3179));
      JSONObject.valueToString(short0, (short) (-3179), 253);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      jSONObject1.put("/&{]e2;}RkJ'A2a8?*", (Map) hashMap0);
      String string1 = null;
      String string2 = "\"\"";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Short short0 = new Short((short) (-1121));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wheeljson.JSONArray";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.put("wheeljson.JSONArray", (-511));
      jSONObject0.optDouble("wheeljson.JSONArray", (double) (short) (-1121));
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(9, (Collection) null);
      jSONObject0.toJSONArray(jSONArray0);
      Float float0 = new Float(0.0F);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.accumulate(",:]}/\"[{;=#", jSONArray0);
      String string0 = "si";
      JSONObject.quote("si");
      try { 
        jSONObject1.getDouble(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Double double0 = new Double(Double.NaN);
      Double.max(Double.NaN, 281.3283856336539);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5925881922825673
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject.doubleToString(54.126650510110004);
      JSONObject jSONObject0 = new JSONObject((Object) "54.126650510110004");
      JSONObject.getNames(jSONObject0);
      // Undeclared exception!
      jSONObject0.toString(597, 8);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Expected a ',' or '}'";
      stringArray0[1] = "t3:2x|wU'z8rQy$OV=";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("isparseByte", "isparseByte");
      Float float0 = new Float((float) 102);
      jSONObject1.accumulate("t3:2x|wU'z8rQy$OV=", float0);
      JSONObject.quote("Expected a ',' or '}'");
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.optJSONArray("isparseByte");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1815192735832012
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Expected a ',' or '}'";
      stringArray0[1] = "t3:2x|wU'z8rQy$OV=";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("isparseByte", "isparseByte");
      Float float0 = new Float((float) 102);
      JSONObject jSONObject2 = jSONObject1.accumulate("t3:2x|wU'z8rQy$OV=", float0);
      jSONObject2.optInt("t3:2x|wU'z8rQy$OV=", 3939);
      Object object1 = new Object();
      Byte byte0 = new Byte((byte)4);
      jSONObject2.append("isparseByte", byte0);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", jSONArray0);
      Object object1 = JSONObject.NULL;
      jSONObject1.append("wheel.json.JSONObject", object1);
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      jSONArray0.put((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.toJSONArray(jSONArray0);
      try { 
        jSONObject2.getInt("`.ApDUs@wm9GXdM^G[6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`.ApDUs@wm9GXdM^G[6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("X-");
      assertEquals("", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clone();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("c&UO;", "c&UO;");
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.accumulate("c&UO;", jSONObject0);
      boolean boolean0 = jSONObject0.optBoolean("c&UO;");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Expected a ',' or '}'", (Map) hashMap0);
      jSONObject0.getJSONObject("Expected a ',' or '}'");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("{}", 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.putOpt("j_^Vn`", boolean0);
      try { 
        jSONObject1.append("j_^Vn`", "wheel.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[j_^Vn`] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      String string0 = ",\n";
      JSONObject.quote(",\n");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "co";
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("co", object0);
      try { 
        jSONObject1.append("co", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[co] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Expected a ',' or '}'";
      stringArray0[1] = "t3:2x|wU'z8rQy$OV=";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("isparseByte", "isparseByte");
      Float float0 = new Float((float) 102);
      jSONObject1.accumulate("t3:2x|wU'z8rQy$OV=", float0);
      JSONObject.quote("Expected a ',' or '}'");
      jSONObject1.getDouble("t3:2x|wU'z8rQy$OV=");
      JSONObject jSONObject2 = new JSONObject((Object) "Expected a ',' or '}'");
      Integer integer0 = new Integer((-382));
      assertEquals((-382), (int)integer0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getlongBitsToDouble", false);
      JSONObject jSONObject2 = jSONObject1.put("getlongBitsToDouble", (-209L));
      jSONObject2.getDouble("getlongBitsToDouble");
      JSONObject.quote("getlongBitsToDouble");
      try { 
        jSONObject0.getBoolean("getlongBitsToDouble");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getlongBitsToDouble\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "&<rF\"";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("&<rF\"", "&<rF\"");
      try { 
        jSONObject1.getDouble("&<rF\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&<rF\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      jSONObject0.put("co", object0);
      Float float0 = new Float(Double.NaN);
      Byte byte0 = new Byte((byte) (-23));
      hashMap0.put(float0, byte0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5736944152430543
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Short short0 = new Short((short) (-1138));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (-511));
      jSONObject0.optInt("$g+W+e9]kaZmYkGL*", 32);
      Short.compare((short) (-1138), (short) (-1138));
      Object object0 = new Object();
      JSONObject.getNames(object0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject2 = jSONObject0.put("$g+W+e9]kaZmYkGL*", (Map) hashMap0);
      jSONObject2.toString((-511));
      jSONObject0.toString(0);
      jSONObject0.opt("rep");
      JSONObject.quote((String) null);
      jSONObject1.has("$g+W+e9]kaZmYkGL*");
      JSONObject jSONObject3 = jSONObject0.putOpt("&", (Object) null);
      assertSame(jSONObject3, jSONObject1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("Eh`nIx42ix;V");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap2);
      jSONObject1.optInt("Eh`nIx42ix;V", (-501));
      jSONObject1.optInt("\r", 0);
      Integer integer0 = new Integer((-5000));
      Integer integer1 = new Integer(6);
      Short short0 = new Short((short) (-1897));
      JSONObject.getNames((Object) short0);
      try { 
        jSONObject1.getJSONObject("pgn%dw-`s1F={d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pgn%dw-`s1F={d\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.2842967826608906
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      Short short0 = new Short((short)0);
      JSONObject.numberToString(short0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("java.lang.Short@0000000001", (int) (short)0);
      Short.compare((short) (-1420), (short) (-1420));
      Object object0 = new Object();
      JSONObject.getNames((Object) short0);
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      JSONObject jSONObject1 = jSONObject0.put("Unterminathed string", (Map) hashMap2);
      jSONObject1.toString(32);
      jSONObject0.toString(0);
      String string0 = "rep";
      jSONObject0.opt("Unterminathed string");
      JSONObject.quote("rep");
      JSONTokener jSONTokener0 = new JSONTokener("ro");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ro
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.isNull("getaddFirst");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("getaddFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getaddFirst
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean(" of ", true);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("&<rF\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&<rF\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONArray0, stringArray0);
      jSONObject0.append("t3:2x|wU'z8rQy$OV=", "ismin");
      Float float0 = new Float((-71.1F));
      JSONObject jSONObject2 = jSONObject1.accumulate("ismin", (Object) null);
      jSONObject2.toString((-384), 45);
      jSONObject2.put("ismin", true);
      assertEquals(1, jSONObject1.length());
      
      Object object1 = jSONObject1.remove("ismin");
      assertEquals(true, object1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("1?F^Z\"Xoeq5L-", (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject.quote("xuOi$NR{Y+$;9;/D7");
      JSONTokener jSONTokener0 = new JSONTokener("\"xuOi$NR{Y+$;9;/D7\"");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"xuOi$NR{Y+$;9;/D7\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      Float float0 = new Float(1103.29F);
      Byte byte0 = new Byte((byte)14);
      hashMap0.put(float0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("co", object0);
      jSONObject1.putOpt("co", "co");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Object) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.878602053427583
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Short short0 = new Short((short) (-1138));
      Integer integer0 = new Integer((-5871));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("\b", (double) (-5871));
      jSONObject1.toString();
      jSONObject1.toString();
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000004\":java.lang.Double@0000000005,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Short short0 = new Short((short) (-417));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      HashMap<JSONArray, JSONObject> hashMap1 = new HashMap<JSONArray, JSONObject>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{$r63dev5U&s1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 13 of {$r63dev5U&s1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString((String) null, (String) null);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optInt(2203);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray1.getJSONObject(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[4] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("j_^Vn`", object0);
      try { 
        jSONObject0.getBoolean("j_^Vn`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j_^Vn`\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("+P5Nb4fI!bL`=", hashMap0);
      try { 
        jSONObject1.getBoolean("+P5Nb4fI!bL`=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+P5Nb4fI!bL`=\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("c&U];", "c&U];");
      try { 
        jSONObject1.getBoolean("c&U];");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"c&U];\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("] not found.");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("to");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = JSONObject.doubleToString(53.985971);
      assertEquals("53.985971", string0);
      
      JSONArray jSONArray0 = new JSONArray();
      String string1 = JSONObject.valueToString(jSONArray0, (-4336), 1102);
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("j_^Vn`", hashMap0);
      jSONObject0.append("wheel.json.JSONObject$Null", (Object) null);
      Double double0 = new Double((-2042.99));
      Float float0 = new Float((-2042.99));
      HashMap<Double, Float> hashMap1 = new HashMap<Double, Float>();
      Float float1 = new Float(0.0);
      hashMap1.put(double0, float1);
      Object object1 = JSONObject.NULL;
      jSONObject0.toString((-105), 50);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.2745180899177098
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Short short0 = new Short((short) (-1138));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      int int0 = (-511);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (-511));
      int int1 = 32;
      Short short1 = new Short((short) (-1138));
      Object object0 = new Object();
      JSONObject.getNames(object0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      String string0 = "co";
      jSONObject1.put("co", (Map) hashMap0);
      // Undeclared exception!
      jSONObject1.toString(2147483645);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.285430355304004
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer(361);
      Integer integer1 = new Integer(361);
      Integer integer2 = new Integer(12);
      Short short0 = new Short((short)9);
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = "\\b";
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("/9V6x,U6", 0.0);
      jSONObject0.optLong("", 1L);
      jSONObject0.optLong((String) null, 669L);
      JSONObject.quote("");
      jSONObject2.toString();
      Object object0 = JSONObject.NULL;
      Long long0 = new Long(2265L);
      jSONObject1.put("\b", (Object) long0);
      jSONObject1.toString(593);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-506), (-1442));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1127160701764929
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.optString("}Z-pGArf&@v", "ac");
      jSONObject0.putOpt("bTbF)p2", "}Z-pGArf&@v");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 41, (-1136));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((-1231), (-1231));
      jSONObject0.optJSONArray("{}");
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("wheel.json.JSONTokener", 0L);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("&<rF", "&<rF");
      boolean boolean0 = new Boolean("&<rF");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("is", (Object) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Object object0 = new Object();
      Integer integer0 = new Integer((-14530064));
      hashMap0.put(object0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = 1L;
      Long long1 = new Long(1L);
      Long.divideUnsigned((-1224L), 1L);
      JSONObject jSONObject1 = jSONObject0.accumulate(",", long1);
      jSONObject1.names();
      jSONObject0.optLong(",");
      try { 
        jSONObject0.getBoolean("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("&LX[!{?,RCJkwW7!YH");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = JSONObject.quote(":-{v.]/r");
      assertEquals("\":-{v.]/r\"", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject.getNames((Object) null);
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("WpSC+9u3", (-1950L));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      Short short0 = new Short((short)160);
      hashMap0.put("&]%:jN6m?4I&8z($", short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0, 101, 931);
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("{}", false);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("&<rF\"", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.toJSONObject(jSONArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "isputOpt";
      stringArray0[1] = "\"'7lD/kOtcIp~~dP";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.putOpt("&<rF\"", object0);
      try { 
        jSONObject0.getInt("&<rF\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&<rF\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "t3:2x|wU'z8rQy$OV=";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("isparseByte", "isparseByte");
      Float float0 = new Float((float) 102);
      JSONObject jSONObject2 = jSONObject1.accumulate("t3:2x|wU'z8rQy$OV=", float0);
      jSONObject2.optInt("t3:2x|wU'z8rQy$OV=", 3939);
      assertEquals(2, jSONObject0.length());
      
      Object object1 = new Object();
      Double double0 = new Double(211.48971);
      String[] stringArray1 = JSONObject.getNames((Object) double0);
      assertEquals(11, stringArray1.length);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "Q(\"V9cu";
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("Q(\"V9cu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Q(\\\"V9cu\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("ishashCode", "YBSmwIT|");
      assertEquals("YBSmwIT|", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = (-2306);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.max(2635.6375F, 2635.6375F);
      Float.isFinite(0.0F);
      jSONObject0.has("");
      Float.isFinite(0.0F);
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("R7i", 0.0);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("\"\"", (-2717.28422));
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.quote("aOeDkfs\"JA$X");
      assertEquals("\"aOeDkfs\\\"JA$X\"", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\"K";
      try { 
        jSONObject0.getInt("\"K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"K\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject0.accumulate((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Short short0 = new Short((short) (-1138));
      String[] stringArray0 = new String[19];
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Object object1 = jSONObject0.opt((String) null);
      assertNull(object1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("G@]nup4p^R?e]m", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "lo";
      jSONObject0.remove("lo");
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.append("lo", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Short short0 = new Short((short) (-1138));
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Float float0 = new Float((float) (-511));
      try { 
        jSONObject0.accumulate(stringArray0[0], stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONObject0.optLong("", 1188L);
      assertEquals(1188L, long0);
      
      jSONArray0.put(false);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      jSONObject0.put("co", object0);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = jSONObject0.toString(35, (-3169));
      assertNotNull(string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("24r0P][ou`[lv{>UH3M", jSONArray0);
      try { 
        jSONObject1.getLong("24r0P][ou`[lv{>UH3M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"24r0P][ou`[lv{>UH3M\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>(hashMap1);
      Byte byte0 = new Byte((byte) (-65));
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Short short0 = new Short((short) (-1138));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (int) (short) (-1138));
      jSONObject1.getLong("wheel.json.JSONArray");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = JSONObject.valueToString("", 2209, 2209);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer(2209);
      String string0 = JSONObject.valueToString(integer0, 2209, 485);
      assertNotNull(string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 9, (-8323580));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.valueToString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = new Integer(1);
      String string0 = JSONObject.valueToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(4, 4);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("j_^Vn`", object0);
      jSONObject1.append("wheel.json.JSONObject$Null", (Object) null);
      Double double0 = new Double((-2042.99));
      Float float0 = new Float((-2042.99));
      hashMap0.put(double0, float0);
      Object object1 = JSONObject.NULL;
      jSONObject1.toString((-105), (-105));
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Byte, Short> hashMap0 = new HashMap<Byte, Short>();
      hashMap0.remove((Object) null, (Object) null);
      Byte byte0 = new Byte((byte)117);
      Byte.toUnsignedLong((byte)44);
      Short short0 = new Short((byte)117);
      hashMap0.put(byte0, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(2, 2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Short short0 = new Short((short)0);
      hashMap1.put(short0, jSONObject0);
      String string0 = jSONObject0.toString(12);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Long long0 = new Long((-1566L));
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("null", (Object) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Short short0 = new Short((short) (-13842));
      JSONObject.testValidity(short0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.remove("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of gettoString
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = JSONObject.quote("%T6;CBa8crlUuS");
      assertEquals("\"%T6;CBa8crlUuS\"", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("aPD>", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      try { 
        jSONObject0.put((String) null, (Object) "co");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      Object object0 = new Object();
      jSONObject1.put("ql%?", 0.0);
      jSONObject0.put("A JSONArray text must start with '['", (Object) "wheel.json.JSONArray");
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "/Qv]#?x";
      // Undeclared exception!
      try { 
        stringWriter0.write("/Qv]#?x", 91, 91);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float float0 = new Float(1383.50780747496);
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("&?k;2+\"t6&_e", (-580L));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Short short0 = new Short((short)3);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("pa>rov%B");
      assertNull(object0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Byte byte0 = new Byte((byte)1);
      Integer integer0 = new Integer((-1217));
      hashMap0.put(byte0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "',<F\"";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("',<F\"", object0);
      try { 
        jSONObject1.getLong("',<F\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"',<F\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("'?R)8t|,~{-Dy%pJbb_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'?R)8t|,~{-Dy%pJbb_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "co";
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("co", object0);
      String string1 = null;
      long long0 = (-729L);
      try { 
        jSONObject1.getJSONObject("co");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"co\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("~C<+A1\"I");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~C<+A1\"I
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("k 'nG{Xv2yAy~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of k 'nG{Xv2yAy~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
