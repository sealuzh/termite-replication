/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 11:50:23 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.Mode;
import freemind.modes.schememode.SchemeController;
import java.awt.AWTEventMulticaster;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.geom.Rectangle2D;
import java.io.PrintStream;
import java.text.AttributedCharacterIterator;
import java.text.DateFormatSymbols;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JList;
import javax.swing.JTextPane;
import javax.swing.JToolBar;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.BevelBorder;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.plaf.multi.MultiOptionPaneUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.apps.svgbrowser.JSVGViewerFrame;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xerces.parsers.CachingParserPool;
import org.apache.xerces.parsers.DTDConfiguration;
import org.apache.xerces.parsers.XIncludeAwareParserConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.apache.xerces.xni.grammars.XMLGrammarPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(689);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      jToolBar_Separator0.updateUI();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1608), 689, (-1608), 689, 'I');
      keyEvent0.getExtendedKeyCode();
      keyEvent0.consume();
      ActionEvent actionEvent0 = new ActionEvent(jToolBar_Separator0, 0, "day", 0L, 20);
      actionEvent0.setSource(jToolBar_Separator0);
      jDayChooser0.getTreeLock();
      jDayChooser0.setMonth((-1608));
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.800934927977544
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      MultiListUI multiListUI0 = new MultiListUI();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.initDecorations();
      jDayChooser0.getLocale();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PrintStream printStream0 = DebugGraphics.logStream();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, printStream0, 28, 28);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(4);
      SystemColor systemColor0 = SystemColor.menuText;
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      jToolBar_Separator0.removeFocusListener(basicComboBoxEditor0);
      jToolBar_Separator0.transferFocus();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jToolBar_Separator0, (-622), (-190L), (-3195), 32, '*', 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.YELLOW;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 894.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-30.9F);
      floatArray0[3] = (-1422.0F);
      floatArray0[4] = (-3448.447F);
      floatArray0[5] = (-290.74753F);
      color0.getComponents(floatArray0);
      jDayChooser0.enableInputMethods(false);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      ActionEvent actionEvent0 = new ActionEvent("I_ OLF*+z e<`IMn(Sb", (-20), "I_ OLF*+z e<`IMn(Sb", (-20), (-629));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Object object0 = jDayChooser0.getTreeLock();
      jDayChooser0.getTreeLock();
      actionEvent0.setSource(object0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8929, 8929, 833, 34, 'm');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 13, (-1787L), (-205), 8929, 'm');
      keyEvent0.getExtendedKeyCode();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.YELLOW;
      color0.getColorSpace();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-105);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 39, 39, 39, '3');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.YELLOW;
      color0.getColorSpace();
      jDayChooser0.enableInputMethods(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 34, 34, 38, '!');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setEnabled(false);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(689);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1608), 689, (-1608), 689, 'I');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      SystemColor systemColor0 = SystemColor.activeCaption;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-1608);
      JList<Object> jList0 = new JList<Object>((Vector<?>) null);
      assertFalse(jList0.getIgnoreRepaint());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8961887881567323
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      BevelBorder bevelBorder0 = new BevelBorder((-1437625606));
      bevelBorder0.getShadowOuterColor((Component) jDayChooser0);
      Rectangle rectangle0 = bevelBorder0.getInteriorRectangle((Component) jDayChooser0, 12, 14, 14, 21);
      Rectangle rectangle1 = jDayChooser0.getBounds(rectangle0);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("1");
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jDayChooser0, 0, 12, 337, 0, (-1826), 0, 0, 21, true, menuElementArray0, menuSelectionManager0);
      menuSelectionManager0.processMouseEvent(menuDragMouseEvent0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, 0L, 0, 14, 'U', (MenuElement[]) null, menuSelectionManager0);
      rectangle0.add(rectangle1);
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, (-1437625606), 0L, 0, 20, 'k', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent1);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "18");
      boolean boolean0 = false;
      jDayChooser0.setDayBordersVisible(false);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "18");
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.isDayBordersVisible();
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInputMap();
      Vector<Calendar> vector0 = new Vector<Calendar>();
      JList<Object> jList0 = new JList<Object>(vector0);
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.57852073136676
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate(695, (-2348), 695);
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.801687426925823
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser1, (-3486), "day");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      actionEvent0.setSource(defaultTableModel0);
      jDayChooser0.getTreeLock();
      actionEvent0.paramString();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getRolloverIcon();
      JButton jButton0 = new JButton((Icon) null);
      actionEvent0.setSource(jButton0);
      jDayChooser1.setMonth(13);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.063182573009241
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getDayPanel();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      jDayChooser0.setCalendar(calendar0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.800878608352407
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocation((Point) null);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(140.0, dimension0.getHeight(), 0.01);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(true);
      ActionEvent actionEvent0 = new ActionEvent("I_ OLF*+z e<`IMn(Sb", 0, "org.apache.xpath.operations.Div", 0, 0);
      Object object0 = jDayChooser0.getTreeLock();
      actionEvent0.setSource(object0);
      Object object1 = jDayChooser0.getTreeLock();
      dimension0.height = 1;
      actionEvent0.paramString();
      actionEvent0.setSource(object1);
      jDayChooser0.setMonth(223);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Object object0 = jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(object0, 1999, "day");
      actionEvent0.setSource((Object) null);
      jDayChooser0.getTreeLock();
      actionEvent0.paramString();
      actionEvent0.setSource("bg9fY,");
      jDayChooser0.setMonth(13);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.801667661801385
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setYear(1299);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5777114378736075
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setInheritsPopupMenu(false);
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setMaxDayCharacters(3);
      SystemColor systemColor0 = SystemColor.menuText;
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(true);
      jDayChooser0.drawDays();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.896266608303257
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      BevelBorder bevelBorder0 = new BevelBorder(4);
      Rectangle rectangle0 = bevelBorder0.getInteriorRectangle((Component) jDayChooser0, 21, 20, 20, 14);
      Rectangle rectangle1 = jDayChooser0.getBounds(rectangle0);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-2625), (-2625), (-2625), (-2960), 't', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      Rectangle2D.union(rectangle1, rectangle0, rectangle1);
      MockDate mockDate0 = new MockDate((-2960), 1875, 6, (-2625), 6);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      Cursor cursor0 = JSVGViewerFrame.WAIT_CURSOR;
      jDayChooser0.setCursor(cursor0);
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-364), 0, 0, 38, '*');
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.CYAN;
      jDayChooser0.setSundayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 5, 5, 41, 164, '%');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5777350570381974
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.setMaxDayCharacters(0);
      SystemColor systemColor0 = SystemColor.menuText;
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.isFocusable();
      jDayChooser0.setDayBordersVisible(false);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, inputMethodListener1);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      Boolean boolean0 = new Boolean(false);
      jDayChooser0.initDecorations();
      SymbolTable symbolTable0 = new SymbolTable();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(210);
      CachingParserPool.SynchronizedGrammarPool cachingParserPool_SynchronizedGrammarPool0 = new CachingParserPool.SynchronizedGrammarPool(xMLGrammarPoolImpl0);
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0);
      DTDConfiguration dTDConfiguration0 = new DTDConfiguration(symbolTable0, (XMLGrammarPool) null, xIncludeAwareParserConfiguration0);
      Locale locale0 = new Locale("Stylesheet PIs found, stop the parse", "day", " 1(!qbE3IFUT");
      jDayChooser0.setLocale(locale0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setInheritsPopupMenu(false);
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      jDayChooser0.setMaxDayCharacters(3);
      SystemColor systemColor0 = SystemColor.menuText;
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 14, 103, 103, 1932, '+', 42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      jDayChooser0.addFocusListener(basicComboBoxEditor0);
      String[] stringArray0 = new String[2];
      jDayChooser0.getGraphics();
      jDayChooser0.init();
      jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(1);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 31, 0, 1, 474, '$', 228);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Object object0 = jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(object0, 1999, "day");
      actionEvent0.setSource((Object) null);
      jDayChooser0.getTreeLock();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2064000360857086
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setForeground((Color) null);
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.getHeight();
      jDayChooser0.setEnabled(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getLocale();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.initDecorations();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.initDecorations();
      jDayChooser0.keyTyped((KeyEvent) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2967), false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8961031581030303
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.decorationBordersVisible = true;
      jDayChooser0.setLocation(5144, 5144);
      jDayChooser0.getFocusListeners();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.initDecorations();
      jDayChooser0.isDecorationBordersVisible();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(5144, 5144, true);
      ActionEvent actionEvent0 = new ActionEvent(keyStroke0, 333, "day", 1043L, 20);
      actionEvent0.setSource(keyStroke0);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8961887881567323
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setInheritsPopupMenu(true);
      jDayChooser0.getLocation((Point) null);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(223, dimension0.width);
      
      jDayChooser0.contains(103, 0);
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      jDayChooser0.setMaxDayCharacters(103);
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      jDayChooser0.initDecorations();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 103, true, jDayChooser0);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 103, false);
      focusEvent1.paramString();
      jDayChooser0.focusGained(focusEvent1);
      SystemColor systemColor1 = SystemColor.activeCaptionText;
      jDayChooser0.setForeground(systemColor1);
      jDayChooser0.setEnabled(false);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getDayPanel();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, documentLoader0);
      float[] floatArray0 = new float[9];
      userAgentAdapter0.getViewportSize();
      jDayChooser0.focusLost((FocusEvent) null);
      floatArray0[1] = (-260.97772F);
      floatArray0[2] = (float) 2;
      floatArray0[5] = (float) 0;
      SchemeController schemeController0 = null;
      try {
        schemeController0 = new SchemeController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9831644895092557
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      jDayChooser0.initDecorations();
      jDayChooser0.keyTyped((KeyEvent) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 43, true, jDayChooser0);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 43);
      jDayChooser0.focusGained(focusEvent1);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getSelectionColor();
      jDayChooser0.setForeground(color0);
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      basicComboBoxEditor0.addActionListener(jDayChooser0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 63720, true);
      basicComboBoxEditor0.focusLost(focusEvent0);
      jDayChooser0.addFocusListener(basicComboBoxEditor0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDecorationBackgroundColor();
      KeyStroke.getKeyStroke("day");
      jDayChooser0.setDebugGraphicsOptions((-597));
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, (-597), "day", 445);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 63720, true);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 63720);
      basicComboBoxEditor0.focusLost(focusEvent1);
      jDayChooser0.addFocusListener(basicComboBoxEditor0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6963003629184747
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext styleContext1 = new StyleContext();
      jDayChooser0.setAlwaysFireDayProperty(false);
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext1.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("day", styleContext_NamedStyle0);
      styleContext0.getFont((AttributeSet) styleContext_NamedStyle1);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setFocus();
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      MultiListUI multiListUI0 = new MultiListUI();
      Stack<JButton> stack0 = new Stack<JButton>();
      JList<Object> jList0 = new JList<Object>(stack0);
      jDayChooser0.getSelectedDay();
      stack0.add((JButton) null);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jList0, 4250, (-1909L), 987, 3550, 'q', 1459);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDay();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      String string0 = "Df?e";
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "Df?e", 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-104);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.transferFocus();
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      KeyStroke.getKeyStroke(40, 40, false);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getTreeLock();
      jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 40, "M%z7q/V|4sIc", (-1813), 228);
      actionEvent0.paramString();
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getTreeLock();
      jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = Color.BLACK;
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      basicComboBoxEditor0.addActionListener(jDayChooser0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 63720, false);
      basicComboBoxEditor0.focusLost(focusEvent0);
      AWTEventMulticaster.remove((FocusListener) basicComboBoxEditor0, (FocusListener) basicComboBoxEditor0);
      jDayChooser0.addFocusListener((FocusListener) null);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8961408868334586
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setWeekdayForeground((Color) null);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertNull(color0);
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.696303767023144
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      ActionEvent actionEvent0 = new ActionEvent("I_ OLF*+z e<`IMn(Sb", 0, "I_ OLF*+z e<`IMn(Sb", 0, (-362));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Object object0 = jDayChooser0.getTreeLock();
      actionEvent0.setSource(jDayChooser0);
      jDayChooser0.getTreeLock();
      actionEvent0.paramString();
      actionEvent0.setSource(object0);
      Font font0 = new Font((Map<? extends AttributedCharacterIterator.Attribute, ?>) null);
      jDayChooser0.setFont(font0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setFocus();
      jDayChooser1.getWeekdayForeground();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getMinimumSize();
      int int0 = (-5366);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, (-5366), 0L, (-5366), (-5366), 'K', (-5366));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setForeground((Color) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAlignmentY();
      jDayChooser0.getSundayForeground();
      MultiOptionPaneUI multiOptionPaneUI0 = new MultiOptionPaneUI();
      // Undeclared exception!
      try { 
        multiOptionPaneUI0.getMinimumSize(jDayChooser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters((-1835));
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.removeNotify();
      jDayChooser0.setFocus();
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Rectangle rectangle0 = jDayChooser0.getBounds((Rectangle) null);
      jDayChooser0.computeVisibleRect(rectangle0);
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 63720, true);
      basicComboBoxEditor0.focusLost(focusEvent0);
      jDayChooser0.addFocusListener(basicComboBoxEditor0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-458));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }
}
