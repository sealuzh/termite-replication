/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 06:19:34 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5910359335184414
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      Range.ofLength(9223372032559808514L);
      range2.asRange();
      // Undeclared exception!
      range1.split(1L);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = 4294967309L;
      Range.of(4294967309L, 9223372036854775285L);
      // Undeclared exception!
      try { 
        Range.of(4294967309L, (-1839L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.892632114903634
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-2147483651L), (-2237L));
      Range range1 = Range.of((-2147483651L), (-1564L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.6343500511694242
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(9223372036854774389L);
      Range range1 = Range.ofLength(9223372036854774389L);
      range1.complement(range0);
      Long long0 = new Long(9223372036854774389L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2824L, 2824L);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      range0.getEnd();
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(3044L, long0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Long long1 = new Long(32767L);
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1926L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      Object object2 = new Object();
      Range range1 = Range.of(0L, 0L);
      boolean boolean1 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2733L), (-2733L));
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, (-2733L), (-2733L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.588626994421116
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(2058L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals(2059L, long0);
      
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(4294967294L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.892632114903634
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-2147483651L), 842L);
      Long long0 = new Long(842L);
      Range range1 = Range.of((-1564L), 4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2733L), (-2733L));
      Object object0 = new Object();
      range0.equals((Object) null);
      Object object1 = new Object();
      boolean boolean0 = range0.equals("r");
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 4294967295L);
      Long long0 = new Long(3044L);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      Long long1 = new Long(4294967295L);
      range0.equals(range_CoordinateSystem0);
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774389L);
      Range range1 = Range.ofLength(9223372036854774389L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.978882553402459
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of((-966L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-966L), (-966L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.6333108098156126
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(2170L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(2196L);
      Range range2 = Range.of(1602L, 2196L);
      range2.equals(range0);
      range2.getLength();
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 595L, 2170L);
      Range range3 = Range.of(9223372036854774388L);
      range3.endsBefore(range2);
      // Undeclared exception!
      try { 
        Range.parseRange("lO\"og@H>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse lO\"og@H> into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.542152769476976
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of((-540L));
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(2858L);
      boolean boolean0 = range1.endsBefore(range1);
      Range range2 = Range.of((-540L), 2858L);
      assertNotSame(range2, range0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 2858L, 2961L);
      boolean boolean1 = range1.equals(range3);
      assertTrue(boolean1 == boolean0);
      
      Range range4 = Range.ofLength(2961L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(2058L, 9223372036854775807L);
      Range range1 = Range.ofLength(2058L);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(2147483637L);
      Long long0 = new Long(60L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4947460802601054
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(9223372036854774389L);
      Range range1 = Range.of(9223372036854774389L);
      range1.isEmpty();
      Range range2 = Range.ofLength(9223372036854774389L);
      boolean boolean0 = range2.equals(range1);
      long long0 = range1.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
      
      range2.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 9223372036854774389L, 9223372036854774389L);
      boolean boolean1 = range2.endsBefore(range3);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      range3.endsBefore(range2);
      List<Range> list0 = range2.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range2));
      //  // Unstable assertion: assertFalse(range0.equals((Object)range2));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Object object0 = new Object();
      range0.getEnd(range_CoordinateSystem0);
      range0.equals((Object) null);
      Long long0 = new Long(2435L);
      // Undeclared exception!
      try { 
        Range.parseRange("lZ2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse lZ2 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = 9223372036854774389L;
      Range range0 = Range.of(9223372036854772963L);
      Range.of(9223372036854772963L);
      range0.equals((Object) null);
      String string0 = "";
      try { 
        Long.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9802337525917397
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(65579L, 4294967309L);
      Range range1 = Range.of(65579L, 65579L);
      range1.isSubRangeOf(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6870204957035666
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774389L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854774388L, long0);
      
      boolean boolean0 = range0.equals("Rtd+]`}dF<8d*(");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.796560996608503
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-86L));
      Range range1 = Range.of((-86L));
      range1.equals(range0);
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("cE~|3v$DT", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cE~|3v$DT into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483648 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9785775358639506
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-86L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-86L), (-86L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(2048L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.7566801074265825
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 4294967295L);
      range0.getLength();
      Range range1 = Range.of(2147483647L, 4294967295L);
      range0.startsBefore(range0);
      Range range2 = Range.of(4294967320L);
      range2.endsBefore(range0);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.toString(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-773L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = 32767L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-32768L), 32767L);
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-266L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.7571723236037387
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(0L);
      range0.toString(range_CoordinateSystem0);
      Range range2 = Range.parseRange("[ 1 .. 1 ]/RB");
      range1.getEnd();
      Range range3 = range1.intersection(range0);
      range3.toString();
      range1.iterator();
      List<Range> list0 = range3.complement(range0);
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = range3.intersects(range1);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.parseRange("[ 0 .. 0 ]/0B");
      range3.getLength();
      range2.startsBefore(range1);
      Range.of((-2190L));
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      assertEquals("[ 1 .. 1 ]/RB", string0);
      assertSame(range0, range3);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.890202965106063
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 4294967295L);
      long long0 = new Long(3044L);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      Long long1 = new Long(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem2, 3044L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-2012L), (-2012L));
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(1488L);
      Long long0 = new Long(4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.691342224395043
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L));
      range1.equals(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-2147483644L));
      range0.equals((Object) null);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.of((-103L), (-2147483644L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of((-128L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-398L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6912004809506773
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of((-2147483651L));
      Range range1 = Range.of((-2147483651L));
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4418483055913107
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(2147483637L);
      Range range1 = Range.ofLength(2147483637L);
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      range2.complement(range1);
      assertTrue(range2.isEmpty());
      
      Range range3 = range1.intersection(range0);
      assertSame(range3, range2);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.796560996608503
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(9223372036854774389L);
      Range range1 = Range.of(9223372036854774389L);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854774389L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.4433103109948826
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(9223372036854774389L);
      range0.isEmpty();
      Range range1 = Range.ofLength(9223372036854774389L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
      
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.440165474892936
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      Range range1 = Range.of(0L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.ofLength(254L);
      range2.intersection(range0);
      assertNotSame(range2, range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(2147483637L);
      Long long0 = new Long(2147483637L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1014L, 1014L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.7969671154659554
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(1488L);
      Range range1 = Range.of(853L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(854L, long0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-966L), 9223372036854774389L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(2058L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(">w");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-142L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-142L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -143 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-540L));
      Range range1 = Range.of((-536L));
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.796560996608503
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.of(1L);
      Range range1 = Range.of(0L);
      range0.equals(range1);
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("cE~|3v$DT", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cE~|3v$DT into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6916065998081296
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-1385L));
      Range range1 = Range.of((-1385L));
      boolean boolean0 = range0.endsBefore(range1);
      boolean boolean1 = range1.startsBefore(range0);
      assertSame(range1, range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.796560996608503
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(18L);
      range0.equals(range1);
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("cE~b3t$6T", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cE~b3t$6T into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Long long0 = new Long((-128L));
      Range range0 = Range.ofLength(2237L);
      Range range1 = Range.ofLength(842L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-128L));
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(1L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(0L);
      Long.getLong((String) null);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.203195832170171
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(9223372036852937957L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036852937957 .. 9223372036852937957 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 9223372036852937957 .. 9223372036852937957 ]/0B");
      assertSame(range1, range0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.689532269643912
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(3044L);
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(object0);
      Long long0 = new Long(9223372036854774389L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem2, 255L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 2694L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getEnd();
      assertEquals(2693L, long0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.797208748908024
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Range range1 = Range.of(4257L);
      range0.endsBefore(range1);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      long long0 = range0.getBegin();
      assertEquals(2147483647L, long0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.2042908026059695
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(1488L);
      Range range1 = Range.of(853L);
      range0.equals(range1);
      Object object0 = new Object();
      range0.equals(object0);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$EmptyByteRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$EmptyByteRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.2035456965977054
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      range0.iterator();
      range0.split(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2699980486646516
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range0.equals(range1);
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 1735L);
      range2.getBegin();
      boolean boolean1 = range1.endsBefore(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(boolean1 == boolean0);
      
      Range range3 = range1.asRange();
      assertFalse(range3.equals((Object)range2));
      
      List<Range> list0 = range0.split(1L);
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.269444068151731
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(1488L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(853L);
      Range range2 = Range.of((-221L));
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.intersects(range0);
      assertFalse(boolean1);
      
      Long long0 = new Long(2077L);
      Object object0 = new Object();
      long long1 = range1.getLength();
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(1488L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.4421765357275262
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.ofLength(1L);
      range1.toString();
      range0.intersects(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range2.complement(range1);
      range0.intersects(range2);
      range0.getBegin();
      range_CoordinateSystem0.toString();
      Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(3394L, 1196L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-872L));
      boolean boolean0 = range0.equals("2h'>8FPWC");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(9223372036854774789L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.061189958965297
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(1488L);
      Range range1 = Range.of(853L);
      Range range2 = Range.of((-221L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      range2.equals(range0);
      boolean boolean1 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-9223372036854775808L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 32767L, (-9223372036854775808L));
      range_Builder0.build();
      long long1 = (-2147483651L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-2147483651L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.9772143420956936
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 32767L);
      Range range0 = range_Builder0.build();
      range_Builder0.shift((-4997L));
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-2147483644L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483644L), (-2147483644L));
      Object object2 = new Object();
      boolean boolean0 = range1.equals(object2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertSame(range2, range1);
      //  // Unstable assertion: assertNotSame(range1, range0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.267638227190276
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2733L), (-2733L));
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-9223372036854710271L), (-967L));
      Range range1 = range_Builder0.build();
      range_Builder0.shift(65535L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.977443963220837
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(0L);
      assertTrue(range1.isEmpty());
      
      boolean boolean0 = range0.isEmpty();
      assertSame(range0, range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-518L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.of(1L);
      range0.equals(range0);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("cE~|3v$DT", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cE~|3v$DT into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(2048L);
      boolean boolean0 = range0.equals("(Z3\"[5y{");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-86L));
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.0600949885294986
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = 9223372036854774387L;
      Range range0 = Range.of(9223372036854774387L);
      Range range1 = Range.of((-1645L));
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1645 would make range [9223372036854774387 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.9846910396112007
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(1262L, 65535L);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(1120L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1263 .. 65536 ]/RB", string0);
      
      List<Range> list0 = range0.split(1262L);
      assertFalse(list0.contains(range0));
      assertEquals(51, list0.size());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.387669055193462
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-966L));
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.973278742811257
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2733L), (-2733L));
      Object object0 = new Object();
      range0.equals((Object) null);
      Object object1 = new Object();
      boolean boolean0 = range0.intersects(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.2069007758148538
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(9223372036854774406L);
      Long long0 = new Long(9223372036854774406L);
      Range range1 = Range.of(9223372036854774406L, 9223372036854774406L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 9223372036854774406 .. 9223372036854774406 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1006L), (-1006L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483647L, long0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 3044L;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967294L, 4294967294L);
      String string0 = "(Z3\"[5y{";
      range0.equals("(Z3\"[5y{");
      // Undeclared exception!
      try { 
        Range.parseRange("(Z3\"[5y{", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (Z3\"[5y{ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-22760L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-2147483644L));
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1989L);
      long long0 = (-313L);
      range_Builder0.contractEnd((-313L));
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854719018L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-1563L));
      long long0 = range0.getBegin();
      assertEquals((-1563L), long0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.9780573347195083
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(128L);
      range0.toString();
      range0.getBegin();
      range0.iterator();
      // Undeclared exception!
      try { 
        Range.parseRange("[&zo[pj8 0>yS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [&zo[pj8 0>yS into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.9803194938246986
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-86L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-86L), long0);
      
      Range range1 = Range.of(1487L);
      boolean boolean0 = range0.equals(range1);
      Long long1 = new Long((-86L));
      range0.equals(range_CoordinateSystem0);
      String string0 = range1.toString();
      assertEquals("[ 1487 .. 1487 ]/0B", string0);
      
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.687420655767592
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-263L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.1368151771488906
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L);
      Range range2 = Range.of(0L);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.parseRange("[ 1 .. 1 ]/0B", range_CoordinateSystem2);
      range3.toString();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem3, (-2053L), (-2053L));
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-2053L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = (-32768L);
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
      long long1 = (-778L);
      range_Builder0.contractBegin((-778L));
      range_Builder0.shift((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = ".8R1J&3ac|";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(".8R1J&3ac|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem..8R1J&3ac|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = (-86L);
      Range range0 = Range.of((-86L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 4294967294L;
      Range range0 = Range.ofLength(4294967294L);
      String string0 = "(Z3\"[5y{";
      range0.equals("(Z3\"[5y{");
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange("(Z3\"[5y{", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (Z3\"[5y{ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.7938131631694842
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-644L), (-644L));
      range_Builder0.shift((-644L));
      Range range0 = range_Builder0.build();
      String string0 = range0.toString();
      assertEquals("[ -1289 .. -1289 ]/0B", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-86L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-85L), long0);
      
      range0.equals(range_CoordinateSystem0);
      Long long1 = new Long((-85L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      range0.asRange();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.9848941644582636
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(4294967294L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-518L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-518L), long0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.79438837168257
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(103L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 103 .. 104 ]/SB", string0);
      
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(103L, long0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-127L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.2612629753305225
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 2694L);
      range_Builder0.expandBegin((-3401L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(3044L);
      range0.getEnd(range_CoordinateSystem0);
      range0.equals(range_CoordinateSystem0);
      Long long0 = new Long(32767L);
      range0.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 1 .. 3044 ]/RB", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Long long0 = new Long(0L);
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.equals(";*gb(y6DFQZan'A?%96y");
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Long long0 = new Long(0L);
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.9799561547384963
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.of((-2147483651L));
      Range range0 = Range.of((-2147483651L));
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2147483651L), (-2147483651L));
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.expandBegin((-2147483651L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractEnd((-178L));
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.of((-2147483644L));
      Object object0 = new Object();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(293L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2115L), 0L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-5884L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 1488L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1488L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.7931511307298944
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 0L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      long long0 = (-128L);
      Range range0 = Range.of((-128L), (-128L));
      range0.getEnd();
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-2734L));
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2733L), long0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.0987996145617602
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2020L), (-2020L));
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder0.shift(265L);
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(2548L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 32767L);
      range_Builder0.shift((-4997L));
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.687420655767592
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -32767 .. -32767 ]/RB", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of((-2147483644L));
      Range range1 = Range.of(255L);
      range0.startsBefore(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-799L), (-799L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of(4294967294L);
      boolean boolean0 = range0.isEmpty();
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967294L, 4294967294L);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange("(Z3\"[5y{", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (Z3\"[5y{ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.7975345879435403
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-1601L));
      Range range1 = Range.of((-3516L));
      Object object0 = new Object();
      range1.equals(object0);
      range1.split(4294967295L);
      Object object1 = new Object();
      boolean boolean0 = range1.equals(object1);
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Long long0 = new Long(0L);
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.intersects(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-810L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(17L);
      List<Range> list0 = range0.split(232L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Long long0 = new Long(0L);
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.ofLength(4294967294L);
      Object object0 = new Object();
      range0.startsBefore(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.ofLength(4294967294L);
      String string0 = "(Z3\"[5y{";
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.137198593555779
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-9223372036854775779L));
      List<Range> list0 = range0.complement(range0);
      range0.equals(list0);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Long long0 = new Long(0L);
      String string0 = ";*gb(y6DFQZan'A?%96y";
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getEnd();
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.ofLength((-634L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.1357893557590493
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.ofLength(1473L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.2025556956077046
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 32767L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 32767L, 32767L);
      range1.complement(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertTrue(range1.isEmpty());
      assertEquals(32767L, long0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.894191569094667
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of(2147483637L);
      Range range1 = Range.of(2147483637L);
      Range range2 = range1.intersection(range0);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.ofLength(4294967294L);
      range0.equals("(Z3\"[5y{");
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.691961419441483
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.ofLength(4294967294L);
      Range range1 = Range.ofLength(4294967294L);
      range0.isSubRangeOf(range1);
      range0.equals("(Z3\"[5y{");
      boolean boolean0 = range0.equals("(Z3\"[5y{");
      assertFalse(range0.isEmpty());
      assertSame(range0, range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of((-32784L));
      String string0 = "f,?bBzG!mxF9M10";
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.793494183903136
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of((-2147483679L));
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(65538L, (-1972L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-966L), (-966L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of((-1L));
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854774955L);
      Long long0 = new Long(64302L);
      Range range0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange("`d$b{{:\"60Yvbf{@m0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse `d$b{{:\"60Yvbf{@m0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = 32767L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(4294967295L, (-22788L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Long long0 = new Long(0L);
      Range range0 = Range.ofLength(0L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 65535L, (-1925L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1204L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 32767L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-9223372036854775808L), (-466L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -467 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      range_Builder1.expandEnd(3724L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(610L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 2694L);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, 0L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long long0 = 32767L;
      Range.Builder range_Builder0 = new Range.Builder((-22772L), 32767L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-22772L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
