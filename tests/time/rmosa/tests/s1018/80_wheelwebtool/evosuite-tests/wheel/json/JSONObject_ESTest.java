/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 05:50:53 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.18765267506544
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      Short short0 = new Short((short) (-2708));
      Short.compare((short) (-2708), (short) (-2708));
      Integer integer0 = new Integer(0);
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer1 = new Integer(0);
      jSONObject0.append("null", integer1);
      jSONObject0.keys();
      JSONObject.quote("null");
      Long long1 = new Long((long) integer0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("\"null\"", hashMap0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "\"null\"";
      stringArray0[4] = "\"null\"";
      stringArray0[5] = "null";
      stringArray0[6] = "\"null\"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.testValidity(short0);
      jSONObject0.opt("\"null\"");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put(">!ms:n|QCftp", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(">!ms:n|QCftp", (Map) hashMap0);
      jSONObject0.getJSONObject(">!ms:n|QCftp");
      boolean boolean0 = jSONObject0.isNull(">!ms:n|QCftp");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      String string0 = JSONObject.valueToString(jSONObject0, (-1002), 97);
      assertEquals("{}", string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string1 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(1979L);
      Long long1 = Long.getLong(",Z[VY~8{", long0);
      jSONObject0.append("null", long1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.getJSONArray("null");
      String string0 = "a^p*4~gy\"IksE";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(long1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2842967826608906
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(1979L);
      Long long1 = Long.getLong(",Z[VY~8{", long0);
      JSONObject jSONObject1 = jSONObject0.append("null", long1);
      jSONObject1.put(",Z[VY~8{", false);
      long long2 = jSONObject0.optLong("Expected a ':' after a key");
      assertEquals(0L, long2);
      
      jSONObject0.toString((-247), (-247));
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000003\": [java.lang.Long@0000000007]\n}");
      String[] stringArray0 = JSONObject.getNames((Object) "{\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000003\": [java.lang.Long@0000000007]\n}");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1840562714690361
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      Short short0 = new Short((short) (-2708));
      Short.compare((short) (-2708), (short)50);
      Short.toUnsignedLong((short)0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-2758));
      JSONObject jSONObject1 = jSONObject0.append("null", integer0);
      Long long0 = new Long(3431L);
      jSONObject0.keys();
      Short.toUnsignedLong((short) (-1));
      String string0 = JSONObject.quote("null");
      assertEquals("\"null\"", string0);
      
      Long long1 = new Long((-612L));
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(93);
      jSONArray0.toString(4371);
      JSONObject jSONObject2 = jSONObject0.accumulate("pu", jSONArray0);
      jSONObject1.toString((-81), (int) (short) (-2708));
      String[] stringArray0 = JSONObject.getNames((Object) long1);
      assertEquals(5, stringArray0.length);
      
      JSONArray jSONArray1 = jSONObject2.optJSONArray("pu");
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("UI*3s'1#x$8-s#?CP~F", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected a ',' or ']'", false);
      JSONObject jSONObject1 = new JSONObject((Object) "3e6m%^ (7z.G<A16");
      String string0 = jSONObject0.optString("Expected a ',' or ']'", "rV.rw#o_j3d2x~`V*^q");
      assertNotNull(string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.toString((-2180), (-15));
      JSONObject jSONObject1 = new JSONObject("{}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.281955547659427
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(1979L);
      Long long1 = Long.getLong(",Z[VY~8{", long0);
      JSONObject jSONObject1 = jSONObject0.append("null", long1);
      jSONObject0.optLong("Expected a ':' after a key");
      jSONObject0.toString((-247), (-247));
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000003\": [java.lang.Long@0000000005]}");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Double double0 = new Double(0.0);
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      String string0 = "(_g;&F";
      hashMap1.put("(_g;&F", double0);
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("*{b<@lc");
      jSONTokener0.next();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of *{b<@lc
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Long long0 = new Long(3365L);
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      JSONObject.quote("");
      Long long1 = new Long(3365L);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("\"\"", "*1'{\"Q");
      jSONObject0.remove("\"\"");
      try { 
        jSONObject0.getJSONObject("GTY|w22k;K%!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"GTY|w22k;K%!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("", 55);
      jSONObject0.optInt("");
      JSONObject jSONObject2 = jSONObject1.put("gettoString", 0.0);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-1145));
      Short short0 = new Short((short)1256);
      JSONObject jSONObject1 = jSONObject0.accumulate("|(b&^", short0);
      jSONObject0.getLong("|(b&^");
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.getInt("|(b&^");
      JSONTokener jSONTokener0 = new JSONTokener("|(b&^");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |(b&^
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      Byte byte0 = new Byte((byte) (-123));
      hashMap0.put(byte0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte1 = new Byte((byte)111);
      Boolean boolean0 = new Boolean("p#}!,@");
      hashMap0.put(byte1, boolean0);
      jSONObject0.optString("0", "0");
      Byte.toUnsignedLong((byte) (-21));
      JSONObject jSONObject1 = jSONObject0.put("0", (-3944L));
      Byte.toUnsignedLong((byte)111);
      JSONObject jSONObject2 = jSONObject1.put("] is not a number.", false);
      double double0 = jSONObject2.optDouble("0", 1704.125218);
      assertEquals((-3944.0), double0, 0.01);
      
      jSONObject2.put("] is not a number.", (Object) byte0);
      long long0 = jSONObject2.optLong("true");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(1979L);
      Long long1 = Long.getLong(",Z[VY~8{", long0);
      jSONObject0.append("null", long1);
      String string0 = jSONObject0.getString("null");
      assertNotNull(string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("UI*3s'1#x$8-s#?CP~F", "UI*3s'1#x$8-s#?CP~F");
      try { 
        jSONObject0.getJSONObject("UI*3s'1#x$8-s#?CP~F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"UI*3s'1#x$8-s#?CP~F\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9740866340645037
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      try { 
        jSONObject0.getBoolean("^f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject0.opt((String) null);
      JSONObject.valueToString((Object) null);
      JSONObject jSONObject1 = jSONObject0.put("J3", 16);
      JSONObject.quote("null");
      try { 
        jSONObject1.put((String) null, (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)804);
      JSONObject jSONObject1 = jSONObject0.putOpt("4", short0);
      jSONObject1.optLong("4");
      Boolean boolean0 = Boolean.TRUE;
      try { 
        jSONObject0.getJSONObject(")2LO=F`CxQ(Xm x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")2LO=F`CxQ(Xm x\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Long long0 = new Long((-1849L));
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-4934));
      jSONObject0.accumulate("JSONArray[", integer0);
      jSONObject0.getLong("JSONArray[");
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.getInt("JSONArray[");
      JSONTokener jSONTokener0 = new JSONTokener("JSONArray[");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of JSONArray[
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Short short0 = new Short((short)1892);
      Long long0 = new Long(505L);
      HashMap<Long, Long> hashMap1 = new HashMap<Long, Long>();
      Long long1 = new Long((-1633L));
      Long long2 = new Long(0L);
      hashMap1.put(long2, long2);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("2b,", (Collection) linkedList0);
      boolean boolean0 = jSONObject0.has("2b,");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.put("=<:sMK(e7k;", 1204L);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble("=<:sMK(e7k;");
      assertEquals(1204.0, double0, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("ECFdPK06kF6=", hashMap0);
      jSONObject0.toString(97, 91);
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("1.00", 0L);
      try { 
        jSONObject0.getInt("1.00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1.00\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Long long0 = new Long((-3118L));
      hashMap0.put(linkedList0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("JIgiA%x+<ymb>", (-1L));
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 48, 48);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.quote("58W.f5,\"j4/");
      assertEquals("\"58W.f5,\\\"j4/\"", string0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("\"58W.f5,\"j4/\"", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject.valueToString(linkedList0, 38, 65);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put("$k21Wzqo6/W5m", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.isNull("$k21Wzqo6/W5m");
      Object object1 = jSONObject0.get("$k21Wzqo6/W5m");
      assertEquals(0.0, object1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 313, 92);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", true);
      jSONObject1.append("Null key.", jSONObject0);
      Integer integer0 = new Integer(13);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8788316745527265
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject.doubleToString((-2281.022));
      JSONObject jSONObject0 = new JSONObject((Object) "-2281.022");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject((Object) "-2281.022");
      jSONObject1.toString((-49));
      // Undeclared exception!
      jSONObject2.toString(1806);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(2, (long) 832);
      jSONObject0.toJSONArray(jSONArray1);
      jSONObject0.append("Expected a ',' or ']'", linkedList0);
      jSONObject0.accumulate("Expected a ',' or ']'", (Object) null);
      try { 
        jSONObject0.put((String) null, 1750L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 1245, 1245);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(371);
      Integer.remainderUnsigned(123, 371);
      JSONObject.valueToString(integer0, 371, 371);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, (-1241), 1416);
      Float float0 = new Float(0.0F);
      try { 
        jSONArray0.getBoolean(65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[65] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("OYU`otf@X@9c/{oD");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.isNull("isvalueOf");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Y`eNb574K;<j(~EGwQm", true);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "Y`eNb574K;<j(~EGwQm";
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("q\"d_@J}NUEqV8NeFI2[", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      Short short0 = new Short((short) (-2708));
      Short.compare((short) (-2708), (short) (-2708));
      Integer integer0 = new Integer(0);
      Long long0 = new Long(0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer1 = new Integer(0);
      JSONObject jSONObject1 = jSONObject0.append("null", integer1);
      Object object0 = new Object();
      jSONObject1.putOpt("null", object0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Short.compare((short)5, (short)0);
      Integer integer0 = new Integer((short)0);
      Long long0 = new Long(0L);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer1 = new Integer(3053);
      JSONObject jSONObject1 = jSONObject0.append("null", jSONArray0);
      Object object0 = new Object();
      jSONObject1.putOpt("rL.Zb.7:6#r", jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "null");
      jSONObject1.write(stringWriter1);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      Integer integer0 = new Integer(818);
      Long long0 = new Long(818);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer1 = new Integer(818);
      JSONObject jSONObject1 = jSONObject0.append("null", (Object) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.optBoolean("xb:~", true);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = new Double((-1396.4376789962));
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      hashMap0.put("rmaGF>p8f+}b&tYud'", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("rmaGF>p8f+}b&tYud'");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("rmaGF>p8f+}b&tYud'", (Object) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 2347, 2347);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")H";
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("\b", 2783.7008);
      assertEquals(2783.7008, double0, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      Boolean.valueOf("ro");
      JSONTokener jSONTokener0 = new JSONTokener("ro");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      JSONObject.valueToString((Object) null);
      Collection<Integer> collection0 = null;
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      int int0 = 2634;
      try { 
        jSONArray0.getJSONObject(2634);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2634] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(1.0);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      jSONObject0.optString("", "");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(",", "T43'kF6\"");
      assertEquals("T43'kF6\"", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("0", (Map) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("HUv{mb$$", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Long long0 = new Long(0L);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject.valueToString(long0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.has("java.lang.Long@0000000004");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5726694994129984
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.min(15.0544882114, 164.1);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.put((String) null, 567);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      Short short0 = new Short((short) (-2708));
      Short.compare((short) (-2708), (short) (-2708));
      Integer integer0 = new Integer(0);
      String string0 = "null";
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer1 = new Integer(0);
      jSONObject0.append("null", integer1);
      try { 
        jSONObject0.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("k,", 1592);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long0 = new Long(600L);
      hashMap0.put(long0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("nyy", "nyy");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("U&.bo+$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U&.bo+$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|=G_?UeCqjMh4yj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |=G_?UeCqjMh4yj
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.3385650622366605
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.quote("uB(w3:bb0+DN$ux.H/>");
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject((Object) "wr");
      jSONObject0.toString(1660);
      jSONObject0.put("uB(w3:bb0+DN$ux.H/>", (Collection) linkedList0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1829430989272922
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Short short0 = new Short((short) (-6465));
      Short.compare((short) (-6465), (short) (-592));
      Short.toUnsignedLong((short)1072);
      Object object0 = JSONObject.NULL;
      Long long0 = new Long(3620L);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Integer integer0 = new Integer((short)1072);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("Unclosed comment", object1);
      jSONObject1.keys();
      String string0 = JSONObject.quote("Unclosed comment");
      assertEquals("\"Unclosed comment\"", string0);
      
      Long long1 = new Long(0L);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject0.accumulate("getformat", "\"Unclosed comment\"");
      jSONObject2.toString((int) (short) (-592), 69);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Long long0 = new Long(3365L);
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-1422));
      Double double0 = new Double(1089.926002218);
      JSONObject jSONObject1 = jSONObject0.append("*1'{\"Q", double0);
      jSONObject0.keys();
      JSONObject.quote("");
      Long long1 = new Long(3365L);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("\"\"", "*1'{\"Q");
      // Undeclared exception!
      jSONObject1.toString(2459, 6075);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      String string0 = ">!ms:n|QCftp";
      Double double0 = new Double(0.0);
      hashMap0.put(">!ms:n|QCftp", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(1224, 1775);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(">!ms:n|QCftp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of >!ms:n|QCftp
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-803));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-217.97341));
      assertEquals("-217.97341", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("get", stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      HashMap<Double, JSONArray> hashMap1 = new HashMap<Double, JSONArray>();
      HashMap<Double, JSONArray> hashMap2 = new HashMap<Double, JSONArray>(hashMap1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fVU zKB#IDZC";
      stringArray0[1] = ".bjxOh([6xR";
      stringArray0[2] = "`~a-=EiY'gdmna(";
      jSONObject0.optBoolean("`~a-=EiY'gdmna(");
      stringArray0[3] = "pPY02pey)Ox";
      Double double0 = null;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(".bjxOh([6xR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of .bjxOh([6xR
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("islistIterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"islistIterator\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float.sum((-1.0F), (-3301.884F));
      Object object0 = new Object();
      Float float0 = new Float(0.0F);
      Float float1 = new Float((double) (-1.0F));
      String string0 = JSONObject.numberToString(float0);
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.optString("java.lang.Float@0000000001", "rev");
      assertFalse(string1.equals((Object)string0));
      
      int int0 = jSONObject0.optInt("java.lang.Float@0000000001", (-623));
      assertEquals((-623), int0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("TV@");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("isskipTo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of isskipTo
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(7);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.quote("ysyyz=HM.`f`I");
      assertEquals("\"ysyyz=HM.`f`I\"", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Long long0 = new Long((-897L));
      int int0 = 1639;
      Object object0 = new Object();
      JSONObject.valueToString(object0, 1639, 4814);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(92);
      String string0 = JSONObject.valueToString((Object) null, 92, 92);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-1), (-1));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>(46, 46);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("Null poinF,ter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null poinF,ter\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("=~27@]#`!-:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=~27@]#`!-:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(852);
      linkedList0.add(integer0);
      Integer integer1 = new Integer((-4177984));
      String string0 = Integer.toUnsignedString((-4177984));
      linkedList0.addFirst(integer1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object0 = new Object();
      Object object1 = new Object();
      String string1 = JSONObject.valueToString(object1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("Null pointer");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Null pointer
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("UI*3s'1#x$8-s#?CP~F", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1.0));
      try { 
        jSONObject0.accumulate((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      Long long0 = new Long(0L);
      hashMap0.put(long0, (JSONObject) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("Tk[[A", 3290L);
      try { 
        jSONObject0.get("Tk[[A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Tk[[A\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("|0|eAV]OzA/7;>");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt("4", 78);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("nVoN2");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("ma");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Float float0 = new Float((-1531.0453F));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Boolean boolean0 = new Boolean("W]:R)a!aRK6A");
      jSONObject0.putOpt("W]:R)a!aRK6A", boolean0);
      try { 
        jSONObject0.getLong("W]:R)a!aRK6A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W]:R)a!aRK6A\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.getLong("RCZYRU;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"RCZYRU;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "getentryS";
      JSONObject jSONObject1 = jSONObject0.accumulate("getentryS", "getentryS");
      try { 
        jSONObject1.getInt("getentryS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getentryS\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("4Q)f{hW:o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4Q)f{hW:o\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.append((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = new Double((-1396.4376789962));
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      String string0 = "rmaGF>p58f+}b&tYud'";
      hashMap0.put("rmaGF>p58f+}b&tYud'", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(0L);
      try { 
        jSONObject0.append("rmaGF>p58f+}b&tYud'", long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[rmaGF>p58f+}b&tYud'] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Long@0000000007.", linkedList0);
      jSONObject1.accumulate("java.lang.Long@0000000007.", jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = JSONObject.quote("kN");
      assertEquals("\"kN\"", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      try { 
        jSONObject0.put((String) null, (Object) "JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(493.169539);
      Float float1 = new Float((-1.0F));
      linkedList0.add(float1);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Long long0 = new Long(1L);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Object object1 = jSONObject0.opt("v}zpwgCdJS>OS6&C");
      assertNull(object1);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float1 = new Float(4064.827037437963);
      linkedList0.add(float1);
      String string0 = "false";
      jSONObject0.put("false", (Collection) linkedList0);
      try { 
        jSONObject0.getDouble("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("lF#:op52z;X$l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lF#:op52z;X$l\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put("*{b<@lc", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("*{b<@lc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*{b<@lc\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must end with '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove("par");
      assertNull(object0);
  }
}
