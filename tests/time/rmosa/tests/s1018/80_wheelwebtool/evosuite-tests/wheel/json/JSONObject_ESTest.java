/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 03:55:21 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 2147483645, (-1136));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1724800154383195
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      int int0 = jSONObject0.optInt("KC/Ps227'o");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{$fCu6D4UIqd(]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {$fCu6D4UIqd(]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("}5ioArWhD?t3AmvGNaj");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }5ioArWhD?t3AmvGNaj
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.407362422885939
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(Double.NaN);
      hashMap0.put(" of ", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.499509409674557
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.accumulate("o~Bzro.S;", "o~Bzro.S;");
      jSONObject1.remove("o~Bzro.S;");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2367930007966412
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Integer integer0 = new Integer(2450);
      jSONObject0.putOpt(",:]}/\"[{;=#", integer0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected '", 0.0);
      String string0 = jSONObject0.optString("Expected '");
      assertNotNull(string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9722469794234418
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = Long.valueOf(1155L);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000030", (Object) long0);
      int int0 = jSONObject1.optInt("java.lang.Long@00000000030");
      assertEquals(1155, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8392967479776607
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float0 = new Float((-1701.0));
      jSONObject0.put("b`_som]=Zs", (Object) float0);
      int int0 = jSONObject0.optInt("b`_som]=Zs");
      assertEquals((-1701), int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Byte byte0 = new Byte((byte)1);
      jSONObject0.accumulate("o~Bzro.S;", byte0);
      double double0 = jSONObject0.optDouble("o~Bzro.S;");
      assertEquals(2, jSONObject0.length());
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Float float0 = new Float((double) 1251);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$Null", (-1.0));
      double double0 = jSONObject1.optDouble("wheel.json.JSONObject$Null");
      assertEquals(4, jSONObject0.length());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float((double) 1251);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("ZC3>C}`_6S~", (Object) "b`_som]=Zs");
      boolean boolean0 = jSONObject1.isNull("ZC3>C}`_6S~");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      jSONObject0.put("toH", (Map) hashMap0);
      boolean boolean0 = jSONObject0.has("toH");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6792706702716655
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("+3Xr`%rRGVg}<tE", (Map) hashMap0);
      jSONObject1.getString("+3Xr`%rRGVg}<tE");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ':' after a key", 3307);
      long long0 = jSONObject1.getLong("Expected a ':' after a key");
      assertEquals(3307L, long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.accumulate("+d:n!57", boolean0);
      Object object0 = jSONObject0.get("+d:n!57");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("o~zroS;", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.666278442414676
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, 2049, 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.712227691559177
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(47, (-1408));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, 8);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer(110);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.remove("Expected a ':' after a key");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      Double double0 = Double.valueOf(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt(stringArray0[0], double0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Float float0 = new Float((-2089.5F));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", stringArray0[1]);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", (Map) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-119));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wai", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 0L);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-489L));
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("1m<N|$IqfhHj6j", (int) (short)0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("' and instead saw '", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("01:s3PC_", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer(13);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = jSONObject0.optString(stringArray0[2], "Y|6o*^o");
      assertEquals("Y|6o*^o", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("bkHQ5!}", (-1L));
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject("XcFdZFv.&{\"/Y", stringArray0);
      long long0 = jSONObject0.optLong((String) null, (long) 1251);
      assertEquals(1251L, long0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      long long0 = jSONObject0.optLong("LNz5", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("Unclosed comment", stringArray0);
      long long0 = jSONObject0.optLong("", 1L);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      int int0 = jSONObject0.optInt(")3", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Unterminated string", (-1538));
      assertEquals((-1538), int0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 1975);
      assertEquals(1975, int0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("gettoUnsignedString", 1122.13085);
      assertEquals(1122.13085, double0, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, (-1925.887));
      assertEquals((-1925.887), double0, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.572528756326852
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      boolean boolean0 = jSONObject0.optBoolean("Sew:3h,};", false);
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>(46, 46);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.opt((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("-p%ZiUT9EUP|PST)");
      assertNull(object0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Short short0 = new Short((short)88);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("JSONArray[");
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5751765904639272
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer integer0 = new Integer(3936);
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("0", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "<[iOEyCCW8P&B w7t");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "o~zroS;");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.4663435951536885
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(Double.NaN);
      hashMap0.put("toJ", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-3527), (-3527));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.8404675095994816
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float float0 = new Float((double) 1251);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(1251);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 1251, 1251);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.8437986072839696
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float((double) 1251);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(1251);
      // Undeclared exception!
      jSONObject0.toString(1251, 1251);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.8308939447177783
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float((double) 8192);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(8192);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.9639130011330832
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer integer0 = new Integer(535);
      JSONObject jSONObject0 = new JSONObject(integer0);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      Float float0 = new Float((double) 2209);
      hashMap0.put((Short) null, float0);
      JSONObject jSONObject1 = jSONObject0.put("getfloatToRawIntBits", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.toString((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)52);
      try { 
        jSONObject0.put((String) null, (Object) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1491L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1180));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long0 = new Long(196L);
      hashMap0.put(long0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5476312462189814
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("] is not a JSONObject.", stringArray0);
      StringWriter stringWriter0 = new StringWriter(12);
      jSONObject0.put("r!f).1,L_", (Collection) null);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.8558085030413587
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      jSONObject0.put("getfloatToRawIntBits", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.8404675095994816
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(20);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = JSONObject.valueToString(linkedList0, 45, 64);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      String string0 = JSONObject.valueToString(hashMap0, 69, 1);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0, 43, 60);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 0, 1639);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 0, 98);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.788191435362226
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float float0 = new Float((double) 1251);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-608), (int) (short)13);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6904546939944762
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double double0 = new Double((-1551.665339));
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(801L);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      try { 
        jSONObject0.toJSONArray(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Float float0 = new Float((double) 8);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = JSONObject.quote("'z*1t{tXQZU</h&!ack");
      assertEquals("\"'z*1t{tXQZU<\\/h&!ack\"", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.4375503412075572
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "et\\u0{j#K$ONooc";
      try { 
        jSONObject0.getBoolean(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"et\\\\u0{j#K$ONooc\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.1894736293243366
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("\f");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.900368082936878
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer integer0 = new Integer(1251);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      try { 
        jSONObject0.getJSONArray("XcFdZFv.&{\"/Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"XcFdZFv.&{\\\"/Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = JSONObject.quote("2\t");
      assertEquals("\"2\\t\"", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject("Unclosed comment", stringArray0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.5571130980576458
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "|<|";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.2677946372884996
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.putOpt("] is not aTJSONObject.", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      try { 
        jSONObject0.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("1595.26989082541", false);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      jSONObject0.put("", (Map) hashMap0);
      String string0 = jSONObject0.optString("", "] is not a JSONObject.");
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("is0ub:tr?ng");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("b`_som]=Zs", (Object) jSONArray0);
      jSONObject1.optJSONArray("b`_som]=Zs");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Long long0 = new Long(0L);
      jSONObject0.accumulate("JSONArray[", long0);
      double double0 = jSONObject0.optDouble("JSONArray[");
      assertEquals(2, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.8228804629889481
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) ").<#rnOj[2");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-1.0));
      hashMap0.put("get", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.580649125069464
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(">7'O`", (Object) jSONObject0);
      long long0 = jSONObject1.optLong(">7'O`");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.6354502583387052
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer integer0 = new Integer(110);
      JSONObject jSONObject0 = new JSONObject(integer0);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      JSONObject jSONObject1 = jSONObject0.put("getfloatToRawIntBits", (Map) hashMap0);
      jSONObject1.getJSONObject("getfloatToRawIntBits");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(Double.NaN);
      hashMap0.put("] is not a JSONObject.", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.631345420808597
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(1471.12);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", float0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray(",:]}/\"[{;=#");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Xm", (Object) "Xm");
      try { 
        jSONObject1.getJSONArray("Xm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Xm\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("null", (-1377));
      int int0 = jSONObject0.getInt("null");
      assertEquals((-1377), int0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.6941592577998341
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.accumulate("o~Bzro.S;", "o~cro.S;");
      try { 
        jSONObject1.getInt("o~Bzro.S;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o~Bzro.S;\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Long long0 = new Long(5701L);
      hashMap0.put("java.lang.Double@0000000001", long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.getDouble("java.lang.Double@0000000001");
      assertEquals(5701.0, double0, 0.01);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.6414480415035768
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer integer0 = new Integer(110);
      JSONObject jSONObject0 = new JSONObject(integer0);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      jSONObject0.put("getfloatToRawIntBits", (Map) hashMap0);
      try { 
        jSONObject0.getDouble("getfloatToRawIntBits");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getfloatToRawIntBits\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.641806559672166
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("o~Bzro.S;", true);
      boolean boolean0 = jSONObject0.getBoolean("o~Bzro.S;");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.7249850003393532
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.accumulate("o~Bzro.S;", "o~cro.S;");
      try { 
        jSONObject1.getBoolean("o~Bzro.S;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o~Bzro.S;\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(false);
      jSONObject0.accumulate("] is not a number.", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject0.getBoolean("] is not a number.");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1589.1329787813781);
      assertEquals("1589.1329787813781", string0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-70125688));
      assertEquals("-7.0125688E7", string0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isnotify", (Object) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      try { 
        jSONObject1.append("isnotify", boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[isnotify] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.2440166957928942
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(1471.12);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append(",:]}/\"[{;=#", float0);
      Double double0 = new Double(7134.5);
      jSONObject0.append(",:]}/\"[{;=#", double0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 167
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(Double.NaN);
      hashMap0.put("toJ", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("toJ", (Object) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 168
  /*Coverage entropy=1.4272171500680495
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Sew:3h,};", jSONArray0);
      jSONObject1.accumulate("Sew:3h,};", jSONObject0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 169
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{aIkv'6o0o<(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of {aIkv'6o0o<(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{$fCX6D4UIq=5(]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 15 of {$fCX6D4UIq=5(]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 173
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 174
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("-p%ZiUT9EUP|PST)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of -p%ZiUT9EUP|PST)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 175
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("aQfaqGreG;MYC,K?'", object0);
      boolean boolean0 = jSONObject1.isNull("aQfaqGreG;MYC,K?'");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 176
  /*Coverage entropy=1.6731947481222245
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("U-oQ|&0<q", object0);
      try { 
        jSONObject0.getBoolean("U-oQ|&0<q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U-oQ|&0<q\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 177
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("", 338);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 178
  /*Coverage entropy=1.7833836094401962
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Integer integer0 = new Integer(3936);
      JSONObject jSONObject0 = new JSONObject(integer0);
      boolean boolean0 = jSONObject0.optBoolean("");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 179
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 180
  /*Coverage entropy=2.0283370711801276
  */
  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Float float0 = new Float((double) 1251);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString(1251);
      JSONObject jSONObject1 = new JSONObject(string0);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 181
  /*Coverage entropy=1.5228146795137598
  */
  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Integer integer0 = new Integer(534);
      JSONObject jSONObject0 = new JSONObject(integer0);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      JSONObject jSONObject1 = jSONObject0.put("getfloatToRawIntBits", (Map) hashMap0);
      jSONObject1.optJSONObject("getfloatToRawIntBits");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 182
  /*Coverage entropy=2.0787595323924446
  */
  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.put("Il|oklO2CRF!Xi", (-847.118811304));
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.optBoolean("0fU?");
      Short short0 = new Short((short)66);
      String string0 = JSONObject.valueToString(short0, (short)66, 44);
      assertNotNull(string0);
  }

  /**
  //Test case number: 183
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Integer integer0 = new Integer(534);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.remove((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 184
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("isreverseBytes", (-1L));
      long long0 = jSONObject1.optLong("isreverseBytes");
      assertEquals(4, jSONObject0.length());
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 185
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }
}
