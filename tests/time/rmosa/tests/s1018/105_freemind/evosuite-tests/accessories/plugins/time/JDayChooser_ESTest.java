/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 06:11:56 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.OutputStream;
import java.sql.Timestamp;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.CompoundBorder;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GapContent;
import javax.swing.text.GlyphView;
import javax.swing.text.JTextComponent;
import javax.swing.text.LabelView;
import javax.swing.text.StringContent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import org.apache.batik.css.parser.Parser;
import org.apache.batik.dom.ExtensibleDOMImplementation;
import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.dom.svg12.SVG12DOMImplementation;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAutoscrolls(true);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (byte)116, (byte)116, 22, (-173), 'w', menuElementArray0, menuSelectionManager1);
      InputEvent.getModifiersExText((-2779));
      jDayChooser0.keyTyped(menuKeyEvent0);
      jDayChooser0.getFocusListeners();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawWeeks();
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(22, menuKeyEvent0.getModifiers());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8961887881567323
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAutoscrolls(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-535), (byte)49, 8773, 1, 'w', menuElementArray0, menuSelectionManager0);
      InputEvent.getModifiersExText((-1));
      jDayChooser0.keyTyped(menuKeyEvent0);
      jDayChooser0.getFocusListeners();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      Locale locale0 = Locale.KOREAN;
      ResourceBundle.Control.getNoFallbackControl(list0);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setDecorationBackgroundVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      StyleContext styleContext0 = new StyleContext();
      JTextArea jTextArea0 = new JTextArea();
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextArea0.new AccessibleJTextComponent();
      AttributeSet attributeSet0 = jTextComponent_AccessibleJTextComponent0.getCharacterAttribute(18);
      JTextPane jTextPane0 = new JTextPane();
      GapContent gapContent0 = new GapContent((-1020));
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      JTextPane jTextPane1 = new JTextPane(defaultStyledDocument0);
      AttributeSet attributeSet1 = jTextPane1.getCharacterAttributes();
      styleContext0.addAttributes(attributeSet1, attributeSet0);
      Font font0 = styleContext0.getFont(attributeSet0);
      jDayChooser1.setFont(font0);
      jDayChooser0.setFocus();
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setDay(41);
      jDayChooser0.getDayPanel();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      
      jDayChooser0.setFocus();
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-1566), 0L, (-1566), 233, 'd', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxDayCharacters();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.getMinimumSize();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMonth((-47));
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      jDayChooser0.printAll((Graphics) null);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-1014), (-1526L), (-1014), 1158, ':', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext.getDefaultStyleContext();
      StyleContext styleContext1 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(styleContext1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Element element0 = defaultStyledDocument0.getCharacterElement(2529);
      LabelView labelView0 = new LabelView(element0);
      Color color0 = labelView0.getForeground();
      jDayChooser0.setForeground(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, 1L, 6, (-3407), 'U');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9831272903573964
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(containerListener0, containerListener0);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, (-874), "org.apache.batik.css.engine.CSSEngine$2", 670L, 3123);
      ActionEvent actionEvent1 = new ActionEvent(actionEvent0, 12, "day", 165);
      actionEvent1.setSource(jDayChooser_DecoratorButton0);
      actionEvent0.setSource(jDayChooser_DecoratorButton0);
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      sVGDOMImplementation0.getLocale();
      sVGDOMImplementation0.createDocumentType("14", "y(zD", "y(zD");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setFocus();
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setDay(41);
      JDayChooser jDayChooser1 = new JDayChooser();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JTextArea jTextArea0 = new JTextArea();
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextArea0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getCharacterAttribute(13);
      jDayChooser0.setFocus();
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setDay((-1051));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.setDay((-598));
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-22));
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAutoscrolls(false);
      jDayChooser0.getInputMap();
      jDayChooser0.init();
      jDayChooser0.createVolatileImage((-1832), 564);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy(".irCpnK/gP)yG)*-0", vetoableChangeListenerProxy0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setWeekOfYearVisible(true);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.KOREAN;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setLocale(locale0);
      assertEquals("kor", locale0.getISO3Language());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.getDaysInMonth();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.696303767023144
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("7wk/F4M7#z@mL", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy((String) null, vetoableChangeListenerProxy0);
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getDaysInMonth();
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.RED;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay((-22));
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(0, color0.getGreen());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      CompoundBorder compoundBorder0 = new CompoundBorder();
      jDayChooser0.setBorder(compoundBorder0);
      SystemColor systemColor0 = SystemColor.controlText;
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(0, color0.getBlue());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      LocalDate localDate0 = MockLocalDate.ofYearDay(20, 20);
      java.sql.Date date0 = java.sql.Date.valueOf(localDate0);
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMonth(20);
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.695552336533544
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAutoscrolls(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-535), (byte)49, 8773, 1, 'w', menuElementArray0, menuSelectionManager0);
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBordersVisible();
      ActionEvent actionEvent0 = new ActionEvent("lLRV: r", (-3029), "day", (-3029));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(27);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) thread0, (-564L), timeUnit0);
      scheduledThreadPoolExecutor0.setMaximumPoolSize(27);
      ActionEvent actionEvent0 = new ActionEvent(scheduledFuture0, 8929, "day", (-521));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      ExtensibleDOMImplementation.ElementFactory extensibleDOMImplementation_ElementFactory0 = mock(ExtensibleDOMImplementation.ElementFactory.class, new ViolatedAssumptionAnswer());
      sVGDOMImplementation0.registerCustomElementFactory("accessories.plugins.time.JDayChooser$DecoratorButton", "accessories.plugins.time.JDayChooser$DecoratorButton", extensibleDOMImplementation_ElementFactory0);
      sVGDOMImplementation0.getLocale();
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getActionMap();
      jDayChooser0.addListeners(36);
      jDayChooser0.setFocus();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals((-2956050), color0.getRGB());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.896090218646746
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 1031;
      jDayChooser0.getAncestorListeners();
      jDayChooser0.transferFocus();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1031, true);
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1031);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(10155);
      jDayChooser0.removeAll();
      jDayChooser0.init();
      jDayChooser0.setMonth((-1));
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.validate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (-1), 13, 10155, 275, 'm');
      KeyEvent.getKeyText((-4048));
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.init();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.updateUI();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      jDayChooser0.setForeground(systemColor0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.textInactiveText;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setForeground(systemColor0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.800934927977544
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jDayChooser0;
      objectArray0[1] = (Object) styleContext0;
      StyleContext.SmallAttributeSet styleContext_SmallAttributeSet0 = styleContext0.new SmallAttributeSet(objectArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 13, 13, 65485, 31, '&');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.init();
      jDayChooser0.updateUI();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      LabelView labelView0 = null;
      try {
        labelView0 = new LabelView((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.GlyphView", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)12;
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getDay();
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, (byte)41, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.decorationBackgroundColor;
      int int0 = (-2359);
      Color.getColor("accessories.plugins.time.JDayChooser", (-2359));
      Color.getColor("day", color0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = null;
      try {
        pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, (OutputStream) null, (-3098), (-3098));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.fop.pdf.PDFDocument", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      StringContent stringContent0 = new StringContent();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      Element element0 = defaultStyledDocument0.getParagraphElement(2948);
      GlyphView glyphView0 = new GlyphView(element0);
      Color color0 = glyphView0.getForeground();
      jDayChooser0.setSundayForeground(color0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.57852073136676
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("7wk/F4M7#z@mL", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy((String) null, vetoableChangeListenerProxy0);
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getDaysInMonth();
      Color color0 = jDayChooser1.selectedColor;
      jDayChooser1.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(27);
      jDayChooser0.createVolatileImage(2152, 429);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("6", vetoableChangeListenerProxy1);
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setWeekOfYearVisible(false);
      MockLocalDate.ofYearDay((-1586), 20);
      java.sql.Date date0 = new java.sql.Date(50L);
      LocalDate localDate0 = date0.toLocalDate();
      java.sql.Date date1 = java.sql.Date.valueOf(localDate0);
      jDayChooser0.setMaxSelectableDate(date1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("http://www.w3.org/2000/svg", vetoableChangeListenerProxy0);
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setWeekOfYearVisible(false);
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(20, 8816);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 8816
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.983211734533764
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.decorationBackgroundColor = null;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      Parser parser0 = new Parser();
      parser0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.updateUI();
      jDayChooser1.getLocale();
      jDayChooser1.getMinSelectableDate();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      Locale locale0 = Locale.KOREAN;
      ResourceBundle.Control.getNoFallbackControl(list0);
      Locale.forLanguageTag("1");
      jDayChooser0.getGraphics();
      jDayChooser0.isDayBordersVisible();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jDayChooser0.setMaxDayCharacters(14);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      Locale locale0 = Locale.ITALIAN;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setLocale(locale0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 8197;
      jDayChooser0.setMonth(8197);
      // Undeclared exception!
      try { 
        Timestamp.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      sVGDOMImplementation0.getLocale();
      jDayChooser0.createVolatileImage((-1832), 1179);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy((String) null, vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("http://www.w3.org/2000/svg", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("dhE", vetoableChangeListenerProxy0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy2);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      Locale locale0 = Locale.KOREAN;
      ResourceBundle.Control.getNoFallbackControl(list0);
      Locale.forLanguageTag("1");
      jDayChooser0.getGraphics();
      jDayChooser0.isDayBordersVisible();
      long long0 = 0L;
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1109, 0L, 1109, 19, 'U', menuElementArray0, menuSelectionManager0);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.33155221448811
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.drawWeeks();
      jDayChooser0.getDayPanel();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getMinSelectableDate();
      int int0 = 0;
      jDayChooser0.setYear(0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.init();
      jDayChooser0.getLocale();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      int int1 = 2801;
      long long0 = 3925L;
      int int2 = 1767;
      char char0 = 'r';
      MenuElement[] menuElementArray0 = new MenuElement[7];
      JPopupMenu jPopupMenu0 = new JPopupMenu("day");
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getRegistration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWeekdayForeground();
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      sVGDOMImplementation0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.decorationBackgroundVisible = true;
      jDayChooser0.getPropertyChangeListeners("accessories.plugins.time.JDayChooser");
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setWeekdayForeground((Color) null);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 10, 5001L, (-3874), 6, 'l', 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(20);
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      sVGDOMImplementation0.getLocale();
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.initDecorations();
      jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.1374996972165046
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.day = 2235;
      jDayChooser0.setMaxDayCharacters((-4));
      jDayChooser0.removeAll();
      jDayChooser0.init();
      jDayChooser0.setMonth((-4));
      jDayChooser0.drawDays();
      jDayChooser0.setYear((-4));
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setName("Dialog Plain 11");
      jDayChooser0.initDecorations();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getAttributionImage();
      jDayChooser0.checkImage((Image) null, 311, (-1798), (ImageObserver) jPanel0);
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, 132, false);
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.isDecorationBordersVisible();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(30, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.9831644895092557
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      StyleContext.getDefaultStyleContext();
      jDayChooser0.initDecorations();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getAttributionImage();
      JYearChooser jYearChooser0 = new JYearChooser();
      JSpinner jSpinner0 = jYearChooser0.spinner;
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      jDayChooser0.checkImage((Image) null, 36, 36, (ImageObserver) jSpinner_NumberEditor0);
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 36, true);
      focusEvent0.paramString();
      FocusEvent focusEvent1 = new FocusEvent(jYearChooser0, 36, true);
      jDayChooser0.focusGained(focusEvent1);
      jDayChooser0.isDecorationBordersVisible();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      MockDate mockDate0 = new MockDate(2684, 49, 36, 9999, 36, (-4521));
      MockDate.UTC(14, (-1941), (-2086), 31, (-2270), 31);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.800866879935626
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      sVGDOMImplementation0.getLocale();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(5758);
      jDayChooser0.setYear(5758);
      sVGDOMImplementation0.createDocumentType("freemind.controller.filter.condition.NoFilteringCondition", "14", "freemind.controller.filter.condition.NoFilteringCondition");
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.setName("http://www.w3.org/2000/svg");
      Color color0 = Color.GREEN;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.8009876489045884
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(10155);
      jDayChooser0.removeAll();
      jDayChooser0.init();
      jDayChooser0.setMonth(5758);
      jDayChooser0.drawDays();
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      Style style0 = styleContext0.addStyle((String) null, styleContext_NamedStyle1);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext0.new NamedStyle((String) null, style0);
      AttributeSet attributeSet0 = styleContext0.addAttributes(styleContext_NamedStyle2, style0);
      Font font0 = styleContext0.getFont(attributeSet0);
      jDayChooser0.setFont(font0);
      jDayChooser0.setFocus();
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setDay(381);
      assertEquals(30, jDayChooser0.getDay());
  }
}
