/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 06:29:42 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.util.xmlreader.DefaultDataMode;
import org.quickserver.util.xmlreader.QuickServerConfig;
import org.quickserver.util.xmlreader.ServerHooks;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.192898685950695
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 4776);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientData();
      theClient0.toString();
      theClient0.getCommunicationLogging();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      byte[] byteArray0 = new byte[4];
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      byteArray0[0] = (byte) (-100);
      InetAddress inetAddress0 = MockInetAddress.getByAddress("", byteArray0);
      theClient0.getClientEventHandler();
      MockSocket mockSocket0 = new MockSocket("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", 4776, inetAddress0, 4776);
      theClient0.setSocket(mockSocket0);
      theClient0.setTimeout((-25));
      theClient0.getAuthenticator();
      theClient0.getMaxAuthTry();
      theClient0.getTimeout();
      theClient0.getServer();
      System.setCurrentTimeMillis((byte) (-100));
      theClient0.getSocket();
      QuickServer quickServer0 = new QuickServer("aA>}vO[Yv=TVo~(q4]");
      assertEquals("\r\n", quickServer0.getNewLine());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setServer((QuickServer) null);
      QuickServer quickServer0 = new QuickServer("");
      quickServer0.makeServerSocket();
      ServerHooks serverHooks0 = new ServerHooks();
      quickServer0.setClientEventHandler("org.quickserver.net.server.TheClient");
      quickServer0.setServerHooks(serverHooks0);
      theClient0.setServer(quickServer0);
      theClient0.getMaxConnectionMsg();
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      quickServer0.info();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QuickServer\n0.0.0.0 9876\n");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      quickServer0.toString();
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      quickServer0.setServiceState((byte)6);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "QuickServer\n0.0.0.0 9876\n");
      theClient0.setServer(quickServer0);
      theClient0.getSocket();
      theClient0.setMaxAuthTryMsg("QuickServer\n0.0.0.0 9876\n");
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getSocket();
      theClient0.getSocketChannel();
      System.setCurrentTimeMillis((byte)6);
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      System.setCurrentTimeMillis(2279L);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-2396));
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setMaxConnectionMsg("");
      QuickServer quickServer0 = new QuickServer("");
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      quickServer0.getQSAdminServerAuthenticator();
      quickServer0.getSecure();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.initService(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.setMaxConnectionMsg("");
      theClient0.getClientWriteHandler();
      theClient0.toString();
      theClient0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      theClient0.setClientData((ClientData) null);
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.getAuthenticator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rJ#B^T0l?h#+^;-2");
      theClient0.getServer();
      theClient0.getAuthenticator();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      System.setCurrentTimeMillis((-2396));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "08F^%UY$LK;v[V+ su3");
      TheClient theClient0 = new TheClient();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientEvent();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      theClient0.getClientObjectHandler();
      theClient0.getServer();
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.679983198025875
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientExtendedEventHandler();
      Data data0 = new Data();
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      data0.setUsername("9Co7.z%;5%.\"");
      theClient0.setClientData(data0);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getTimeoutMsg();
      theClient0.getClientData();
      theClient0.getClientBinaryHandler();
      theClient0.getTimeoutMsg();
      System.setCurrentTimeMillis(60L);
      theClient0.getClientExtendedEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("");
      quickServer0.setMaxAuthTry((-280));
      theClient0.setServer(quickServer0);
      theClient0.getClientObjectHandler();
      theClient0.getServer();
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getServer();
      theClient0.setMaxAuthTryMsg("");
      theClient0.setMaxAuthTry(152);
      theClient0.getMaxAuthTryMsg();
      assertEquals(152, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      theClient0.setTimeout((-1561));
      theClient0.getTimeoutMsg();
      theClient0.getTimeout();
      theClient0.getTimeoutMsg();
      assertEquals((-1561), theClient0.getTimeout());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2597682094192684
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setCommunicationLogging(false);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      defaultClientEventHandler0.setClientCommandHandler(commandHandler0);
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.setMaxConnectionMsg(":0TkBK#es=kFJyjcC");
      QuickServer quickServer0 = new QuickServer(":0TkBK#es=kFJyjcC");
      quickServer0.setMaxAuthTry(0);
      DefaultDataMode defaultDataMode0 = new DefaultDataMode();
      quickServer0.setDefaultDataMode(defaultDataMode0);
      theClient0.setServer(quickServer0);
      theClient0.setMaxAuthTry(0);
      theClient0.getClientObjectHandler();
      theClient0.getMaxAuthTry();
      theClient0.toString();
      theClient0.setServer(quickServer0);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientObjectHandler();
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      CommandHandler commandHandler1 = new CommandHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getServer();
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setCommunicationLogging(false);
      theClient0.getCommunicationLogging();
      theClient0.toString();
      MockSocket mockSocket0 = new MockSocket();
      MockSocket mockSocket1 = new MockSocket();
      assertFalse(mockSocket1.equals((Object)mockSocket0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("k@ct_?Sn Cb@");
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.048820325203473
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.sendSystemMsg((String) null, true);
      blockingClientHandler0.getClientData();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setTimeout(1359);
      theClient0.getCommunicationLogging();
      theClient0.getSocket();
      theClient0.getClientBinaryHandler();
      theClient0.getTimeoutMsg();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getCommunicationLogging();
      theClient0.getMaxConnectionMsg();
      theClient0.getTimeout();
      theClient0.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      blockingClientHandler0.getClientData();
      // Undeclared exception!
      try { 
        blockingClientHandler0.getSocketChannel();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't get in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultDataMode defaultDataMode0 = new DefaultDataMode();
      theClient0.setMaxAuthTry((-280));
      theClient0.getClientObjectHandler();
      theClient0.getMaxAuthTry();
      theClient0.toString();
      assertEquals((-280), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("V");
      theClient0.getMaxAuthTryMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("-ERR Client Data Pool Closed");
      theClient0.getMaxConnectionMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(0);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      DefaultDataMode defaultDataMode0 = new DefaultDataMode();
      theClient0.setMaxAuthTry((-1797));
      theClient0.getClientObjectHandler();
      theClient0.toString();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientAuthenticationHandler();
      theClient0.getSocketChannel();
      theClient0.toString();
      Data data0 = new Data();
      data0.setLastAsked("/]7Is+p*C{+<tcC");
      theClient0.setClientData(data0);
      theClient0.getClientCommandHandler();
      assertEquals((-1797), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      theClient0.getMaxAuthTry();
      theClient0.getSocketChannel();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getServer();
      theClient0.getTrusted();
      QuickServer quickServer0 = new QuickServer();
      assertTrue(quickServer0.getBlockingMode());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTryMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      SocketChannel socketChannel0 = SocketChannel.open();
      theClient0.setSocketChannel(socketChannel0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEvent();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("Q-kC_+[AW", 334, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@2c19942e
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg(":0TkBK#es=kFJyjcC");
      QuickServer quickServer0 = new QuickServer("");
      DefaultDataMode defaultDataMode0 = new DefaultDataMode();
      quickServer0.setDefaultDataMode(defaultDataMode0);
      theClient0.setMaxAuthTry(1);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getTimeout();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, int0);
  }
}
