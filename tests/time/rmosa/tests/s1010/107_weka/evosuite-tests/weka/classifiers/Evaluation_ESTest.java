/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 00:02:42 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.StringSelection;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ReliefFAttributeEval;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.supportVector.StringKernel;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.REPTree;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.AbstractFileLoader;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.Loader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.BallTree;
import weka.estimators.PoissonEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8983671305014933
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1500.276976391, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.KBInformation();
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5937579197360707
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MissingClass;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.m_MissingClass;
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) 2, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("BfC'");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      Float float0 = new Float(1901.4913157);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.evaluateModelOnce(doubleArray0, instance0);
      Evaluation evaluation2 = new Evaluation(instances1);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1043.5722854086814;
      doubleArray0[1] = (-786.94985896215);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1594.3);
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("Decision Stump: No model built yet.");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setSeed(120);
      evaluation0.setPriors(instances0);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 120;
      doubleArray0[2] = (-4534.137778151);
      doubleArray0[3] = (double) 120;
      double double0 = evaluation0.numFalsePositives(1);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.getClassPriors();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9676882957085042
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumInstancesRelational((-2));
      testInstances0.setNumRelationalNominal(0);
      Instances instances0 = testInstances0.generate("globalInfo");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.reset();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedMatthewsCorrelation();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation.getGlobalInfo(decisionStump0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "graphType");
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1910.4917025;
      doubleArray0[4] = Double.NaN;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setSeed(0);
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation0.precision(1);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumInstancesRelational((-2));
      testInstances1.setNumRelationalNominal(1);
      Instances instances0 = testInstances0.generate("");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      Float float0 = new Float((double) (-1));
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("Decision Stump: No model built yet.");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("nearestNeighbourSearchAlgorithmTipText");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedTruePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LWL lWL0 = new LWL();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(lWL0);
      Capabilities capabilities0 = new Capabilities(additiveRegression0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      DecisionStump decisionStump1 = new DecisionStump();
      decisionStump1.toString();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Evaluation.getGlobalInfo(decisionStump0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 692.62;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 3, 2.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("Decision Stump: No model built yet.");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.SFPriorEntropy();
      evaluation0.falsePositiveRate((-1));
      try { 
        evaluation0.evaluateModelOnce((Classifier) decisionStump0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4888888888888889
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Instances instances0 = testInstances0.generate(".libsvm");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedTruePositiveRate();
      evaluation0.KBInformation();
      evaluation0.weightedMatthewsCorrelation();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 501.5483969392498);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      Random.setNextRandom((-936));
      Capabilities.forInstances(instances0, false);
      evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.m_SumSchemeEntropy;
      double double2 = evaluation0.m_SumSqrPredicted;
      evaluation0.confusionMatrix();
      evaluation0.SFSchemeEntropy();
      StringSelection stringSelection0 = new StringSelection("weka/core/Capabilities.props");
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 1592, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MissingClass;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2405.898195453, (int[]) null, 22);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      try { 
        evaluation0.toMatrixString(".bsi");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      ZeroR zeroR0 = new ZeroR();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance(450.0, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) zeroR0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), doubleArray0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.matthewsCorrelationCoefficient(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      stringKernel0.setInternalCacheSize(121);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.weightedMatthewsCorrelation();
      JRip jRip0 = new JRip();
      instances0.delete();
      evaluation0.useNoPriors();
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double3, double1, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("Decision Stump: No model built yet.");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFMeanPriorEntropy();
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.correct();
      assertEquals(double4, double3, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Float float0 = new Float((double) (-1));
      instances0.stringFreeStructure();
      testInstances0.setRelation("N'\".`W*:XMxQ|qjeMC");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.SFMeanEntropyGain();
      double double1 = evaluation0.m_SumAbsErr;
      M5Rules m5Rules0 = new M5Rules();
      // Undeclared exception!
      try { 
        m5Rules0.getM5RootNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.m5.M5Base", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.numTrueNegatives(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Float float0 = new Float((double) (-1));
      Instances instances1 = instances0.stringFreeStructure();
      testInstances0.setRelation("GHjGfVd=wHh#qz'N5|");
      Evaluation evaluation0 = new Evaluation(instances1);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.88367656007277
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      stringKernel0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Float float0 = new Float((double) (-1));
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.KBMeanInformation();
      evaluation0.truePositiveRate(0);
      Instances instances2 = new Instances(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.relativeAbsoluteError();
      evaluation0.toClassDetailsString((String) null);
      evaluation1.confusionMatrix();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BallTree ballTree0 = new BallTree();
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles(0L);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      Random.setNextRandom(0);
      double double0 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Float float0 = new Float(1351.3444);
      instances0.stringFreeStructure();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setRelation("@relation");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(" ", arrayList0, 119);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation1.addNumericTrainClass(0, Double.NaN);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      try { 
        evaluation0.evaluateModel((Classifier) null, (Instances) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = new Instances(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedTruePositiveRate();
      Random.setNextRandom((-479));
      evaluation0.useNoPriors();
      evaluation0.useNoPriors();
      evaluation0.sizeOfPredictedRegions();
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("nearestNeighbourSearchAlgorithmTipText");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.KBInformation();
      double double0 = evaluation0.m_SumClassPredicted;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 3533.5332325242266);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("setFilter");
      Float float0 = new Float((double) 0);
      Instances instances1 = instances0.stringFreeStructure();
      testInstances0.setRelation("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.rootMeanPriorSquaredError();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-454.441880164));
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(1);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.m_ClassPriorsSum;
      boolean boolean0 = evaluation2.getDiscardPredictions();
      assertFalse(boolean0);
      assertEquals(0.0, evaluation2.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(1471);
      textDirectoryLoader0.setCharSet("enumerateMeasures");
      Instances instances0 = textDirectoryLoader0.getStructure();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      CSVLoader cSVLoader0 = new CSVLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BallTree ballTree0 = new BallTree();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.avgCost();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      evaluation0.equals(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.confusionMatrix();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      LMT lMT0 = new LMT();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(true);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.48717948717948717
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource1.nextElement(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(instance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTruePositiveRate();
      double double1 = evaluation0.KBInformation();
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.m_SumSchemeEntropy;
      double double4 = evaluation0.falseNegativeRate(1);
      assertEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances.forCapabilities(capabilities0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      evaluation0.addNumericTrainClass((-4071.0), Double.NaN);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominal(100);
      Instances instances0 = testInstances0.generate("_fil <p=tv>");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBRelativeInformation();
      Evaluation evaluation2 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      evaluation0.setPriors(instances0);
      try { 
        Evaluation.handleCostOption("<", 486);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setFilter");
      instances0.stringFreeStructure();
      testInstances0.setRelation("@relation");
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      testInstances0.generate("setFilter");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.addNumericTrainClass(Double.NaN, (-17));
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.precision((-17));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.weightedAreaUnderPRC();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation("/bttR<Im9s_JeV':");
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.matthewsCorrelationCoefficient(480);
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.weightedFalseNegativeRate();
      double double2 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.totalCost();
      assertEquals(double3, double1, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("weka/core/Capabilities.props");
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance0, (-773.014082500836));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8734738482993778
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      KStar kStar0 = new KStar();
      Capabilities capabilities0 = kStar0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominal((-2));
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances1.generate("$=1");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBRelativeInformation();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation1.rootRelativeSquaredError();
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.592283174744059
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Instances instances0 = testInstances0.generate(".libsvm");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      Random.setNextRandom(2890);
      Capabilities.forInstances(instances0, false);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.m_SumSchemeEntropy;
      evaluation0.numTruePositives(2890);
      evaluation0.KBMeanInformation();
      double double2 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation0.weightedRecall();
      double double3 = evaluation0.weightedFMeasure();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Float float0 = new Float((double) (-1));
      testInstances0.setRelation("N'\".`W*:XMxQ|qjeMC");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
      
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BallTree ballTree0 = new BallTree();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      Random.setNextRandom(0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.unweightedMicroFmeasure();
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3030.365771), intArray0, 0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) regressionByDiscretization0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("nearestNeighbourSearchAlgorithmTipText");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_SumSchemeEntropy;
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) decisionStump0, instance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = new Instances(instances0);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      LMT lMT0 = new LMT();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) lMT0, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0951521981483863
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominal(890);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      
      evaluation0.useNoPriors();
      evaluation0.SFEntropyGain();
      MockRandom mockRandom0 = new MockRandom((-1));
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString();
      evaluation0.numInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.m_SumKBInfo = 99.0;
      evaluation0.KBRelativeInformation();
      Attribute attribute0 = new Attribute("@relation");
      // Undeclared exception!
      try { 
        instances0.variance(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("-c <class index>\n");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Random.setNextRandom((-861));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance(37);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1843752507353837
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("-c <class index>\n");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(instance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.KBInformation();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.numFalsePositives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTruePositives(0);
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation2.evaluateModelOnceAndRecordPrediction((Classifier) decisionStump0, instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.crossValidateModel("weka/core/Capabilities.props", instances0, 1, testInstances0.DEFAULT_WORDS, (java.util.Random) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: weka/core/Capabilities.props
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(instance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      double double0 = evaluation0.priorEntropy();
      assertEquals(1.0, double0, 0.01);
      
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CSVLoader cSVLoader0 = new CSVLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BallTree ballTree0 = new BallTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) regressionByDiscretization0, instances0, 0, (java.util.Random) null, (Object[]) regressionByDiscretization0.TAGS_ESTIMATOR);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double0 = 50.0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 1.0E-8;
      doubleArray0[4] = 1.0E-12;
      Bagging bagging0 = new Bagging();
      MockRandom mockRandom0 = new MockRandom((-662L));
      try { 
        evaluation0.crossValidateModel((Classifier) bagging0, instances0, 350, (java.util.Random) mockRandom0, (Object[]) regressionByDiscretization0.TAGS_ESTIMATOR);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumInstancesRelational((-2));
      testInstances1.setNumRelationalNominal(1);
      Instances instances0 = testInstances0.generate("");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.SFMeanSchemeEntropy();
      int int0 = 491;
      // Undeclared exception!
      try { 
        evaluation0.recall(491);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 491
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(double1, double0, 0.01);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double2 = evaluation0.truePositiveRate(6);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.addNumericTrainClass(1865, 17.5);
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.8260383116863674
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate("Decision Stump: No model built yet.");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(instance0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      Random.setNextRandom(450);
      evaluation0.KBInformation();
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_SumSchemeEntropy;
      testInstances0.setNumRelationalNominalValues(11);
      evaluation0.numTruePositives((-3028));
      evaluation0.makeDistribution(1.0E-75);
      evaluation0.unweightedMicroFmeasure();
      System.setCurrentTimeMillis((-1527L));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = instances0.stringFreeStructure();
      testInstances0.setRelation("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.m_MissingClass;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) 1, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setSeed(0);
      double double0 = evaluation0.errorRate();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setFilter");
      Instances instances1 = instances0.stringFreeStructure();
      testInstances0.setRelation("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.m_MissingClass;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce(4.8, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Float float0 = new Float((double) (-1));
      testInstances0.getData();
      testInstances0.setRelation("N'\".`W*:XMxQ|qjeMC");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-4170.16402385692), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision((-17));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-17);
      doubleArray0[1] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.equals(capabilities0);
      assertFalse(boolean0);
      
      Instances instances1 = new Instances(instances0);
      evaluation0.numFalsePositives(1);
      double double0 = evaluation0.weightedAreaUnderPRC();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setRelation("F?7](9:s");
      double double1 = evaluation0.SFMeanPriorEntropy();
      double double2 = evaluation0.matthewsCorrelationCoefficient(2400);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Float float0 = new Float((double) (-1));
      instances0.stringFreeStructure();
      testInstances0.setRelation("N'\".`W*:XMxQ|qjeMC");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = new TestInstances();
      DecisionStump decisionStump0 = new DecisionStump();
      DecisionStump decisionStump1 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.falsePositiveRate(1);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      C45Loader c45Loader0 = new C45Loader();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      c45Loader0.setUseRelativePath(false);
      AbstractFileLoader.runFileLoader(c45Loader0, stringArray0);
      evaluation0.setDiscardPredictions(false);
      try { 
        c45Loader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File not found : @relation.names
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ArffLoader arffLoader0 = new ArffLoader();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".arff";
      textDirectoryLoader0.setDebug(false);
      AbstractFileLoader.runFileLoader(arffLoader0, stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = true;
      evaluation0.setDiscardPredictions(true);
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getNextInstance(instances1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      String string0 = evaluation0.toClassDetailsString((String) null);
      assertEquals("null\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.confusionMatrix();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 1.0E-8;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 50.0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(50.0, doubleArray0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 11, 50.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Bagging bagging0 = new Bagging();
      MockRandom mockRandom0 = new MockRandom(0);
      DenseInstance denseInstance0 = new DenseInstance(600);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 600;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 150250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("Decision Stump: No model built yet.");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.trueNegativeRate(0);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("M PFP");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Random.setNextRandom((-2));
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedPrecision();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialUpdateable0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getCheckErrorRate");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(476);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 476
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.falseNegativeRate(3882);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.recall(12);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("Decision Stump: No model built yet.");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.trueNegativeRate(1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1901886006782885
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("Decision Stump: No model built yet.");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      testInstances0.generate("Ssc,3wPz6sX`E]<,");
      testInstances0.setRelation("    result = new Object[data.numInstances()][];\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(16);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("Decision Stump: No model built yet.");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.VERSION = "\"#pQG+OT<8m";
      int int0 = 357913932;
      char[] charArray0 = new char[4];
      char char0 = '4';
      charArray0[2] = '4';
      charArray0[3] = 'L';
      int int1 = (-1298);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(357913932, charArray0, (-1298));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Float float0 = new Float((double) (-1));
      instances0.stringFreeStructure();
      testInstances0.setRelation("N'\".`W*:XMxQ|qjeMC");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      String string0 = evaluation0.toMatrixString("#zq.BNL7LuXL'!]");
      assertEquals("#zq.BNL7LuXL'!]\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6ei~L");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "63-91");
      try { 
        Evaluation.handleCostOption("6ei~L", (-3923));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"63-91\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1678);
      doubleArray0[1] = (double) (-1717986910);
      doubleArray0[2] = (double) (-1717986910);
      doubleArray0[3] = (double) (-1678);
      doubleArray0[4] = (double) (-1678);
      doubleArray0[5] = (double) (-1717986910);
      SparseInstance sparseInstance0 = new SparseInstance(4.9E-324, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setCharSet("@data");
      textDirectoryLoader0.getRevision();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.31072809146421493;
      double double0 = evaluation0.m_SumErr;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0E-8;
      doubleArray0[1] = 1.0E-8;
      doubleArray0[2] = 1.0E-8;
      doubleArray0[3] = 1.0E-8;
      doubleArray0[4] = 1.0E-8;
      doubleArray0[5] = 1.0E-8;
      doubleArray0[6] = 1.0E-8;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "c:E7L`/");
      Reader reader0 = null;
      Instances instances0 = null;
      try {
        instances0 = new Instances((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances1);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) simpleLogistic0;
      objectArray0[1] = (Object) textDirectoryLoader0;
      try { 
        evaluation0.evaluateModel((Classifier) simpleLogistic0, instances1, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.classifiers.functions.SimpleLogistic cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      textDirectoryLoader1.getStructure();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances1);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) textDirectoryLoader0;
      evaluation0.evaluateModel((Classifier) simpleLogistic0, instances1, objectArray0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate(")lM[");
      testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(testInstances0);
      Instances instances1 = new Instances(instances0);
      evaluation0.numFalsePositives((-2));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("setFilter");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(1886);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1886
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("'x");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      testInstances0.setRelation("KK.lp#");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      double double0 = evaluation0.matthewsCorrelationCoefficient(2280);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.0);
      doubleArray0[3] = (double) 0;
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numTrueNegatives(0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      DecisionStump decisionStump0 = new DecisionStump();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominal(1008);
      Instances instances0 = testInstances0.generate("setOptions");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = new Integer((-2));
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1388));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1388
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Float float0 = new Float((double) (-1));
      instances0.stringFreeStructure();
      testInstances0.setRelation("N'\".`W*:XMxQ|qjeMC");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      double double0 = evaluation0.matthewsCorrelationCoefficient(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles(0L);
      evaluation0.toMatrixString("@relation");
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      LMT lMT0 = new LMT();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".arff";
      evaluation0.toMatrixString();
      int int0 = (-2775);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2775));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[4];
      DenseInstance denseInstance0 = new DenseInstance(1.0, doubleArray0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization1, denseInstance0, 339.3674131670178);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-70);
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      REPTree rEPTree0 = new REPTree();
      Evaluation.makeOptionString(rEPTree0, false);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      try { 
        Evaluation.evaluateModel((Classifier) null, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JRip jRip0 = new JRip();
      try { 
        Evaluation.evaluateModel((Classifier) jRip0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.JRip:
         // 
         // -F <number of folds>
         // \tSet number of folds for REP
         // \tOne fold is used as pruning set.
         // \t(default 3)
         // -N <min. weights>
         // \tSet the minimal weights of instances
         // \twithin a split.
         // \t(default 2.0)
         // -O <number of runs>
         // \tSet the number of runs of
         // \toptimizations. (Default: 2)
         // -D
         // \tSet whether turn on the
         // \tdebug mode (Default: false)
         // -S <seed>
         // \tThe seed of randomization
         // \t(Default: 1)
         // -E
         // \tWhether NOT check the error rate>=0.5
         // \tin stopping criteria \t(default: check)
         // -P
         // \tWhether NOT use pruning
         // \t(default: use pruning)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "ZQ.4BB^p)";
      String[] stringArray0 = new String[1];
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      Capabilities capabilities0 = poissonEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Float float0 = new Float((-45.0));
      instances0.stringFreeStructure();
      testInstances0.setRelation("@relation");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 116
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "/_Vg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Evaluation.makeOptionString((Classifier) null, true);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "c:E7L`/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.equals((Object) null);
      int int0 = (-614);
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = new TestInstances();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      DecisionStump decisionStump1 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("nNJV-]AGRpBpIvAv");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.incorrect();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-1995138716));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation.handleCostOption((String) null, 300);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Correct;
      try { 
        evaluation0.updateStatsForPredictor(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      String[] stringArray0 = new String[4];
      stringArray0[3] = ".libsvm";
      Evaluation.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString("bmW1t)!O-", false);
      assertEquals("bmW1t)!O-\nTotal Number of Instances                0     \n", string0);
      
      CSVLoader cSVLoader0 = new CSVLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BallTree ballTree0 = new BallTree();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      String string1 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string1);
      
      Random.setNextRandom(2);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, (int[]) null, 2);
      instances0.add((Instance) binarySparseInstance0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("Decision Stump: No model built yet.");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(instance0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-388.8532), doubleArray0);
      LMT lMT0 = new LMT();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("getOptimizations", true);
      Random.setNextRandom(187);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("nearestNeighbourSearchAlgorithmTipText");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      Evaluation.handleCostOption((String) null, 300);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString();
      double double0 = evaluation0.m_Correct;
      try { 
        evaluation0.updateStatsForPredictor(251.0, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 251
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = (-995.5);
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumInstancesRelational((-2));
      testInstances1.setNumRelationalNominal(1);
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numInstances();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 5.5;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (-4273.9758);
      doubleArray0[7] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      try { 
        evaluation0.updateStatsForPredictor((-99.0), sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.errorRate();
      double double1 = evaluation0.weightedPrecision();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Instances instances0 = testInstances0.generate("-c <class index>\n");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(instance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.KBInformation();
      stringKernel0.listOptions();
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.falsePositiveRate(13);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedRecall();
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      Float float0 = new Float(Double.NaN);
      instances0.stringFreeStructure();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      Capabilities capabilities1 = new Capabilities(stringKernel0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Evaluation.makeOptionString((Classifier) null, false);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      try { 
        Evaluation.evaluateModel("      dist[j] = RtoP(Fs, j);\n", (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name       dist[j] = RtoP(Fs, j);
         // .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.rootMeanSquaredError();
      Instances instances2 = instances1.stringFreeStructure();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances3 = inputMappedClassifier0.getModelHeader(instances2);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances3);
      converterUtils_DataSource0.nextElement(instances0);
      textDirectoryLoader0.reset();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Evaluation.makeOptionString(decisionStump0, true);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Evaluation.makeOptionString(decisionStump0, false);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SGD sGD0 = new SGD();
      Evaluation.makeOptionString(sGD0, false);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      assertEquals(".libsvm", libSVMLoader1.getFileExtension());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
