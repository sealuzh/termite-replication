/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 00:13:21 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.MindIcon;
import freemind.modes.Mode;
import freemind.modes.filemode.FileController;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.CheckboxMenuItem;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.beans.PropertyChangeListener;
import java.io.FileDescriptor;
import java.io.PushbackInputStream;
import java.net.URL;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Locale;
import javax.help.ForwardAction;
import javax.help.HelpSet;
import javax.help.JHelpFavoritesNavigator;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JTextField;
import javax.swing.MenuElement;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.metal.MetalRootPaneUI;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.plaf.multi.MultiTextUI;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.svggen.DOMTreeManager;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.DefaultImageHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.processor.ProcessorCharacters;
import org.apache.xalan.templates.ElemPI;
import org.apache.xalan.templates.ElemTemplateElement;
import org.apache.xalan.templates.ElemTextLiteral;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.106989112999444
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JButton[] jButtonArray0 = new JButton[0];
      jDayChooser0.days = jButtonArray0;
      int int0 = 4;
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.69631050055377
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters(1);
      FileController fileController0 = null;
      try {
        fileController0 = new FileController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0640675232463703
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.getFocusTraversalPolicy();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.getLocale();
      jDayChooser0.setFocus();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getMaxDayCharacters();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4194304, 100, 4, 44, '/');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)34;
      jDayChooser0.day = (int) (byte)65;
      SystemColor systemColor0 = SystemColor.menu;
      jDayChooser0.setMonth((byte)34);
      Locale locale0 = Locale.CANADA_FRENCH;
      JComponent.setDefaultLocale(locale0);
      Date date0 = jDayChooser0.minSelectableDate;
      MockDate mockDate0 = new MockDate((byte)34, 11, 243);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.695529662081982
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(6);
      jDayChooser0.setDay((-1664));
      Locale.forLanguageTag("9");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1664), (-1664), (-1030), 14, '{');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 19, 14, 35, 35, 'b');
      jDayChooser0.keyPressed(keyEvent1);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.063207197182792
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)34;
      jDayChooser0.day = (int) (byte)65;
      jDayChooser0.getFocusTraversalPolicy();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.getLocale();
      jDayChooser0.setFocus();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getMaxDayCharacters();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 9, 1531L, (byte)8, 100, '/');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(65, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6955063642778003
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)49;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("Dialog Plain 11", 13);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getToolkit();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 16, 39, 38, 38, 'w');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(16);
      jDayChooser0.initDecorations();
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2032, 37, 16, 37, '&');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale.forLanguageTag("9");
      JButton jButton0 = new JButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 1903L, 1157, 34, '|');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.696609571186158
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      HashMap<JButton, MockGregorianCalendar> hashMap0 = new HashMap<JButton, MockGregorianCalendar>();
      JButton jButton0 = new JButton();
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser1.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jDayChooser0.setDay(1287);
      Locale.forLanguageTag("day");
      JButton jButton0 = new JButton();
      KeyEvent keyEvent0 = new KeyEvent(jButton0, 6, 1287, 1211, 1287, '|');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      HashMap<JButton, MockGregorianCalendar> hashMap0 = new HashMap<JButton, MockGregorianCalendar>();
      JButton jButton0 = new JButton();
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 4, "D~V");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5777233286214165
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.setDay((-3053));
      jDayChooser0.setMonth(8);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate((Date) null);
      JButton jButton0 = new JButton();
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      // Undeclared exception!
      try { 
        processorCharacters0.getStylesheetRoot();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.setDay(3587);
      SystemColor systemColor0 = SystemColor.menu;
      jDayChooser0.setMonth((-596));
      JComponent.setDefaultLocale(locale0);
      Date date0 = jDayChooser0.minSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8961031581030303
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.getTime();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.getWeekdayForeground();
      CheckboxMenuItem checkboxMenuItem0 = null;
      try {
        checkboxMenuItem0 = new CheckboxMenuItem();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5776871557149237
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      JButton jButton0 = new JButton("x");
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jDayChooser0.setDay(19);
      SystemColor systemColor0 = SystemColor.menu;
      Date date0 = jDayChooser0.minSelectableDate;
      MockDate mockDate0 = new MockDate(19);
      jDayChooser0.setSelectableDateRange(date0, mockDate0);
      jDayChooser0.setMinSelectableDate(date0);
      ElemPI elemPI0 = new ElemPI();
      ElemTextLiteral elemTextLiteral0 = new ElemTextLiteral();
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      GraphicContext graphicContext0 = new GraphicContext();
      DOMTreeManager dOMTreeManager0 = null;
      try {
        dOMTreeManager0 = new DOMTreeManager(graphicContext0, (SVGGeneratorContext) null, (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // maxGcOverrides should be greater than zero
         //
         verifyException("org.apache.batik.svggen.DOMTreeManager", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale.forLanguageTag("9");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 39, 39, 39, 'f');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.init();
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      // Undeclared exception!
      try { 
        processorCharacters0.getStylesheetRoot();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 381, "day", 381, 18);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.801674346181659
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setFocus();
      JDayChooser jDayChooser1 = new JDayChooser();
      Color color0 = jDayChooser1.getBackground();
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5777114378736075
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      PanelUI panelUI0 = jDayChooser0.getUI();
      jDayChooser0.setUI(panelUI0);
      jDayChooser0.setMaxDayCharacters(0);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getDockingColor();
      jDayChooser0.setForeground((Color) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, 0, "select_branch", 0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(4627, 283, 43, (-200), 559);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.896211771114869
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2769), false, jDayChooser0);
      focusEvent0.paramString();
      focusEvent0.setSource(jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setMaxDayCharacters((-2769));
      jDayChooser0.setMaxDayCharacters(20);
      Color color0 = Color.getColor("day", 1784);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 20;
      floatArray0[1] = (float) (-2769);
      floatArray0[2] = (float) (-2769);
      floatArray0[3] = (float) 20;
      floatArray0[4] = (float) 20;
      floatArray0[5] = (float) (-2769);
      floatArray0[6] = (float) 1784;
      color0.getColorComponents(floatArray0);
      jDayChooser0.setSundayForeground(color0);
      boolean boolean0 = true;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.create();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(228);
      Locale locale0 = jDayChooser0.getLocale();
      JComponent.setDefaultLocale(locale0);
      MockDate mockDate0 = new MockDate((-596), 342, 2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5777233286214165
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDoubleBuffered();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      // Undeclared exception!
      try { 
        SVGGeneratorContext.createDefault((Document) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // domFactory should not be null
         //
         verifyException("org.apache.batik.svggen.SVGGeneratorContext", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.menu;
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      JComponent.isLightweightComponent(jDayChooser0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Windows");
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0640797922441463
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      Locale locale0 = Locale.UK;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getSelectedDay();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters(28);
      jDayChooser1.getMaxSelectableDate();
      jDayChooser0.setMaxDayCharacters(28);
      jDayChooser1.getSundayForeground();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 27, 28, 28, 28, '\\');
      jDayChooser1.keyReleased(keyEvent0);
      jDayChooser1.setFocus();
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(0);
      Locale locale0 = Locale.forLanguageTag("9");
      assertEquals("", locale0.getISO3Language());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.RED;
      jDayChooser0.setDecorationBackgroundColor(color0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      int int0 = 945;
      Locale.forLanguageTag("9");
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, (-2280), 945, 4226, 4226, 'b');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-2011));
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.isDoubleBuffered();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      // Undeclared exception!
      try { 
        SVGGeneratorContext.createDefault((Document) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // domFactory should not be null
         //
         verifyException("org.apache.batik.svggen.SVGGeneratorContext", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      jDayChooser0.setFont((Font) null);
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.create();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(6);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getDockingColor();
      jDayChooser0.setForeground((Color) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      // Undeclared exception!
      try { 
        processorCharacters0.appendChild((ElemTemplateElement) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Trying to add a null child!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      JYearChooser jYearChooser1 = jDayChooser0.yearChooser;
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jYearChooser0.addHierarchyListener((HierarchyListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      int int0 = 90;
      jDayChooser0.isDayBordersVisible();
      // Undeclared exception!
      try { 
        AWTKeyStroke.getAWTKeyStroke("11");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String formatted incorrectly
         //
         verifyException("java.awt.AWTKeyStroke", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.695529662081982
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      Locale.forLanguageTag("9");
      JButton jButton0 = new JButton();
      KeyEvent keyEvent0 = new KeyEvent(jButton0, 72, 0L, (-2125), 63732, '|');
      jDayChooser0.updateUI();
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(90, color0.getGreen());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = new Boolean("day");
      jDayChooser0.setDecorationBordersVisible(false);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 1153, 0L, 8776, (-3269), '&', (-2939));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.9832231481044995
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getAutoscrolls();
      jDayChooser0.getToolTipText();
      jDayChooser0.getName();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getPreferredSize();
      jDayChooser0.weekOfYearVisible = false;
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.getSundayForeground();
      jDayChooser0.getSundayForeground();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setFocus();
      jDayChooser0.setMonth(0);
      jDayChooser0.getDecorationBackgroundColor();
      MenuElement[] menuElementArray0 = new MenuElement[5];
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getAllMapNodePositionHolders();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)58;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(0, color0.getBlue());
      
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Color color0 = jDayChooser0.getSundayForeground();
      // Undeclared exception!
      try { 
        debugGraphics0.setXORMode(color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object object0 = new Object();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      jDayChooser0.putClientProperty(object0, pushbackInputStream0);
      jDayChooser0.addNotify();
      jDayChooser0.setMonth(611);
      jDayChooser0.setAlwaysFireDayProperty(false);
      FileController fileController0 = null;
      try {
        fileController0 = new FileController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("Q8hws!uY^");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addFocusListener(jDayChooser0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputBinary0, true);
      rowOutputBinary0.writeDouble(1.0);
      Object object0 = new Object();
      MockPrintStream mockPrintStream1 = new MockPrintStream("day");
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.createToolTip();
      AWTKeyStroke.getAWTKeyStroke(0, 3, false);
      ForwardAction forwardAction0 = new ForwardAction(jDayChooser0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 6, 29, 667, 0, (-997), 620, 19, 25, false, 1, 3, 4);
      forwardAction0.mouseClicked(mouseWheelEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      System.setCurrentTimeMillis(400L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MultiTextUI multiTextUI0 = new MultiTextUI();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JTextField jTextField0 = new JTextField("day");
      HelpSet helpSet0 = new HelpSet();
      jDayChooser0.getDay();
      URL uRL0 = MockURL.getHttpExample();
      JHelpFavoritesNavigator jHelpFavoritesNavigator0 = null;
      try {
        jHelpFavoritesNavigator0 = new JHelpFavoritesNavigator(helpSet0, "day", "day", uRL0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DragSource", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.repaint(90, 0, (-3333), (-2825));
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.keyTyped((KeyEvent) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.isFocusOwner();
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.setWeekOfYearVisible(false);
      int int0 = (-2742);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2742));
      focusEvent0.paramString();
      JButton[] jButtonArray0 = new JButton[2];
      JButton jButton0 = new JButton();
      jButtonArray0[0] = jButton0;
      MindIcon mindIcon0 = MindIcon.factory("");
      ImageIcon imageIcon0 = mindIcon0.getIcon();
      JButton jButton1 = new JButton((String) null, imageIcon0);
      jButtonArray0[1] = jButton1;
      jDayChooser0.weeks = jButtonArray0;
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.drawDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.requestFocus(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.isDoubleBuffered();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[0] = 0;
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      HashMap<JButton, MockGregorianCalendar> hashMap0 = new HashMap<JButton, MockGregorianCalendar>();
      JButton jButton0 = new JButton();
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      hashMap0.put(jButton0, mockGregorianCalendar0);
      hashtable0.putAll(hashMap0);
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(0, 0, intArray0, 0, 9999, hashtable0);
      jDayChooser0.createImage((ImageProducer) memoryImageSource0);
      Date date0 = jDayChooser0.minSelectableDate;
      Date date1 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setYear(0);
      jDayChooser0.addListeners(0);
      boolean boolean0 = true;
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      processorCharacters0.getLastChildElem();
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      GraphicContext graphicContext0 = new GraphicContext();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGraphics2D.buildSVGGeneratorContext(processorCharacters0, defaultImageHandler0, defaultExtensionHandler0);
      DOMTreeManager dOMTreeManager0 = null;
      try {
        dOMTreeManager0 = new DOMTreeManager(graphicContext0, sVGGeneratorContext0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // maxGcOverrides should be greater than zero
         //
         verifyException("org.apache.batik.svggen.DOMTreeManager", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      Locale locale0 = Locale.forLanguageTag("accessories.plugins.time.JDayChooser$DecoratorButton");
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      jDayChooser0.addPropertyChangeListener((PropertyChangeListener) metalRootPaneUI0);
      jDayChooser0.repaint(0L);
      jDayChooser0.setMonth((-382));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.transferFocusUpCycle();
      Locale.forLanguageTag("accessories.plugins.time.JDayChooser$DecoratorButton");
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      JButton jButton0 = new JButton();
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      // Undeclared exception!
      try { 
        processorCharacters0.getStylesheetRoot();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale.forLanguageTag("accessories.plugins.time.JDayChooser$DecoratorButton");
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1504));
      Integer integer0 = StrokingTextPainter.ADJUST_ALL;
      focusEvent0.paramString();
      focusEvent0.setSource(integer0);
      jDayChooser0.focusLost(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(98066432);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getColorModel();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }
}
