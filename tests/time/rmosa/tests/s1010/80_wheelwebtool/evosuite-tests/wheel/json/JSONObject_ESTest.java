/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 00:10:27 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("JSONArray initOal value should be a string or collection or array.", "JSONArray initOal value should be a string or collection or array.");
      JSONArray jSONArray0 = jSONObject1.getJSONArray("JSONArray initOal value should be a string or collection or array.");
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean1 = jSONObject0.optBoolean("l%#ID", true);
      assertTrue(boolean1);
      
      jSONObject0.put("", (-1398));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = jSONObject0.getInt("");
      assertEquals((-1398), int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("isaddFirst");
      jSONObject0.append("JSONArray initOal value should be a string or collection or array.", "JSONArray initOal value should be a string or collection or array.");
      JSONObject.valueToString((Object) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "JSONArray initOal value should be a string or collection or array.";
      stringArray0[1] = "JSONArray initOal value should be a string or collection or array.";
      stringArray0[2] = "JSONArray initOal value should be a string or collection or array.";
      stringArray0[3] = "JSONArray initOal value should be a string or collection or array.";
      stringArray0[4] = "JSONArray initOal value should be a string or collection or array.";
      stringArray0[3] = "JSONArray initOal value should be a string or collection or array.";
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-169), (-169));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2815553875954016
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Byte byte0 = new Byte((byte)115);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = jSONArray0.put((Object) byte0);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("[", (long) (byte)22);
      jSONObject1.put("dWcdo!)P#X|i4z", (Object) null);
      jSONObject0.toString((int) (byte)115);
      Long long0 = new Long((byte)115);
      Long long1 = new Long(1L);
      JSONObject.getNames((Object) long1);
      jSONObject0.getLong("[");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[0] = "{IQ?DTD~ybdw*n=Qj#W";
      JSONObject jSONObject0 = new JSONObject("{IQ?DTD~ybdw*n=Qj#W", stringArray0);
      jSONObject0.optString("{IQ?DTD~ybdw*n=Qj#W", (String) null);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.put("0", true);
      boolean boolean0 = jSONObject0.has("0");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Short short0 = new Short((short)1978);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("%C^q#&~.", true);
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(950L);
      Long long1 = Long.getLong("kke~3$y", long0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Fw{Wg|FT6bS+", long1);
      JSONObject.getNames(jSONObject0);
      jSONObject0.keys();
      int int0 = jSONObject1.getInt("Fw{Wg|FT6bS+");
      assertEquals(950, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.167609873590689
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject.doubleToString((-1109.9852501));
      JSONObject jSONObject0 = new JSONObject((Object) "-1109.9852501");
      JSONObject jSONObject1 = jSONObject0.put("-1109.9852501", 0.0);
      jSONObject1.getInt("-1109.9852501");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6474128287770395
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Byte byte0 = new Byte((byte)69);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("0", (Collection) linkedList0);
      jSONObject0.toString();
      assertEquals(6, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("JSONArray initial value should be a string or collection or array.", "JSONArray initial value should be a string or collection or array.");
      try { 
        jSONObject1.getBoolean("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initial value should be a string or collection or array.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "(^[?2xJ#tn+";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2815553875954016
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("<AKr", 7106L);
      jSONObject0.optLong("<AKr");
      jSONObject0.put("<AKr", (-75.4872002));
      JSONObject jSONObject1 = jSONObject0.put("A J}ON6rray text must start with '['", (Object) "A J}ON6rray text must start with '['");
      String string0 = jSONObject1.toString(46, 46);
      assertNotNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("tWU4.A", (-2813L));
      jSONObject1.getLong("tWU4.A");
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("JSONArray initOal value should be a string or collection or array.", "JSONArray initOal value should be a string or collection or array.");
      jSONObject0.optDouble((String) null, Double.NaN);
      try { 
        jSONObject1.getInt("JSONArray initOal value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initOal value should be a string or collection or array.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("{}", true);
      try { 
        jSONObject0.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject.valueToString(hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.putOpt("{}", "{}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Long long0 = new Long((-97L));
      JSONObject jSONObject0 = new JSONObject("{}");
      Byte byte0 = new Byte((byte)125);
      jSONObject0.accumulate("", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      // Undeclared exception!
      jSONObject0.toString(1746, 1746);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Boolean boolean0 = new Boolean("%IUfu");
      jSONObject0.append("Null key.", boolean0);
      try { 
        jSONObject0.put((String) null, (-1137));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = new Float((-1470.0254838093938));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~\"]d} --gJGH|2I\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~\"]d} --gJGH|2I\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)125);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Byte byte1 = new Byte((byte) (-18));
      JSONArray jSONArray1 = jSONArray0.put((Object) byte1);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      jSONObject0.put("T{M]Y9;^q] Qs", (long) (byte)125);
      // Undeclared exception!
      jSONObject0.toString(8189);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("JSONArray initOal value should be a string or collection or array.", "JSONArray initOal value should be a string or collection or array.");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1815192735832012
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(44);
      jSONArray0.optDouble(46, 1.0);
      Byte byte0 = new Byte((byte)9);
      Byte.toUnsignedInt((byte) (-96));
      Byte.compare((byte)9, (byte)81);
      JSONArray jSONArray1 = jSONArray0.put((Object) byte0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(140.14376);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("[", object0);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.append("[", "[");
      JSONArray jSONArray2 = jSONObject1.toJSONArray(jSONArray1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray2.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("JSONArray initOal value should be a string or collection or array.", "JSONArray initOal value should be a string or collection or array.");
      jSONObject0.get("JSONArray initOal value should be a string or collection or array.");
      try { 
        jSONObject0.getDouble("JSONArray initOal value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initOal value should be a string or collection or array.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("java.lang.Long@00000000100", true);
      try { 
        jSONObject0.getJSONObject("L_V=HA,=v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"L_V=HA,=v\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("] is not a number.", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt((String) null);
      double double0 = 3756.0;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("B`M(JV'NZQ5{K=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of B`M(JV'NZQ5{K=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1.0));
      jSONObject0.accumulate("4", double0);
      jSONObject0.optLong("4", (-1L));
      Object object0 = JSONObject.NULL;
      jSONObject0.append("istoString", object0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\f";
      JSONObject jSONObject1 = jSONObject0.put("\f", (Object) "Missing value");
      try { 
        jSONObject0.append("\f", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\f] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.optDouble("jMWNc&3n[Go8m");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 42;
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>(42);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      Float float0 = new Float((float) 42);
      hashMap0.put(jSONObject0, float0);
      JSONObject.quote((String) null);
      jSONObject0.putOpt("\"\"", (Object) null);
      Float float1 = new Float((float) 42);
      Float.sum(42, (-2264.24F));
      JSONObject jSONObject1 = jSONObject0.accumulate("[", (Object) null);
      try { 
        jSONObject1.getJSONArray("A*mD@2gbOxNxgtw A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A*mD@2gbOxNxgtw A\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Float float0 = new Float(0.0F);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("4g$");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("B31`,A#", false);
      jSONObject2.optString("B31`,A#", "get");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0992338308014475
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2361L);
      jSONArray0.optInt(44);
      jSONArray0.optDouble(44, (-2375.75238759));
      Byte byte0 = new Byte((byte)81);
      JSONArray jSONArray1 = jSONArray0.put((Object) byte0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      jSONObject0.put("N'C#yvbtL8~OV4sE,", 0L);
      jSONObject0.toString(0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      hashMap0.clone();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      String string0 = jSONObject0.optString("MoBWF");
      assertEquals("", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 8192, 200);
      Long long0 = new Long(8192);
      Boolean boolean0 = new Boolean("null");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.removeAll(linkedList1);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, 8210, 8210);
      Long long0 = new Long(8210);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string0 = JSONObject.valueToString(linkedList0, 2365, 245);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject.quote(",\n");
      try { 
        Long.decode("\",\n\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\",
         // \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("z=a*8o8Wvn^:[!SXH(", (-1294));
      assertEquals((-1294), int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(44);
      jSONArray0.optDouble((-6496), (double) 0);
      Byte byte0 = new Byte((byte)81);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      String string0 = "is";
      stringArray0[0] = "is";
      jSONArray0.put((Object) jSONObject0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Float float0 = new Float((double) (byte)81);
      Double double0 = Double.valueOf(Double.NaN);
      try { 
        jSONObject0.append("is", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("54CP&BLYhT", 8);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.removeAll(linkedList1);
      Byte.toUnsignedInt((byte) (-123));
      jSONObject0.toString(100, 2268);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-677));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-2764), 2646);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(44);
      jSONArray0.optDouble(44, (-2375.75238759));
      Byte byte0 = new Byte((byte)81);
      JSONObject.valueToString(jSONArray0, 0, (byte)23);
      Long long0 = new Long((-2690L));
      Boolean boolean0 = new Boolean("getpush");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      Boolean boolean0 = new Boolean("=hHz.-j072}1");
      Double double0 = new Double((-1139.2513464967644));
      Double.isFinite(2551.0);
      hashMap0.put(boolean0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.names();
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("z=a*8o8Wvn^:[!SXH(", true);
      jSONObject0.optInt("z=a*8o8Wvn^:[!SXH(", 8189);
      JSONTokener jSONTokener0 = new JSONTokener("z=a*8o8Wvn^:[!SXH(");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "de";
      JSONObject jSONObject1 = jSONObject0.accumulate("de", "de");
      jSONObject1.remove("de");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject.valueToString(hashMap0, 327, 12);
      Long long0 = new Long(721L);
      Boolean boolean0 = new Boolean("{}");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>(44);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString(";KmA~5m4lXS", "gettoJSONArray");
      assertEquals("gettoJSONArray", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Short, Byte> hashMap0 = new HashMap<Short, Byte>(12);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("<,8UHD4");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte byte0 = (byte)14;
      Byte byte1 = new Byte((byte)14);
      Byte.toUnsignedInt((byte)14);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "v g[)-!zEf*KqtUg07}";
      JSONObject jSONObject1 = jSONObject0.put("v g[)-!zEf*KqtUg07}", false);
      jSONObject1.getString("v g[)-!zEf*KqtUg07}");
      String string1 = "Substring bounds error";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Substring bounds error
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("[=Ltb$aQ6,&qSW#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[=Ltb$aQ6,&qSW#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject0.accumulate("flb\"}=6k", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "Null pointer");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optDouble(2963, 522.057);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.putOpt((String) null, jSONArray0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = new Integer(44);
      jSONArray0.optDouble(44, (-2375.75238759));
      Byte byte0 = new Byte((byte)81);
      Byte.toUnsignedInt((byte) (-123));
      Byte.compare((byte)81, (byte)23);
      jSONArray0.put((Object) byte0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-2375.75238759));
      String string0 = JSONObject.valueToString(jSONObject0, (byte) (-123), 44);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float((-1.0F));
      Integer integer0 = new Integer((-785));
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("3MG!F[/\"", (Object) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double((-117.098961858514));
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", (-2238.168437));
      assertEquals((-2238.168437), double0, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-1982));
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("] is not a JSONObject.", "] is not a JSONObject.");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("de", "de");
      try { 
        jSONObject1.getJSONArray("de");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"de\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("~],Q,^%;/gsK>>SjtO");
      assertEquals("\"~],Q,^%;/gsK>>SjtO\"", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Byte.toUnsignedInt((byte) (-123));
      StringWriter stringWriter0 = new StringWriter();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("Expected a ',' or '}'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{IQ?DTD~ybdw*n=Qj#W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 19 of {IQ?DTD~ybdw*n=Qj#W
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      jSONTokener0.toString();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "~],Q,^%;/gsK>>SjtO";
      stringArray0[1] = "~],Q,^%;/gsK>>SjtO";
      stringArray0[3] = "~],Q,^%;/gsK>>SjtO";
      stringArray0[4] = "~],Q,^%;/gsK>>SjtO";
      stringArray0[5] = "~],Q,^%;/gsK>>SjtO";
      stringArray0[6] = "~],Q,^%;/gsK>>SjtO";
      stringArray0[7] = "~],Q,^%;/gsK>>SjtO";
      stringArray0[8] = "~],Q,^%;/gsK>>SjtO";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      jSONObject0.putOpt("~],Q,^%;/gsK>>SjtO", hashMap0);
      jSONObject0.optLong("MC!l']{jIUV@$?{W", 653L);
      try { 
        jSONObject0.getDouble("~],Q,^%;/gsK>>SjtO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~],Q,^%;/gsK>>SjtO\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(":^4`rJ", 883.6277386);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Map<String, Integer> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\f", (Object) "Missing value");
      Float float0 = new Float(0.0F);
      Long long0 = new Long((-72L));
      jSONObject0.accumulate("\f", long0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("spl", false);
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONObject0.opt("Substring bounds error");
      assertNull(object0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.keys();
      jSONObject0.optLong("ZP>nk|<`V", 0L);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.getInt("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\\r";
      Short short0 = new Short((short)40);
      JSONObject jSONObject1 = jSONObject0.accumulate("\r", short0);
      String string1 = "Expected a ',' or '}'";
      jSONObject1.optInt("Expected a ',' or '}'");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((long) (short)40);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) "\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",\n", true);
      try { 
        jSONObject0.getLong(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\f";
      JSONObject jSONObject1 = jSONObject0.put("\f", (Object) "Missing value");
      try { 
        jSONObject1.getBoolean("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1L));
      try { 
        jSONObject0.append((String) null, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.append((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(574);
      jSONArray0.optDouble(0, (double) 0);
      JSONObject.valueToString((Object) null, 48, (-5153));
      Long long0 = new Long((-3198L));
      Boolean boolean0 = new Boolean("null");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 128;
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>(128);
      HashMap<JSONObject, Float> hashMap1 = new HashMap<JSONObject, Float>(44);
      HashMap<JSONObject, Float> hashMap2 = new HashMap<JSONObject, Float>(42);
      HashMap<JSONObject, Float> hashMap3 = new HashMap<JSONObject, Float>(44);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap3);
      try { 
        jSONObject1.put((String) null, (Map) hashMap2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = new Boolean((String) null);
      JSONObject.valueToString(boolean0, 2722, (-5323));
      Long long0 = new Long(200);
      Boolean boolean1 = new Boolean("java.lang.Boolean@0000000002");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      Float float0 = new Float((-657.37733307));
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(float0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(2646, 2);
      assertNotNull(string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("'\"-CRuPeKd88Mty/.O ");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("~],Q,^%;/gsK>>SjtO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~],Q,^%;/gsK>>SjtO\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer integer0 = new Integer((-598));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Long long0 = new Long(211);
      JSONObject.valueToString(long0, 211, 211);
      Boolean boolean0 = new Boolean("dues");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("(A<^[?]xJ#tn+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(A<^[?]xJ#tn+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONObject[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2186.0261F);
      JSONObject jSONObject1 = new JSONObject(float0);
      String string0 = JSONObject.doubleToString(1857.7272512);
      assertEquals("1857.7272512", string0);
      
      int int0 = jSONObject1.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>(16);
      Integer integer0 = new Integer(15);
      Integer.getInteger("Substring bounds error", 16);
      hashMap1.put((Float) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Byte.toUnsignedInt((byte)33);
      Byte.compare((byte)23, (byte) (-123));
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(146);
      hashMap0.put(jSONArray0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONArray cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Float float0 = new Float(1302.0503F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Short short0 = new Short((short) (-4135));
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("JR??3@.3vpTK.S6xPR_", false);
      jSONObject0.optInt("JR??3@.3vpTK.S6xPR_", 0);
      JSONTokener jSONTokener0 = new JSONTokener("getdecode");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject.quote(",:]}/\"[{;=#");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("z=a*8o8Wvn^:[!SXH(", 8189);
      assertEquals(8189, int0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("~],Q,^%;/gsK>>SjtO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~],Q,^%;/gsK>>SjtO\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(boolean0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(":M$:H\"2H0SiFblx8");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of :M$:H\"2H0SiFblx8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("K", (-1L));
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString((-999), 46);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.018706115735962
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject.quote("Aq/jEvkn4're~W@8z");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(59);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("Aq/jEvkn4're~W@8z", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "wheel.fson.JSONObject$1";
      jSONObject0.putOpt("wheel.fson.JSONObject$1", (Object) null);
      Float float0 = new Float(0.0F);
      int int0 = (-1977);
      jSONObject0.toString((-66), (-66));
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject.testValidity("',fbOOK?`");
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("hS_7E[8wRRMde{", "hS_7E[8wRRMde{");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)43);
      try { 
        jSONObject0.put((String) null, (Object) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("ke", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      double double0 = jSONObject0.optDouble(":yK0qKu!n?y8");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("LF1SF;^4wfN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"LF1SF;^4wfN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
