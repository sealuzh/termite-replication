/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 28 21:14:41 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.580340914984137
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("{}", (Object) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, (-2577), 48);
      assertNotNull(string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.712227691559177
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString(35, (-2807));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = JSONObject.quote("hUBA]R]S$!Y#@#/");
      assertEquals("\"hUBA]R]S$!Y#@#/\"", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("|JEDa?fuje");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |JEDa?fuje
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("TI`f", 0L);
      Object object0 = jSONObject1.remove("TI`f");
      assertEquals(0L, object0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[]", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getpush", 62);
      long long0 = jSONObject0.optLong("getpush");
      assertEquals(62L, long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9722469794234418
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)5694);
      JSONObject jSONObject1 = jSONObject0.put("EY& >g:m.$M", (Object) short0);
      int int0 = jSONObject1.optInt("EY& >g:m.$M");
      assertEquals(5694, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-721L));
      JSONObject jSONObject1 = jSONObject0.accumulate("kVla> 6<`", long0);
      int int0 = jSONObject1.optInt("kVla> 6<`");
      assertEquals((-721), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getdoubleToRawLongBits", (Object) "");
      Object object0 = jSONObject1.opt("getdoubleToRawLongBits");
      assertEquals("", object0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put(",", (Collection) linkedList0);
      boolean boolean0 = jSONObject1.has(",");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = Long.getLong("pOVPs!?", (-31L));
      jSONObject0.accumulate("000", long0);
      String string0 = jSONObject0.getString("000");
      assertNotNull(string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7326587201992074
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      jSONObject0.accumulate("{(j`9qhj tVo=", float0);
      long long0 = jSONObject0.getLong("{(j`9qhj tVo=");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.791759469228055
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1169.2937812));
      JSONObject jSONObject1 = jSONObject0.accumulate(",c", double0);
      long long0 = jSONObject1.getLong(",c");
      assertEquals((-1169L), long0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" 0(uN.pe", 0L);
      int int0 = jSONObject0.getInt(" 0(uN.pe");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5600040073151407
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+gf0%X&*");
      Float float0 = new Float(367.0F);
      jSONObject0.accumulate("wheel.json.JSONObject", float0);
      jSONObject0.getInt("wheel.json.JSONObject");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",\n", (-3046L));
      int int0 = jSONObject0.getInt(",\n");
      assertEquals((-3046), int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.455500877075017
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.accumulate("wheel.json.JSONException", double0);
      jSONObject0.get("wheel.json.JSONException");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONArray", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Boolean boolean0 = new Boolean(" of ");
      String string0 = JSONObject.valueToString(boolean0, (byte)42, 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(721, 0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, 220);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, ".fQ%%*b=d");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("", "");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(12);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, integer0, biFunction0);
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("0");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(",", (Collection) null);
      JSONArray jSONArray0 = jSONObject0.optJSONArray(",");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Collection<Object> collection0 = hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("{}", collection0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) jSONObject0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-1695L));
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ZI>D)-LY}QTSENv[&L", 0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 1.0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("A JSONObject text must begin with '{'", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("isjoin", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, "tEH?\"KCn6dp:i");
      assertEquals("tEH?\"KCn6dp:i", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optString("");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(",\n", (-1349L));
      assertEquals((-1349L), long0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("xI6F", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      long long0 = jSONObject0.optLong("", (long) 123);
      assertEquals(123L, long0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("K!+1-ShLR~l V3");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, (-5180));
      assertEquals((-5180), int0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("&:e $JX-=wf", 1794.668626466656);
      assertEquals(1794.668626466656, double0, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("UL", (double) (short) (-4299));
      assertEquals((-4299.0), double0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("", (double) (short) (-4293));
      assertEquals((-4293.0), double0, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-93));
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-565.04491298));
      assertEquals("-565.04491298", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.9354019070408681
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.append("", (Object) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject1.putOpt(".f^Q%*b=", linkedList0);
      jSONObject0.toString((-321));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject1 = jSONObject0.accumulate("", byte0);
      double double0 = jSONObject1.optDouble("");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.4849258911092231
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("java.lang.Float@0000000004.", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.7677281666160183
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("getparseUnsignedLong", jSONObject0);
      // Undeclared exception!
      jSONObject1.toString((int) (short)497);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.add((Boolean) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt(".fQ%%*b=d", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (-666L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.068513497359536
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "G_w#}4;wl&5.rR");
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      Byte byte0 = Byte.valueOf((byte) (-71));
      JSONObject jSONObject0 = new JSONObject("G_w#}4;wl&5.rR", stringArray0);
      hashMap0.put(byte0, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("];,\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"];,\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("L$Z", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.6859646722371444
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("java.lang.Float@0000000004.", "java.lang.Float@0000000004.");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.3826070734809082
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("{}", (Map) null);
      StringWriter stringWriter0 = new StringWriter(123);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.8505448245928513
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("[S>{I(xas$Q!", true);
      jSONObject0.toString((-942), 4463);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-2909), (-2909));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 0, (-953));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.7055998796812215
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(3897);
      jSONObject0.append(" s3e#>3I", double0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getclear");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.valueOf(false);
      linkedList0.add(boolean0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 27, 26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt(".2~64</W^.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".2~64<\\/W^.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.981102200701706
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("\"p?M';%.g;$){w3\\\"");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.927037308225879
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("[S>{I(xas$Q!", object0);
      String string0 = jSONObject1.toString((-942), 4463);
      // Undeclared exception!
      jSONObject0.getDouble(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("C_\bc>bzAy3Q,OdAn[", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("isvalueOf", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.5600040073151407
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONException", double0);
      jSONObject1.optString("wheel.json.JSONException");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Float@0000000004.", "java.lang.Float@0000000004.");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("java.lang.Float@0000000004.");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.5600040073151407
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.accumulate("wheel.json.JSONException", double0);
      double double1 = jSONObject0.optDouble("wheel.json.JSONException");
      assertEquals(4, jSONObject0.length());
      assertEquals(70.40387330717, double1, 0.01);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.296484034273047
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2944.77F);
      JSONObject jSONObject1 = jSONObject0.append("Bad value from toJSONString: ", float0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("~\"3W#fqBrq", (Collection) linkedList0);
      Boolean boolean0 = new Boolean("isvalueOf");
      JSONObject jSONObject2 = new JSONObject(boolean0);
      jSONObject0.optBoolean("isvalueOf", true);
      String string0 = jSONObject1.toString((int) (short)101);
      assertNotNull(string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.8884699676219987
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getvalueOf");
      // Undeclared exception!
      jSONObject0.toString(1624, 1624);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.974931521657538
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2944.77F);
      JSONObject jSONObject1 = jSONObject0.append("Bad value from toJSONString: ", float0);
      String string0 = jSONObject1.toString((int) (short)101);
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      hashMap0.put("3UkvM*.eB!^gw;Od2", (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("java.lang.Float@0000000004.", "java.lang.Float@0000000004.");
      try { 
        jSONObject0.getLong("java.lang.Float@0000000004.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@0000000004.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("0");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.6395976333576423
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONException", double0);
      try { 
        jSONObject1.getJSONObject("wheel.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONException\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Float@0000000004.", "java.lang.Float@0000000004.");
      JSONArray jSONArray0 = jSONObject1.getJSONArray("java.lang.Float@0000000004.");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.6395976333576423
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.accumulate("wheel.json.JSONException", double0);
      try { 
        jSONObject0.getJSONArray("wheel.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONException\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.6583656821534865
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.accumulate("wheel.json.JSONException", double0);
      int int0 = jSONObject0.optInt("wheel.json.JSONException", 2530);
      assertEquals(4, jSONObject0.length());
      assertEquals(70, int0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.0692024658203625
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("", true);
      boolean boolean0 = jSONObject0.optBoolean("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.5538483415669473
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("UL", "UL");
      try { 
        jSONObject0.getBoolean("UL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"UL\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.6283413145315924
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.putOpt(".f^Q%*b=", linkedList0);
      boolean boolean0 = jSONObject1.optBoolean(".f^Q%*b=", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("JM*9{K2", false);
      boolean boolean0 = jSONObject0.getBoolean("JM*9{K2");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.5600040073151407
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONException", double0);
      jSONObject1.getDouble("wheel.json.JSONException");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Float@0000000004.", "java.lang.Float@0000000004.");
      JSONObject jSONObject2 = jSONObject0.append("java.lang.Float@0000000004.", jSONObject1);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.4680602034990462
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getgetLong", 0.0);
      jSONObject0.accumulate("getgetLong", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("ac", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.5086597717181076
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.accumulate("wheel.json.JSONException", double0);
      try { 
        jSONObject0.append("wheel.json.JSONException", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[wheel.json.JSONException] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.4218956404837546
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1.7710740250191421");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("1.7710740250191421", (Collection) linkedList0);
      jSONObject1.accumulate("1.7710740250191421", "1.7710740250191421");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{(j`9qhj tVo=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 12 of {(j`9qhj tVo=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("&:e $JX-=wf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of &:e $JX-=wf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("java.lang.Float@0000000004.", "java.lang.Float@0000000004.");
      boolean boolean0 = jSONObject0.isNull("java.lang.Float@0000000004.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.5228146795137603
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("toS", (-1081));
      double double0 = jSONObject0.getDouble("toS");
      assertEquals(3, jSONObject0.length());
      assertEquals((-1081.0), double0, 0.01);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      boolean boolean0 = jSONObject0.optBoolean("pbv>");
      assertFalse(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.981102200701706
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      long long0 = jSONObject0.optLong("W'ckzyA/GM{F>y1");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=1.7481554572476763
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      try { 
        jSONObject0.append((String) null, "{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=1.704111275729657
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("mG", (Map) hashMap0);
      try { 
        jSONObject0.getInt("mG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mG\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=1.7152863051349312
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 171
  /*Coverage entropy=1.5733163646283495
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put(" at character ", 1615.180768466515);
      long long0 = jSONObject0.getLong(" at character ");
      assertEquals(2, jSONObject0.length());
      assertEquals(1615L, long0);
  }

  /**
  //Test case number: 172
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Double double0 = new Double(70.40387330717);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("wheel.json.JSONException", 3289L);
      assertEquals(4, jSONObject0.length());
  }
}
