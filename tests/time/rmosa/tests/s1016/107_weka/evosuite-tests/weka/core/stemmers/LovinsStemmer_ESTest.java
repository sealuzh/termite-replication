/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 04:24:48 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("umpt");
      assertEquals("um", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("T;|pjbb~s)ms4T4h.Zv");
      assertEquals("t;|pjb~s)ms4t4h.zv", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("pXide");
      assertEquals("pxid", string0);
      
      String string1 = lovinsStemmer0.stem("pxid");
      assertEquals("pxid", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1907775123134998
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("invalid CVS revision - not enough partsseparated by dots!");
      assertEquals("invalis cv revis - not enough partssepar by dot!", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1840562714690361
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("rpt");
      assertEquals("rb", string0);
      
      String string1 = lovinsStemmer0.stemString("Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ");
      assertEquals("arra-dimens of 'new int[][]{{1,2,3},{4,5,6}}': ", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1027712457674337
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmerrud");
      assertEquals("wek.cor.stemmer.lovinsstemmerrus", string0);
      
      lovinsStemmer0.stemString("olv");
      String string1 = lovinsStemmer0.stem("rud");
      assertEquals("rus", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.stem("wek.cor.stemmer.lovinsstemmerrus");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string4 = lovinsStemmer1.stemString("NmBw7}?");
      assertEquals("nmbw7}?", string4);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.49382716049382713
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("y3aggwnkmit");
      lovinsStemmer1.stemString("atingly");
      String string0 = lovinsStemmer1.stemString("y3aggwnkmit");
      assertEquals("y3aggwnkmis", string0);
      
      String string1 = lovinsStemmer0.stemString("y3aggwnkmis");
      assertEquals("y3aggwnkm", string1);
      
      lovinsStemmer0.stemString("y3aggwnkm");
      String string2 = lovinsStemmer1.stemString("yz");
      assertEquals("yz", string2);
      
      String string3 = lovinsStemmer0.stemString("String should not finish with ");
      assertEquals("string should not finish with ", string3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1881966855104402
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("ancies");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("iev");
      assertEquals("ief", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("Fatal error.");
      assertEquals("fat error.", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.590919980975802
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ically");
      lovinsStemmer0.stem("Can't construct a path to file relative to user dir.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("ical");
      lovinsStemmer0.stem("J`XDR=%ZRV-$U");
      lovinsStemmer1.stemString("ically");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ical");
      lovinsStemmer1.stem("J`XDR=%ZRV-$U");
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("otide");
      assertEquals("ot", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.592118782174603
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ative");
      lovinsStemmer0.stem("at");
      lovinsStemmer0.stemString("vHYI7[&G>13G");
      lovinsStemmer0.stem("u.Lrb 'T8|gg");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("j_");
      lovinsStemmer0.stemString("/:]_f2}/");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1888736762864411
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("ISSN");
      lovinsStemmer0.stem("issn");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer0.stemString("istr");
      assertEquals("ister", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      String string2 = lovinsStemmer1.stem("Get position of flag -f: ");
      assertEquals("get position of flag -f: ", string2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("yz");
      assertEquals("yz", string0);
      
      String string1 = lovinsStemmer0.stemString("y3aggwnkmisyt");
      assertEquals("y3aggwnkmisys", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("uct");
      lovinsStemmer0.stem("uc");
      String string0 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1829430989272922
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = "_B&qU{ZUVf^$yXNh";
      lovinsStemmer0.stemString("_B&qU{ZUVf^$yXNh");
      lovinsStemmer0.stem("_B&qU{ZUVf^$yXNh");
      lovinsStemmer0.stemString("kSFTt}Q}ap5M6Z");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4888888888888889
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("jWR|PGVMPQa?X");
      assertEquals("jwr|pgvmpq?x", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("jwr|pgvmpq?x");
      String string1 = lovinsStemmer1.stemString("ation");
      assertEquals("ation", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ancial");
      assertEquals("anc", string0);
      
      String string1 = lovinsStemmer0.stem("mF]e/*{FN{=wYl");
      assertEquals("mf]e/*{fn{=wyl", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("dpp)xyvlmit");
      assertEquals("dp)xyvlmis", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("unpublished");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("SERIES");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stem("qY68oC0F*-E<}f`A@9Q");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("lovinsstemmerlud");
      lovinsStemmer0.stem("lovinsstemmerlus");
      lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("[@HWEAlY]X>ZK");
      assertEquals("[@hwea]x>zk", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("otide");
      assertEquals("ot", string0);
      
      String string1 = lovinsStemmer0.stemString("arized");
      assertEquals("ariz", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ialix");
      assertEquals("ialic", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("=8P0#'RvwcX");
      assertEquals("=8p0#'rvwcx", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("olv");
      assertEquals("olut", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("idine");
      assertEquals("id", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stem("iEOluLi$R~@$'|XC");
      assertEquals("ieoluli$r~@$'|xc", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("iefbex");
      assertEquals("iefbic", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2845130924164607
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("$Revision: 8034 $");
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("lud");
      lovinsStemmer0.stem(":");
      String string0 = lovinsStemmer0.stemString("proceedings");
      assertEquals("proceed", string0);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("proceed");
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stem("lud");
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.stemString("jxhtjond");
      assertEquals("jxhtjons", string3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("dexdicond");
      assertEquals("dexdicons", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ional");
      assertEquals("ion", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("<NV^?=_@,qcl1Kus,5:");
      assertEquals("<nv^?=_@,qcl1kus,5:", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("issnet");
      lovinsStemmer0.stem("#VbLE&KA&.#Y`");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stem("X");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.stemmers.LovinsStemmer", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("mf]e/*{fn{=wylet");
      assertEquals("mf]e/*{fn{=wyles", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("monthlud");
      assertEquals("monthlus", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1895500582577871
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("pex");
      lovinsStemmer0.stemString("pex");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.");
      lovinsStemmer1.stem("pex");
      String string1 = lovinsStemmer0.stem("an annot. it is not us by th standard bibliograph styl, but may be us by other that produc an annot bibliograph.");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1861049270388184
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Yt-d");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("yt-d");
      lovinsStemmer0.stemString("Yt-d");
      lovinsStemmer0.stemString("flmex");
      lovinsStemmer0.stem("yt-d");
      lovinsStemmer1.stemString("morgan kaufmann publishesend");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.stemString("y3aggwnkmitax");
      TechnicalInformation technicalInformation1 = lovinsStemmer2.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("null");
      assertEquals("nl", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("lid");
      assertEquals("lis", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("lovinsstemmerbex");
      lovinsStemmer0.stemString("lovinsstemmerend");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ialert");
      assertEquals("ialers", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("end");
      assertEquals("ens", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ationuasend");
      assertEquals("ationuasens", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ieflux");
      assertEquals("iefluc", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Quote parse error.");
      assertEquals("quot pars error.", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("EDITOR");
      assertEquals("edit", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("x5e4:x&l<!cvad");
      assertEquals("x5e4:x&l<!cvas", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ieoll$r~@$'|xctex");
      assertEquals("ieoll$r~@$'|xctic", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("dex");
      String string0 = null;
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("y6");
      String string0 = lovinsStemmer0.stemString("wfcy6yz");
      assertEquals("wfcy6ys", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ialize");
      assertEquals("ial", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("eflpex");
      assertEquals("eflpic", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.stem("ab-XD4:_[N[W*@?l^YV");
      String string1 = lovinsStemmer0.stemString("izing");
      assertEquals("izing", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1901168775296422
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("4CJr7=v&l>ypNtW6,n");
      String string0 = lovinsStemmer0.stemString("Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ");
      lovinsStemmer1.stemString("4CJr7=v&l>ypNtW6,n");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("arra-dimens of 'new int[][]{{1,2,3},{4,5,6}}': ");
      lovinsStemmer1.stemString("ar-dimen of 'new int[][]{{1,2,3},{4,5,6}}': ");
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("lovinsstemmerherex");
      assertEquals("lovinsstemmerherec", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("cid");
      assertEquals("cis", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("22:]jjk*cw@^v6<vrax");
      assertEquals("22:]jjk*cw@^v6<vrac", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("iEOluLi$R~@$'|XC");
      assertEquals("ieoll$r~@$'|xc", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("notpand");
      assertEquals("notpans", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("lovinsstemmerher");
      String string0 = lovinsStemmer0.stemString("uad");
      assertEquals("uas", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("JOURNAL");
      assertEquals("journ", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("erid");
      assertEquals("eris", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ination");
      assertEquals("inat", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("DY'o");
      assertEquals("dy'", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("H`a=wkz, p?i`YY? \"");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("Z$}I$uM");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("her");
      assertEquals("hes", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("q1uMm");
      String string0 = lovinsStemmer0.stemString("q1uMm");
      assertEquals("q1um", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ons");
      assertEquals("on", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ADDRESS");
      assertEquals("addres", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4918032786885246
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("picetdex");
      String string0 = lovinsStemmer0.stemString("rud");
      assertEquals("rus", string0);
      
      lovinsStemmer0.stemString("picetdex");
      lovinsStemmer0.stemString("picetdic");
      String string1 = lovinsStemmer0.stemString("An article in a conference proceedings.");
      assertEquals("an articl in a confer proceed.", string1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4931506849315069
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("lovinsstemmerher");
      assertEquals("lovinsstemmerhes", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("A document having an author and title, but not formally published.");
      assertEquals("a docum hav an author and titl, but not form publ.", string1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ifully");
      assertEquals("ifl", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("icity");
      assertEquals("ic", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3795474022830998
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("year");
      assertEquals("year", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("[e'M(t$Lr&Fqy+yKG");
      assertEquals("[e'm(t$lr&fqy+ykg", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("eableness");
      assertEquals("eabl", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      String string0 = null;
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("");
      assertEquals("", string0);
  }
}
