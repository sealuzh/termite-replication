/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 04:44:31 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.IntervalEstimator;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SGD;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.estimators.KernelEstimator;
import weka.estimators.NormalEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5381266430281175
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Attribute attribute0 = new Attribute(".bsi", 77);
      Attribute.typeToString(attribute0);
      instances1.setClass(attribute0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 77, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      instances1.delete();
      sGD0.setDontNormalize(false);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      double double0 = evaluation0.precision(1);
      assertEquals(0.0, double0, 0.01);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      String string0 = evaluation0.toMatrixString(" ");
      assertEquals(" \n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.setNumericPriorsFromBuffer();
      double double1 = evaluation0.truePositiveRate(0);
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.evaluateModel((Classifier) gaussianProcesses0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      naiveBayes0.buildClassifier(instances1);
      costSensitiveClassifier0.setClassifier(naiveBayes0);
      costSensitiveClassifier0.getCostMatrix();
      SparseInstance sparseInstance0 = new SparseInstance(2133);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.add((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(256.16137, doubleArray0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = testInstances0.generate(".arff");
      try { 
        evaluation0.crossValidateModel("+!N\"ZfV12bZri;f", instances1, (-1), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: +!N\"ZfV12bZri;f
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      NormalEstimator normalEstimator0 = new NormalEstimator((-1.0));
      Capabilities capabilities0 = normalEstimator0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      instances0.delete();
      testInstances0.setNumNominalValues((-1127281206));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      SparseInstance sparseInstance0 = new SparseInstance(3247);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      Attribute attribute0 = new Attribute("");
      boolean boolean0 = evaluation0.equals("");
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[2] = (-3176.371918390924);
      doubleArray0[5] = (-3176.371918390924);
      doubleArray0[6] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      instances0.add((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.relativeAbsoluteError();
      MultiScheme multiScheme0 = new MultiScheme();
      J48 j48_0 = new J48();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) j48_0, instance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("   * Classifies the given instance.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      J48 j48_0 = new J48();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom((-2));
      try { 
        evaluation0.crossValidateModel((Classifier) j48_0, (Instances) null, (-1), (Random) mockRandom0, (Object[]) testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.addNumericTrainClass((-1), (-1));
      evaluation0.SFPriorEntropy();
      evaluation0.KBMeanInformation();
      evaluation0.unweightedMacroFmeasure();
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      assertNotNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Logistic logistic0 = new Logistic();
      logistic0.getCapabilities();
      Instances instances0 = testInstances0.generate("\tOutputs information-theoretic statistics.\n");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      testInstances0.setRelation("@data");
      Evaluation.getGlobalInfo(logistic0);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2850), (char[]) null, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)107;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      double double0 = evaluation1.matthewsCorrelationCoefficient((-3061));
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.generate();
      Logistic logistic0 = new Logistic();
      logistic0.toString();
      logistic0.getCapabilities();
      Instances instances0 = testInstances0.generate(".bsi");
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.areaUnderROC((-848));
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFSchemeEntropy();
      double double2 = evaluation0.numInstances();
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getRevision");
      testInstances0.setNumDate(1000);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.correct();
      evaluation0.pctCorrect();
      evaluation0.totalCost();
      evaluation0.meanAbsoluteError();
      evaluation0.setNumericPriorsFromBuffer();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-412));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -412
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      instances1.delete();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.toMatrixString("@data");
      evaluation0.incorrect();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      RandomTree randomTree0 = new RandomTree();
      AbstractClassifier.runClassifier(randomTree0, (String[]) null);
      String string0 = Evaluation.makeOptionString(classifier0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getRevilion");
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominal(97);
      testInstances1.setNumString((-1));
      TestInstances testInstances2 = new TestInstances();
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(false);
      TestInstances testInstances3 = new TestInstances();
      Instances instances1 = testInstances3.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.falseNegativeRate(85);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_SumErr;
      evaluation0.setPriors(instances0);
      evaluation0.unclassified();
      double double2 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double2, 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double3 = evaluation0.falsePositiveRate((-1));
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-3176.371918390924);
      doubleArray0[5] = (-3176.371918390924);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Class must be nominal for margin distributions";
      stringArray0[1] = "\"`/^68D";
      stringArray0[2] = "getTechnicalInformation";
      try { 
        Evaluation.evaluateModel((Classifier) serializedClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.misc.SerializedClassifier:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -model <filename>
         // \tThe file containing the serialized model.
         // \t(required)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      sGD0.setDontNormalize(false);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.toMatrixString();
      double double0 = new Integer((-1));
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("$7Ke6KRXIJ?mF", arrayList0);
      testInstances0.generate();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getNextInstance(instances1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // MatlabLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      XML xML0 = new XML();
      int int0 = evaluation0.m_NumFolds;
      double double0 = evaluation1.m_TotalCoverage;
      evaluation0.SFPriorEntropy();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1), 1000.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("eB&OZ2.q$cz/ZZ");
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      instances1.delete();
      sGD0.setDontNormalize(false);
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate((-2));
      double double0 = evaluation0.m_SumErr;
      evaluation0.setPriors(instances1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-2);
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 6;
      intArray0[4] = (-2);
      intArray0[5] = 2;
      intArray0[6] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3825.088143, intArray0, 0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      instances0.lastIndexOf(testInstances0);
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString("", true);
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.correct();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      capabilities0.disableAllClassDependencies();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate((-1));
      double double0 = evaluation0.m_SumErr;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-310), (char[]) null, 679);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.toCumulativeMarginDistributionString();
      try { 
        evaluation0.updateStatsForPredictor(880.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      instances1.delete();
      sGD0.setDontNormalize(false);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      evaluation0.precision(1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 2;
      evaluation0.m_ClassIsNominal = false;
      evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
      // Undeclared exception!
      try { 
        evaluation0.areaUnderPRC(2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.classifiers.evaluation.NumericPrediction cannot be cast to weka.classifiers.evaluation.NominalPrediction
         //
         verifyException("weka.classifiers.evaluation.ThresholdCurve", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumString((-1));
      char[] charArray0 = new char[14];
      charArray0[0] = '*';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'm';
      JSONLoader jSONLoader0 = new JSONLoader();
      AllFilter allFilter0 = new AllFilter();
      DenseInstance denseInstance0 = new DenseInstance(17);
      REPTree rEPTree0 = new REPTree();
      try { 
        evaluation0.evaluateModelOnce((Classifier) rEPTree0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.generate("eB&OZ2.q$cz/ZZ");
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setHandler(sGD0);
      Instances instances0 = testInstances1.generate();
      Instances instances1 = new Instances(instances0);
      testInstances0.generate();
      TestInstances.main(testInstances1.DEFAULT_WORDS);
      Instances instances2 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.SFMeanEntropyGain();
      evaluation0.pctCorrect();
      org.evosuite.runtime.Random.setNextRandom(125);
      evaluation0.pctIncorrect();
      evaluation0.getHeader();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances2);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getNextInstance(instances1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XRFFLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(true);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(1);
      double double0 = evaluation0.m_SumErr;
      evaluation0.setPriors(instances1);
      double double1 = evaluation0.weightedTrueNegativeRate();
      double double2 = evaluation0.SFMeanEntropyGain();
      assertEquals(double2, double1, 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double3 = evaluation1.falsePositiveRate((-1));
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate("   * Classifies the given instance.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumClasses(19);
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumString(2);
      evaluation0.m_WithClass = (double) (-1);
      testInstances0.setNumNominalValues((-2));
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      SparseInstance sparseInstance0 = new SparseInstance(2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) sGD0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.costMatrixSourceTipText();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (-41.22);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = 3.0;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) costSensitiveClassifier0, (Instance) sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "&-HWfx56 &BQIDZg48|");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.581924442560763
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      instances1.delete();
      sGD0.setDontNormalize(false);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      evaluation0.precision(1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 2;
      evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
      evaluation0.areaUnderPRC(2);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(1.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(50.0, double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1071548074112694
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFMeasure();
      Evaluation evaluation1 = new Evaluation(instances1);
      String string0 = evaluation1.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedAreaUnderPRC();
      evaluation1.numFalseNegatives(1);
      evaluation0.SFPriorEntropy();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.weightedFalsePositiveRate();
      evaluation0.getClassPriors();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate("   * Classifies the given instance.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = testInstances0.generate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      Instances instances2 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.useNoPriors();
      evaluation0.SFMeanEntropyGain();
      evaluation0.pctCorrect();
      org.evosuite.runtime.Random.setNextRandom((-1));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      instances1.delete();
      sGD0.setDontNormalize(false);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      evaluation0.precision(1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      double[] doubleArray0 = new double[4];
      evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
      assertEquals(0.0, evaluation0.meanPriorAbsoluteError(), 0.01);
      
      evaluation0.areaUnderPRC(1);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V9");
      Instances instances1 = new Instances(instances0);
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.SFMeanPriorEntropy();
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("8,%[.n@Wx5");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "hZf");
      evaluation0.numTruePositives(1);
      int int0 = 122;
      try { 
        Evaluation.handleCostOption("8,%[.n@Wx5", 122);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"hZf\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      instances1.delete();
      Instances instances2 = new Instances(instances1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      capabilities0.disableDependency(capabilities_Capability0);
      Evaluation evaluation0 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, (Instance) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumClasses(19);
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumString(2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Instances instances0 = testInstances0.generate();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setOptions(testInstances0.DEFAULT_WORDS);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      capabilities0.disableAllClassDependencies();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = 'K';
      charArray0[7] = ':';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), charArray0, 500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      testInstances0.generate();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(" ");
      AllFilter allFilter0 = new AllFilter();
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.m_MissingClass;
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.107765671631425
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.relativeAbsoluteError();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-81.55361491);
      Attribute attribute0 = new Attribute("", (List<String>) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances2 = testInstances1.generate();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.sizeOfPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation0.toClassDetailsString();
      evaluation0.weightedAreaUnderPRC();
      evaluation1.numFalseNegatives(1);
      evaluation0.SFPriorEntropy();
      Evaluation evaluation2 = new Evaluation(instances2);
      // Undeclared exception!
      try { 
        evaluation2.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstances(17);
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom(17);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1073741824));
      evaluation0.addNumericTrainClass(2.0, 0.693147181);
      evaluation0.meanPriorAbsoluteError();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // MatlabLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-1));
      evaluation0.errorRate();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      costSensitiveClassifier0.setClassifier(naiveBayes0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(131.1205952, 1649.5);
      double double0 = new Integer(2);
      assertEquals(2, double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8841846564785403
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setHandler(sGD0);
      Instances instances0 = testInstances1.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.unweightedMicroFmeasure();
      Attribute attribute0 = new Attribute("@relation", (List<String>) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      Instances instances2 = testInstances2.generate();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.sizeOfPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation0.toClassDetailsString();
      // Undeclared exception!
      try { 
        evaluation1.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      instances1.delete();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      evaluation0.precision(1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      double double0 = evaluation0.evaluationForSingleInstance(doubleArray0, instance0, false);
      assertEquals(1.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate("distributionForInstance");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelational(2482);
      evaluation0.matthewsCorrelationCoefficient(2482);
      evaluation0.priorEntropy();
      evaluation0.SFEntropyGain();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(5404.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5404
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      instances1.delete();
      sGD0.setDontNormalize(false);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      evaluation0.precision(1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      double[] doubleArray0 = new double[4];
      evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
      // Undeclared exception!
      try { 
        evaluation0.areaUnderPRC((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.evaluation.ThresholdCurve", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      IBk iBk0 = new IBk((-1127281206));
      MockRandom mockRandom0 = new MockRandom((-4757L));
      try { 
        evaluation0.crossValidateModel((Classifier) iBk0, instances1, 213, (Random) mockRandom0, (Object[]) iBk0.TAGS_WEIGHTING);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      org.evosuite.runtime.Random.setNextRandom((-2));
      evaluation0.kappa();
      testInstances0.setNumNumeric(2664);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (-2);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 2664;
      Instance instance0 = BallNode.calcCentroidPivot(2501, (-708), intArray0, instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.relativeAbsoluteError();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-81.55361491);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-2);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -20138
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      instances1.delete();
      sGD0.setDontNormalize(false);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      evaluation0.precision(1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("$7Ke6KRXIJ?mF", arrayList0);
      Instances instances2 = testInstances0.generate();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances2);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = evaluation0.evaluationForSingleInstance(doubleArray0, instance0, false);
      assertEquals(0.0, evaluation0.sizeOfPredictedRegions(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      instances0.delete();
      sGD0.setDontNormalize(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2487.77125897);
      doubleArray0[1] = 822.2098999608;
      doubleArray0[2] = (-271.69801884);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = 4.5;
      doubleArray0[7] = (double) 0;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, instance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -827245
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.costMatrixSourceTipText();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (-41.22);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = 3.0;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      sparseInstance0.setDataset(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) costSensitiveClassifier0, (Instance) sparseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -41
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      CostMatrix costMatrix0 = null;
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "no-predictions");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      instances1.delete();
      sGD0.setDontNormalize(false);
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falseNegativeRate((-2));
      double double1 = evaluation0.m_SumErr;
      evaluation0.setPriors(instances1);
      double double2 = evaluation0.weightedTrueNegativeRate();
      double double3 = evaluation0.SFMeanEntropyGain();
      assertEquals(double3, double2, 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.falsePositiveRate((-1));
      double double4 = evaluation0.numFalsePositives(0);
      assertEquals(double4, double0, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.setDiscardPredictions(false);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-683));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumString(29);
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      charArray0[6] = 'S';
      charArray0[7] = 'S';
      String string0 = evaluation0.num2ShortID(110, charArray0, 121);
      assertEquals("                                                                                                                      SHS", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setRelation(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = '7';
      charArray0[2] = '7';
      String string0 = evaluation0.num2ShortID(26, charArray0, 31);
      assertEquals("                            777", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.368875947024164
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      testInstances0.generate();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1345.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      KernelEstimator kernelEstimator0 = new KernelEstimator((-2));
      Capabilities capabilities0 = kernelEstimator0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Instances instances2 = new Instances(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      IntervalEstimator intervalEstimator0 = null;
      Instance instance0 = null;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance(107);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(1599);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 107;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) 107;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) 6;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.trueNegativeRate(2);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.delete();
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(false);
      testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(595);
      double double0 = evaluation1.m_SumErr;
      evaluation1.setPriors(instances0);
      double double1 = evaluation0.weightedTrueNegativeRate();
      double double2 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double2, 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation1.falsePositiveRate(0);
      double double3 = evaluation0.weightedRecall();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      instances1.delete();
      sGD0.setDontNormalize(false);
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation1.rootRelativeSquaredError();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double1 = evaluation1.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(false);
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falseNegativeRate(13);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_SumErr;
      evaluation0.setPriors(instances0);
      double double2 = evaluation0.weightedTrueNegativeRate();
      double double3 = evaluation0.SFMeanEntropyGain();
      assertEquals(double3, double2, 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double4 = evaluation0.falsePositiveRate(1);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h6UEwC'");
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumRelationalNominalValues(10);
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      Evaluation.makeOptionString(classifier0, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.59602161509298
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.costMatrixSourceTipText();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.weightedMatthewsCorrelation();
      String string0 = evaluation0.toClassDetailsString(".cost");
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(".cost\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.597774767730086
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumClasses(19);
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumString(2);
      testInstances0.setNumNominalValues((-2));
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.toClassDetailsString();
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(92);
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      charArray0[7] = 'W';
      charArray0[8] = 'm';
      evaluation0.num2ShortID(45, charArray0, 45);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1272));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1272
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Logistic logistic0 = new Logistic();
      logistic0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getData();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.weightedPrecision();
      evaluation1.weightedFMeasure();
      evaluation1.meanPriorAbsoluteError();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation.handleCostOption((String) null, (-2));
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation2.crossValidateModel((Classifier) logistic0, instances0, (-2), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      testInstances0.listOptions();
      // Undeclared exception!
      try { 
        evaluation0.recall(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getOptions();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      AbstractClassifier.runClassifier(inputMappedClassifier0, testInstances0.DEFAULT_WORDS);
      inputMappedClassifier0.setOptions(testInstances0.DEFAULT_WORDS);
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      capabilities0.disableAllClassDependencies();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falseNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_SumErr;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.truePositiveRate(1);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorEntropy = (double) (-1);
      evaluation0.setNumericPriorsFromBuffer();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      try { 
        Evaluation.handleCostOption("8,%[.n@Wx5", 122);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.meanPriorAbsoluteError();
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) sGD0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      try { 
        Evaluation.evaluateModel("@relation", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name @relation.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SGD sGD0 = new SGD();
      boolean boolean0 = false;
      sGD0.setDontNormalize(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(".arff", false);
      int int0 = 17;
      // Undeclared exception!
      try { 
        evaluation0.precision(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CoverTree coverTree0 = new CoverTree();
      ArffLoader arffLoader0 = new ArffLoader();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities0 = new Capabilities(attributeSelectedClassifier0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getDiscardPredictions();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate(" ");
      instances0.delete();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision(1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = testInstances0.generate();
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances2);
      // Undeclared exception!
      try { 
        evaluation0.precision((-2565));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2565
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient(1242);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      sGD0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0);
      instances1.delete();
      testInstances0.generate(".bsi");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances2 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances2);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.numTrueNegatives((-1));
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.initialize();
      Evaluation.handleCostOption("", 0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.getRevision();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("MHih;-U*__", arrayList0, 117);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.handleCostOption(" ", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
