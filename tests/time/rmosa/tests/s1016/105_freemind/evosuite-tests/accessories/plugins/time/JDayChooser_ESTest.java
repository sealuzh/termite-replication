/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 04:32:38 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.common.TextTranslator;
import freemind.main.FreeMindApplet;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Insets;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ImageObserver;
import java.io.InputStream;
import java.time.Clock;
import java.time.Instant;
import java.time.chrono.Chronology;
import java.time.temporal.TemporalAccessor;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractButton;
import javax.swing.InputVerifier;
import javax.swing.JButton;
import javax.swing.JMenuBar;
import javax.swing.JPopupMenu;
import javax.swing.JToolBar;
import javax.xml.stream.util.EventReaderDelegate;
import org.apache.batik.ext.awt.color.ICCColorSpaceExt;
import org.apache.batik.ext.awt.color.NamedProfileCache;
import org.apache.batik.svggen.ImageHandlerJPEGEncoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.persist.HsqlProperties;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Coordinate;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.w3c.css.sac.InputSource;
import plugins.collaboration.database.DatabaseConnectionHook;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8008429327153
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-78L));
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(49, 11, 11, 681, 681, 4);
      assertNotNull(mockGregorianCalendar0);
      
      int int0 = mockGregorianCalendar0.getWeeksInWeekYear();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=49,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=11,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=681,HOUR_OF_DAY=681,MINUTE=681,SECOND=4,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(52, int0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 272, 272, (-4428), (-3961), '^');
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(272L, keyEvent0.getWhen());
      assertEquals((-3961), keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('^', keyEvent0.getKeyChar());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(272, keyEvent0.getID());
      assertEquals((-4480), keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals((-2147483596), keyEvent0.getModifiers());
      assertFalse(keyEvent0.isControlDown());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(272L, keyEvent0.getWhen());
      assertEquals((-3961), keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('^', keyEvent0.getKeyChar());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(272, keyEvent0.getID());
      assertEquals((-4480), keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals((-2147483596), keyEvent0.getModifiers());
      assertFalse(keyEvent0.isControlDown());
      
      jDayChooser0.setDay(326);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.801680933862038
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ER_NO_STYLESHEET_IN_MEDIA");
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDayBordersVisible());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(20, 762, 15, 4142, 3, 20);
      assertNotNull(mockGregorianCalendar0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "day");
      assertEquals("java.util.SimpleTimeZone[id=day,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("day", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      
      Date date0 = mockGregorianCalendar1.getGregorianChange();
      assertEquals("java.util.SimpleTimeZone[id=day,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("day", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=day,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=321,ZONE_OFFSET=1,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(date0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      assertNull(unmarshallingContext0.getDocumentName());
      assertEquals(0, unmarshallingContext0.getStackDepth());
      assertNotNull(unmarshallingContext0);
      assertEquals(0, UnmarshallingContext.START_DOCUMENT);
      assertEquals(10, UnmarshallingContext.DOCDECL);
      assertEquals(8, UnmarshallingContext.PROCESSING_INSTRUCTION);
      assertEquals(7, UnmarshallingContext.IGNORABLE_WHITESPACE);
      assertEquals(2, UnmarshallingContext.START_TAG);
      assertEquals(3, UnmarshallingContext.END_TAG);
      assertEquals(5, UnmarshallingContext.CDSECT);
      assertEquals(6, UnmarshallingContext.ENTITY_REF);
      assertEquals(9, UnmarshallingContext.COMMENT);
      assertEquals(1, UnmarshallingContext.END_DOCUMENT);
      assertEquals(4, UnmarshallingContext.TEXT);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.validate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDayBordersVisible());
      
      Boolean boolean2 = new Boolean(false);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      jDayChooser1.setMaxDayCharacters(20);
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      
      boolean boolean3 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertFalse(boolean3);
      
      Locale locale1 = jDayChooser0.getLocale();
      assertEquals("", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertNotSame(jDayChooser0, jDayChooser1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.801684192093145
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      Font font0 = Font.decode("day");
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("day", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      assertNotNull(font0);
      
      jDayChooser0.setFocusCycleRoot(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jDayChooser0.setFont(font0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertEquals("day", font0.getName());
      assertFalse(font0.isTransformed());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.hasLayoutAttributes());
      assertFalse(font0.isBold());
      
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1788, 1788, 1788, 3, 1788, 3);
      assertNotNull(mockGregorianCalendar0);
      
      MapDialog mapDialog0 = new MapDialog();
      assertFalse(mapDialog0.isSearchBarVisible());
      assertNull(mapDialog0.getName());
      assertFalse(mapDialog0.isLimitSearchToRegion());
      assertNotNull(mapDialog0);
      assertEquals(1, MapDialog.SEARCH_DISTANCE_COLUMN);
      assertEquals(600000L, MapDialog.TILE_CACHE_PURGE_TIME_DEFAULT);
      
      JMapViewer jMapViewer0 = new JMapViewer();
      assertTrue(jMapViewer0.isMapRectanglesVisible());
      assertFalse(jMapViewer0.isTileGridVisible());
      assertTrue(jMapViewer0.getFocusTraversalKeysEnabled());
      assertEquals(3, jMapViewer0.getZoom());
      assertTrue(jMapViewer0.getMapMarkersVisible());
      assertFalse(jMapViewer0.isFocusTraversalPolicyProvider());
      assertFalse(jMapViewer0.isFocusCycleRoot());
      assertTrue(jMapViewer0.isMapPolygonsVisible());
      assertFalse(jMapViewer0.isFocusTraversalPolicySet());
      assertFalse(jMapViewer0.getIgnoreRepaint());
      assertNotNull(jMapViewer0);
      assertEquals(0, JMapViewer.MIN_ZOOM);
      assertEquals(22, JMapViewer.MAX_ZOOM);
      
      Coordinate coordinate0 = jMapViewer0.getPosition();
      assertTrue(jMapViewer0.isMapRectanglesVisible());
      assertFalse(jMapViewer0.isTileGridVisible());
      assertTrue(jMapViewer0.getFocusTraversalKeysEnabled());
      assertEquals(3, jMapViewer0.getZoom());
      assertTrue(jMapViewer0.getMapMarkersVisible());
      assertFalse(jMapViewer0.isFocusTraversalPolicyProvider());
      assertFalse(jMapViewer0.isFocusCycleRoot());
      assertTrue(jMapViewer0.isMapPolygonsVisible());
      assertFalse(jMapViewer0.isFocusTraversalPolicySet());
      assertFalse(jMapViewer0.getIgnoreRepaint());
      assertEquals(8.96484375, coordinate0.getLon(), 0.01);
      assertEquals(50.064191736659104, coordinate0.getLat(), 0.01);
      assertNotNull(coordinate0);
      assertEquals(0, JMapViewer.MIN_ZOOM);
      assertEquals(22, JMapViewer.MAX_ZOOM);
      
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      assertNull(databaseConnectionHook0.getName());
      assertEquals(1, (int)databaseConnectionHook0.getRole());
      assertNotNull(databaseConnectionHook0);
      
      MindMapController mindMapController0 = databaseConnectionHook0.getMindMapController();
      assertNull(databaseConnectionHook0.getName());
      assertEquals(1, (int)databaseConnectionHook0.getRole());
      assertNull(mindMapController0);
      
      MapDialog.ResultTableModel mapDialog_ResultTableModel0 = mapDialog0.new ResultTableModel(coordinate0, (TextTranslator) null);
      assertFalse(mapDialog0.isSearchBarVisible());
      assertNull(mapDialog0.getName());
      assertFalse(mapDialog0.isLimitSearchToRegion());
      assertTrue(jMapViewer0.isMapRectanglesVisible());
      assertFalse(jMapViewer0.isTileGridVisible());
      assertTrue(jMapViewer0.getFocusTraversalKeysEnabled());
      assertEquals(3, jMapViewer0.getZoom());
      assertTrue(jMapViewer0.getMapMarkersVisible());
      assertFalse(jMapViewer0.isFocusTraversalPolicyProvider());
      assertFalse(jMapViewer0.isFocusCycleRoot());
      assertTrue(jMapViewer0.isMapPolygonsVisible());
      assertFalse(jMapViewer0.isFocusTraversalPolicySet());
      assertFalse(jMapViewer0.getIgnoreRepaint());
      assertEquals(8.96484375, coordinate0.getLon(), 0.01);
      assertEquals(50.064191736659104, coordinate0.getLat(), 0.01);
      assertEquals(2, mapDialog_ResultTableModel0.getColumnCount());
      assertEquals(0, mapDialog_ResultTableModel0.getRowCount());
      assertNotNull(mapDialog_ResultTableModel0);
      assertEquals(1, MapDialog.SEARCH_DISTANCE_COLUMN);
      assertEquals(600000L, MapDialog.TILE_CACHE_PURGE_TIME_DEFAULT);
      assertEquals(0, JMapViewer.MIN_ZOOM);
      assertEquals(22, JMapViewer.MAX_ZOOM);
      
      boolean boolean1 = mockGregorianCalendar0.before(mapDialog_ResultTableModel0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1788,MONTH=1788,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1788,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=1788,SECOND=3,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(mapDialog0.isSearchBarVisible());
      assertNull(mapDialog0.getName());
      assertFalse(mapDialog0.isLimitSearchToRegion());
      assertTrue(jMapViewer0.isMapRectanglesVisible());
      assertFalse(jMapViewer0.isTileGridVisible());
      assertTrue(jMapViewer0.getFocusTraversalKeysEnabled());
      assertEquals(3, jMapViewer0.getZoom());
      assertTrue(jMapViewer0.getMapMarkersVisible());
      assertFalse(jMapViewer0.isFocusTraversalPolicyProvider());
      assertFalse(jMapViewer0.isFocusCycleRoot());
      assertTrue(jMapViewer0.isMapPolygonsVisible());
      assertFalse(jMapViewer0.isFocusTraversalPolicySet());
      assertFalse(jMapViewer0.getIgnoreRepaint());
      assertEquals(8.96484375, coordinate0.getLon(), 0.01);
      assertEquals(50.064191736659104, coordinate0.getLat(), 0.01);
      assertEquals(2, mapDialog_ResultTableModel0.getColumnCount());
      assertEquals(0, mapDialog_ResultTableModel0.getRowCount());
      assertTrue(boolean1 == boolean0);
      assertEquals(1, MapDialog.SEARCH_DISTANCE_COLUMN);
      assertEquals(600000L, MapDialog.TILE_CACHE_PURGE_TIME_DEFAULT);
      assertEquals(0, JMapViewer.MIN_ZOOM);
      assertEquals(22, JMapViewer.MAX_ZOOM);
      assertFalse(boolean1);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1788,MONTH=1788,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1788,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=1788,SECOND=3,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      assertEquals(0, unmarshallingContext0.getStackDepth());
      assertNull(unmarshallingContext0.getDocumentName());
      assertNotNull(unmarshallingContext0);
      assertEquals(0, UnmarshallingContext.START_DOCUMENT);
      assertEquals(10, UnmarshallingContext.DOCDECL);
      assertEquals(2, UnmarshallingContext.START_TAG);
      assertEquals(8, UnmarshallingContext.PROCESSING_INSTRUCTION);
      assertEquals(5, UnmarshallingContext.CDSECT);
      assertEquals(4, UnmarshallingContext.TEXT);
      assertEquals(7, UnmarshallingContext.IGNORABLE_WHITESPACE);
      assertEquals(6, UnmarshallingContext.ENTITY_REF);
      assertEquals(1, UnmarshallingContext.END_DOCUMENT);
      assertEquals(3, UnmarshallingContext.END_TAG);
      assertEquals(9, UnmarshallingContext.COMMENT);
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.validate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      jDayChooser1.setMaxDayCharacters(2);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(2, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      
      boolean boolean3 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertTrue(boolean3);
      
      boolean boolean4 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertNotSame(jDayChooser0, jDayChooser1);
      assertTrue(boolean4);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-78L));
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(49, 11, 11, 681, 681, 4);
      assertNotNull(mockGregorianCalendar0);
      
      int int0 = mockGregorianCalendar0.getWeeksInWeekYear();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=49,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=11,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=681,HOUR_OF_DAY=681,MINUTE=681,SECOND=4,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(52, int0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(4, (-766), 49, 465, 3, 11);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      
      Date date0 = mockGregorianCalendar1.getGregorianChange();
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=4,MONTH=-766,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=49,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=465,HOUR_OF_DAY=465,MINUTE=3,SECOND=11,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(date0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      assertNull(unmarshallingContext0.getDocumentName());
      assertEquals(0, unmarshallingContext0.getStackDepth());
      assertNotNull(unmarshallingContext0);
      assertEquals(3, UnmarshallingContext.END_TAG);
      assertEquals(0, UnmarshallingContext.START_DOCUMENT);
      assertEquals(7, UnmarshallingContext.IGNORABLE_WHITESPACE);
      assertEquals(9, UnmarshallingContext.COMMENT);
      assertEquals(10, UnmarshallingContext.DOCDECL);
      assertEquals(5, UnmarshallingContext.CDSECT);
      assertEquals(1, UnmarshallingContext.END_DOCUMENT);
      assertEquals(8, UnmarshallingContext.PROCESSING_INSTRUCTION);
      assertEquals(4, UnmarshallingContext.TEXT);
      assertEquals(6, UnmarshallingContext.ENTITY_REF);
      assertEquals(2, UnmarshallingContext.START_TAG);
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      Boolean boolean1 = new Boolean(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      jDayChooser0.setMaxDayCharacters(4);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      boolean boolean2 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5777114378736075
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      JButton jButton0 = jDayChooser0.selectedDay;
      assertNull(jButton0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate(1753, 1753, 1753);
      assertNotNull(mockDate0);
      
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      EventReaderDelegate eventReaderDelegate0 = new EventReaderDelegate();
      assertNotNull(eventReaderDelegate0);
      
      jDayChooser0.setMonth((-818));
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("Sun Nov 20 00:00:00 GMT 3803", mockDate0.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      SystemColor systemColor0 = SystemColor.windowText;
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      
      JToolBar jToolBar0 = new JToolBar("day");
      assertFalse(jToolBar0.isFocusTraversalPolicySet());
      assertFalse(jToolBar0.isFocusCycleRoot());
      assertFalse(jToolBar0.isFocusTraversalPolicyProvider());
      assertFalse(jToolBar0.getIgnoreRepaint());
      assertTrue(jToolBar0.getFocusTraversalKeysEnabled());
      assertNotNull(jToolBar0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(193, 193, 5225, 193, 193, 5225);
      assertNotNull(mockGregorianCalendar0);
      
      int int0 = mockGregorianCalendar0.getWeeksInWeekYear();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=193,MONTH=193,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5225,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=193,HOUR_OF_DAY=193,MINUTE=193,SECOND=5225,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(52, int0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=193,MONTH=193,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5225,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=193,HOUR_OF_DAY=193,MINUTE=193,SECOND=5225,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      assertEquals(0, unmarshallingContext0.getStackDepth());
      assertNull(unmarshallingContext0.getDocumentName());
      assertNotNull(unmarshallingContext0);
      assertEquals(7, UnmarshallingContext.IGNORABLE_WHITESPACE);
      assertEquals(2, UnmarshallingContext.START_TAG);
      assertEquals(10, UnmarshallingContext.DOCDECL);
      assertEquals(8, UnmarshallingContext.PROCESSING_INSTRUCTION);
      assertEquals(0, UnmarshallingContext.START_DOCUMENT);
      assertEquals(3, UnmarshallingContext.END_TAG);
      assertEquals(5, UnmarshallingContext.CDSECT);
      assertEquals(6, UnmarshallingContext.ENTITY_REF);
      assertEquals(9, UnmarshallingContext.COMMENT);
      assertEquals(1, UnmarshallingContext.END_DOCUMENT);
      assertEquals(4, UnmarshallingContext.TEXT);
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jDayChooser0.setMaxDayCharacters(3);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      boolean boolean1 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.69631050055377
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      Font font0 = Font.decode("day");
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals("day", font0.getName());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      assertNotNull(font0);
      
      jDayChooser0.setFocusCycleRoot(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jDayChooser0.setFont(font0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isTransformed());
      assertEquals("day", font0.getName());
      assertFalse(font0.isBold());
      assertEquals(0, font0.getStyle());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertEquals(12, font0.getSize());
      assertTrue(font0.isPlain());
      assertFalse(font0.isItalic());
      
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1788, 1788, 1788, 7, 1788, 7);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1788,MONTH=1788,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1788,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=1788,SECOND=7,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      assertNull(unmarshallingContext0.getDocumentName());
      assertEquals(0, unmarshallingContext0.getStackDepth());
      assertNotNull(unmarshallingContext0);
      assertEquals(6, UnmarshallingContext.ENTITY_REF);
      assertEquals(8, UnmarshallingContext.PROCESSING_INSTRUCTION);
      assertEquals(4, UnmarshallingContext.TEXT);
      assertEquals(2, UnmarshallingContext.START_TAG);
      assertEquals(5, UnmarshallingContext.CDSECT);
      assertEquals(7, UnmarshallingContext.IGNORABLE_WHITESPACE);
      assertEquals(9, UnmarshallingContext.COMMENT);
      assertEquals(1, UnmarshallingContext.END_DOCUMENT);
      assertEquals(3, UnmarshallingContext.END_TAG);
      assertEquals(0, UnmarshallingContext.START_DOCUMENT);
      assertEquals(10, UnmarshallingContext.DOCDECL);
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.validate();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      Boolean boolean1 = new Boolean(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      jDayChooser0.setMaxDayCharacters(0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      boolean boolean2 = jDayChooser1.isDayBordersVisible();
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertFalse(boolean2 == boolean0);
      assertNotSame(jDayChooser1, jDayChooser0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.983211734533764
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-78L));
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 3);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(3, focusEvent0.getID());
      assertNotNull(focusEvent0);
      
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(3, focusEvent0.getID());
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNull(jButton0);
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(date0);
      
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      EventReaderDelegate eventReaderDelegate0 = new EventReaderDelegate();
      assertNotNull(eventReaderDelegate0);
      
      jDayChooser0.setMonth(2704);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("verticalAlignment", string0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setRequestFocusEnabled(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(164, color0.getRed());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = new Locale("Embedded TrueType/OpenType font", "Embedded TrueType/OpenType font");
      assertEquals("EMBEDDED TRUETYPE/OPENTYPE FONT", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("embedded truetype/opentype font_EMBEDDED TRUETYPE/OPENTYPE FONT", locale1.toString());
      assertEquals("embedded truetype/opentype font", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("verticalAlignment", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ActionEvent actionEvent0 = new ActionEvent(locale1, (-505), "Embedded TrueType/OpenType font");
      assertEquals("EMBEDDED TRUETYPE/OPENTYPE FONT", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("embedded truetype/opentype font_EMBEDDED TRUETYPE/OPENTYPE FONT", locale1.toString());
      assertEquals("embedded truetype/opentype font", locale1.getLanguage());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals((-505), actionEvent0.getID());
      assertEquals("Embedded TrueType/OpenType font", actionEvent0.getActionCommand());
      assertEquals(0, actionEvent0.getModifiers());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(actionEvent0);
      
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      Object object1 = jDayChooser0.getClientProperty(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(locale0.equals((Object)locale1));
      assertNull(object1);
      assertNotSame(locale0, locale1);
      
      actionEvent0.setSource((Object) null);
      assertEquals("EMBEDDED TRUETYPE/OPENTYPE FONT", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("embedded truetype/opentype font_EMBEDDED TRUETYPE/OPENTYPE FONT", locale1.toString());
      assertEquals("embedded truetype/opentype font", locale1.getLanguage());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals((-505), actionEvent0.getID());
      assertEquals("Embedded TrueType/OpenType font", actionEvent0.getActionCommand());
      assertEquals(0, actionEvent0.getModifiers());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      
      jDayChooser0.list();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      JButton jButton0 = jDayChooser0.selectedDay;
      assertNull(jButton0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate(1753, 1753, 1753);
      assertNotNull(mockDate0);
      
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("Sun Nov 20 00:00:00 GMT 3803", mockDate0.toString());
      assertEquals("Sun Nov 20 00:00:00 GMT 3803", date0.toString());
      assertNotNull(date0);
      assertSame(mockDate0, date0);
      assertSame(date0, mockDate0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-78L));
      String string0 = AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("verticalAlignment", string0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setFocus();
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      JButton jButton0 = jDayChooser0.selectedDay;
      assertNull(jButton0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JYearChooser jYearChooser0 = new JYearChooser();
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(2014, jYearChooser0.getValue());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jYearChooser0.getMinimum());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(2014, jYearChooser0.getYear());
      assertNotNull(jYearChooser0);
      
      JButton jButton1 = new JButton("day");
      assertTrue(jButton1.getFocusTraversalKeysEnabled());
      assertFalse(jButton1.isFocusTraversalPolicySet());
      assertFalse(jButton1.isFocusCycleRoot());
      assertFalse(jButton1.isFocusTraversalPolicyProvider());
      assertFalse(jButton1.getIgnoreRepaint());
      assertNotNull(jButton1);
      
      MockDate mockDate0 = new MockDate(3, (-3086), 10, (-3086), (-3086));
      assertNotNull(mockDate0);
      
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Sun Jul 02 06:34:00 GMT 1645", mockDate0.toString());
      assertEquals("Sun Jul 02 06:34:00 GMT 1645", date0.toString());
      assertNotNull(date0);
      assertSame(mockDate0, date0);
      assertSame(date0, mockDate0);
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(1, color0.getTransparency());
      assertEquals(210, color0.getRed());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(228, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(238, color0.getBlue());
      assertNotNull(color0);
      
      jDayChooser0.addListeners(10);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      jDayChooser0.printAll(pDFDocumentGraphics2D0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("", pDFDocumentGraphics2D0.getString());
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(90, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(164, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MindMapMode mindMapMode0 = new MindMapMode();
      assertEquals("MindMap", mindMapMode0.toString());
      assertNotNull(mindMapMode0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      jDayChooser0.setDayBordersVisible(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, (-5582), (-5582), 7, 262144, '3');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDay(10124);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDay((-396));
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.984002490655994
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      System.setCurrentTimeMillis(764L);
      JDayChooser jDayChooser1 = new JDayChooser();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(1, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      JButton jButton0 = jDayChooser1.getSelectedDay();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(1, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNull(jButton0);
      assertNotSame(jDayChooser1, jDayChooser0);
      
      JYearChooser jYearChooser0 = new JYearChooser();
      assertEquals(1970, jYearChooser0.getYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(1970, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(1, jYearChooser0.getStartYear());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getMinimum());
      assertNotNull(jYearChooser0);
      
      String string0 = jYearChooser0.getUIClassID();
      assertEquals(1970, jYearChooser0.getYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(1970, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(1, jYearChooser0.getStartYear());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getMinimum());
      assertNotNull(string0);
      assertEquals("PanelUI", string0);
      
      JDayChooser jDayChooser2 = jYearChooser0.dayChooser;
      assertNull(jDayChooser2);
      
      jDayChooser0.setSundayForeground((Color) null);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      boolean boolean0 = jDayChooser1.isWeekOfYearVisible();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(1, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8961031581030303
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Insets insets0 = jDayChooser0.getInsets();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(insets0);
      assertEquals(0, insets0.bottom);
      assertEquals(0, insets0.right);
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.left);
      
      int int0 = 4;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8744, 8744, 8744, 8744, 'i', 4);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(8744, keyEvent0.getID());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(8744, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(8744L, keyEvent0.getWhen());
      assertEquals('i', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(8704, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(4, keyEvent0.getKeyLocation());
      assertEquals(40, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isShiftDown());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(8744, keyEvent0.getID());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(8744, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(8744L, keyEvent0.getWhen());
      assertEquals('i', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(8704, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(4, keyEvent0.getKeyLocation());
      assertEquals(40, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isShiftDown());
      
      SystemColor systemColor0 = SystemColor.textHighlightText;
      assertEquals(255, systemColor0.getGreen());
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(255, systemColor0.getBlue());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertNotNull(systemColor0);
      
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      assertNotNull(inputMethodListener1);
      
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      assertNull(inputMethodListener2);
      
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(255, systemColor0.getGreen());
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(255, systemColor0.getBlue());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Locale locale0 = jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDecorationBordersVisible(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("9Qx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5777233286214165
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      JButton jButton0 = jDayChooser0.selectedDay;
      assertNull(jButton0);
      
      boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate(1753, 1753, 1753);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(1753, 1753, 1753);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      int int0 = (-696);
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      MockDate mockDate0 = new MockDate((-696), 3291, (-696));
      assertNotNull(mockDate0);
      
      Clock clock0 = mock(Clock.class, new ViolatedAssumptionAnswer());
      doReturn((Instant) null).when(clock0).instant();
      Instant instant0 = MockInstant.now(clock0);
      assertNull(instant0);
      
      // Undeclared exception!
      try { 
        Chronology.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters((-937));
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.80166428268097
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = new Locale("Embedded TrueType/OpeType font", "=r`nV|J[MB!&n-c%r");
      assertEquals("", locale0.getVariant());
      assertEquals("embedded truetype/opetype font_=R`NV|J[MB!&N-C%R", locale0.toString());
      assertEquals("=R`NV|J[MB!&N-C%R", locale0.getCountry());
      assertEquals("embedded truetype/opetype font", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("verticalAlignment", string0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      InputVerifier inputVerifier0 = jDayChooser0.getInputVerifier();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNull(inputVerifier0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3034, 3034, 8333, 8, 'c');
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals('c', keyEvent0.getKeyChar());
      assertEquals(8320, keyEvent0.getModifiersEx());
      assertEquals(8, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(3034, keyEvent0.getID());
      assertEquals(3034L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(13, keyEvent0.getModifiers());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals('c', keyEvent0.getKeyChar());
      assertEquals(8320, keyEvent0.getModifiersEx());
      assertEquals(8, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(3034, keyEvent0.getID());
      assertEquals(3034L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(13, keyEvent0.getModifiers());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      KeyEvent keyEvent1 = null;
      try {
        keyEvent1 = new KeyEvent(jDayChooser1, 367, 367, 15, 3034, '2', (-166));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-5768), (-5768), 4, 228, 'E');
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(256, keyEvent0.getModifiersEx());
      assertEquals('E', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(228, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(4, keyEvent0.getModifiers());
      assertEquals((-5768), keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals((-5768L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isControlDown());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(256, keyEvent0.getModifiersEx());
      assertEquals('E', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(228, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(4, keyEvent0.getModifiers());
      assertEquals((-5768), keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals((-5768L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isControlDown());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(28, int0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          JDayChooser jDayChooser0 = new JDayChooser(false);
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertEquals(14, jDayChooser0.getDay());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertNotNull(jDayChooser0);
          
          JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
          assertNull(jYearChooser0);
          
          JYearChooser jYearChooser1 = new JYearChooser();
          assertEquals(292278994, jYearChooser1.getEndYear());
          assertFalse(jYearChooser1.getIgnoreRepaint());
          assertEquals(292278994, jYearChooser1.getMaximum());
          assertFalse(jYearChooser1.isFocusTraversalPolicyProvider());
          assertFalse(jYearChooser1.isFocusCycleRoot());
          assertFalse(jYearChooser1.isFocusTraversalPolicySet());
          assertEquals(2014, jYearChooser1.getValue());
          assertTrue(jYearChooser1.getFocusTraversalKeysEnabled());
          assertEquals(1, jYearChooser1.getStartYear());
          assertEquals(2014, jYearChooser1.getYear());
          assertEquals(1, jYearChooser1.getMinimum());
          assertNotNull(jYearChooser1);
          
          JDayChooser jDayChooser1 = jYearChooser1.dayChooser;
          assertNull(jDayChooser1);
          
          boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertEquals(14, jDayChooser0.getDay());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertTrue(boolean0);
          
          InputSource inputSource0 = new InputSource("28");
          assertNotNull(inputSource0);
          
          InputSource inputSource1 = new InputSource("/#'");
          assertFalse(inputSource1.equals((Object)inputSource0));
          assertNotNull(inputSource1);
          
          InputStream inputStream0 = inputSource1.getByteStream();
          assertFalse(inputSource1.equals((Object)inputSource0));
          assertNull(inputStream0);
          assertNotSame(inputSource1, inputSource0);
          
          // Undeclared exception!
          try { 
            Font.createFont(3039, (InputStream) null);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // font format not recognized
             //
             verifyException("java.awt.Font", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font font0 = Font.decode("}I{px\"");
      font0.deriveFont(2590.9387F);
      jDayChooser0.setFocusCycleRoot(false);
      jDayChooser0.setFont(font0);
      Color color0 = Color.YELLOW;
      jDayChooser0.setWeekdayForeground(color0);
      JButton jButton0 = jDayChooser0.getSelectedDay();
      int int0 = 986;
      NamedProfileCache namedProfileCache0 = NamedProfileCache.getDefaultCache();
      ICCColorSpaceExt iCCColorSpaceExt0 = namedProfileCache0.request("uqb1!?0.");
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      RenderingHints renderingHints0 = sVGGeneratorContext_GraphicContextDefaults0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(iCCColorSpaceExt0, iCCColorSpaceExt0, renderingHints0);
      ImageHandlerJPEGEncoder imageHandlerJPEGEncoder0 = new ImageHandlerJPEGEncoder(jDayChooser0.DAY_PROPERTY, jDayChooser0.DAY_PROPERTY);
      int int1 = 0;
      int int2 = (-1468);
      Dimension dimension0 = new Dimension(int1, int2);
      BufferedImage bufferedImage0 = imageHandlerJPEGEncoder0.buildBufferedImage(dimension0);
      ColorModel colorModel0 = null;
      BufferedImage bufferedImage1 = colorConvertOp0.createCompatibleDestImage(bufferedImage0, colorModel0);
      jDayChooser0.prepareImage((Image) bufferedImage1, (ImageObserver) jButton0);
      jDayChooser0.getFocusTraversalKeys(int0);
      int int3 = jDayChooser0.getDaysInMonth();
      jDayChooser0.setFont(font0);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setForeground(color0);
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setMonth(int3);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      String string0 = AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      jDayChooser0.getDayPanel();
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 1417641983, "verticalAlignment");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(369, (-43), (-1213), 1788, (-1213), (-43));
      mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.validate();
      Boolean boolean0 = new Boolean(true);
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.137315169336513
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jYearChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.isDecorationBordersVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "year";
      stringArray0[1] = "month";
      stringArray0[2] = "";
      stringArray0[3] = "month";
      stringArray0[4] = "day";
      stringArray0[5] = "month";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      String string0 = AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(48, 25, 48);
      mockGregorianCalendar0.getGregorianChange();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      JYearChooser jYearChooser0 = new JYearChooser();
      Boolean boolean0 = new Boolean(true);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxDayCharacters();
      System.setCurrentTimeMillis(8);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.800854989187817
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(1684);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.getMinSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addComponentListener((ComponentListener) null);
      int int0 = 757;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 757, false, jDayChooser0);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.initDecorations();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "day";
      stringArray0[1] = "center";
      stringArray0[2] = "day";
      stringArray0[3] = "";
      stringArray0[4] = "day";
      // Undeclared exception!
      try { 
        HsqlProperties.argArrayToProps(stringArray0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((Date) null);
      JMenuBar jMenuBar0 = new JMenuBar();
      // Undeclared exception!
      try { 
        jMenuBar0.getHelpMenu();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // getHelpMenu() not yet implemented.
         //
         verifyException("javax.swing.JMenuBar", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JButton jButton0 = jDayChooser0.selectedDay;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockDate mockDate0 = new MockDate(1753, 4163, (-1284));
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.setMaxSelectableDate(mockDate1);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setComponentPopupMenu((JPopupMenu) null);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.windowText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JToolBar jToolBar0 = new JToolBar("day");
      jDayChooser0.setFocus();
      jDayChooser0.setDay((-1496));
      jDayChooser0.drawDays();
      jDayChooser0.getLocale();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8961651689921424
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      jDayChooser0.setAlignmentY((-1667));
      int int0 = 828;
      jDayChooser0.repaint((-1667), 61451, 828, 61451);
      jDayChooser0.drawDays();
      jDayChooser0.initDecorations();
      jDayChooser0.init();
      jDayChooser0.getLocale();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.windowText;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("V6+J", 'g', '&');
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Font.decode("Metal");
      Object object0 = new Object();
      ActionEvent actionEvent0 = new ActionEvent("&5[I1?i<G}TW*k", (-505), "&5[I1?i<G}TW*k");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getAccessibleContext();
      int int0 = (-3514);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-3514));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setLocation(514, 514);
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      jDayChooser0.setWeekOfYearVisible(true);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.control;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth((-586));
      jDayChooser0.setForeground(systemColor0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth((-937));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }
}
