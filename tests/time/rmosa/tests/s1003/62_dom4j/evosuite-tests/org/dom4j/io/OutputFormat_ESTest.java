/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 18:53:08 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-lineSeparator");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-lineSeparator";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "-expandEmptynj0olNZ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "-expandEmptynj0olNZ";
      stringArray0[2] = "";
      stringArray0[3] = "-expandEmptynj0olNZ";
      stringArray0[4] = "";
      stringArray0[5] = "-expandEmptynj0olNZ";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-expandEmptynj0olNZ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9946571675310574
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlu", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-trimText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml-xhtmlu", true, (String) null);
      assertEquals("-xhtml-xhtmlu", outputFormat0.getIndent());
      
      OutputFormat outputFormat1 = new OutputFormat((String) null, true, "");
      String[] stringArray0 = new String[0];
      outputFormat0.setIndent("-xh~ml-xhtml");
      outputFormat0.getEncoding();
      assertEquals("-xh~ml-xhtml", outputFormat0.getIndent());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("\rk `)-F");
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-suppressDeclaration";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-padText");
      assertFalse(outputFormat0.isPadText());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-padText";
      stringArray0[1] = "o3:pLx8dw=H";
      stringArray0[2] = "-tmText";
      stringArray0[3] = "-tmText";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isPadText());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("\"bU~~.h", true, "");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"bU~~.h";
      outputFormat0.parseOptions(stringArray0, 0);
      String string0 = outputFormat0.getEncoding();
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\"bU~~.h", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("", string0);
      assertTrue(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = false;
      OutputFormat outputFormat0 = new OutputFormat("-padText", false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndent(false);
      outputFormat0.setLineSeparator("");
      outputFormat0.getLineSeparator();
      outputFormat0.getAttributeQuoteCharacter();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      stringArray0[1] = "-padText";
      String string0 = "";
      stringArray0[3] = "-padText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1723897601));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1723897601
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-omitEncoding", true, "{WGag");
      assertFalse(outputFormat0.isOmitEncoding());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-omitEncoding";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isOmitEncoding());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-newlines", true, ".)JDI");
      OutputFormat outputFormat1 = new OutputFormat("-indent", true);
      outputFormat1.setNewlines(false);
      OutputFormat outputFormat2 = new OutputFormat("-newlines", true, (String) null);
      outputFormat0.setLineSeparator((String) null);
      outputFormat1.setXHTML(false);
      outputFormat0.setNewlines(false);
      outputFormat1.setPadText(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".)JDI";
      stringArray0[1] = "-indent";
      stringArray0[2] = "-expandEmpty.)JDI";
      stringArray0[3] = "-xhtml-xhtmlpW";
      stringArray0[4] = "&c)2Y;,BXQR)3I";
      stringArray0[5] = "-expandEmpty.)JDI";
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat1.isXHTML();
      assertTrue(outputFormat1.isXHTML());
      
      outputFormat0.getLineSeparator();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlu", true);
      outputFormat0.setNewLineAfterNTags((-1994577117));
      String[] stringArray0 = new String[13];
      stringArray0[0] = "-xhtmlu";
      stringArray0[1] = "QBT^Y}]]e>]";
      stringArray0[2] = "-lineSeparator";
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setIndent("-lineSeparator");
      assertEquals("-lineSeparator", outputFormat0.getIndent());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndentSize(116);
      outputFormat0.setIndent("");
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getAttributeQuoteCharacter();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[0] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-357042168));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -357042168
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 2);
      outputFormat0.setIndent("0;x]0yl?");
      outputFormat0.setTrimText(true);
      outputFormat0.setLineSeparator(")W,gE,");
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.parseOptions(stringArray0, 2);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setPadText(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.isOmitEncoding();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('4');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (4)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[20];
      stringArray0[1] = "-encoding";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-encoding";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-newlines", true, (String) null);
      outputFormat0.setNewlines(true);
      String[] stringArray0 = new String[2];
      outputFormat0.setAttributeQuoteCharacter('\'');
      stringArray0[0] = "-newlines";
      stringArray0[1] = null;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setEncoding((String) null);
      outputFormat0.setIndent((String) null);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setEncoding("-kxpan");
      outputFormat0.setOmitEncoding(true);
      boolean boolean0 = outputFormat0.isTrimText();
      assertEquals("-kxpan", outputFormat0.getEncoding());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ( )
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indent", true);
      assertEquals("-indent", outputFormat0.getIndent());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-indent";
      stringArray0[1] = "";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(2, int0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("5H-_", true, "-expandEmptyb");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-indent";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9396395458476661
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("`6-^");
      outputFormat0.setNewlines(false);
      outputFormat0.setIndent("fEU>s5tp?R\",K-5");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "`6-^";
      stringArray0[2] = "-newlines";
      stringArray0[3] = "-newlines";
      stringArray0[4] = "-newlines";
      stringArray0[5] = "`6-^";
      stringArray0[6] = "`6-^";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("fEU>s5tp?R\",K-5", outputFormat0.getIndent());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("iUgf_wMVr", true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags((-1));
      outputFormat0.setPadText(true);
      outputFormat0.isXHTML();
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat0.setIndentSize((-1));
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.getIndent();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat1.setPadText(true);
      outputFormat2.setAttributeQuoteCharacter('\"');
      outputFormat1.isOmitEncoding();
      outputFormat0.getEncoding();
      OutputFormat outputFormat3 = new OutputFormat("U0RL", true);
      outputFormat3.setNewLineAfterDeclaration(false);
      outputFormat2.setEncoding("iUgf_wMVr");
      outputFormat2.setIndent(false);
      outputFormat0.setPadText(false);
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      outputFormat0.setIndent(true);
      stringArray0[1] = "XO~AS`x\"ny<:8OJ|%";
      outputFormat0.getLineSeparator();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setIndent("XO~AS`x\"ny<:8OJ|%");
      outputFormat0.isOmitEncoding();
      outputFormat0.setPadText(true);
      outputFormat0.setTrimText(true);
      outputFormat0.isPadText();
      outputFormat0.isOmitEncoding();
      outputFormat0.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(';');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (;)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlu", true);
      outputFormat0.setNewLineAfterNTags(10);
      String[] stringArray0 = new String[13];
      stringArray0[0] = "-xhtmlu";
      stringArray0[1] = "QBT^Y}]]e>]";
      stringArray0[2] = "-lineSeparator";
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setIndent("-lineSeparator");
      assertEquals("-lineSeparator", outputFormat0.getIndent());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.052754235510318
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags(1663);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      outputFormat0.setIndentSize(0);
      stringArray0[5] = "";
      stringArray0[6] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setIndent("");
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.getIndent();
      outputFormat0.getIndent();
      outputFormat0.isExpandEmptyElements();
      outputFormat0.isExpandEmptyElements();
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndentSize(1);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.getEncoding();
      assertEquals(1663, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setNewLineAfterNTags(1);
      outputFormat0.isNewLineAfterDeclaration();
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      assertEquals(1, outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(false);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "XO~AS`x\"ny<:8OJ|%";
      stringArray0[1] = "";
      stringArray0[2] = "XO~AS`x\"ny<:8OJ|%";
      outputFormat0.parseOptions(stringArray0, 1);
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertFalse(boolean0);
      
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(1, int0);
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      boolean boolean0 = true;
      outputFormat0.setLineSeparator(")");
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setTrimText(true);
      outputFormat0.isSuppressDeclaration();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")";
      stringArray0[2] = ")";
      stringArray0[3] = ")";
      stringArray0[5] = "~I8L!\"";
      stringArray0[6] = ")";
      outputFormat0.setNewLineAfterDeclaration(true);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('}');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (})
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "/,&!+19\\+9PUN;pH";
      OutputFormat outputFormat0 = new OutputFormat("/,&!+19+9PUN;pH", true);
      boolean boolean0 = false;
      outputFormat0.setXHTML(false);
      outputFormat0.isSuppressDeclaration();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('t');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (t)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("6d{\"Jaq");
      String string0 = outputFormat0.getLineSeparator();
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("6d{\"Jaq", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("\n", string0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(";Zian)u\"aa");
      String[] stringArray0 = new String[10];
      outputFormat0.setSuppressDeclaration(false);
      stringArray0[0] = ";Zian)u\"aa";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(";Zian)u\"aa", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-699));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -699
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = " ";
      OutputFormat outputFormat0 = new OutputFormat(" ");
      outputFormat0.isTrimText();
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.isPadText();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('<');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (<)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhthQmlu");
      assertFalse(outputFormat0.isOmitEncoding());
      
      outputFormat0.setOmitEncoding(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-xhthQmlu";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(";Zian)u\"aa");
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      outputFormat0.setExpandEmptyElements(true);
      String[] stringArray0 = new String[10];
      stringArray0[0] = ";Zian)u\"aa";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-lineSeparator", false, "-expandEmptyb");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expandEmptyb";
      stringArray0[1] = "";
      stringArray0[2] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-3866));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3866
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(";Zian)u\"aa");
      assertFalse(outputFormat0.isXHTML());
      
      String[] stringArray0 = new String[1];
      outputFormat0.setXHTML(true);
      stringArray0[0] = ";Zian)u\"aa";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(" ");
      assertFalse(outputFormat0.isXHTML());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "U#^\"Mxw*%E6SP}Oe";
      stringArray0[1] = "-xhtml-xhWmlu";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isXHTML());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9535817885271314
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expand@mpty");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-expand@mpty";
      outputFormat0.setLineSeparator("-expand@mpty");
      outputFormat0.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-279));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -279
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setIndentSize(0);
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("", outputFormat0.getIndent());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.549749826558804
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".SdNw]0L_3TIE~^Kngs";
      stringArray0[1] = ".SdNw]0L_3TIE~^Kngs";
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isNewlines());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isXHTML());
      assertEquals("  ", outputFormat1.getIndent());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertTrue(outputFormat1.isPadText());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isOmitEncoding());
      assertTrue(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat1.getLineSeparator());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(";Zian)u\"aa");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";Zian)u\"aa";
      outputFormat0.parseOptions(stringArray0, 0);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(";Zian)u\"aa", outputFormat0.getIndent());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals('\"', char0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-", true, "-xhtml-xhtmlu");
      outputFormat0.setIndentSize(1);
      assertEquals(" ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize((-2175));
      String[] stringArray0 = new String[1];
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("cT=bIL;!lW", false);
      outputFormat0.getIndent();
      outputFormat0.isExpandEmptyElements();
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      outputFormat0.setNewLineAfterDeclaration(false);
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(";Zian)u\"aa");
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      outputFormat0.setNewLineAfterDeclaration(false);
      String[] stringArray0 = new String[10];
      stringArray0[0] = ";Zian)u\"aa";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(true);
      OutputFormat outputFormat1 = new OutputFormat("XO~AS`x\"ny<:8OJ|%", true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "XO~AS`x\"ny<:8OJ|%";
      stringArray0[1] = "XO~AS`x\"ny<:8OJ|%";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      outputFormat1.parseOptions(stringArray0, 1);
      assertFalse(outputFormat1.isXHTML());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertFalse(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isPadText());
      assertEquals("XO~AS`x\"ny<:8OJ|%", outputFormat1.getIndent());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isOmitEncoding());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertEquals("  ", outputFormat0.getIndent());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`6-Im^";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[2];
      OutputFormat outputFormat0 = new OutputFormat();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-newlines");
      outputFormat0.setNewLineAfterNTags(1);
      outputFormat0.setEncoding("-newlines");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-newlines";
      stringArray0[2] = "";
      stringArray0[2] = "-newlines";
      stringArray0[3] = "-newlines";
      outputFormat1.parseOptions(stringArray0, 4458);
      outputFormat1.setPadText(true);
      boolean boolean0 = outputFormat0.isNewlines();
      assertEquals("-newlines", outputFormat0.getEncoding());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3755754015654476
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".SdNw]0L_3TIE~^Kngs";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isNewlines());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isPadText());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isOmitEncoding());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertFalse(outputFormat1.isXHTML());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isExpandEmptyElements());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[1];
      outputFormat0.parseOptions(stringArray0, 29);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xWhtmlLxhWl?");
      String[] stringArray0 = new String[13];
      outputFormat0.setNewLineAfterNTags((-1809477833));
      stringArray0[1] = "-xWhtmlLxhWl?";
      outputFormat0.parseOptions(stringArray0, 1);
      assertEquals((-1809477833), outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isXHTML();
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isPadText());
      
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-xhthQmlu";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isPadText());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(";Zian)u\"aa");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";Zian)u\"aa";
      outputFormat0.setTrimText(false);
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(";Zian)u\"aa", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Invalid attribute quote character (", false);
      String[] stringArray0 = new String[2];
      outputFormat0.setNewlines(false);
      stringArray0[0] = "Invalid attribute quote character (";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("Invalid attribute quote character (", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setEncoding("");
      outputFormat0.isNewlines();
      String string0 = "";
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('a');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (a)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }
}
