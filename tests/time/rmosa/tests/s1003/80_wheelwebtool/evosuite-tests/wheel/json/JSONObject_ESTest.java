/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 18:59:00 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.putOpt("{", jSONObject0);
      JSONObject jSONObject2 = jSONObject1.putOpt("isintBitsToFloat", jSONObject0);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.put("isintBitsToFloat", false);
      JSONObject jSONObject4 = jSONObject1.getJSONObject("isintBitsToFloat");
      assertNotSame(jSONObject4, jSONObject2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9913115144472788
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Double double0 = new Double(0.01);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.optJSONArray("ZW[rb");
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "AJ=WtEy[/2");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("AJ=WtEy[/2", stringArray0);
      Boolean boolean0 = new Boolean(false);
      jSONObject0.put("rz2Gx", (Object) boolean0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = new Integer((-779));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 91;
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray0);
      int int1 = (-5);
      JSONObject.valueToString(linkedList0, 91, (-5));
      Float float0 = new Float((float) 91);
      String string0 = "joi";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "joi";
      stringArray0[1] = "joi";
      stringArray0[3] = "joi";
      stringArray0[4] = "joi";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8751832500087795
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "] is not a Boolean.";
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a Boolean.", (Object) null);
      jSONObject1.put("wheel.json.JSONObject", (-22654515));
      JSONObject jSONObject2 = jSONObject0.accumulate("] is not a Boolean.", "] is not a Boolean.");
      jSONObject2.optInt("wheel.json.JSONObject");
      try { 
        jSONObject2.get("&9YD^-B[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&9YD^-B[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.442951569173656
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Long long0 = Long.getLong("getcompare", 1020L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optJSONArray("getcompare");
      JSONObject jSONObject1 = jSONObject0.put(".", 897);
      jSONObject1.optLong(".");
      jSONObject1.toJSONArray((JSONArray) null);
      JSONObject.quote("SIFla+g}4yYJ`");
      JSONObject jSONObject2 = jSONObject0.accumulate("C<.h`!,", (Object) null);
      jSONObject2.remove("C<.h`!,");
      String string0 = "&";
      Long long1 = new Long(1020L);
      Long.min(897L, 897L);
      jSONObject0.append("&", long1);
      jSONObject1.toString(897, 2);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double double0 = new Double(2);
      linkedList0.add(double0);
      JSONObject jSONObject3 = jSONObject1.putOpt(".", jSONArray0);
      jSONObject3.put("WI*?l", (Object) linkedList0);
      jSONObject0.optLong("lzHK[<<42");
      JSONObject.numberToString(long0);
      JSONObject jSONObject4 = new JSONObject(jSONObject1);
      JSONObject jSONObject5 = jSONObject1.append("JSON does not allow non-finite numbers.", jSONObject4);
      // Undeclared exception!
      jSONObject5.toString(897, 2139);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.doubleToString((-28734958));
      Double double0 = new Double(1634.2);
      try { 
        jSONArray0.getJSONObject((-28734958));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-28734958] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = ",:]}/\\\"[{;=#";
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      jSONObject0.put("K[LEa2-`", (Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("K[LEa2-`");
      assertFalse(boolean0);
      
      String string0 = jSONObject0.optString("isformat");
      assertEquals("", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2801315622513108
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("K[LEa2-`", true);
      jSONObject0.toString((-979));
      jSONObject1.optBoolean("K[LEa2-`");
      JSONObject jSONObject3 = new JSONObject();
      jSONObject2.optString("K[LEa2-`");
      jSONObject0.toString(110, 25);
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("K[LEa2-`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of K[LEa2-`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>(25, 25);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)2);
      Short.toUnsignedInt((short)2);
      hashMap0.put(short0, (Object) null);
      jSONObject0.toString(47, (-2039));
      jSONObject0.optString("toJ", (String) null);
      jSONObject0.put("toJ", true);
      jSONObject0.accumulate("{}", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      String string0 = "}g6$";
      JSONTokener jSONTokener0 = new JSONTokener("}g6$");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }g6$
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.putOpt("", jSONObject0);
      JSONObject jSONObject3 = jSONObject1.putOpt("isintBitsToFloat", jSONObject0);
      JSONObject jSONObject4 = jSONObject2.optJSONObject("");
      assertNotSame(jSONObject4, jSONObject3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{E_pY>vf`'9=";
      stringArray0[1] = "`-W<)od(VB2q";
      stringArray0[2] = "{E_pY>vf`'9=";
      stringArray0[3] = "{E_pY>vf`'9=";
      stringArray0[4] = "{E_pY>vf`'9=";
      stringArray0[5] = "{E_pY>vf`'9=";
      stringArray0[6] = "{E_pY>vf`'9=";
      stringArray0[7] = "{E_pY>vf`'9=";
      stringArray0[8] = "{E_pY>vf`'9=";
      JSONObject jSONObject0 = new JSONObject("{E_pY>vf`'9=", stringArray0);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt("{E_pY>vf`'9=", long0);
      jSONObject1.optDouble("{E_pY>vf`'9=", (double) 0L);
      int int0 = (-1106);
      jSONObject0.toString((-1106));
      JSONTokener jSONTokener0 = new JSONTokener("cd;tYpU]\"S:x8");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of cd;tYpU]\"S:x8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5891783264039585
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.doubleToString(91);
      jSONObject0.optDouble("91", 0.0);
      JSONObject.quote("T~A`@ubm");
      jSONObject0.optBoolean("\"T~A`@ubm\"");
      JSONObject jSONObject1 = jSONObject0.append("T~A`@ubm", "va");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      Writer writer1 = jSONObject1.write(writer0);
      assertSame(writer1, stringWriter0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.putOpt("{", jSONObject0);
      StringWriter stringWriter0 = new StringWriter(59);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter1 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter1);
      jSONObject2.write(writer0);
      String string0 = jSONObject1.toString(59);
      assertNotNull(string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "java.lang.Long@0000000003.";
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000003.", true);
      jSONObject1.remove("java.lang.Long@0000000003.");
      jSONObject0.toString((-979));
      boolean boolean0 = new Boolean("{}");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = new JSONObject(jSONObject2);
      Float float0 = new Float(889.0706F);
      String string1 = "A JSONArray text mus start with '['";
      JSONTokener jSONTokener0 = new JSONTokener("A JSONArray text mus start with '['");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of A JSONArray text mus start with '['
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(46);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.write(stringWriter0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.append("C)_q<a&r6", writer0);
      jSONObject1.accumulate("C)_q<a&r6", stringWriter0);
      assertEquals("[]{}", stringWriter0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optJSONArray("] is not a Boolean.");
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(object0, 102, 452);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.keySet();
      StringWriter stringWriter0 = new StringWriter(46);
      JSONObject jSONObject1 = new JSONObject("{}");
      Double double0 = new Double(46);
      hashMap0.put((Double) null, double0);
      try { 
        jSONObject0.getBoolean("isoptJSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isoptJSONObject\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2826685601371457
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.put("K[LEa2-`", true);
      JSONObject.valueToString(jSONObject1);
      jSONObject1.optBoolean("K[LEa2-`");
      JSONObject.valueToString((Object) null);
      jSONObject0.toString((-1778), 110);
      JSONObject jSONObject3 = new JSONObject("{\"java.lang.String@0000000003\": java.lang.Boolean@0000000004}");
      try { 
        jSONObject2.getInt("Hn@B`TS+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Hn@B`TS+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{+ 8T^EX>:Kin42CoC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 18 of {+ 8T^EX>:Kin42CoC
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{E_pY>vf`'9=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 11 of {E_pY>vf`'9=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K[LEa2-`", true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "K[LEa2-`";
      stringArray0[1] = "K[LEa2-`";
      stringArray0[2] = "K[LEa2-`";
      stringArray0[3] = "K[LEa2-`";
      stringArray0[4] = "K[LEa2-`";
      stringArray0[5] = "K[LEa2-`";
      boolean boolean0 = jSONObject0.isNull("K[LEa2-`");
      assertFalse(boolean0);
      
      jSONObject0.toString(59, 59);
      boolean boolean1 = jSONObject1.has("K[LEa2-`");
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(",:]}/\"[{;=#", 1526.2064512639279);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((-3274.104));
      JSONObject jSONObject1 = jSONObject0.accumulate(",:]}/\"[{;=#", double0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("V#CQpE=<,V6rdA", true);
      boolean boolean0 = jSONObject0.isNull("V#CQpE=<,V6rdA");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("$*sIgCi", true);
      try { 
        jSONObject0.getJSONObject("$*sIgCi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$*sIgCi\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, true);
      JSONObject.valueToString(boolean0);
      Double double0 = new Double((-3274.104));
      jSONObject1.accumulate(",:]}/\"[{;=#", double0);
      assertEquals(1, jSONObject1.length());
      
      String string0 = JSONObject.valueToString(hashMap0, (-1520), 46);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, 99, 99);
      JSONObject.getNames(jSONObject0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("istoString", jSONArray1);
      Boolean boolean0 = new Boolean("to");
      JSONObject.valueToString(boolean0, (-417), (-373));
      try { 
        jSONObject1.getInt("java.lang.Boolean@0000000006");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Boolean@0000000006\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      jSONObject0.optJSONArray((String) null);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(4857.9408);
      JSONObject jSONObject1 = jSONObject0.putOpt("LrJx0oK[YlhKRoM4n", double0);
      jSONObject1.putOpt("}\u0001WYgV6g&!\"A#", "}\u0001WYgV6g&!\"A#");
      jSONObject1.toString((-1962));
      JSONTokener jSONTokener0 = new JSONTokener("LrJx0oK[YlhKRoM4n");
      jSONTokener0.skipTo('n');
      try { 
        jSONTokener0.next('&');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected '&' and instead saw 'n' at character 17 of LrJx0oK[YlhKRoM4n
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.doubleToString(Double.NaN);
      JSONObject jSONObject1 = jSONObject0.put("qEkp7Wv", (Collection) linkedList0);
      String string1 = jSONObject1.optString("qEkp7Wv");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-723));
      String string0 = JSONObject.valueToString(integer0);
      JSONObject jSONObject1 = jSONObject0.put("K[LEa2-`", true);
      String string1 = jSONObject1.optString("K[LEa2-`", "K[LEa2-`");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Double double0 = new Double((-2905.354887295216));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "*+UMZ:quxUi<\"G>bZ";
      stringArray0[2] = "*+UMZ:quxUi<\"G>bZ";
      stringArray0[3] = "*+UMZ:quxUi<\"G>bZ";
      stringArray0[4] = "*+UMZ:quxUi<\"G>bZ";
      stringArray0[5] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[6] = "*+UMZ:quxUi<\"G>bZ";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      Short short0 = new Short((short)808);
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("t$[($$p_06X<l ).mS$", (-921));
      jSONObject0.getInt("t$[($$p_06X<l ).mS$");
      Integer integer0 = new Integer((-921));
      try { 
        jSONObject0.getJSONObject("t$[($$p_06X<l ).mS$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t$[($$p_06X<l ).mS$\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(0.0);
      JSONObject.valueToString((Object) null);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("eB/22uh");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("$*sIgCi", false);
      jSONObject1.toString(93, 93);
      JSONObject.getNames((Object) null);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("K[LEa2-`", true);
      Object object0 = jSONObject0.opt("K[LEa2-`");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer(102);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Long.getLong("AT24QI_", 2540L);
      Long.toUnsignedString(0L);
      Long long0 = new Long(0L);
      Short short0 = new Short((short)8);
      Object object0 = new Object();
      JSONObject.valueToString(object0, 0, 18);
      Short short1 = new Short((short) (-513));
      JSONObject.valueToString(linkedList1);
      Object object1 = JSONObject.NULL;
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      jSONObject0.putOpt("", long0);
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject.valueToString(boolean0, (-54582745), (-54582745));
      try { 
        jSONObject0.getJSONArray("7kE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7kE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.putOpt("{", jSONObject0);
      try { 
        jSONObject2.getLong("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(",:]}/\"[{;=#", 1513.60791904039);
      JSONObject.valueToString(jSONObject0);
      Double double0 = new Double((-1889));
      hashMap0.put(double0, double0);
      long long0 = jSONObject0.getLong(",:]}/\"[{;=#");
      assertEquals(1513L, long0);
      
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 22, (-2180));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8764904395512632
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.putOpt("getvalueOf", "isintBitsToFloat");
      JSONObject jSONObject2 = new JSONObject((Object) "isintBitsToFloat");
      // Undeclared exception!
      jSONObject2.toString(2238);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5941077841636049
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(7L);
      Short short0 = new Short((short) (-1838));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject((Object) ",:]}/\"[{;=#");
      jSONObject1.toString(270, (int) (short) (-1838));
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(202.23538);
      JSONObject.getNames((Object) "' and instead saw '");
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double1 = new Double(202.23538);
      Double double2 = new Double((-1889));
      Double.min(Double.NaN, (-1889));
      hashMap0.put(double1, double2);
      Integer integer0 = new Integer((-1889));
      JSONObject jSONObject1 = jSONObject0.putOpt("' and instead saw '", "' and instead saw '");
      JSONObject jSONObject2 = jSONObject1.put("' and instead saw '", 458.79667621);
      jSONObject2.optInt("' and instead saw '");
      Float float0 = new Float(202.23538);
      jSONObject0.get("' and instead saw '");
      String string0 = JSONObject.valueToString(double1, 46, (-1889));
      assertNotNull(string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("val");
      JSONTokener jSONTokener0 = new JSONTokener("0XDiI74_@%");
      jSONTokener0.nextClean();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 2 of 0XDiI74_@%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "t[J";
      String string1 = "t$d($$p_06X<l_.mS$";
      try { 
        jSONObject0.put((String) null, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("YP%_*nf<D", (double) (-1207.6304F));
      assertEquals((-1207.63037109375), double0, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("UGh 8xn0+*O(f!S]", (Collection) linkedList0);
      JSONObject.quote("UGh 8xn0+*O(f!S]");
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      jSONObject1.toString(46, 708);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("V#CQpE=<,V6rdA");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A}=WtEy2", false);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", true);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(2);
      Byte byte0 = new Byte((byte)0);
      hashMap0.put(integer0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8794450460513974
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<JSONObject, Byte> hashMap4 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject1 = new JSONObject((Object) hashMap2);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject3 = new JSONObject((Map) hashMap2);
      jSONObject1.put("", 0.0);
      JSONObject jSONObject4 = jSONObject1.put(",:]}/\"[{;=#", 0.0);
      String string0 = null;
      jSONObject0.optInt(">", (-1889));
      jSONObject1.optInt(",:]}/\"[{;=#", 64);
      jSONObject4.putOpt(">", ",:]}/\"[{;=#");
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = null;
      stringArray0[5] = "";
      JSONObject jSONObject5 = new JSONObject((Object) ",:]}/\"[{;=#");
      Iterator iterator0 = jSONObject0.keys();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("!J,lEG=|~XP*nmwE$", 948L);
      assertEquals(948L, long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("] is not a Boolean.", 58);
      assertEquals(58, int0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("nJmh(m_G[--G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nJmh(m_G[--G\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Boolean boolean0 = Boolean.valueOf("ve");
      hashMap0.put(jSONArray0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      hashMap0.put((Double) null, (Integer) null);
      Double double0 = new Double(Double.NaN);
      Integer integer0 = new Integer((-6));
      hashMap0.put(double0, integer0);
      Byte byte0 = new Byte((byte) (-55));
      int int0 = new Byte((byte) (-55));
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
      
      String string1 = JSONObject.doubleToString((byte) (-55));
      assertEquals("-55", string1);
      
      String string2 = JSONObject.quote("get");
      assertEquals("\"get\"", string2);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Float.isFinite((-1.0F));
      JSONObject.testValidity(float0);
      Long long0 = new Long(0L);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("{E_pY>vf'9=", "{E_pY>vf'9=");
      assertEquals("{E_pY>vf'9=", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray((String) null);
      String string0 = jSONObject0.optString((String) null);
      assertNotNull(string0);
      
      String string1 = JSONObject.valueToString((Object) null, (-1356), (-1356));
      assertEquals("null", string1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0);
      boolean boolean0 = jSONObject0.has("Pb[{y#s.K\u0003!:eLzB");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-782));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Float float0 = new Float((float) 91);
      jSONObject0.toString(34, 91);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(":$)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of :$)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("A}=WtEy2", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("*^6);lT", "");
      JSONObject jSONObject2 = jSONObject1.put("^ivA7TFM&^e|(cL LW", false);
      jSONObject0.opt("Expected a ',' or '}'");
      jSONObject1.put("", (Object) null);
      JSONObject.testValidity(jSONObject2);
      jSONObject2.optJSONObject("");
      double double0 = jSONObject1.optDouble("", 0.0);
      assertEquals(2, jSONObject1.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("] is not a JSONArray.");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "A}=WtEy2";
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      HashMap<JSONObject, String> hashMap1 = new HashMap<JSONObject, String>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string1 = "000";
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("000", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Float float0 = new Float((-1573.77F));
      try { 
        jSONObject0.accumulate((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Float float0 = new Float((-1939.93F));
      Integer integer0 = new Integer((-3306));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.toString(9, 120);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("t$[($$p_06X<l .mS$", 91);
      int int0 = jSONObject0.getInt("t$[($$p_06X<l .mS$");
      assertEquals(91, int0);
      
      int int1 = new Integer(91);
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(34);
      Boolean boolean0 = new Boolean(false);
      hashMap0.put(integer0, boolean0);
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = JSONObject.valueToString(hashMap0, 125, 125);
      assertNotNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(513);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A}=WEy2", false);
      try { 
        jSONObject0.getInt("A}=WEy2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A}=WEy2\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("isfloatToIntBi2s", true);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[26];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[2] = "*+UMZ:quxUi<\"G>bZ";
      stringArray0[3] = ">ktQJ";
      stringArray0[4] = "*+UMZ:quxUi<\"G>bZ";
      stringArray0[5] = "*+UMZ:quxUi<\"G>bZ";
      stringArray0[6] = "*+UMZ:quxUi<\"G>bZ";
      stringArray0[7] = "*+UMZ:quxUi<\"G>bZ";
      stringArray0[8] = "*+UMZ:quxUi<\"G>bZ";
      JSONObject jSONObject0 = new JSONObject("*+UMZ:quxUi<\"G>bZ", stringArray0);
      Short short0 = new Short((short)93);
      jSONObject0.put("java.lang.Long@0000000003.", (Object) short0);
      jSONObject0.optBoolean("[x=oV5Y", true);
      JSONObject jSONObject1 = jSONObject0.put("", (-948));
      JSONObject.getNames(jSONObject0);
      JSONObject.getNames((Object) "JSONArray initial value should be a string or collection or array.");
      jSONObject0.getDouble("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A}=WtEy2";
      JSONObject jSONObject1 = jSONObject0.put("A}=WtEy2", false);
      try { 
        jSONObject1.getDouble("A}=WtEy2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A}=WtEy2\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("cd;tYpU]\"S:x8", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0#1'A 5Ep", false);
      jSONObject1.getBoolean("0#1'A 5Ep");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1658));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-565.397781));
      assertEquals("-565.397781", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONTokener");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONTokener
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.putOpt("(ut", "(ut");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      String string0 = jSONObject1.getString("(ut");
      assertNotNull(string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-4506));
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put(integer0, boolean0);
      jSONObject0.put("add", 0L);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = null;
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("getputAll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getputAll\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("1$gnuF?zr@$Y}69/{!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1$gnuF?zr@$Y}69/{!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-128));
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      StringWriter stringWriter0 = new StringWriter(887);
      stringWriter0.write(108);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A}=WtEy2", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A}=WtEy2";
      StringWriter stringWriter0 = new StringWriter(102);
      JSONArray jSONArray0 = new JSONArray();
      Writer writer0 = jSONArray0.write(stringWriter0);
      Writer writer1 = jSONObject0.write(writer0);
      assertSame(writer1, writer0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1852106726234373
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      jSONObject0.putOpt("toL", "toL");
      Long long0 = new Long((-1L));
      Long.compareUnsigned((-1L), 1L);
      Long.getLong("Expected a ',' or ']'", (-1L));
      Long.toUnsignedString(0L);
      JSONObject.valueToString("Expected a ',' or ']'", 1, 0);
      jSONObject0.append("j0", jSONObject1);
      JSONObject jSONObject2 = new JSONObject((Object) "");
      jSONObject2.toString();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      try { 
        jSONArray0.getBoolean((-3738));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3738] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.valueToString("_%n");
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Long, Short> hashMap0 = new HashMap<Long, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("$*sIgCi", false);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      Float float0 = new Float(3051.4586808477457);
      hashMap0.put(float0, (JSONArray) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Long.compareUnsigned(0L, (-1740L));
      Long.toUnsignedString(0L);
      Long long0 = new Long(0L);
      Short short0 = new Short((short) (-1151));
      JSONObject.valueToString(short0, (short) (-1151), 0);
      Short short1 = new Short((short) (-1));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("i|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of i|
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 1091, 1091);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      double double0 = jSONObject0.optDouble("put");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Float float0 = new Float((-2447.0435F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(46);
      stringWriter0.flush();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.write(stringWriter0);
      jSONObject0.optInt("O");
      CharBuffer charBuffer0 = CharBuffer.allocate(32);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) charBuffer0, 46, (-1065));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("Null key.", false);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("C5PiLZOep?xuZ{", 1754.07);
      assertEquals(1754.07, double0, 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-4446.1397279));
      Double double1 = new Double((-4446.1397279));
      JSONObject jSONObject1 = jSONObject0.putOpt("' and instead saw '", double0);
      Float float0 = new Float((-4446.1397279));
      Long long0 = new Long(215L);
      try { 
        jSONObject1.append("' and instead saw '", long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[' and instead saw '] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1513.60791904039);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt(",:]}/\"[{;=#", (-1889));
      assertEquals((-1889), int0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("7E", "7E");
      Float float0 = new Float(0.0);
      Long long0 = new Long(206L);
      try { 
        jSONObject0.append("7E", "7E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[7E] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, "7E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-28734958));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte byte0 = (byte)93;
      Byte byte1 = new Byte((byte)93);
      JSONObject.quote("NTK=/'~ez}$CXUZ7NA*");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("7E", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("C'", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A}=WEy2", true);
      try { 
        jSONObject0.getJSONArray("A}=WEy2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A}=WEy2\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("A}=WEy2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A}=WEy2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(202.23538);
      JSONObject.getNames((Object) "' and instead saw '");
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double1 = new Double(202.23538);
      Double double2 = new Double((-1889));
      hashMap0.put(double1, double2);
      Integer integer0 = new Integer((-1889));
      jSONObject0.putOpt("' and instead saw '", "' and instead saw '");
      Float float0 = new Float(202.23538);
      Object object0 = jSONObject0.get("' and instead saw '");
      assertEquals("' and instead saw '", object0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("=2oFJ", (-2468L));
      Object object0 = new Object();
      Object object1 = jSONObject0.opt("Expected a ',' or ']'");
      assertNull(object1);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Byte byte0 = new Byte((byte)25);
      Byte byte1 = new Byte((byte) (-55));
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = JSONObject.quote("]`+/ 6v2>VZXRoGB(");
      assertEquals("\"]`+/ 6v2>VZXRoGB(\"", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("] is not a number.", 0L);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("t*XZo''ZK*w0r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t*XZo''ZK*w0r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("t$[($$p_06X<l ).mS$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t$[($$p_06X<l ).mS$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("-s/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-s/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("gsI{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of gsI{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      String string0 = "nam";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("nam");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of nam
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Byte byte0 = new Byte((byte)22);
      JSONObject.doubleToString((byte)22);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("22");
      String string0 = "int";
      try { 
        jSONObject0.getDouble("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"int\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(42);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(integer0, boolean0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      jSONObject0.accumulate("90-HhIUVZv", (Object) null);
      String string0 = jSONObject0.optString("Pw", "JSON does not allow non-finite numbers.");
      assertEquals("JSON does not allow non-finite numbers.", string0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(46);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString((-2666));
      jSONArray0.write(stringWriter0);
      Object object0 = new Object();
      jSONObject0.put("zW%sqn", object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(46);
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.accumulate("gM xL8b", "] is not a JSONArray.");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
