/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 18:29:06 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.filemode.FileController;
import freemind.modes.schememode.SchemeMode;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.text.AttributedCharacterIterator;
import java.text.DateFormatSymbols;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.chrono.Chronology;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import javax.swing.ActionMap;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.PlainDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.script.InterpreterPool;
import org.apache.xalan.processor.StylesheetHandler;
import org.apache.xalan.processor.TransformerFactoryImpl;
import org.apache.xalan.processor.XSLTSchema;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xerces.parsers.SoftReferenceSymbolTableConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xml.utils.ListingErrorHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(true);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      HsqlProperties hsqlProperties0 = new HsqlProperties();
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.696358026209703
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.yellow;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.updateUI();
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (-264), (-264), 164, 39, '[');
      keyEvent0.setKeyChar('\\');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser1, (-660), 0L, (-1), 0, 'x');
      jDayChooser0.keyPressed(keyEvent0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jDayChooser1.setDecorationBordersVisible(true);
      jDayChooser0.setEnabled(false);
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-3209L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(3);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection((HsqlProperties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcConnection", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      int int0 = (-275);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-275), (-23L), 38, 38, 'V');
      int int1 = 10002;
      InputEvent.getModifiersExText(10002);
      jDayChooser0.keyPressed(keyEvent0);
      StringContent stringContent0 = new StringContent((-275));
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      AbstractDocument.BranchElement abstractDocument_BranchElement0 = (AbstractDocument.BranchElement)defaultStyledDocument0.getParagraphElement(38);
      // Undeclared exception!
      try { 
        abstractDocument_BranchElement0.isDefined((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.StyleContext$SmallAttributeSet", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-275), 0L, 33, 33, 'V');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(2);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection((HsqlProperties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcConnection", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-3209L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 41, 1L, 41, 41, 'l');
      jDayChooser0.keyPressed(keyEvent0);
      Color color0 = null;
      try {
        color0 = new Color((-3209L), 0.0F, 0.0F, 41);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Alpha Red
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.800934927977544
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 0, 'X', 0);
      Rectangle rectangle0 = new Rectangle();
      jDayChooser0.paintImmediately(rectangle0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 0, 0, 0, 0, 'x');
      keyEvent0.setKeyChar('x');
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.drawDays();
      jDayChooser0.setDay(0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.137396200047152
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isOpaque();
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      jDayChooser0.drawDays();
      jDayChooser0.getSelectedDay();
      jDayChooser0.setInheritsPopupMenu(true);
      System.setCurrentTimeMillis((-1922L));
      jDayChooser0.getDayPanel();
      jDayChooser0.getLocale();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMonth(4095);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setFocus();
      jDayChooser0.getDaysInMonth();
      ActionEvent actionEvent0 = new ActionEvent(date0, 2554, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Date cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.CHINA;
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, (-783), 0, 'X', 0);
      keyEvent0.consume();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setMaxDayCharacters(292);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-368), 44, 292, 9, (-1215), 10);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setDay(0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(26);
      jDayChooser0.setDecorationBackgroundVisible(false);
      Color color0 = Color.BLUE;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      DocumentLoader documentLoader1 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      int int0 = 11;
      String string0 = "";
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 11, "31", 1L, 26);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JComponent.getDefaultLocale();
      jDayChooser0.setFont((Font) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.yellow;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.getX();
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      MockDate mockDate1 = new MockDate(0, 0, 1579);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate1);
      StringContent stringContent0 = new StringContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      defaultStyledDocument0.getDefaultRootElement();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      Color color1 = null;
      try {
        color1 = new Color((-5120.6F), 0.0F, 0, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Alpha Red
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.yellow;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.getX();
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      MockDate mockDate1 = new MockDate(0, 0, 1579);
      jDayChooser0.setSelectableDateRange(mockDate1, mockDate0);
      StyleContext.getDefaultStyleContext();
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      assertNotNull(attributeSet0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3204));
      jDayChooser0.focusGained((FocusEvent) null);
      HsqlProperties hsqlProperties0 = new HsqlProperties("day");
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8962003575441333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      SystemColor systemColor0 = SystemColor.scrollbar;
      jDayChooser0.getBackground();
      jDayChooser0.setWeekdayForeground(systemColor0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.drawWeeks();
      jDayChooser0.setWeekOfYearVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 74, (-3093L), 74, 266, 'x');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.setDay((-3626));
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      actionMap0.keys();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getActionMap();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setYearChooser(jYearChooser0);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      actionMap0.keys();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getActionMap();
      jDayChooser0.setDay(10154);
      jDayChooser0.keyTyped((KeyEvent) null);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(10154);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(12);
      assertEquals(12, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(33);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Chronology chronology0 = Chronology.ofLocale(locale0);
      SoftReferenceSymbolTableConfiguration softReferenceSymbolTableConfiguration0 = new SoftReferenceSymbolTableConfiguration((SymbolTable) null);
      Locale locale1 = Locale.JAPAN;
      chronology0.period(6, 6, 69);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.800934927977544
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      String string0 = "Wkindows";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Wkindows");
      jDayChooser0.updateUI();
      Date date0 = null;
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.getDaysInMonth();
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(1641);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getActionMap();
      jDayChooser0.getMaxSelectableDate();
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(1641);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.578832528281541
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      Date date0 = jDayChooser2.maxSelectableDate;
      jDayChooser1.setMaxSelectableDate(date0);
      Color color0 = Color.yellow;
      jDayChooser0.setForeground(color0);
      jDayChooser2.drawDays();
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      HashMap<AttributedCharacterIterator.Attribute, Integer> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Integer>();
      Font font0 = new Font(hashMap0);
      jDayChooser0.setFont(font0);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      jDayChooser0.initDecorations();
      jDayChooser0.isWeekOfYearVisible();
      dimension0.height = 133;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 133, "pZ}+e/O7");
      actionEvent0.paramString();
      actionEvent0.paramString();
      actionEvent0.paramString();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      try { 
        mockSimpleDateFormat0.parse("unknown type,cmd=pZ}+e/O7,when=0,modifiers=");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"unknown type,cmd=pZ}+e/O7,when=0,modifiers=\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.896153112519625
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("{", false, true);
      Color color0 = jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[7];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-178.8393F);
      floatArray1[1] = (-178.8393F);
      floatArray1[3] = (-178.8393F);
      floatArray1[4] = (-178.8393F);
      color0.getColorComponents(floatArray1);
      jDayChooser0.sundayForeground = color0;
      floatArray0[1] = (-178.8393F);
      floatArray0[2] = 1950.0F;
      floatArray0[3] = (-1203.718F);
      floatArray0[4] = 1958.8638F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-2699.0625F);
      color0.getRGBComponents(floatArray0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setMinSelectableDate((Date) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getActionMap();
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      SystemColor systemColor0 = SystemColor.scrollbar;
      jDayChooser0.getBackground();
      jDayChooser0.setWeekdayForeground(systemColor0);
      jDayChooser_DecoratorButton0.isContentAreaFilled();
      jDayChooser0.drawWeeks();
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.focusLost((FocusEvent) null);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInputContext();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = new Color(1006649088);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setMaxDayCharacters((-479));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.pink;
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      Color color0 = new Color((-2121));
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getLocale();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext((-2121), stringArray0, stringArray0, stringArray0, stringArray0, (IBindingFactory) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(223, dimension0.width);
      
      jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(1584);
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9831644895092557
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      java.sql.Date date0 = new java.sql.Date(333L);
      jDayChooser0.minSelectableDate = (Date) date0;
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getLocale();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setWeekdayForeground(color0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      int int0 = (-1543);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "!!! TODO: getCurrentTime()", (-1543));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.setFocus();
      Color color1 = null;
      try {
        color1 = new Color(41, 3, 10L, 2070.056F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Alpha Red Green Blue
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(2);
      SchemeMode schemeMode0 = new SchemeMode();
      FileController fileController0 = null;
      try {
        fileController0 = new FileController(schemeMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.yellow;
      jDayChooser0.setYear(1788);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5777114378736075
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition(10);
      mockSimpleDateFormat0.parse("", parsePosition0);
      jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.init();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color.getHSBColor(0.0F, 0.1F, 0.0F);
      jDayChooser0.setDecorationBackgroundVisible(true);
      Color color0 = Color.BLUE;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      DocumentLoader documentLoader1 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader1);
      TransformerFactoryImpl transformerFactoryImpl0 = new TransformerFactoryImpl();
      StylesheetHandler stylesheetHandler0 = new StylesheetHandler(transformerFactoryImpl0);
      XSLTSchema xSLTSchema0 = stylesheetHandler0.getSchema();
      ListingErrorHandler listingErrorHandler0 = new ListingErrorHandler();
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(xSLTSchema0, listingErrorHandler0);
      stylesheetRoot0.getOutputComposed();
      // Undeclared exception!
      try { 
        sVGColorProfileElementBridge0.createICCColorSpaceExt(bridgeContext0, (Element) null, "org/apache/xalan/res/XSLTInfo.properties");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.bridge.SVGColorProfileElementBridge", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.yellow;
      jDayChooser0.setMaxDayCharacters(13);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-1));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.yellow;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.getX();
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      MockDate mockDate1 = new MockDate(0, 0, 1579);
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      JMenuBar jMenuBar0 = new JMenuBar();
      JMenu jMenu0 = null;
      // Undeclared exception!
      try { 
        jMenuBar0.add((JMenu) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 21;
      jDayChooser0.addListeners(21);
      int int1 = 1086;
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        ComponentOrientation.getOrientation((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.ComponentOrientation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      actionMap0.keys();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getActionMap();
      jDayChooser0.setDay(0);
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.addListeners(0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay((-1150));
      assertEquals(1, jDayChooser0.getDay());
  }
}
