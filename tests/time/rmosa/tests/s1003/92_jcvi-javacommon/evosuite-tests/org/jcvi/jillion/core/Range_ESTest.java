/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 28 14:51:47 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.ToDoubleFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=4.007333185232473
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(1535L);
      Range range1 = Range.of((-1259L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ 1535 .. 1535 ]/0B", range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range2.toString(range_CoordinateSystem2);
      Range range3 = Range.of((-1259L));
      Range.of(9223372036854775337L);
      range0.getEnd();
      range3.getEnd();
      Range range4 = Range.ofLength(9223372036854775080L);
      range4.intersection(range3);
      range0.intersection(range1);
      range1.split(180L);
      // Undeclared exception!
      range4.split(1L);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.6635616461296423
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = 1436L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1436L, 1436L);
      long long1 = (-9223372036854775808L);
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range0.toString();
      range0.getBegin();
      Object object0 = new Object();
      range0.startsBefore(range0);
      range0.isEmpty();
      Range.of(741L);
      // Undeclared exception!
      try { 
        Range.parseRange("[ -9223372036854775808 .. 9223372036854775807 ]/0B");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9223372036854775808\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      linkedList0.add(range0);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5553480614894135
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = 364L;
      Range range0 = Range.of(364L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 130L, 130L);
      long long1 = (-4294964659L);
      Long long2 = new Long((-4294964659L));
      Range range2 = Range.of(826L, 826L);
      range1.equals((Object) null);
      range0.equals(range2);
      range0.isEmpty();
      long long3 = (-1674L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.split(4294967295L);
      // Undeclared exception!
      try { 
        Range.parseRange("a ]lU ", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse a ]lU  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-21L), 4294967313L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1361L), 4294967295L);
      range1.toString();
      range0.getBegin();
      range1.equals(range0);
      range0.isEmpty();
      Range.of((-21L));
      // Undeclared exception!
      try { 
        Range.parseRange("$u^},2>T[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse $u^},2>T[ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-21L), 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1361L), 4294967295L);
      range1.toString();
      range0.getBegin();
      range1.equals(range0);
      range0.isEmpty();
      Range.of(range_CoordinateSystem1, (-1361L), (-21L));
      // Undeclared exception!
      try { 
        Range.parseRange("$u^},2>T[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse $u^},2>T[ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range0.toString(range_CoordinateSystem0);
      Long long0 = new Long(4294967295L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(364L, 4294967295L);
      Object object0 = new Object();
      range0.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getEnd();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.parseRange("ISFzZr?rro*O#0XKoY>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ISFzZr?rro*O#0XKoY> into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(4294967295L, 4294967295L);
      range1.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1361L), 4294967295L);
      range1.toString();
      range0.getBegin();
      range1.equals(range0);
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.ofLength(4294967295L);
      range0.equals(range1);
      range1.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.583518938456111
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = 255L;
      long long1 = 255L;
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1259L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem1);
      Range range2 = Range.of(110L);
      Range range3 = Range.of(1L);
      range3.getEnd();
      range1.getEnd();
      range3.intersection(range0);
      range3.intersection(range0);
      range0.split(255L);
      // Undeclared exception!
      try { 
        range2.split((-1259L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775502L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add((Range) null);
      assertFalse(linkedList0.contains(range0));
      
      linkedList0.add(range0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(9223372036854775780L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(9223372036854775780L, 9223372036854775780L);
      range1.isSubRangeOf(range0);
      Range range2 = Range.of(9223372036854771436L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 130L, 1214L);
      range0.split(130L);
      range1.equals(range2);
      // Undeclared exception!
      try { 
        Range.of(983L, 496L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.583518938456111
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = 32767L;
      Range.of(100L, 32767L);
      long long1 = 5705864050079L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = 4294967295L;
      Range.of(range_CoordinateSystem0, 32767L, 4294967295L);
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(0L, (-3571L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Long long0 = new Long(5705864050079L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 5705864050079L, 9223372036854773190L);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 5705864050079L, 9223372036854773190L);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854775807L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(linkedList0);
      Long long0 = new Long(9223372036854775807L);
      range0.equals(object1);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$EmptyShortRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$EmptyShortRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(100L, 32767L);
      long long0 = 663L;
      long long1 = 5705864050079L;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(663L, 5705864050079L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 663 .. 5705864050080 ]/SB", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.remove((Object) null);
      linkedList0.add((Range) null);
      Long long0 = new Long(100L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      linkedList0.add((Range) null);
      Range range0 = Range.of(range_CoordinateSystem0, 1592L, 1592L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      range0.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(638L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775780L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      assertTrue(linkedList3.equals((Object)linkedList0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.7612001156935655
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 102L);
      range0.intersects(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-2003L));
      range0.endsBefore(range1);
      Range.of(102L);
      Range range2 = Range.of(102L);
      Range range3 = Range.ofLength(61157L);
      range2.equals(range3);
      Range.of(range_CoordinateSystem0, 1L, 1L);
      // Undeclared exception!
      try { 
        Range.of(1619L, (-2003L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0650971907121787
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      range0.forEach(consumer0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      boolean boolean0 = range0.equals("");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(2646L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1436L, 9223372036854775065L);
      range0.toString();
      Long long0 = new Long((-1062L));
      range0.getLength();
      Long long1 = new Long((-1062L));
      range0.equals(long1);
      // Undeclared exception!
      try { 
        range0.split((-2147482988L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-2147483648L));
      range0.equals("dH9KI;-QAP$");
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = 9223372036854775780L;
      Range range0 = Range.ofLength(9223372036854775780L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(9223372036854775780L);
      range1.getBegin();
      range1.getBegin();
      // Undeclared exception!
      try { 
        range0.split(9223372036854775780L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -57 would make range [9223372036854775780 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.583518938456111
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      range1.isSubRangeOf(range0);
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483648 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(9223372036854775780L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(9223372036854775780L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(9223372036854775780L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      linkedList0.add(range0);
      assertFalse(linkedList0.contains(range1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      long long0 = range0.getBegin();
      //  // Unstable assertion: assertEquals(4294967295L, long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-1259L));
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854775807L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = 9223372036854775780L;
      Range range0 = Range.of(9223372036854775780L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(9223372036854771436L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854771436L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      String string0 = range0.toString();
      assertEquals("[ 4294967295 .. 4294967294 ]/0B", string0);
      
      Long long0 = new Long((-1535L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-2622L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(9223372036854775807L);
      range0.getEnd();
      range1.getEnd();
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2622 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.remove((Object) null);
      Range range0 = null;
      linkedList0.add((Range) null);
      Long long0 = new Long(100L);
      linkedList0.add((Range) null);
      linkedList0.listIterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-325L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Object object0 = new Object();
      range1.equals(object0);
      range1.iterator();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 32767L, 32767L);
      // Undeclared exception!
      try { 
        range1.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.toString();
      range1.getBegin();
      Long long0 = new Long(0L);
      Range range2 = Range.of(0L, 1L);
      boolean boolean0 = range1.equals(range2);
      range1.equals("");
      Object object2 = new Object();
      boolean boolean1 = range2.equals(object2);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-3351L), 166L);
      Range range1 = Range.of((-44L), 1281L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(28L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals((Object) null);
      boolean boolean1 = linkedList0.add(range0);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.5263605246161633
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-2555L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2555L), 130L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 130L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem2);
      assertEquals((-2555L), long0);
      
      range1.iterator();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem.values();
      Range range2 = Range.ofLength(334L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-1287L));
      range0.toString();
      Range range1 = Range.of(range_CoordinateSystem0, (-1287L), 130L);
      range1.getBegin();
      Long long0 = new Long((-1287L));
      range1.equals(range0);
      Range range2 = Range.of(range_CoordinateSystem0, (-1287L), (-1287L));
      range2.isEmpty();
      range2.split(32767L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = new Long((-128L));
      linkedList0.add(range0);
      range0.equals((Object) null);
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(364L);
      range0.getBegin();
      Object object0 = new Object();
      Range.ofLength(1243L);
      Range range1 = Range.of(364L, 364L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of(3240L, 364L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1829L, 4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object0);
      Long long0 = new Long((-2031L));
      range0.equals(object1);
      range0.equals(long0);
      long long1 = range0.getLength();
      assertEquals(4294965467L, long1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-128L));
      linkedList0.add(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      range0.equals(range1);
      Range.of((-128L));
      range1.equals(range_CoordinateSystem0);
      long long0 = 65532L;
      // Undeclared exception!
      try { 
        Range.of((-128L), (-2663L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.583518938456111
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-1259L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1259 .. -1259 ]/0B", string0);
      
      Range range1 = Range.of((-1259L));
      range1.getEnd();
      range1.getEnd();
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      boolean boolean0 = range2.startsBefore(range1);
      Object object1 = new Object();
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      
      Range range3 = Range.ofLength(3316L);
      List<Range> list0 = range3.complement(range2);
      assertFalse(range3.isEmpty());
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
      assertTrue(list0.contains(range3));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-2147483648L));
      String string0 = "dH9KI;-QAP$";
      range0.equals("dH9KI;-QAP$");
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9223372036854774152L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 255L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775790L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-9223372036854775790L), (-9223372036854775790L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      Long long0 = new Long(4294965933L);
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      
      Long long2 = new Long((-9223372036854775790L));
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      
      List<Range> list0 = range1.split(1677L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(9223372036854775780L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      linkedList0.add(range0);
      Range range1 = Range.of(9223372036854775780L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("`&YA3?f6R O(~qZ%qa'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.`&YA3?f6R O(~qZ%qa'
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(2654L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(1020L, 4294968649L);
      range0.getBegin();
      Object object0 = new Object();
      Long long0 = new Long(1020L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.5263605246161633
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(35014L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 35014 .. 35015 ]/SB", string0);
      
      Range range1 = Range.of(35014L);
      range1.getEnd();
      range1.getEnd();
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range2.split(35014L);
      List<Range> list1 = range0.complementFrom(list0);
      assertSame(range2, range1);
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("0Gr1<?W9-z/{EwT", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 0Gr1<?W9-z/{EwT into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(1L);
      range0.getLength();
      Range range1 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range1.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-1208L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.4965075614664793
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(364L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 364L, 364L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      Object object0 = new Object();
      long long0 = range1.getBegin();
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertEquals(364L, long0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(9223372036854775780L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(9223372036854775780L, 9223372036854775780L);
      Long long0 = new Long((-1736L));
      range0.getLength();
      Long long1 = new Long(9223372036854771436L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range0.split(1L);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      String string0 = range0.toString();
      assertEquals("[ 4294967295 .. 4294967294 ]/0B", string0);
      
      Long long0 = new Long(1L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.split(1L);
      assertTrue(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(1190L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      String string0 = range0.toString();
      assertEquals("[ 4294967295 .. 4294967294 ]/0B", string0);
      
      Long long0 = new Long(4294967295L);
      boolean boolean0 = range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 4294967295 .. 4294967294 ]/0B", range_CoordinateSystem1);
      range0.complement(range1);
      assertTrue(range0.isEmpty());
      
      boolean boolean1 = range1.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-3571L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3571 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-1683L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-2460L));
      long long0 = range0.getBegin();
      assertEquals((-2460L), long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2459L), long1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.ofLength(9223372036854775807L);
      linkedList0.add(range0);
      Long long0 = new Long((-2511L));
      range0.equals(long0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range0.equals(linkedList0);
      Range range1 = range0.asRange();
      range1.toString();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Long long0 = new Long(4294967295L);
      Range range1 = Range.of(4294967295L);
      range0.intersects(range1);
      assertFalse(range1.isEmpty());
      
      Long.remainderUnsigned((-942L), 2147483647L);
      range0.equals(long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(5400L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 5400 .. 5400 ]/0B", string0);
      
      Range range1 = Range.of(5400L);
      long long0 = range1.getEnd();
      assertSame(range1, range0);
      assertEquals(5400L, long0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.remove((Object) null);
      linkedList0.add((Range) null);
      Long long0 = new Long(100L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      linkedList0.add((Range) null);
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Object object0 = new Object();
      range0.isEmpty();
      range0.iterator();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-2217L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(989L);
      Long long0 = new Long(989L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.ofLength((-21L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2733L, 2733L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 32767L);
      Range range1 = Range.of((-410L));
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1079L), 9223372036854773979L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd(2147483647L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 11403L);
      String string0 = range0.toString();
      assertEquals("[ 1 .. 11403 ]/0B", string0);
      
      Long long0 = new Long(3031L);
      range0.equals("`M2@Z,rw'je{,Lo");
      List<Range> list0 = range0.split(11403L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(364L);
      range0.getBegin();
      Range range1 = Range.of(1438L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      String string0 = range0.toString();
      assertEquals("[ 364 .. 364 ]/0B", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.864738512190568
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(364L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range0 = Range.of(799L, 65535L);
      long long0 = 1436L;
      long long1 = 436L;
      range0.split(1436L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("aq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.aq
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = 9223372036854775780L;
      Range range0 = Range.of(9223372036854775780L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long1 = 9223372036854771436L;
      Range range1 = Range.of(9223372036854771436L, 9223372036854771436L);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775780L, 9223372036854771436L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(62918L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-1L));
      range_Builder1.copy();
      Long long0 = new Long((-1L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 250L;
      Range range0 = Range.ofLength(250L);
      range0.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add((Range) null);
      Long long0 = new Long(100L);
      linkedList0.add((Range) null);
      Range range0 = Range.ofLength(100L);
      linkedList0.add(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = 1708L;
      Range range0 = Range.ofLength(1708L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.583518938456111
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1436L, 9223372036854775065L);
      range0.toString();
      Long long0 = new Long((-1062L));
      range0.getLength();
      Long long1 = new Long((-1062L));
      range0.equals(long1);
      Range range1 = Range.of(9223372036854773629L);
      range0.complement(range1);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.3156454094790258
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775790L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-9223372036854775790L), (-9223372036854775790L));
      range1.isSubRangeOf(range0);
      boolean boolean0 = range0.startsBefore(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range1);
      List<Range> list0 = range1.complementFrom(linkedList1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      range1.complement(range0);
      range0.isEmpty();
      //  // Unstable assertion: assertSame(range0, range1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean1 = range0.isSubRangeOf(range0);
      assertTrue(boolean1);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      boolean boolean2 = range0.equals(object0);
      assertTrue(boolean2 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(2654L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(868L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.isEmpty();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 867 ]/0B", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-13L), 100L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Long long0 = new Long(4294967295L);
      range0.isEmpty();
      range0.asRange();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1361L), (-1361L));
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range0.endsBefore(range1);
      assertSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-2147483660L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.0215162614205675
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1361L), 4294967295L);
      String string0 = range1.toString();
      assertEquals("[ -1361 .. 4294967294 ]/0B", string0);
      
      long long0 = range0.getBegin();
      assertEquals((-2L), long0);
      
      Long long1 = new Long((-1535L));
      range1.equals(long1);
      boolean boolean0 = range0.equals(range_CoordinateSystem1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = range1.getEnd(range_CoordinateSystem2);
      assertEquals(4294967295L, long2);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(1610L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1610 .. 1610 ]/0B", string0);
      
      Range range1 = Range.of(2373L);
      range1.getEnd();
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getEnd();
      assertEquals((-32768L), long0);
      
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.spliterator();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      boolean boolean1 = range0.equals(linkedList0);
      assertFalse(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(364L);
      long long0 = range0.getBegin();
      assertEquals(364L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(365L, long1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 32767L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      String string0 = range0.toString();
      assertEquals("[ 4294967295 .. 4294967294 ]/0B", string0);
      
      Long long0 = new Long(4294967295L);
      range0.equals(long0);
      range0.getBegin();
      List<Range> list0 = range0.split(4294967295L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(104L);
      Range range1 = Range.ofLength(367L);
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
      Long long0 = new Long((-1L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Object> consumer0 = null;
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("Residue Based", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Residue Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = 100L;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.remove((Object) null);
      linkedList0.add((Range) null);
      Long long1 = new Long(100L);
      linkedList0.add((Range) null);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add((Range) null);
      Range range0 = Range.of(100L, 255L);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-13L), 100L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.remove((Object) range0);
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList1.parallelStream();
      Range range1 = Range.of((-13L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.remove((Object) null);
      linkedList0.add((Range) null);
      Long long0 = new Long(100L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      linkedList0.add((Range) null);
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Object object0 = new Object();
      range0.equals(object0);
      Iterator<Long> iterator0 = range0.iterator();
      boolean boolean0 = range0.equals(iterator0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.split(32767L);
      assertTrue(list0.contains(range0));
      
      long long1 = range0.getLength();
      assertTrue(range0.isEmpty());
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      long long0 = 32767L;
      Range range1 = Range.ofLength(32767L);
      Range range2 = range1.intersection(range0);
      range1.equals(range2);
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("PoOConCXV3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.PoOConCXV3
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(2147483647L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-3095L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      String string0 = "KP^";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("KP^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.KP^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(0L);
      range1.intersection(range0);
      range0.split(255L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 0 .. 0 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 0 .. 0 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Object object1 = new Object();
      range0.equals(linkedList0);
      boolean boolean0 = range0.equals(object1);
      boolean boolean1 = range0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.298038219205427
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L, 4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getEnd();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Comparator.comparingDouble((ToDoubleFunction<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.2213382039641423
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(9223372036854775780L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(9223372036854775780L, 9223372036854775780L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range0.startsBefore(range1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      List<Range> list1 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertFalse(list1.isEmpty());
      
      boolean boolean2 = range0.isEmpty();
      //  // Unstable assertion: assertSame(range0, range1);
      //  // Unstable assertion: assertFalse(boolean2);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(4294967294L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 4294967294 .. 4294967294 ]/0B", string0);
      
      Range range1 = Range.of(4294967294L);
      range0.getEnd();
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range1.complement(range0);
      range0.equals("vk8l$=8w");
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("vk8l$=8w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.vk8l$=8w
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder3 = range_Builder2.copy();
      range_Builder1.copy();
      // Undeclared exception!
      try { 
        range_Builder3.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(255L, long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(212L, 212L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin((-1258L));
      range_Builder1.copy();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-1258L), (-2311L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.toString();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range0.getEnd();
      linkedList1.add(range0);
      range0.getBegin();
      linkedList1.add(range0);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Comparator.comparingDouble((ToDoubleFunction<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 255L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.spliterator();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of(364L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = range0.getBegin();
      assertEquals(364L, long0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.8492350266892
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      linkedList0.add(range0);
      range0.equals(linkedList0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-2039L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.toString();
      Long long0 = new Long((-2147483648L));
      Long long1 = new Long(4294967295L);
      range0.equals(long1);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.8513361342092836
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range0.toString();
      Long long0 = new Long(4294967295L);
      range0.equals(long0);
      range0.split(4294967295L);
      // Undeclared exception!
      try { 
        range0.split((-3135L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967296L);
      long long0 = 0L;
      range_Builder0.shift(4294967296L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("r", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse r into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.872327462020019
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.remove((Object) null);
      linkedList0.add((Range) null);
      Long long0 = new Long(100L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      linkedList0.add((Range) null);
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.iterator();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-2217L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-128L));
      range1.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd((-4622L));
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("vH) h-=%9V8]<4%y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.vH) h-=%9V8]<4%y
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.9390527729243106
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of((-1259L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1259 .. -1259 ]/0B", string0);
      
      Range range1 = Range.of((-128L));
      boolean boolean0 = range1.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = (-224L);
      Range.Builder range_Builder0 = new Range.Builder((-4223L), (-224L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-48L), (-224L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.shift(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("coordinateSystem can not be null", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse coordinateSystem can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      long long0 = range0.getBegin();
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getBegin();
      assertEquals((-32768L), long0);
      
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-2311L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2311L), (-2311L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("cZ0pC-PqOSaTD-T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.cZ0pC-PqOSaTD-T
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.7711696410886844
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of((-65279L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 4294967294L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("1*~=<?S?", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 1*~=<?S? into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.7689014346007985
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of(9223372036854775780L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals(linkedList0);
      linkedList0.add(range0);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Comparator.comparingDouble((ToDoubleFunction<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Long long0 = new Long(100L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854774965L, (-32666L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32667 would make range [9223372036854774964 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-138L), 1L);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = 4294967295L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 4294967295L, 4294967295L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9991L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
