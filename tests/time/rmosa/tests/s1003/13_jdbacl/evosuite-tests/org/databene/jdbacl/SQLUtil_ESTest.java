/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 18:59:34 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("M\"Km]");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xv@<>{S;u");
      DBDataType dBDataType0 = DBDataType.getInstance((-23), "M}4sc>Er*");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer1);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "M\"Km]";
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.normalize("null M}4SC>ER*(3) NULL", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputText rowOutputText0 = new RowOutputText("M}4sc>Er*", "execste", "` hfDYJJJ\"oY\u0000S", false, "xv@<>{S;u");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0);
      PrintWriter printWriter0 = mockPrintWriter0.append('C');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nextAutoincrementValue(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nextAutoincrementValue(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-491.693566200963);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 491.693566200963", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("left");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "left", false, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      DBDataType dBDataType0 = DBDataType.getInstance((-291), "DATE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CONSTRAINT left ", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.addUkConstraint(dBPrimaryKeyConstraint0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("DATE", stringBuilder0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLUtil.isDML("upQate");
      // Undeclared exception!
      try { 
        SQLUtil.join("inner", "ORDER BY", (String[]) null, "LONG NVARCHAR", "upQate", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLUtil.isQuery("selectselect * from");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("executegetcharacterstream(int)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(553, "select intogenerated column");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vSZ,f(G");
      NameSpec nameSpec0 = NameSpec.NEVER;
      defaultDBTable0.countProviders();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "vSZ,f(G";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "7", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (vSZ,f(G)", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.normalize("alter materialized vie", false);
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      stringBuilder0.append(charArray0);
      stringBuilder0.codePoints();
      int int0 = (-2438);
      StringBuilder stringBuilder1 = stringBuilder0.append((-2438));
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "select into";
      SQLUtil.isQuery("select into");
      int int0 = 833;
      Random.setNextRandom(833);
      String string1 = "tf>=<qS)=id1";
      VersionNumber versionNumber0 = VersionNumber.valueOf("insert!r?nw! 8mjfyv>&");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("tf>=<qS)=id1", "select into", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("select into");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'select into'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      SQLUtil.ownerDotComponent(tableContainer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      SQLUtil.innerJoin("", stringArray0, "deletesflect ino+mxo.l5o8hi7", "])", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", false, defaultDBTable0, "7/cU");
      dBCheckConstraint0.setName((String) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("callcall");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'callcall' not found in table ''
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vSZ,f(G");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create materialized viewupqate", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" = ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = " = ";
      stringArray0[1] = "m";
      stringArray0[2] = "m";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("m", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("m", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("((w");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("((w", defaultDBTable0, 2951, "((w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ((w
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = SQLUtil.normalize("rk+63ve_1'MTmpM5)c", false);
      assertEquals("r  k + 63ve_1 'MTmpM5)c'", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      SQLUtil.isDML(" /* WHERE ");
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("w)`-!DTkD1u9F3#Ew_V", true, "22_6B:]J7u`qT", "Ms");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK Ms", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vSZ,f(G");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "vSZ,f(G";
      stringArray0[1] = "vSZ,f(G";
      stringArray0[2] = "vSZ,f(G";
      stringArray0[1] = "vSZ,f(G";
      stringArray0[5] = "vSZ,f(G";
      stringArray0[6] = "vSZ,f(G";
      stringArray0[7] = "vSZ,f(G";
      stringArray0[8] = "vSZ,f(G";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("vSZ,f(G", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[4], defaultDBTable0, (-682573761), "%.`GUKA");
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-682573761));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/*";
      String string1 = SQLUtil.renderColumnListWithTableName("U+pV", stringArray0);
      assertEquals("U+pV./*", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = SQLUtil.normalize("ie/%gr", false);
      assertEquals("ie / % gr", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DBSchema dBSchema0 = new DBSchema("create tablerenameselectwmmx:mo");
      dBSchema0.getTable("M}c>Er*");
      DBDataType dBDataType0 = DBDataType.getInstance((-3), "M}c>Er*");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("M}c>Er*", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "M}c>Er*");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "pK0", "isc_info_sql_length ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-277), (CharSequence) "isc_info_sql_length ", 145, (-3));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -277
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "selectwm\\mx:mo";
      DBSchema dBSchema0 = new DBSchema("selectwmmx:mo");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = (-821);
      DBDataType dBDataType0 = DBDataType.getInstance((-821), "selectwmmx:mo");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selectwmmx:mo", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("@P:->Ha3$`");
      SQLUtil.renderColumn(defaultDBColumn0);
      int int1 = (-229923626);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.delete(57, (-821));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.730105000228365
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("NCLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NCLOB");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("NCLOB", false, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-17);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = "-0123456789";
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) vector0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = SQLUtil.normalize("@nd:F\"fC6dNF", true);
      assertEquals("@ nd : F \"fC6dNF\"", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(",O}AG(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ,O}AG(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sWf%K..*");
      DBDataType dBDataType0 = DBDataType.getInstance((-261), "insert");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("7<J5Hc3!6\"(|+]S`M{", defaultDBTable0, dBDataType0, (Integer) null);
      vector0.addElement(defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      Integer integer0 = RawTransaction.COMMIT;
      assertEquals(0, (int)integer0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, (String) null, versionNumber0);
      defaultDatabase0.getTable((String) null, false);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("/*", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "z(>plHXk}mPrk6ysJc";
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType.getInstance((-264548898), "forget");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBSchema dBSchema0 = new DBSchema((String) null, (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexorg.firebirdsql.jdbc.abstractconnetion", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create tableorg.firebirdsql.jdbc.abstractconnetion", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("p[/T\"Ldtk,6R.E?[Tep", "z(>plHXk}mPrk6ysJc", "create materialized view");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("upQate");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "?oGohviw_8^Jn!");
      SQLUtil.addOptionalCondition("?oGohviw_8^Jn!", stringBuilder0);
      assertEquals("?oGohviw_8^Jn! or ?oGohviw_8^Jn!", stringBuilder0.toString());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLUtil.isQuery("select ino+mxos.l5s8h~275");
      SQLUtil.removeComments("select ino+mxos.l5s8h~275");
      SQLUtil.isDDL("(y{");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(" as ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(y{";
      stringArray0[1] = " as ";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-4177984), "select intogenerate< column");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.apache.derby.impl.store.access.btree.BTreePostCommit", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#T%:<fzf2p<Q", defaultDBTable0, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      defaultDBColumn0.isIdentical(dBColumnArray0[0]);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#T%:<fzf2p<Q, #T%:<fzf2p<Q";
      stringArray0[1] = "#T%:<fzf2p<Q, #T%:<fzf2p<Q";
      stringArray0[2] = "select intogenerate< column";
      stringArray0[3] = "select intogenerate< column";
      stringArray0[4] = "#T%:<fzf2p<Q, #T%:<fzf2p<Q";
      stringArray0[5] = "ShRl";
      stringArray0[6] = "#T%:<fzf2p<Q";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "ShRl";
      stringArray1[1] = "#T%:<fzf2p<Q, #T%:<fzf2p<Q";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("#T%:<fzf2p<Q, #T%:<fzf2p<Q", stringArray0, "ShRl", "#T%:<fzf2p<Q, #T%:<fzf2p<Q", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("PKQE0", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" >= page count: ");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "!whF'", false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      assertEquals("PKQE0CONSTRAINT !whF' ", stringBuilder1.toString());
      assertEquals("PKQE0CONSTRAINT !whF' ", stringBuilder0.toString());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "create unique index";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique index", false, stringArray0);
      dBPrimaryKeyConstraint0.setName("create unique index");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("ve=oG\"d`07jo3Gq}[");
      dBSchema0.setCatalog(dBCatalog0);
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.COMMIT;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("$Bk", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "P~M&9s4;=";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(5298);
      TableContainer tableContainer0 = new TableContainer("into");
      tableContainer0.getTable("drop materialized view");
      DBDataType dBDataType0 = DBDataType.getInstance(5298, "P~M&9s4;=");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized view", (DBTable) null, dBDataType0, integer0, integer0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(5298, (Object) defaultDBColumn0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 5298
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "vSZ,f(G";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vSZ,f(G");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("vSZ,f(G", defaultDBTable0, (-3), " (U4FseF(LUg)d 3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"U4FseF(LUg\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Character character0 = new Character('{');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'{'", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execstelectsect *from");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      Boolean boolean0 = SQLUtil.mutatesStructure("call");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("M}4s=>Ur*");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xv@<>{S;u");
      DBDataType dBDataType0 = DBDataType.getInstance((-3), "M}4s=>Ur*");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer1);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("M}4s=>Ur*");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable((String) null);
      Integer integer2 = RawTransaction.ABORT;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("M}4s=>Ur*", (String) null, integer2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[3];
      stringArray1[0] = "alter mater";
      stringArray1[1] = "alter mater";
      stringArray1[2] = "alter mater";
      // Undeclared exception!
      try { 
        SQLUtil.join("alter mater", "create table ", stringArray1, "updateNCharacterStream(int, Reader)", "deletegenerated column", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[18];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = SQLUtil.normalize("vSZ,f(G", true);
      assertEquals("vSZ, f (G", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&u~~x//#kP$B]C");
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", defaultDBTable0, (DBDataType) null, integer1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("sflect ino+mxo.l5o8hI7", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "- ";
      stringArray0[1] = "- ";
      stringArray0[2] = "- ";
      stringArray0[3] = "- ";
      stringArray0[4] = "- ";
      stringArray0[5] = "- ";
      stringArray0[6] = "- ";
      stringArray0[7] = "- ";
      stringArray0[8] = "- ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "- ", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("- ", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-266276325), "- ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("- ", dBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("delete");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insert");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = SQLUtil.normalize("sflect ino+mxo.l5o8hI7", true);
      assertEquals("sflect ino + mxo.l5o8hI7", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "K?FjIes=]wKfXgGx2";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create materialized view");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("K?FjIes=]wKfXgGx2");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " AND ", false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      assertEquals(33, jdbcDataSource0.getTraceId());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("kX1ZbZ ed<h/ H*&");
      assertFalse(defaultDBTable1.equals((Object)defaultDBTable0));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-4177984), "select intogenerated column");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#T%:<fzf2p<Q", defaultDBTable0, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = SQLUtil.normalize("selectselect * from", true);
      assertEquals("selectselect * from", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8783578531833827
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("jm");
      DBSchema dBSchema0 = new DBSchema("J&8K;=^ LPT");
      DBSequence dBSequence0 = new DBSequence("J&8K;=^ LPT", "J&8K;=^ LPT", "jm");
      dBSchema0.addSequence(dBSequence0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jm", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "J&8K;=^ LPT";
      stringArray0[1] = "renameorg.apache.derby.vti.restriction$and";
      stringArray0[2] = "drop indexorg.apache.derby.vti.restriction$and";
      stringArray0[3] = "jm";
      stringArray0[4] = "jm";
      stringArray0[5] = "jm";
      stringArray0[6] = "fF}";
      stringArray0[7] = "J&8K;=^ LPT";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "TS#imJb)", true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBUniqueConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "J&8K;=^ LPT", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "fF}");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("J&8K;=^ LPT", stringBuilder0);
      dBPrimaryKeyConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      assertEquals("fF} and J&8K;=^ LPTCONSTRAINT \"J&8K;=^ LPT\" ", stringBuilder1.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hz=ZR7");
      mockPrintWriter0.format("truncate", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.normalize("jm", false);
      assertEquals("jm", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLUtil.renderValue((Object) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      stringArray0[4] = "null";
      stringArray0[5] = "null";
      stringArray0[6] = "derby.storage.initialPages";
      stringArray0[7] = "null";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = 'null' AND null = null AND null = 'null' AND null = 'null' AND null = 'null' AND null = 'null' AND derby.storage.initialPages = 'derby.storage.initialPages' AND null = 'null'", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "null");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", defaultDBTable0, 1312, "");
      defaultDBColumn0.setSize((Integer) null);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String[] stringArray1 = new String[3];
      stringArray1[0] = "drop materialized viewjm";
      String string0 = "create unique index";
      stringArray1[2] = "jnex .M";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("drop materialized viewjm", stringArray0, stringArray0[0], "#", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = " NULL";
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("/Cy;g< [.R4H]rRfS", (String[]) null, "/Cy;g< [.R4H]rRfS", " NULL", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g8q?%Awc-5H/_'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      DBDataType dBDataType0 = DBDataType.getInstance(2909, "Tq]A'C&gE|");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PKQE0", defaultDBTable0, dBDataType0, (Integer) null, integer1);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("PKQE0", defaultDBTable0, dBDataType0);
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBColumn1.addUkConstraint((DBUniqueConstraint) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, stringBuilder0);
      assertEquals("TQ]A'C&GE|", stringBuilder0.toString());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(6, "\"zr;md2jk>");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"zr;md2jk>", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("\"ZR;MD2JK>(2,2)", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      String string0 = "M}4sc>Er*";
      String string1 = "create tablerenameselectwm\\mx:mo";
      DBSchema dBSchema0 = new DBSchema("create tablerenameselectwmmx:mo");
      dBSchema0.getTable("M}4sc>Er*");
      DBDataType.getInstance((-3), "M}4sc>Er*");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string2 = "pK0";
      String string3 = "MI";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("MI", true, "MI", "pK0");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "sele";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "(Y]`%!1w";
      stringArray0[1] = "l5K*5r$j049";
      stringArray0[2] = "{call";
      stringArray0[3] = "sele";
      stringArray0[4] = "sele";
      stringArray0[5] = "sele";
      stringArray0[6] = "sele";
      stringArray0[7] = "sele";
      stringArray0[8] = "sele";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("sele", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "sele");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      int int0 = (-1760);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1760), (CharSequence) "l5K*5r$j049");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1760
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("M}4sc>Er*");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xv@<>{S;u");
      defaultDBTable0.setDoc("M}4sc>Er*");
      DBDataType dBDataType0 = DBDataType.getInstance((-3), "M}4sc>Er*");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer1);
      String[] stringArray0 = new String[0];
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "M}4sc>Er*";
      dBDataType0.isNumber();
      objectArray0[1] = (Object) dBDataType0;
      objectArray0[2] = (Object) integer1;
      objectArray0[3] = (Object) integer1;
      objectArray0[4] = (Object) "M}4sc>Er*";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
      assertEquals("SELECT * FROM xv@<>{S;u WHERE ", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z?6jesxpcm8@f", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-3*fwL=6goS/8#";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("renameselectw");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("^", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("db>=!<", (DBSchema) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("select");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog select", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("//");
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("// and null", stringBuilder0.toString());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("org.w3c.dom.Document", stringBuilder0);
      assertEquals("org.w3c.dom.Document", stringBuilder0.toString());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "updateNCharacterStream(int, Reader)";
      stringArray0[1] = "updateNCharacterStream(int, Reader)";
      // Undeclared exception!
      try { 
        SQLUtil.join("innlr", "updateNCharacterStream(int, Reader)", stringArray0, "innlr", "updateNCharacterStream(int, Reader)", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("PREPARE TRANSACTION '");
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("PREPARE TRANSACTION '", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DB>=!<}2T|e~%");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("DB>=!<}2T|e~%", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("cbk1_~", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.getOwner();
      String string0 = SQLUtil.ownerDotComponent(dBForeignKeyConstraint1);
      assertEquals("DB>=!<}2T|e~%.cbk1_~", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("updategenerated column");
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "updategenerated column";
      stringArray0[3] = "updategenerated column";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , updategenerated column, updategenerated column)", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.7689528313755152
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLUtil.normalize("w)`-!DTkD1u9F3#Ew_V", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[19];
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "alter mate", (String[]) null, "alter mate", "Z4#T `c){GbX", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = " NULL";
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(" NULL", (String[]) null, " NULL", "/Cy;g< [.R4H]rRfz", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertNotNull(string0);
      assertEquals("catalog null", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      System.setCurrentTimeMillis(0L);
      String string0 = SQLUtil.substituteMarkers("", "", stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("updateconstrant", "truncate", "truncate");
      assertEquals("updateconstrant", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[13];
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectselect * from");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("renameselectwmmx:mo");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2458, "ve=oG\"d`07jo3Gq}[");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ve=oG\"d`07jo3Gq}[", defaultDBTable0, dBDataType0, integer1, integer1);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter session", defaultDBTable0, (-843), "alter session");
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBCatalog dBCatalog0 = new DBCatalog();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("$>?N7_lAk1qp{/*hP");
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("sflect ino+mxos.l5o8hI275", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("sF=4rkq-%R$z4");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter materialized view");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("GENERATED COLmMN");
      TableContainer tableContainer0 = new TableContainer(" AND ");
      tableContainer0.getTable("GENERATED COLmMN");
      DBDataType dBDataType0 = DBDataType.getInstance(207, " AND ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("GENERATED COLmMN", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("GENERATED COLmMN AND (1)", stringBuilder1.toString());
      assertEquals("GENERATED COLmMN AND (1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("<1`H=jm:f1ci Y");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "<1`H=jm:f1ci Y", false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      assertEquals(2, jdbcDataSource0.getTraceId());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DB>=!<}2T|e~%");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("DB>=!<}2T|e~%", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "DB>=!<}2T|e~%");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("update", true, "DB>=!<}2T|e~%", "pK0");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1276), (CharSequence) "update", (-229923626), (-229923626));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -1276
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DB>=!<}2T|e~%");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("DB>=!<}2T|e~%", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "DB>=!<}2T|e~%");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("update", true, "DB>=!<}2T|e~%", "pK0");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1276), (CharSequence) "update", (-229923626), (-229923626));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -1276
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.9324385894557279
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = SQLUtil.normalize("w)`-!DTkD1u9F3#Ew_V", false);
      assertEquals("w) ` - ! DTkD1  u9F3 # Ew_V", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("K-A1wd%:B");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("K-A1wd%:B", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES K-A1wd%:B()", string1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(398, "z(>VhplHXk}mPrk6ysJc");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*_1t|!6", defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("*_1t|!6", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDoc("*_1t|!6");
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("z(>VhplHXk}mPrk6ysJc", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = SQLUtil.renderValue("insert");
      assertEquals("'insert'", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("tree height: ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "callle<ecstlec;set*from";
      stringArray0[1] = "callle<ecstlec;set*from";
      stringArray0[2] = "callle<ecstlec;set*from";
      stringArray0[3] = "callle<ecstlec;set*from";
      stringArray0[4] = "callle<ecstlec;set*from";
      stringArray0[5] = "callle<ecstlec;set*from";
      String string0 = SQLUtil.leftJoin("callle<ecstlec;set*from", stringArray0, "callle<ecstlec;set*from", "callle<ecstlec;set*from", stringArray0);
      assertEquals("left join callle<ecstlec;set*from as callle<ecstlec;set*from on callle<ecstlec;set*from.callle<ecstlec;set*from = callle<ecstlec;set*from.callle<ecstlec;set*from and callle<ecstlec;set*from.callle<ecstlec;set*from = callle<ecstlec;set*from.callle<ecstlec;set*from and callle<ecstlec;set*from.callle<ecstlec;set*from = callle<ecstlec;set*from.callle<ecstlec;set*from and callle<ecstlec;set*from.callle<ecstlec;set*from = callle<ecstlec;set*from.callle<ecstlec;set*from and callle<ecstlec;set*from.callle<ecstlec;set*from = callle<ecstlec;set*from.callle<ecstlec;set*from and callle<ecstlec;set*from.callle<ecstlec;set*from = callle<ecstlec;set*from.callle<ecstlec;set*from", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("org.$wgc.dom.D6cumnt", (String[]) null, "create table", "t9;Hjc9", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("renamealter materi");
      boolean boolean0 = false;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "Jvr)jvlVmr";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.9324385894557279
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = SQLUtil.normalize("w)`-!DTkD1u9F3#Ew_V", false);
      assertEquals("w) ` - ! DTkD1  u9F3 # Ew_V", string0);
      
      Random.setNextRandom((-2133));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "execcannot call cancelrowupdates() whn on the insert row.";
      stringArray0[2] = "w)`-!DTkD1u9F3#Ew_V";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "execcannot call cancelrowupdates() whn on the insert row.";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "execcannot call cancelrowupdates() whn on the insert row.", false, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("CONSTRAINT \"execcannot call cancelrowupdates() whn on the insert row.\" UNIQUE (execcannot call cancelrowupdates() whn on the insert row.)", string1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("]Zd&O+");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.renderColumnListWithTableName("z(>plHXk}mPrk6ysJc", stringArray0);
      assertEquals("z(>plHXk}mPrk6ysJc.null, z(>plHXk}mPrk6ysJc.null, z(>plHXk}mPrk6ysJc.null, z(>plHXk}mPrk6ysJc.null, z(>plHXk}mPrk6ysJc.null, z(>plHXk}mPrk6ysJc.null, z(>plHXk}mPrk6ysJc.null, z(>plHXk}mPrk6ysJc.null, z(>plHXk}mPrk6ysJc.null", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringReader stringReader0 = new StringReader("rename");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBSchema dBSchema0 = new DBSchema("");
      int int0 = 26;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "", false, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[19];
      String string0 = SQLUtil.join("updateNCharacterStream(int, Reader)", "k9VrC! +j&9Qg/FJ)", stringArray0, "k9VrC! +j&9Qg/FJ)", "updateNCharacterStream(int, Reader)", stringArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("42X50", (String) null, stringArray0, "42X50", (String) null, stringArray0);
      assertEquals("42X50 join 42X50 as null on null.null = null.null", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("select intonclob", (String[]) null, "UD9go}v\"3*Gq@]v", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
