/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 18:53:25 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(2806L);
      Player player0 = new Player(2147308371, "", "", 2147308371, (-3258));
      Party party0 = new Party((-49));
      player0.head = party0;
      Player player1 = new Player((short)4919, "Hp VN[%d\"UUqY$", "!+_PC(,*66%M*-7={", (-1930));
      player1.setDead();
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis((-1235L));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player(2147305625);
      player0.setJoinOK(player0, false);
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0.0F);
      System.setCurrentTimeMillis(13783L);
      boolean boolean0 = player0.isJoinOK(player0, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(9569, "", "", 9569, 0);
      int int0 = player0.getStrength();
      assertTrue(player0.isConnected());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(9569, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.048820325203473
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((-1384), "", 11764);
      Player player1 = new Player();
      player0.add(player1);
      player0.setDead();
      player0.getName();
      player0.setMoney((-2107));
      player0.setJoinOK(player1, true);
      player0.isJoinOK(player1, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(11764);
      player1.pack();
      float float0 = player0.getMoney();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals((-2107.0F), float0, 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player((-1609), "", "]K", (-4113), (-439));
      int int0 = player0.getStrength();
      assertEquals((-439), int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals((-4113), player0.getPictureId());
      assertEquals("", player0.getIP());
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((-487), "", "", (-487));
      Player player1 = new Player(0, "", "7YA<", (-157), (short)4919);
      byte[] byteArray0 = new byte[9];
      player1.getSubparty();
      byteArray0[0] = (byte) (-67);
      player0.unpack(byteArray0);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-67);
      player0.unpack(byteArray0);
      player1.setY((-157));
      player0.setJoinOK(player1, false);
      player0.getStrength();
      player0.type();
      System.setCurrentTimeMillis((byte) (-15));
      player1.getIP();
      player1.getStrength();
      System.setCurrentTimeMillis(1829L);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player(3);
      player0.setMoney(3);
      Player player1 = new Player((short)4919, "", ":vo0x", 3);
      player0.setJoinOK(player1, true);
      Player player2 = new Player((short)4919);
      player2.isJoinOK(player0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream((short)4919);
      player1.pack();
      float float0 = player0.getMoney();
      assertEquals(3.0F, float0, 0.01F);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.130582753344072
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(1245, "", 1245);
      System.setCurrentTimeMillis((-1L));
      player0.id = 1245;
      Player player1 = new Player();
      player0.setDead(1265L);
      player0.setZ((short)4919);
      player1.setDead();
      player0.setZ((-1L));
      player1.boss = (Party) player0;
      player1.setDead(1L, false);
      player1.setJoinOK(player0, false);
      player0.gangStrength();
      player1.setZ(1.0F);
      player0.isJoinOK(player1, true);
      player0.add(player1);
      player1.type();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      player1.gangStrength();
      player1.isJoinOK(player0, false);
      player0.getZ();
      player0.getMoney();
      player0.type();
      player0.type();
      player0.getStrength();
      player0.getIP();
      player0.getZ();
      player1.type();
      player1.isJoinOK(player0, true);
      assertEquals(1.0F, player1.getZ(), 0.01F);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(3, "(nHD+%TLM5", "", 3);
      int int0 = player0.getPictureId();
      assertEquals(3, int0);
      
      player0.toString();
      player0.pack();
      assertEquals(1, player0.getStrength());
      assertEquals("(nHD+%TLM5", player0.getIP());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(4);
      player0.setConnected(true);
      player0.setDead(0L, true);
      player0.setX(0.0F);
      player0.setConnected(true);
      Player player1 = new Player(5378, "state.Party", (-2072));
      player0.add(player1);
      player1.setDead();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "state.Party");
      player1.getName();
      player0.setJoinOK(player1, true);
      player0.isJoinOK(player1, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream((short)4919);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      player1.setConnected(false);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      player1.getPictureId();
      PipedInputStream pipedInputStream2 = new PipedInputStream(953);
      assertFalse(pipedInputStream2.equals((Object)pipedInputStream1));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(1427L);
      Player player0 = new Player((-1920), (String) null, " ", (-1920));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player1 = new Player((-1920), (String) null, "IPOuD[V\u0006&", (short)4919);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(4919, player1.getPictureId());
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(1427L);
      String string0 = player0.getIP();
      assertTrue(player0.isConnected());
      assertNull(string0);
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1279462185041473
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player(1101, "oLh\"^", "state.Player$JoinInfo", 1101);
      player0.setX(0.0F);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      player0.setY(0.0F);
      player0.pack();
      player0.getMoney();
      player0.getX();
      player0.type();
      Player player1 = new Player(2088, (String) null, (-278));
      player1.prev = (Party) player0;
      player0.remove(player1);
      System.setCurrentTimeMillis(1392409296320L);
      Player player2 = new Player();
      player2.boss = (Party) player0;
      player0.isJoinOK(player2, false);
      player0.getX();
      player0.getStrength();
      player2.getSubparty();
      player0.getIP();
      player0.getZ();
      player0.pack();
      assertEquals(0.0F, player0.getX(), 0.01F);
      
      int int0 = player2.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((-1384));
      Player player1 = new Player(1672);
      player0.setJoinOK(player1, false);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertFalse(boolean0);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertTrue(player1.isConnected());
      assertFalse(player1.isDead());
      assertEquals(1, player1.getStrength());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals("Player1672", player1.toString());
      assertEquals(0, player1.getPictureId());
      assertEquals("0.0.0.0", player1.getIP());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0538382463504266
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(863, ".*[.]class$", "", 863, 863);
      player0.setDead((long) 863);
      player0.getSubparty();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      player0.setMoney(863);
      player0.setZ((byte)77);
      byteArray0[1] = (byte)77;
      Player player1 = new Player((byte)77, "", (String) null, 1);
      player0.head = (Party) player1;
      player0.reset(false);
      player0.unpack(byteArray0);
      player0.isConnected();
      player0.getZ();
      player0.setDead((-128L));
      player0.setDead(0L);
      player1.getName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte)77);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      System.setCurrentTimeMillis((-1337L));
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream1);
      try { 
        player1.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((-2147483646), "state.Party", (-2147483646));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      player0.pack();
      assertEquals((-2147483646), player0.getPictureId());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player(10);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      player0.unpack(dataInputStream0);
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player((-542));
      player0.setDead((long) (-542), true);
      player0.pack();
      player0.pack();
      player0.getTimeOfDeath();
      float float0 = player0.getY();
      assertEquals((-542L), player0.getTimeOfDeath());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(331, (String) null, (String) null, (-264), 331);
      player0.toString();
      assertEquals((-264), player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(331, player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.087698781999318
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player(1081, "", 1081);
      int int0 = 5;
      Player player1 = new Player(3, "", 5);
      Party party0 = player1.head;
      player0.getSubparty();
      player0.add((Party) null);
      Player player2 = new Player(3, "", "", 5, (-1));
      player2.getName();
      boolean boolean0 = false;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1081);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 3);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream1);
      player2.unpack(dataInputStream0);
      String string0 = "K#>ax=8W";
      // Undeclared exception!
      try { 
        player2.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(1427L);
      System.setCurrentTimeMillis(1638L);
      Player player0 = new Player(5, "state.Party", 10);
      int int0 = player0.getPictureId();
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10, int0);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis(1427L);
      Player player0 = new Player((-4349));
      player0.getPictureId();
      int int0 = player0.getPictureId();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(player0.isDead());
      assertEquals(0, int0);
      assertEquals("Player-4349", player0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0894379124341005
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player();
      player0.reset(true);
      player0.setMoney(1744.8033F);
      player0.isDead();
      Player player1 = new Player();
      byte[] byteArray0 = player1.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player1.unpack(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player(2147327685);
      Player player1 = new Player();
      player0.prev = (Party) player1;
      byte[] byteArray0 = player0.pack();
      player0.unpack(byteArray0);
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertEquals((-59), player0.getId());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(4);
      player0.setConnected(true);
      player0.setDead(0L, true);
      player0.setConnected(true);
      Player player1 = new Player((short)4919);
      player1.boss = (Party) player0;
      player0.add(player1);
      Player player2 = new Player((-1697), "Player.unpack(): *** WARNING *** data is not of proper type!", (-1697));
      player0.setDead(0L, true);
      assertFalse(player0.isDead());
      assertTrue(player0.isConnected());
      
      int int0 = player1.gangStrength();
      assertEquals(2, int0);
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(0, player1.getPictureId());
      assertEquals("Player4919", player1.toString());
      
      Player player3 = new Player((short)4919, "Player.unpack(): *** WARNING *** data is not of proper type!", "Player.unpack(): *** WARNING *** data is not of proper type!", (short)4919);
      boolean boolean0 = player3.isDead();
      assertEquals(4919, player3.getPictureId());
      assertEquals(0.0F, player3.getY(), 0.01F);
      assertEquals(10.0F, player3.getX(), 0.01F);
      assertEquals(0L, player3.getTimeOfDeath());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player((-848));
      player0.setMoney((-848));
      assertEquals((-848.0F), player0.getMoney(), 0.01F);
      
      Player player1 = new Player(257, (String) null, (String) null, (-848));
      player1.getName();
      assertEquals((-848), player1.getPictureId());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player(4977, "KGNc.qs%Z>/^ ", "vW?v}ws9k|s", 0);
      player0.toString();
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals("KGNc.qs%Z>/^ ", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player((-1384), (String) null, (-1384));
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player(3869, "*", "*", 3869);
      player0.next = (Party) player0;
      player0.boss = (Party) player0;
      assertEquals(0L, player0.getTimeOfDeath());
      
      player0.setDead((long) 1);
      player0.isDead();
      float float0 = player0.getX();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(3786);
      float float0 = player0.getMoney();
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("Player3786", player0.getName());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player(4);
      player0.setConnected(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      player0.setDead(0L, true);
      player0.setConnected(true);
      player0.setConnected(false);
      Player player1 = new Player(1);
      player1.setJoinOK(player0, false);
      player0.isConnected();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player(10, (String) null, 10);
      player0.setX((-2375.3086F));
      float float0 = player0.getX();
      assertEquals((-2375.3086F), float0, 0.01F);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setZ(0);
      int int0 = player0.type();
      assertEquals(5, int0);
      
      float float0 = player0.getZ();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals("Player0", player0.toString());
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(player0.isDead());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player(0, "Player.pac}(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "L", 2199, 0);
      int int0 = player0.gangStrength();
      assertEquals(0, int0);
      
      player0.pack();
      assertTrue(player0.isConnected());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(2199, player0.getPictureId());
      assertEquals("Player.pac}(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", player0.getIP());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player((-381), "", "", (-381), (-381));
      player0.pack();
      assertEquals((-381), player0.getPictureId());
      assertEquals((-381), player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player((-215), "Vn,*O ps", "Vn,*O ps", 2412, (-491));
      player0.gangStrength();
      byte[] byteArray0 = new byte[3];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      dataInputStream0.available();
      dataInputStream0.read(byteArray0);
      try { 
        dataInputStream0.readChar();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player((-4018));
      player0.gangStrength();
      System.setCurrentTimeMillis(1129L);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player(856);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      player0.unpack(byteArray0);
      player0.type();
      System.setCurrentTimeMillis((-1202L));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player(25);
      String string0 = player0.getIP();
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("0.0.0.0", string0);
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("Player25", player0.getName());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player((-960));
      int int0 = player0.getStrength();
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals(1, int0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("Player-960", player0.getName());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player((-465));
      boolean boolean0 = player0.isDead();
      assertFalse(boolean0);
      
      int int0 = player0.type();
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(5, int0);
      assertEquals("Player-465", player0.getName());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player(1);
      assertEquals(0L, player0.getTimeOfDeath());
      
      player0.setDead((long) 1);
      assertEquals("Player1", player0.toString());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player((-3215));
      player0.reset(false);
      PipedInputStream pipedInputStream0 = new PipedInputStream((short)4919);
      assertEquals(0, pipedInputStream0.available());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player(5, "module.ModuleBrowserDialog$ModuleFilter", "module.ModuleBrowserDialog$ModuleFilter", 5);
      float float0 = player0.getZ();
      assertEquals(0.0F, float0, 0.01F);
      
      player0.getName();
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(5, player0.getPictureId());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = player0.gangBoss();
      player0.boss = party0;
      boolean boolean0 = player0.isConnected();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("Player-1", player0.toString());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      player0.unpack(byteArray0);
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.getName());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player(10);
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 381;
      Player player0 = new Player(381);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 5;
      Player player0 = new Player(5);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)122, (byte)122);
      player0.unpack(byteArray0);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (-27233));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player(4);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player(27);
      player0.setDead((long) 27, false);
      player0.pack();
      player0.pack();
      player0.getTimeOfDeath();
      player0.getY();
      player0.getTimeOfDeath();
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-2531);
      Player player0 = new Player((-2531));
      MockFile mockFile0 = new MockFile("", "6");
      MockFile mockFile1 = new MockFile(mockFile0, "6");
      File file0 = MockFile.createTempFile("HGskjUj>ktQJ,$WA", "eu-3lT^4G<:1eK", (File) mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      player0.pack(dataOutputStream0);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player((-1402));
      boolean boolean0 = true;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player((-215));
      player0.setY((-215));
      Player player1 = new Player(5378, (String) null, (short)4919);
      player0.remove(player1);
      float float0 = player0.getY();
      assertEquals((-215.0F), float0, 0.01F);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Player player0 = new Player((-33), "@lF\"^jY:Ix[=9gR", (-33));
      float float0 = player0.getX();
      assertTrue(player0.isConnected());
      assertEquals((-33), player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(10.0F, float0, 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      
      System.setCurrentTimeMillis(4512L);
      float float1 = Player.MOVE_DISTANCE;
      assertNotEquals(float1, float0, 0.01F);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Player player0 = new Player(4);
      player0.pack();
      long long0 = player0.getTimeOfDeath();
      assertTrue(player0.isConnected());
      assertEquals(0L, long0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("Player4", player0.toString());
      assertFalse(player0.isDead());
  }
}
