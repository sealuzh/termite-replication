/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 16:49:53 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.692720072831715
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Byte byte0 = new Byte((byte)43);
      Byte.toUnsignedInt((byte)43);
      Byte.toUnsignedInt((byte)43);
      JSONObject.testValidity(byte0);
      Integer integer0 = new Integer(25);
      Integer.toUnsignedString((int) (byte)43);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.keys();
      Integer.min((byte)43, (byte)43);
      jSONObject0.toString();
      jSONObject0.optLong("43");
      jSONObject0.put("en", (int) (byte)43);
      JSONObject jSONObject1 = jSONObject0.accumulate("0", integer0);
      jSONObject0.getInt("0");
      jSONObject0.optLong("cgX>5\"]R>u[pV-2PU$");
      JSONObject jSONObject2 = jSONObject0.put("cgX>5\"]R>u[pV-2PU$", (Object) "7z0uAAE`8)?Nv");
      JSONObject jSONObject3 = jSONObject2.put("7z0uAAE`8)?Nv", (double) 25);
      jSONObject3.optDouble("oq1<ylF5I:ZhV!$M");
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject4 = jSONObject1.put("en", (double) 0L);
      Double double0 = new Double(25);
      JSONObject.getNames((Object) double0);
      jSONObject4.put("0", (Object) null);
      try { 
        jSONObject3.getJSONObject(" at character ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" at character \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.879627694453224
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/MC^r+h/nSTR%a";
      stringArray0[1] = "L6&.fG#fT$ okY`PS";
      Double.min(1353.8096, 1.0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toString(3, 4);
      JSONObject jSONObject2 = jSONObject1.put("*\"f?'H\"M/", (-396L));
      jSONObject2.toString();
      Double.max(1.0, 0.0);
      JSONObject.valueToString("/MC^r+h/nSTR%a");
      JSONTokener jSONTokener0 = new JSONTokener("/MC^r+h/nSTR%a");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of /MC^r+h/nSTR%a
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("val", true);
      jSONObject0.optBoolean("val");
      Short short0 = new Short((short)1183);
      JSONObject.valueToString(jSONObject0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("isadd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of isadd
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5895213795772005
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Long long0 = new Long(1L);
      JSONObject.valueToString(long0, 4630, 1589);
      HashMap<JSONObject, String> hashMap2 = new HashMap<JSONObject, String>();
      Long long1 = new Long(0L);
      hashMap2.getOrDefault(long1, "java.lang.Long@0000000002");
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Long@0000000002", long0);
      hashMap2.put(jSONObject0, "Yfn1$08#");
      Short short0 = new Short((short)19);
      jSONObject0.append("java.lang.Long@0000000002", "java.lang.Long@0000000002");
      Integer integer0 = new Integer(4630);
      JSONObject.getNames((Object) integer0);
      jSONObject1.optBoolean((String) null);
      jSONObject1.getJSONArray("java.lang.Long@0000000002");
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject0.putOpt("", jSONObject1);
      StringWriter stringWriter0 = new StringWriter(244);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.flush();
      jSONObject0.write(stringWriter1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2191));
      hashMap0.put((Integer) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short) (-1855));
      JSONObject jSONObject1 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (short) (-1855), (-2191));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.48717948717948717
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-2098));
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      JSONObject jSONObject1 = new JSONObject(integer0, stringArray0);
      jSONObject1.put("val", true);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 65;
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("dv99SsSr;uh", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(13);
      hashMap0.put(integer0, integer0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("] is not a Boolean.", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("] is not a Boolean.");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("nAo{", hashMap0);
      jSONObject1.put(" of ", true);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject1, 8191, 8191);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((Object) "joi");
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(45);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2774737549423403
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(347);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge((Integer) null, integer0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("getkeySet", false);
      linkedList0.add(jSONObject1);
      jSONObject1.optLong("val");
      // Undeclared exception!
      try { 
        jSONObject2.toString((-50462705));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8760902794872374
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(937);
      JSONObject jSONObject1 = jSONObject0.putOpt("", integer0);
      jSONObject1.put("isset", false);
      JSONObject.valueToString(jSONObject1, (-1742), (-1742));
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Integer@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005\n}");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1742));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1843752507353837
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-2090.76611417710";
      stringArray0[1] = "Q9h!]1p\"oqHC^";
      stringArray0[2] = "-2090.76611417710";
      stringArray0[3] = "-2090.76611417710";
      stringArray0[4] = "-2090.76611417710";
      stringArray0[5] = "-2090.76611417710";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject2 = jSONObject1.append("-2090.76611417710", boolean0);
      jSONObject1.optString("-2090.76611417710");
      JSONObject jSONObject3 = jSONObject2.append("Expected a ',' or ']'", "-2090.76611417710");
      assertNotSame(jSONObject0, jSONObject3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection) linkedList0);
      jSONObject0.put("9Hx-Hd0", false);
      jSONObject1.put("9Hx-Hd0", (Object) "false");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("false");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 0;
      jSONObject0.put("", 0);
      jSONObject0.optString("", "&!^f}({Iu`fz");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("{tM", (Collection) null);
      try { 
        jSONObject2.getJSONObject("rev");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"rev\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Short, Byte> hashMap0 = new HashMap<Short, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (int) (short)1039);
      Integer integer0 = new Integer(467);
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>();
      hashMap1.put(integer0, jSONObject0);
      jSONObject0.getDouble("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      try { 
        jSONArray0.getJSONObject(467);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[467] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^/w`sOO9TX,9j*Q";
      stringArray0[1] = "fl";
      JSONObject jSONObject0 = new JSONObject("^/w`sOO9TX,9j*Q", stringArray0);
      String string0 = jSONObject0.optString("-G[O'", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("di", hashMap0);
      HashMap hashMap1 = (HashMap)jSONObject0.get("di");
      assertEquals(0, hashMap1.size());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(937);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("`yZUy3rkW7^V-", jSONArray0);
      JSONObject.valueToString(jSONObject0, (-598), (-2898));
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000003\": []}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-1035), 8);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(8192, 3082);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-1035), (-1035));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Integer integer0 = new Integer(1766);
      Integer integer1 = new Integer((-28746850));
      Integer.getInteger("WjO#RPKKc>hB=[ ");
      hashMap1.put(integer1, (Integer) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string0 = JSONObject.doubleToString((-28746850));
      assertEquals("-2.874685E7", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Integer integer0 = new Integer(1599);
      hashMap0.put((Double) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Long long0 = new Long(1L);
      JSONObject.valueToString(long0, 4639, 1589);
      HashMap<JSONObject, String> hashMap2 = new HashMap<JSONObject, String>();
      Long long1 = new Long(0L);
      String string0 = hashMap2.getOrDefault(long1, "java.lang.Long@0000000002");
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Long@0000000002", long0);
      JSONObject.getNames(jSONObject1);
      hashMap2.put(jSONObject0, "Yfn1$08#");
      jSONObject0.has("java.lang.Long@0000000002");
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("do", 2);
      jSONObject1.optDouble("do");
      jSONObject0.optLong("do");
      Float float0 = new Float((double) 2);
      jSONObject1.accumulate("T=9a.*>#`8;+", float0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      jSONObject1.put("", (Map) hashMap0);
      jSONObject1.put("", 3312.14);
      long long0 = jSONObject0.getLong("");
      assertEquals(3312L, long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer integer0 = new Integer((-1921));
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "}";
      JSONObject jSONObject1 = jSONObject0.put("}", false);
      jSONObject1.optLong((String) null, 2484L);
      try { 
        jSONObject0.getLong("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("uk");
      assertTrue(boolean0);
      
      boolean boolean1 = jSONObject0.has("uk");
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer((-914));
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      String string0 = "{7n0]l=aQZN$Mo'E9";
      JSONTokener jSONTokener0 = new JSONTokener("{7n0]l=aQZN$Mo'E9");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {7n0]l=aQZN$Mo'E9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 4, 4);
      JSONObject jSONObject1 = new JSONObject("{}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 4, 8192);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("'", false);
      jSONObject0.isNull("'");
      Object object0 = new Object();
      try { 
        jSONObject0.append("'", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject['] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "WjO#RPKKc>hB=[ ";
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("GO5-I`+h,+8", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("WjO#RPKKc>hB=[ ", "WjO#RPKKc>hB=[ ");
      jSONObject1.remove("WjO#RPKKc>hB=[ ");
      try { 
        jSONObject1.getBoolean("WjO#RPKKc>hB=[ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WjO#RPKKc>hB=[ \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5875011775569985
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(0L);
      Double double0 = new Double(0L);
      JSONObject.getNames((Object) "getintValue");
      Byte byte0 = new Byte((byte) (-26));
      jSONObject0.putOpt("getintValue", byte0);
      JSONObject jSONObject1 = jSONObject0.put("val", true);
      jSONObject1.optInt("getintValue", 47);
      JSONObject.valueToString(jSONObject1, (-27), (-26));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("kwBg`BBGk9K R^M{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of kwBg`BBGk9K R^M{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("dou", (Collection) linkedList0);
      try { 
        jSONObject1.getInt("dou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dou\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = null;
      JSONObject jSONObject1 = jSONObject0.put("", (Object) null);
      try { 
        jSONObject1.getJSONArray("X^#28.JuQc*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"X^#28.JuQc*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('x');
      stringWriter1.append('J');
      jSONObject0.write(stringWriter1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("val", true);
      int int0 = jSONObject1.optInt("] is not a JSONObject.", (-408));
      assertEquals((-408), int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 65, 44);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("5*a(!Z", "5*a(!Z");
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1861049270388184
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("jAbl2C10t(H\"E\";", "jAbl2C10t(H\"E\";");
      StringWriter stringWriter0 = new StringWriter();
      Byte byte0 = new Byte((byte) (-71));
      JSONObject jSONObject1 = new JSONObject(stringWriter0);
      jSONObject1.toString();
      Writer writer0 = jSONObject1.write(stringWriter0);
      jSONObject0.write(writer0);
      Integer.max((byte) (-71), (byte) (-71));
      jSONObject0.names();
      jSONObject0.optString("I'3", "I'3");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "1.0";
      jSONObject0.put("1.0", 1714L);
      try { 
        jSONObject0.getBoolean("1.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1.0\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("WjO#RPKKc>hB=[ ", "WjO#RPKKc>hB=[ ");
      try { 
        jSONObject1.getBoolean("WjO#RPKKc>hB=[ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WjO#RPKKc>hB=[ \"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", false);
      boolean boolean0 = jSONObject0.getBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("hk+8Y+%", 0);
      String string0 = jSONObject1.getString("hk+8Y+%");
      assertNotNull(string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(25);
      Integer integer1 = new Integer((-2142));
      hashMap0.put(integer0, integer1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer2 = new Integer(61);
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Boolean boolean0 = Boolean.valueOf("] is not a JSONObject.");
      hashMap0.put(boolean0, (String) null);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.434799037944202
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^/w`sO9TX,9*Q";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      jSONObject0.optString("to", "");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("x~(Fk'qoZo;Xw:U", (Collection) linkedList0);
      jSONObject0.put("^/w`sO9TX,9*Q", true);
      jSONObject1.optLong("lo");
      // Undeclared exception!
      jSONObject0.toString(8192);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("WjO#RPKKc>hB=[ ", false);
      try { 
        jSONObject1.getJSONObject("WjO#RPKKc>hB=[ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WjO#RPKKc>hB=[ \"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      String string0 = "-2781.909856781880";
      hashMap0.getOrDefault(jSONObject0, "-2781.909856781880");
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.append("wai", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Du1*+MHpDt_H~", true);
      boolean boolean0 = jSONObject1.isNull("Du1*+MHpDt_H~");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      String string0 = "^/w`sOO9TX,9j*Q";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^/w`sOO9TX,9j*Q";
      JSONTokener jSONTokener0 = new JSONTokener("~b(@");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~b(@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("is", false);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Short short0 = new Short((short)5043);
      Short.toUnsignedInt((short) (-2836));
      jSONObject0.accumulate("is", short0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2326));
      hashMap0.put(integer0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-1035), (-1035));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Long long0 = new Long((-2557L));
      JSONObject.valueToString(long0, 4626, 1242);
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.getJSONObject(4626);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[4626] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("", hashMap0);
      jSONObject0.put("val", true);
      JSONObject.valueToString(jSONObject0, 65, 65);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, 4, 93);
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "v";
      JSONObject.quote("v");
      jSONObject0.optDouble("v", (-1115.864362693057));
      try { 
        Float.valueOf("\"v\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble(",\n", 0.0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "";
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2184));
      hashMap0.put(integer0, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("", false);
      jSONObject0.put("", false);
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^/w`sOO9TX,9j*Q";
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("to", "");
      assertEquals("", string0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string1 = JSONObject.doubleToString(1.0);
      assertEquals("1", string1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("val", false);
      JSONObject.valueToString(jSONObject0, 3002, 8);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("val");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of val
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.quote("CIS:.x");
      assertEquals("\"CIS:.x\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.optString("SmVCR/.Qb", "E4a4:Vqq@");
      assertEquals("E4a4:Vqq@", string1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, 1, (-1230));
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("istoUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of istoUpperCase
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject.valueToString(linkedList0, (-54582745), (-446));
      JSONArray jSONArray0 = new JSONArray("[]");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("'", false);
      jSONObject1.toString((-1035), (-1035));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      Short.toUnsignedInt((short)5713);
      JSONObject jSONObject1 = jSONObject0.accumulate("'Dw:w", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("", hashMap0);
      StringWriter stringWriter0 = new StringWriter(704);
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = JSONObject.quote("mHuy@O;\"T<|3U)d{m");
      assertEquals("\"mHuy@O;\\\"T<|3U)d{m\"", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.removeLastOccurrence("I@4P0");
      JSONObject jSONObject1 = jSONObject0.put("flo", (Collection) linkedList0);
      JSONObject.getNames((Object) jSONObject1);
      jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("tm_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of tm_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("WjO#RPKKc>hB=[ ", "WjO#RPKKc>hB=[ ");
      StringWriter stringWriter0 = new StringWriter(9);
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("xDs=-rG^Z#$\"", true);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean(".Tx<O|ns3>:");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5898403588435481
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ",7<.7Rb D5w!B+c";
      stringArray0[2] = "Ek>/ cIt";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "d|1hkt9";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString(65, 65);
      JSONObject.valueToString("");
      JSONObject jSONObject2 = jSONObject0.put("", 4071);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) boolean0);
      Double double0 = new Double(232.2072898553);
      Integer integer0 = new Integer(65);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      hashMap0.compute(double0, biFunction0);
      jSONObject2.opt("");
      try { 
        jSONObject2.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("gettoString", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Short short0 = new Short((short)8448);
      Short.toUnsignedInt((short)0);
      Short short1 = new Short((short)0);
      JSONObject.getNames((Object) short0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("jo\"</a$ U-%!5Lp@", 0);
      try { 
        jSONObject0.getDouble("p.Bz$Zr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p.Bz$Zr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      String[] stringArray0 = new String[11];
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject(50);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("|", false);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(Double.NaN);
      String string0 = jSONObject0.optString("Cuvw0J'xR`z", "Cuvw0J'xR`z");
      assertEquals("Cuvw0J'xR`z", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt("is", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject.quote((String) null);
      // Undeclared exception!
      try { 
        jSONTokener0.skipTo(']');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("for");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of for
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1714L);
      String string0 = "'";
      jSONObject1.optDouble("", (-2815.300757));
      String string1 = "6cu$v0g08";
      try { 
        jSONObject0.getBoolean("6cu$v0g08");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6cu$v0g08\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "WjO#RPKKc>hB=[ ";
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("WjO#RPKKc>hB=[ ", "WjO#RPKKc>hB=[ ");
      jSONObject1.remove((String) null);
      int int0 = 51;
      try { 
        jSONArray0.getJSONObject(51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[51] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONObject("null");
      jSONObject0.put("null", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Integer integer0 = new Integer(1599);
      Integer integer1 = new Integer(1599);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("'", 2336.6747063618104);
      assertEquals(2336.6747063618104, double0, 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("<vEq]0k=g@7{kvJ");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("$/~KLyi0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$/~KLyi0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = JSONObject.quote(":e/2&Y");
      assertEquals("\":e/2&Y\"", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      Integer.getInteger("=2en9ii)RvI");
      hashMap1.put(integer0, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      int int0 = 9;
      jSONObject0.optInt("Ji(, E", 9);
      Long long0 = new Long(1L);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.1172927292153942
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("getsplit");
      jSONObject0.put(";3lZEQ~29k?", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("GSaPi5i)n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"GSaPi5i)n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = jSONObject0.toString((-1244));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.quote("\r");
      assertEquals("\"\\r\"", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("\n", (Object) hashMap0);
      try { 
        jSONObject1.getJSONArray("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = JSONObject.quote("yp^|G0`");
      assertEquals("\"yp^|G0`\"", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = (-263.7449993403259);
      try { 
        jSONObject0.put((String) null, (-263.7449993403259));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = new Object();
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("x>M4b{nMo1", (-1L));
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      HashMap<JSONObject, String> hashMap1 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("U");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "WjO#RPKKc>hB=[ ";
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("WjO#RPKKc>hB=[ ", false);
      try { 
        jSONObject0.getLong("WjO#RPKKc>hB=[ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WjO#RPKKc>hB=[ \"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", false);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("hk+8Y+%", 0);
      Integer integer0 = new Integer(22);
      hashMap0.put(integer0, jSONObject1);
      jSONObject0.getDouble("hk+8Y+%");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("0", "0");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(821L);
      try { 
        jSONObject0.accumulate((String) null, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) "gDtT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.put((String) null, 1235);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      boolean boolean1 = new Boolean(true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("^/w`sOO9TX,9j*Q");
      assertNull(object0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject.numberToString(float0);
      try { 
        Short.decode("java.lang.Float@0000000001");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Float@0000000001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Object object0 = new Object();
      hashMap0.remove(object0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
