/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 16:19:21 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 10;
      String string0 = "HXrD75oc2pQ*wt>M";
      SimpleNode simpleNode0 = new SimpleNode(10);
      SimpleNode simpleNode1 = new SimpleNode(10);
      simpleNode0.setIdentifier(";");
      simpleNode0.setIdentifier("HXrD75oc2pQ*wt>M");
      String string1 = "<=";
      simpleNode0.setIdentifier((String) null);
      simpleNode1.setIdentifier("PackageDeclaration");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("HXrD75oc2pQ*wt>M", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("HXrD75oc2pQ*wt>=");
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{");
      simpleNode0.dump("*gt", stringWriter1);
      assertEquals("{<EnumConstant>\n  <identifier>*amp</identifier>\n</EnumConstant>\n", stringWriter1.toString());
      assertEquals("{<EnumConstant>\n  <identifier>*amp</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8249506629220404
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"");
      SimpleNode simpleNode0 = new SimpleNode(91);
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("<", stringWriter0);
      simpleNode0.dump("\"", stringWriter0);
      assertEquals("<SynchronizedStatement>\n  <identifier>*lt</identifier>\n</SynchronizedStatement>\n<SynchronizedStatement>\n  <identifier>*lt</identifier>\n</SynchronizedStatement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(91);
      simpleNode0.setIdentifier("\"");
      simpleNode0.setIdentifier("<<");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(17);
      simpleNode0.dump("<", stringWriter1);
      assertEquals("<SynchronizedStatement>\n  <identifier>\"</identifier>\n  <identifier>*lshft</identifier>\n</SynchronizedStatement>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.49930651872399445
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode0, 27);
      StringWriter stringWriter0 = new StringWriter(27);
      stringWriter0.append((CharSequence) "uDTCSV");
      // Undeclared exception!
      simpleNode0.dump("*?W[ JN", stringWriter0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2);
      simpleNode0.setIdentifier("&");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('|');
      simpleNode0.dump("PostfixExpression", stringWriter0);
      assertEquals("|<ImportDeclaration>\n  <identifier>*amp</identifier>\n</ImportDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      JavaParser javaParser0 = new JavaParser(pushbackInputStream0);
      SimpleNode simpleNode0 = new SimpleNode((-2294));
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 27);
      Node node0 = simpleNode0.parent;
      SimpleNode simpleNode2 = new SimpleNode(0);
      SimpleNode simpleNode3 = new SimpleNode(27);
      simpleNode3.jjtAddChild(simpleNode1, 0);
      simpleNode2.jjtAddChild(simpleNode3, 914);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode3.toString();
      simpleNode3.dump("AnnotationTypeDeclaration", stringWriter0);
      simpleNode2.jjtGetChild(27);
      assertEquals(915, simpleNode2.jjtGetNumChildren());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4991708126036484
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode0, 27);
      StringWriter stringWriter0 = new StringWriter(27);
      StringWriter stringWriter1 = stringWriter0.append('H');
      stringWriter1.append((CharSequence) "uDTCSV");
      // Undeclared exception!
      simpleNode0.dump("*?W[ JN", stringWriter1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.002663334987299
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("i7");
      StringReader stringReader0 = new StringReader("PackageDeclaration");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1567, 89);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser1, 89);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode0.setIdentifier(">");
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('7');
      simpleNode0.dump(">", stringWriter1);
      assertEquals("7<ReturnStatement>\n  <identifier>*gt</identifier>\n  <identifier>*gt</identifier>\n</ReturnStatement>\n", stringWriter1.toString());
      assertEquals("7<ReturnStatement>\n  <identifier>*gt</identifier>\n  <identifier>*gt</identifier>\n</ReturnStatement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(3694);
      JavaParser javaParser0 = new JavaParser("\"kb&}E");
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 557);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(558, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      JavaParser javaParser0 = new JavaParser(pushbackInputStream0);
      String string0 = "<";
      StringReader stringReader0 = new StringReader("<");
      JavaParser javaParser1 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser1, 27);
      SimpleNode simpleNode1 = new SimpleNode(0);
      SimpleNode simpleNode2 = new SimpleNode(27);
      simpleNode0.jjtAddChild(simpleNode2, 0);
      simpleNode0.jjtAddChild(simpleNode2, 1);
      int int0 = (-1103981311);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1103981311));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 27);
      SimpleNode simpleNode1 = new SimpleNode((-2013779105));
      SimpleNode simpleNode2 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      simpleNode0.jjtAddChild(simpleNode2, 598);
      assertEquals(599, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(27);
      JavaParser javaParser0 = new JavaParser("<token of kind 12>");
      simpleNode0.parser = javaParser0;
      SimpleNode simpleNode1 = new SimpleNode(27);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      SimpleNode simpleNode2 = new SimpleNode(27);
      simpleNode2.toString();
      simpleNode0.jjtAddChild(simpleNode1, 27);
      assertEquals(28, simpleNode0.jjtGetNumChildren());
      
      int int0 = simpleNode1.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">>");
      stringReader0.markSupported();
      char[] charArray0 = new char[14];
      charArray0[0] = 'H';
      stringReader0.read(charArray0);
      SimpleNode simpleNode0 = new SimpleNode(9);
      simpleNode0.setIdentifier("");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("x9F4>SXISS&t", stringWriter0);
      assertEquals("<EnumBody>\n</EnumBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("{", stringWriter0);
      assertEquals("<EnumConstant>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.setIdentifier(">>");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump(">>", stringWriter0);
      assertEquals("<ImportDeclaration>\n  <identifier>*rshft</identifier>\n</ImportDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.018706115735962
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("\u0004Y5aWA>)DTZ|c/");
      JavaParser javaParser1 = new JavaParser("{");
      SimpleNode simpleNode0 = new SimpleNode(javaParser1, 10);
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("ME}n[SOywNZ", stringWriter0);
      simpleNode0.dump("{", stringWriter0);
      simpleNode0.toString();
      simpleNode0.toString();
      simpleNode0.dump("'5Ps2tw$H", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>*ge</identifier>\n</EnumConstant>\n<EnumConstant>\n  <identifier>*ge</identifier>\n</EnumConstant>\n<EnumConstant>\n  <identifier>*ge</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      simpleNode0.setIdentifier("}");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("}", stringWriter0);
      assertEquals("<AllocationExpression>\n</AllocationExpression>\n", stringWriter0.toString());
      
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      String string0 = "";
      ArrayList<String> arrayList0 = new ArrayList<String>(0);
      Node[] nodeArray0 = new Node[2];
      Node node0 = simpleNode0.parent;
      nodeArray0[0] = null;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.dump("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-5525));
      simpleNode0.identifiers = null;
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-5525));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5525
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.8249506629220404
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      simpleNode0.setIdentifier(")PhXg ?gFj[a8");
      StringWriter stringWriter0 = new StringWriter();
      SystemInUtil.addInputLine(")PhXg ?gFj[a8");
      simpleNode0.dump("x9F4>SXISS&t", stringWriter0);
      assertEquals("<EnumBody>\n  <identifier>)PhXg ?gFj[a8</identifier>\n</EnumBody>\n", stringWriter0.toString());
      
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"");
      SimpleNode simpleNode0 = new SimpleNode(0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 30);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 30);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump(">", stringWriter0);
      simpleNode0.toString();
      assertEquals(31, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(797);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = null;
      nodeArray0[2] = null;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-389));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -389
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1));
      Node node0 = simpleNode0.parent;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1795275078));
      // Undeclared exception!
      try { 
        simpleNode0.toString("gsT7!Yvk?M]RPW");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1795275078
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(4248);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(3694);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      JavaParser javaParser0 = new JavaParser("VariableDeclaratorId");
      simpleNode0.parser = javaParser0;
      simpleNode0.jjtOpen();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 10);
      assertEquals(11, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-122607198);
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (-122607198));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier("HXrD75oc2pQ*wt>M");
      simpleNode0.setIdentifier("=");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      SystemInUtil.addInputLine("<=");
      SimpleNode simpleNode1 = new SimpleNode(1529);
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode0.dump("=", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>HXrD75oc2pQ*wt>M</identifier>\n  <identifier>=</identifier>\n</EnumConstant>\n", stringWriter0.toString());
      
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0985445222206285
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier("HXrD75oc2pQ*wt>M");
      simpleNode0.setIdentifier("=");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("EnumConstant", stringWriter0);
      JavaParser javaParser0 = new JavaParser("<=");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 10);
      simpleNode1.dump("hcS'P", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>HXrD75oc2pQ*wt>M</identifier>\n  <identifier>=</identifier>\n</EnumConstant>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("lUS)p+sLTbpqdX");
      assertEquals("lUS)p+sLTbpqdXEnumConstant : HXrD75oc2pQ*wt>M : =", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1792));
      StringReader stringReader0 = new StringReader(">=");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      Node node0 = javaParser0.currNode;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1792));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(3065);
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3065
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9925623248862889
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("e6");
      JavaParser javaParser1 = new JavaParser("ME}n[SOywNZ");
      StringReader stringReader0 = new StringReader("ME}n[SOywNZ");
      stringReader0.skip(65);
      stringReader0.ready();
      JavaParser javaParser2 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser2, 65);
      simpleNode0.setIdentifier("e6");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("e6", stringWriter0);
      assertEquals("<NullLiteral>\n  <identifier>e6</identifier>\n</NullLiteral>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(125);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.jjtClose();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-22));
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "cHxR^41rp";
      // Undeclared exception!
      try { 
        simpleNode0.dump("cHxR^41rp", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -22
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.7962209059715708
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("{");
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier(")PhXg ?gFj[a8");
      StringWriter stringWriter0 = new StringWriter();
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      SystemInUtil.addInputLine(")PhXg ?gFj[a8");
      simpleNode0.parser = javaParser0;
      simpleNode0.dump("y!w", stringWriter0);
      assertEquals("<VariableDeclaratorId>\n  <identifier>)PhXg ?gFj[a8</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }
}
