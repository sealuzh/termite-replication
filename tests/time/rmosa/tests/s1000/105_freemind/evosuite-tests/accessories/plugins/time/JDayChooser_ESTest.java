/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 16:41:58 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.AWTEventMulticaster;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.Box;
import javax.swing.InputVerifier;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.EtchedBorder;
import javax.swing.event.AncestorListener;
import javax.swing.filechooser.FileSystemView;
import javax.swing.plaf.multi.MultiMenuItemUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import org.apache.batik.dom.svg12.SVG12DOMImplementation;
import org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;
import org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.util.ParsedURL;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.mock.javax.swing.MockSpinnerDateModel;
import org.evosuite.runtime.mock.javax.swing.filechooser.MockFileSystemView;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;
import org.openstreetmap.gui.jmapviewer.tilesources.BingAerialTileSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(28);
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      sVG12DOMImplementation0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.decorationBackgroundVisible = false;
      jDayChooser0.weeks = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jDayChooser0.setEnabled(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8961770597399514
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      styleContext0.getStyleNames();
      AttributeSet attributeSet0 = styleContext0.getEmptySet();
      Color color0 = defaultStyledDocument0.getForeground(attributeSet0);
      EtchedBorder etchedBorder0 = new EtchedBorder();
      etchedBorder0.getEtchType();
      defaultStyledDocument0.getRootElements();
      jDayChooser0.setBorder(etchedBorder0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.drawWeeks();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDayBordersVisible(true);
      System.setCurrentTimeMillis((-1L));
      jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.800854989187817
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      jDayChooser0.getFocusListeners();
      objectArray0[0] = objectArray1;
      jDayChooser0.getTreeLock();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 32, (-292L), 32, 32, 'g');
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getLocale();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) jDayChooser0;
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setDay((-1485));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setEnabled(false);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.drawWeeks();
      jDayChooser0.drawDays();
      jDayChooser0.addListeners(7);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[][] objectArray0 = new Object[1][1];
      Object[] objectArray1 = new Object[5];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      objectArray1[4] = objectArray1[0];
      objectArray0[0] = objectArray1;
      BufferedImage bufferedImage0 = Tile.LOADING_IMAGE;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      java.sql.Date date0 = new java.sql.Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.800854989187817
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      jDayChooser0.getUIClassID();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setForeground(color0);
      MockDate mockDate0 = new MockDate();
      int int0 = (-2204);
      MockDate.UTC((-2204), 90, 367, 26, 6, 6);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.drawDays();
      int int1 = 697;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 697, 1L, 2345, 6, '!', 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[1] = object0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) null;
      objectArray2[6] = (Object) jDayChooser0;
      objectArray2[7] = (Object) jDayChooser0;
      objectArray2[8] = (Object) jDayChooser0;
      objectArray0[1] = objectArray2;
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[1] = object0;
      BingAerialTileSource bingAerialTileSource0 = new BingAerialTileSource();
      bingAerialTileSource0.getAttributionImage();
      Date date0 = jDayChooser0.maxSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertSame(date1, date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9831272903573964
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      JTable jTable0 = new JTable();
      jYearChooser0.createVolatileImage(0, 7);
      Rectangle rectangle0 = jTable0.getCellRect(0, (-1950), false);
      TurbulenceRable8Bit turbulenceRable8Bit0 = new TurbulenceRable8Bit(rectangle0, (-2566), (-624), 0, 0, false, true);
      MorphologyRable8Bit morphologyRable8Bit0 = new MorphologyRable8Bit(turbulenceRable8Bit0, 7, 1.0E-6, true);
      Rectangle rectangle1 = (Rectangle)morphologyRable8Bit0.getBounds2D();
      rectangle1.x = (-1113);
      rectangle0.setFrame((Rectangle2D) rectangle1);
      jYearChooser0.computeVisibleRect(rectangle0);
      jDayChooser0.setYearChooser(jYearChooser0);
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 7);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getMinSelectableDate();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5777804121117294
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      jDayChooser0.getTreeLock();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.getClientProperty((Object) null);
      Object object0 = new Object();
      BufferedImage bufferedImage0 = Tile.LOADING_IMAGE;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      JTable jTable0 = new JTable(defaultTableModel0);
      jTable0.getAlignmentY();
      jDayChooser0.checkImage((Image) bufferedImage0, 3785, 884, (ImageObserver) jTable0);
      jDayChooser0.updateUI();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.696303767023144
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      jDayChooser0.getTreeLock();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setFocus();
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[1] = object0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) null;
      objectArray2[6] = (Object) jDayChooser0;
      objectArray2[7] = (Object) jDayChooser0;
      objectArray2[8] = (Object) jDayChooser0;
      objectArray0[1] = objectArray2;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray2);
      JTable jTable0 = new JTable(defaultTableModel0);
      jDayChooser0.setWeekOfYearVisible(false);
      int int0 = 228;
      ParsedURL parsedURL0 = new ParsedURL("~:i+OvEsXM3");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "~:i+OvEsXM3";
      stringArray0[4] = "~:i+OvEsXM3";
      stringArray0[5] = "~:i+OvEsXM3";
      stringArray0[6] = "~:i+OvEsXM3";
      stringArray0[7] = "~:i+OvEsXM3";
      try { 
        parsedURL0.openStream(stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to make sense of URL for connection
         //
         verifyException("org.apache.batik.util.ParsedURLData", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      Font.getFont("Center");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, (String) null, "Center", (String) null);
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean1 = false;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Component component0 = Box.createHorizontalGlue();
      jDayChooser0.add((String) null, component0);
      jDayChooser0.setFocus();
      jDayChooser0.setMaxDayCharacters(12);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isRequestFocusEnabled();
      int int0 = (-2240);
      jDayChooser0.setMaxDayCharacters((-2240));
      int int1 = 37;
      int int2 = 14;
      char char0 = 't';
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JScrollPane jScrollPane0 = null;
      try {
        jScrollPane0 = new JScrollPane(8824, 160);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid verticalScrollBarPolicy
         //
         verifyException("javax.swing.JScrollPane", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setMaxDayCharacters(37);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 37, true, (Component) null);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDayPanel();
      jDayChooser0.setAlignmentY(0.0F);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 45, "day", 330);
      actionEvent0.setSource(jDayChooser0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.desktop;
      jDayChooser0.setForeground(systemColor0);
      Boolean boolean0 = new Boolean("day");
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      AffineTransform affineTransform0 = null;
      try {
        affineTransform0 = new AffineTransform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.AffineTransform", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Color color0 = Color.BLUE;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(2984);
      MockSpinnerDateModel mockSpinnerDateModel0 = null;
      try {
        mockSpinnerDateModel0 = new MockSpinnerDateModel();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal value
         //
         verifyException("javax.swing.SpinnerDateModel", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.getClientProperty(mockGregorianCalendar0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      jDayChooser0.getTreeLock();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      Font.getFont("day");
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isDayBordersVisible();
      Font.getFont("accessories.plugins.time.JDayChooser");
      jDayChooser0.setFont((Font) null);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Object[] objectArray0 = new Object[14];
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addAncestorListener(ancestorListener0);
      objectArray0[0] = (Object) jDayChooser0;
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDay((-1485));
      MockSpinnerDateModel mockSpinnerDateModel0 = null;
      try {
        mockSpinnerDateModel0 = new MockSpinnerDateModel();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal value
         //
         verifyException("javax.swing.SpinnerDateModel", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8960770909801887
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      JTable jTable0 = new JTable();
      jYearChooser0.createVolatileImage(0, 7);
      Rectangle rectangle0 = jTable0.getCellRect(0, (-1950), false);
      TurbulenceRable8Bit turbulenceRable8Bit0 = new TurbulenceRable8Bit(rectangle0, (-2566), (-624), 0, 0, false, false);
      MorphologyRable8Bit morphologyRable8Bit0 = new MorphologyRable8Bit(turbulenceRable8Bit0, 7, 1.0E-6, false);
      Rectangle2D rectangle2D0 = morphologyRable8Bit0.getBounds2D();
      rectangle0.setFrame(rectangle2D0);
      jYearChooser0.computeVisibleRect(rectangle0);
      jDayChooser0.setYearChooser(jYearChooser0);
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 7);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      String string0 = "";
      jDayChooser0.getTreeLock();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDecorationBordersVisible(true);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockCalendar.getInstance(timeZone0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "-}o4", 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.createImage(1958, 1958);
      jDayChooser0.imageUpdate((Image) null, 1958, 1958, 0, 0, 0);
      jDayChooser0.getMouseListeners();
      jDayChooser0.getInputMap(0);
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-622), (-622), 523, 0, '<', 0);
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9832779852928875
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.init();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      jDayChooser0.getMinSelectableDate();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getFocusTraversalPolicy();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.decorationBackgroundVisible = false;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-776));
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
      jDayChooser0.initDecorations();
      jDayChooser0.drawWeeks();
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = new Locale("day", "1", "1");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getDecorationBackgroundColor();
      System.setCurrentTimeMillis(1904L);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Color color0 = Color.BLUE;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setFocus();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0632311444031184
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.setDoubleBuffered(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.initDecorations();
      BorderLayout borderLayout0 = new BorderLayout((-2305), 281);
      jDayChooser0.setLayout(borderLayout0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setEnabled(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addNotify();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setDecorationBackgroundVisible(false);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = null;
      try {
        pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, (OutputStream) null, 0, 10043);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.fop.pdf.PDFDocument", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isValidateRoot();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDayBordersVisible();
      Object object0 = null;
      FileSystemView fileSystemView0 = MockFileSystemView.getFileSystemView();
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser("day", fileSystemView0);
      MockFile mockFile0 = new MockFile("day", "day");
      mockJFileChooser0.getIcon(mockFile0);
      MultiMenuItemUI multiMenuItemUI0 = new MultiMenuItemUI();
      int int0 = 1687;
      JToolBar jToolBar0 = null;
      try {
        jToolBar0 = new JToolBar(1687);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // orientation must be one of: VERTICAL, HORIZONTAL
         //
         verifyException("javax.swing.JToolBar", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.removeAll();
      jDayChooser0.setFocus();
      jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBordersVisible(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      Color.RGBtoHSB(0, 917, 917, (float[]) null);
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals((-16754012), color0.getRGB());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.9831272903573964
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(48);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.keyTyped((KeyEvent) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Color color0 = Color.BLUE;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocus();
      jDayChooser0.setMonth(1513);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(2263);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }
}
