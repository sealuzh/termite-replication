/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 10:05:10 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesBandwidth(1156);
      advancedSettings0.setBacklog(1);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(1156, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-737));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setCharset("");
      advancedSettings0.setMaxThreadsForNioWrite(436);
      advancedSettings0.setMaxThreadsForNioWrite((-737));
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      assertEquals((-737), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.976432073516815
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(6);
      advancedSettings0.setSocketLinger(823);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesConnectionTime(649);
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getCharset();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.getBacklog();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesBandwidth((-507));
      advancedSettings0.setClientIdentifier("\t<client-socket-receive-buffer-size>");
      advancedSettings0.getBacklog();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getBacklog();
      advancedSettings0.getBacklog();
      advancedSettings0.getCharset();
      advancedSettings0.getClientIdentifier();
      assertEquals(649, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.128419031742918
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setMaxThreadsForNioWrite(1899);
      advancedSettings0.setClientSocketReceiveBufferSize((-3373));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketSendBufferSize(1899);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getPerformancePreferencesLatency();
      advancedSettings1.setPerformancePreferencesLatency((-3373));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setSocketLinger(385);
      advancedSettings1.getPerformancePreferencesLatency();
      advancedSettings1.setDebugNonBlockingMode(true);
      advancedSettings1.setCharset("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings1.setDebugNonBlockingMode(false);
      advancedSettings0.getClientIdentifier();
      assertEquals(385, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientIdentifier("54'r");
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("u.Fe{");
      assertEquals("u.Fe{", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(1995);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(1995, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getPerformancePreferencesConnectionTime();
      advancedSettings0.setCharset("");
      assertFalse(advancedSettings0.getUseDirectByteBuffer());
      
      int int0 = advancedSettings1.getByteBufferSize();
      assertTrue(advancedSettings1.getUseDirectByteBuffer());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(3196);
      advancedSettings0.setSocketLinger(3196);
      advancedSettings0.setPerformancePreferencesBandwidth(1156);
      advancedSettings0.setBacklog(1);
      advancedSettings0.getSocketLinger();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("Q");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Q
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("#nZ");
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(287);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setClientSocketTrafficClass("y,Vw~nCc]aETP");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("^@:jeN|NuW9pRX");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ^@:jeN|NuW9pRX
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(321);
      advancedSettings0.setClientSocketSendBufferSize(1567);
      advancedSettings0.getMaxThreadsForNioWrite();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(321, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(1567, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(458);
      assertEquals(458, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-654));
      advancedSettings0.setSocketLinger((-2426));
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getByteBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setMaxThreadsForNioWrite(1899);
      advancedSettings0.setClientSocketReceiveBufferSize((-3361));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketSendBufferSize(1899);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientIdentifier();
      advancedSettings1.getPerformancePreferencesLatency();
      advancedSettings0.setClientIdentifier("Y");
      advancedSettings0.setCharset("");
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals("Y", advancedSettings0.getClientIdentifier());
      assertEquals((-3361), int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-543));
      advancedSettings0.setClientSocketSendBufferSize((-2497));
      advancedSettings0.setClientSocketTrafficClass("\t<client-identifier>");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getUseDirectByteBuffer();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getPerformancePreferencesBandwidth();
      advancedSettings1.setBacklog(509);
      advancedSettings0.setCharset("");
      advancedSettings1.getByteBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("{!@E4");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // {!@E4
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("8L");
      advancedSettings0.setPerformancePreferencesConnectionTime((-973));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize((-973));
      advancedSettings0.setMaxThreadsForNioWrite((-2000));
      int int0 = 0;
      advancedSettings0.setSocketLinger((-2000));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.getByteBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("g(Uko9dG1z9q*38f!LP");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // g(Uko9dG1z9q*38f!LP
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(65536);
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.getPerformancePreferencesBandwidth();
      String string0 = "</max-threads-for-nio-write>\n";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</max-threads-for-nio-write>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </max-threads-for-nio-write>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.6312207116556454
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      String string0 = advancedSettings0.toXML("</client-socket-receive-buffer-size>\n");
      advancedSettings0.setClientSocketSendBufferSize((-3440));
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setSocketLinger((-3879));
      advancedSettings0.setSocketLinger(240);
      advancedSettings0.setClientSocketTrafficClass("\"9OcCYY\u0001t8#4kB");
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.setPerformancePreferencesConnectionTime(10);
      advancedSettings0.toXML((String) null);
      advancedSettings0.setClientIdentifier("\"9OcCYY\u0001t8#4kB");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setByteBufferSize((-3879));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketSendBufferSize(240);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setQSObjectPoolMaker(string0);
      advancedSettings0.getCharset();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(10, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(240, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(65536, int0);
      
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertNotNull(string0);
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(406);
      advancedSettings0.toXML("H_%UJw.KS");
      assertEquals(406, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setSocketLinger(1360);
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1979));
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset("");
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, int0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(3528);
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals(3528, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("#nZ");
      String string0 = advancedSettings0.toXML("#nZ");
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals("#nZ<advanced-settings>\n#nZ\t<charset>ISO-8859-1</charset>\n#nZ\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n#nZ\t<byte-buffer-size>65536</byte-buffer-size>\n#nZ\t<backlog>0</backlog>\n#nZ\t<socket-linger>-1</socket-linger>\n#nZ\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n#nZ\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n#nZ\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n#nZ\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n#nZ\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n#nZ\t<performance-preferences-latency>0</performance-preferences-latency>\n#nZ\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n#nZ\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n#nZ\t<client-socket-traffic-class>#nZ</client-socket-traffic-class>\n#nZ</advanced-settings>\n", string0);
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings1.getClientIdentifier());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), int0);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertTrue(boolean0);
      
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      
      advancedSettings1.setCharset("");
      assertEquals(0, advancedSettings1.getBacklog());
      assertEquals(0, advancedSettings1.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings1.getSocketLinger());
      assertEquals(10, advancedSettings1.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings1.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings1.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings1.getCharset());
      assertEquals(0, advancedSettings1.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings1.getByteBufferSize());
  }
}
