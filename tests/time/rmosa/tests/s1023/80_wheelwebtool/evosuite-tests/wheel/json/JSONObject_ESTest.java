/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 09:56:58 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("] is not a Boolean.");
      assertEquals(0, int0);
      
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (-1573));
      StringWriter stringWriter0 = new StringWriter(6260);
      jSONObject1.write(stringWriter0);
      double double0 = jSONObject0.optDouble("] is not a Boolean.");
      assertEquals((-1573.0), double0, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5955819856378066
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject.quote("#a~.NJG[yDYbm2LX");
      JSONObject jSONObject0 = new JSONObject((Object) "\"#a~.NJG[yDYbm2LX\"");
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      hashMap0.getOrDefault("\"#a~.NJG[yDYbm2LX\"", jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put(">9", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2806483581169434
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("JSONArray[", 56);
      jSONObject0.getDouble("JSONArray[");
      JSONObject jSONObject1 = jSONObject0.put("NSxCkEr", 0.0);
      jSONObject1.toString(44, (-1994));
      boolean boolean0 = jSONObject0.has("JSONArray[");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean((String) null);
      JSONObject.quote((String) null);
      hashMap0.put((Integer) null, boolean0);
      jSONObject0.toString(13, 13);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 13, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0369008852318826
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("?1", (-2047));
      int int0 = jSONObject0.optInt("?1");
      assertEquals((-2047), int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(13, 13);
      try { 
        jSONObject0.put((String) null, (long) 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8760902794872374
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)42);
      JSONObject jSONObject1 = new JSONObject((Object) ")mtT");
      jSONObject1.put(")mtT", (int) (byte)42);
      Integer integer0 = new Integer(1349);
      // Undeclared exception!
      jSONObject1.toString(3593, 1349);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("in", (Collection) linkedList0);
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}");
      Byte byte0 = new Byte((byte)88);
      String string0 = JSONObject.valueToString(byte0, 7, 1095);
      Long long0 = new Long(7);
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("wheel.json.JSONArray", stringArray0);
      jSONObject0.put("wheel.json.JSONArray", 395.02765808719056);
      double double0 = jSONObject0.optDouble("wheel.json.JSONArray");
      assertEquals(395.02765808719056, double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ")mtT");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject2 = jSONObject1.accumulate(")mtT", float0);
      jSONObject2.optDouble(")mtT");
      JSONObject jSONObject3 = new JSONObject();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-83));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("@{}H|</$tqrF,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@{}H|<\\/$tqrF,\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2806483581169434
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer integer0 = new Integer(123);
      Byte byte0 = new Byte((byte)127);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.put("F4>vh5y0", 102);
      jSONObject1.optLong("F4>vh5y0");
      Integer integer1 = new Integer(102);
      jSONObject0.toString(123, (-643));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0992338308014475
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Byte.toUnsignedInt((byte)111);
      String string0 = JSONObject.quote("5]HPp(fF@O-KPD2$");
      assertEquals("\"5]HPp(fF@O-KPD2$\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NSxCkEr", (-785));
      JSONObject jSONObject2 = jSONObject1.put("5]HPp(fF@O-KPD2$", (double) (byte)111);
      jSONObject2.toString(46, (-2084));
      jSONObject2.names();
      long long0 = jSONObject0.getLong("NSxCkEr");
      assertEquals((-785L), long0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(";mw|", ";mw|");
      jSONObject1.remove(";mw|");
      JSONObject jSONObject2 = jSONObject0.put(";mw|", (Object) ";mw|");
      jSONObject0.optBoolean(";mw|", true);
      jSONObject2.optBoolean(";mw|");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-5408));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ";mw|";
      stringArray0[1] = ";mw|";
      stringArray0[2] = ";mw|";
      stringArray0[3] = ";mw|";
      stringArray0[4] = "0";
      stringArray0[5] = "],mG$i85Re]9RA0(u";
      stringArray0[6] = ";mw|";
      stringArray0[7] = ";mw|";
      JSONObject jSONObject1 = new JSONObject(";mw|", stringArray0);
      jSONObject1.optString("\b", (String) null);
      try { 
        jSONObject0.getInt(";mw|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";mw|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4382178413630053
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = (-1378);
      Integer integer0 = new Integer((-1378));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put(": ", (-1378));
      jSONObject1.getLong(": ");
      JSONObject jSONObject2 = jSONObject0.put("DAItVYj*rY2OdpIdl", true);
      jSONObject2.optLong(": ");
      jSONObject1.optInt(": ", 837);
      jSONObject1.remove(": ");
      String string0 = null;
      jSONObject0.optString("uXm)|j{t4ItN{gY3j^", (String) null);
      Integer.toUnsignedLong((-1378));
      jSONObject0.optDouble("X![>u?S+O4sRuE");
      try { 
        jSONObject0.getDouble(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\": \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate(")mtT", "] is not a JSONArray.");
      Short short0 = new Short((short)0);
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append(")mtT", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[)mtT] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(")mtT", ")mtT");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Dvnr";
      stringArray0[0] = "Dvnr";
      stringArray0[2] = "Dvnr";
      stringArray0[3] = "Dvnr";
      stringArray0[4] = "getgetBytes";
      stringArray0[5] = "tri";
      stringArray0[6] = ")mtT";
      stringArray0[7] = ")mtT";
      stringArray0[8] = "Dvnr";
      JSONObject jSONObject2 = new JSONObject("Dvnr", stringArray0);
      Short short0 = new Short((short) (-863));
      Short short1 = new Short((short)0);
      jSONObject1.append("gettoUpperCase", short1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject((short) (-863));
      JSONObject jSONObject3 = jSONObject0.append("gettoUpperCase", (Object) null);
      assertSame(jSONObject3, jSONObject0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = "";
      jSONObject0.accumulate("", object0);
      try { 
        jSONObject0.append("", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.095924398920587
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "has";
      jSONObject0.optInt("spl", 0);
      Integer.valueOf(19);
      jSONObject0.put("has", 119);
      Integer integer0 = new Integer(78);
      jSONObject0.toString(119, (-393));
      JSONTokener jSONTokener0 = new JSONTokener("1qN:j]?FP\"41JF&pGyW");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 1qN:j]?FP\"41JF&pGyW
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("", true);
      Object object0 = jSONObject1.opt("");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "ishashCode";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("ishashCode", (Collection) linkedList0);
      Double double0 = new Double(0.0);
      jSONObject0.accumulate("ishashCode", double0);
      JSONTokener jSONTokener0 = new JSONTokener("ishashCode");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ishashCode
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "ishashCode";
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Byte byte0 = new Byte((byte)6);
      hashMap0.put("ishashCode", byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("ishashCode", hashMap0);
      try { 
        jSONObject0.getBoolean("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ishashCode\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("m2w", "m2w");
      try { 
        jSONObject1.getJSONArray("m2w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m2w\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(2423.05);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float float0 = new Float(Double.NaN);
      Float.isFinite(85.0F);
      try { 
        JSONObject.valueToString(float0, 2890, 1635);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put("AGoZ~/{@J%S%]@Iz", boolean0);
      Boolean.logicalXor(false, false);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("0", hashMap0);
      jSONObject1.getString("0");
      jSONObject1.length();
      try { 
        jSONObject0.getInt("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject1 = jSONObject0.accumulate("JNbs{!3Gq$C", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("JNbs{!3Gq$C");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "}f|NxL_wD9Qd)\"[";
      stringArray0[1] = "}f|NxL_wD9Qd)\"[";
      stringArray0[3] = "}f|NxL_wD9Qd)\"[";
      stringArray0[4] = "}f|NxL_wD9Qd)\"[";
      stringArray0[5] = "}f|NxL_wD9Qd)\"[";
      stringArray0[6] = "i)EA)AKm,s";
      stringArray0[7] = "}f|NxL_wD9Qd)\"[";
      JSONObject jSONObject0 = new JSONObject("}f|NxL_wD9Qd)\"[", stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("Expected '", true);
      jSONObject0.optBoolean("}f|NxL_wD9Qd)\"[", true);
      String string0 = JSONObject.quote("}f|NxL_wD9Qd)\"[");
      assertEquals("\"}f|NxL_wD9Qd)\\\"[\"", string0);
      
      jSONObject0.put("}f|NxL_wD9Qd)\"[", (Object) "false");
      boolean boolean1 = jSONObject0.getBoolean("}f|NxL_wD9Qd)\"[");
      assertFalse(boolean1 == boolean0);
      
      double double0 = jSONObject0.optDouble("}f|NxL_wD9Qd)\"[", 299.599);
      assertEquals(299.599, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      Boolean boolean0 = new Boolean(false);
      jSONObject0.accumulate("", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject0.getBoolean("");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1846726042887588
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Float float0 = new Float((-1924.8787881239166));
      JSONObject jSONObject0 = new JSONObject((Object) "true");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 2286;
      Integer integer0 = new Integer(2286);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      Object object0 = JSONObject.NULL;
      jSONObject1.putOpt((String) null, object0);
      jSONObject0.put("H`.+dlff|PYTxYjY", 2286);
      try { 
        jSONObject1.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-2333), (int) (short)528);
      assertEquals("{}", string0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((float) (short)528);
      JSONObject.numberToString(float0);
      jSONObject0.remove("2'i$p9rZhV)r");
      String string1 = JSONObject.valueToString(linkedList0, 945, (short)528);
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "to";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.put("to", 0.0);
      double double0 = jSONObject0.optDouble("to", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("8DzeXfl]Jj0}S", 1591);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("", (double) 1591);
      jSONObject2.getInt("");
      try { 
        jSONObject1.get("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000003\":\"java.lang.Class@0000000004\"}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(")mtT", ")mtT");
      jSONObject1.toString();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{GMs5s[A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {GMs5s[A
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 1515, (-583));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      Double double0 = new Double((short)528);
      JSONObject jSONObject1 = new JSONObject(double0);
      jSONObject0.accumulate("wheel.json.JSONObject@0000000001", jSONObject1);
      String[] stringArray0 = new String[6];
      jSONObject0.getJSONObject("wheel.json.JSONObject@0000000001");
      stringArray0[0] = "p(>^1wx:OcOeU_mo%";
      stringArray0[1] = "wheel.json.JSONObject@0000000001";
      stringArray0[2] = "wheel.json.JSONObject@0000000001";
      stringArray0[3] = "wheel.json.JSONObject@0000000001";
      stringArray0[4] = "wheel.json.JSONObject@0000000001";
      stringArray0[5] = "wheel.json.JSONObject@0000000001";
      JSONObject jSONObject2 = new JSONObject("wheel.json.JSONObject@0000000001", stringArray0);
      try { 
        jSONObject2.getJSONObject("7!)G~K/ bUgx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7!)G~K/ bUgx\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("#a~.NJG[yDYbm2LX", 2123.095713);
      JSONTokener jSONTokener0 = new JSONTokener("#a~.NJG[yDYbm2LX");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 17 of #a~.NJG[yDYbm2LX
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "}f|NxL_wD9Qd)\"[";
      stringArray0[1] = "}f|NxL_wD9Qd)\"[";
      stringArray0[2] = "}f|NxL_wD9Qd)\"[";
      stringArray0[3] = "}f|NxL_wD9Qd)\"[";
      stringArray0[4] = "}f|NxL_wD9Qd)\"[";
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.clear();
      JSONObject jSONObject1 = jSONObject0.put("}f|NxL_wD9Qd)\"[", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject.doubleToString(0.0);
      JSONObject.doubleToString(0.0);
      String string0 = jSONObject1.optString("}f|NxL_wD9Qd)\"[");
      assertFalse(linkedList0.contains(string0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      JSONObject.valueToString(object0);
      jSONArray0.optDouble(298);
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      String string0 = "P&{Ao>,TLeGVd_$";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wheel.json.JSONArray@0000000001";
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long(1L);
      Long.sum(1502L, 0L);
      JSONObject.getNames((Object) long0);
      int int0 = 114;
      Integer integer0 = new Integer(114);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("XR+", (Object) null);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.2845130924164607
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Integer integer0 = new Integer(1142);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(integer0);
      JSONObject jSONObject2 = jSONObject1.put("Az#2bBR", 7);
      JSONObject jSONObject3 = jSONObject0.put("Az#2bBR", 7);
      long long0 = new Integer(7);
      jSONObject1.toString((-30733247), 1142);
      jSONObject2.optInt(".N14@0\"54}o");
      jSONObject3.optInt("Az#2bBR");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(".N14@0\"54}o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of .N14@0\"54}o
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Kd;vL&1p@:8c=e]y", "Kd;vL&1p@:8c=e]y");
      JSONObject.getNames(jSONObject0);
      jSONObject1.optJSONArray("~|G=Lt$dY,6$");
      JSONArray jSONArray1 = jSONObject1.optJSONArray("Kd;vL&1p@:8c=e]y");
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("java.lang.Float@0000000004.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@0000000004.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Byte byte0 = new Byte((byte)93);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Byte byte1 = new Byte((byte)93);
      jSONArray0.put(112, (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 47.0);
      jSONObject0.isNull("");
      double double0 = jSONObject1.optDouble("", (-1.0));
      assertEquals(4, jSONObject0.length());
      assertEquals(47.0, double0, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("JNbs{!3Gq$C", object0);
      try { 
        jSONObject1.getBoolean("JNbs{!3Gq$C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JNbs{!3Gq$C\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("P7k4ISU", "PL9_0By");
      jSONObject0.optDouble("PL9_0By", (-873.087305355));
      JSONArray jSONArray1 = jSONObject0.names();
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull(",");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "{}";
      JSONObject jSONObject0 = new JSONObject("{}");
      int int0 = (-1270);
      String string1 = "JSON does not allow non-finite numbers.";
      try { 
        jSONObject0.getLong("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-finite numbers.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.2076743147429352
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",\n";
      stringArray0[1] = "\",\n\"";
      stringArray0[2] = ",\n";
      stringArray0[3] = "\",\n\"";
      stringArray0[4] = "\",\n\"";
      stringArray0[5] = "Substring bounds error";
      stringArray0[6] = ",\n";
      stringArray0[7] = ",\n";
      stringArray0[8] = "\",\n\"";
      JSONObject jSONObject0 = new JSONObject("\",\n\"", stringArray0);
      jSONObject0.put("null", (-1674L));
      String string1 = jSONObject0.toString(841, 3);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("is");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONArray", "wheel.json.JSONArray");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject0.length();
      try { 
        jSONObject1.getJSONObject("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONObject0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Short short0 = new Short((short)0);
      Float float0 = new Float((double) (short)0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      Double double0 = new Double((short)0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject.valueToString((Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of in
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-4108));
      Integer.remainderUnsigned((-2097), 110);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject1 = jSONObject0.accumulate(";mw|", ";mw|");
      jSONObject1.getString(";mw|");
      jSONObject0.optBoolean(";mw|", false);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) ";mw|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("1+mS|T", "1+mS|T");
      try { 
        jSONObject0.getDouble("1+mS|T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1+mS|T\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("hp/)w%(aWX?;2ai6", (-1L));
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      double double0 = jSONObject1.getDouble("hp/)w%(aWX?;2ai6");
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)46);
      try { 
        jSONObject0.append((String) null, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ": ";
      JSONObject jSONObject0 = new JSONObject(": ", stringArray0);
      jSONObject0.accumulate("to", ": ");
      Short short0 = new Short((short)39);
      try { 
        jSONObject0.put(stringArray0[1], (Object) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(34, 216);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Short short0 = new Short((short)4492);
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(short0, biFunction0);
      Byte byte0 = new Byte((byte)93);
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONArray0, byte0, biFunction1);
      jSONArray0.put(112, (Map) hashMap0);
      hashMap0.put(short0, byte0);
      JSONObject.valueToString(hashMap0, (byte)93, 112);
      try { 
        Long.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      hashMap0.keySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("n.*j", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(823);
      jSONObject0.putOpt("7>C", integer0);
      JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(1178);
      Boolean boolean0 = new Boolean(true);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(1645);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject1.write(stringWriter0);
      try { 
        jSONObject1.getJSONArray("par");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"par\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.toString((-3570), (-3363));
      assertEquals(3, jSONObject0.length());
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
      
      String string1 = JSONObject.doubleToString((-800.6573508652));
      assertEquals("-800.6573508652", string1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("lU[816t|U5", 2373L);
      boolean boolean0 = new Boolean("}ca5~(J%8{ ?");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isreplace", 0L);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      long long0 = jSONObject1.optLong("isreplace", 1717L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "1mS|T";
      JSONObject jSONObject1 = jSONObject0.accumulate("1mS|T", "1mS|T");
      boolean boolean0 = true;
      try { 
        jSONObject1.getLong("1mS|T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1mS|T\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("[]", (-205.14604354468));
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getInt("[]");
      Object object0 = jSONObject0.get("[]");
      assertEquals((-205.14604354468), object0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("getgetJSONArray", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject.getNames((Object) "|<3_A1");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getput", false);
      try { 
        jSONObject0.getJSONObject("getput");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getput\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("m2w", "m2w");
      try { 
        jSONObject1.getBoolean("m2w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m2w\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.8559361529859042
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(",\n");
      String string1 = jSONObject0.toString();
      assertNotNull(string1);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject.valueToString(hashMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3343, false);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 1634, 1634);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("[]", 1.0);
      try { 
        jSONObject0.getBoolean("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = JSONObject.quote("_M c>)R`=6/1xj+}V`;");
      assertEquals("\"_M c>)R`=6/1xj+}V`;\"", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("toU", "");
      jSONObject0.optInt("", 48);
      try { 
        jSONObject1.getBoolean(":=Wq|^Ep0|Mh{W0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":=Wq|^Ep0|Mh{W0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.8053415898278653
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject.doubleToString(4328.60749521);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("4328.60749521");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("getappend", 0.0);
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("getspliterator");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("v_MLlu", false);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-5408));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      JSONObject jSONObject0 = null;
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("for", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-36763560), (-2820));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "";
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Short short0 = new Short((short)4492);
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(short0, biFunction0);
      Byte byte0 = new Byte((byte)93);
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONArray0, byte0, biFunction1);
      jSONArray0.put(112, (Map) hashMap0);
      hashMap0.put(short0, byte0);
      JSONObject.valueToString(hashMap0, (byte)93, (-185));
      try { 
        Long.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove((String) null);
      Float float0 = new Float(1778.98934097);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-1221), 15);
      assertEquals("{}", string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string1 = JSONObject.doubleToString((-2450.041056398256));
      assertEquals("-2450.041056398256", string1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, (-583), (-583));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      short short0 = (short)4470;
      Short short1 = new Short((short)4470);
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Byte byte0 = new Byte((byte)93);
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Short short2 = new Short((short)3846);
      hashMap0.put(short2, byte0);
      JSONObject.valueToString(hashMap0, (byte)93, (-185));
      try { 
        Long.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean("getgetClass");
      hashMap0.put((Integer) null, boolean0);
      Integer integer0 = new Integer(1711);
      Boolean boolean1 = Boolean.TRUE;
      hashMap0.put(integer0, boolean1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(13, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(59);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "}f|NxL_wD9Qd)\"[";
      stringArray0[1] = "}f|NxL_wD9Qd)\"[";
      stringArray0[3] = "}f|NxL_wD9Qd)\"[";
      JSONObject jSONObject0 = new JSONObject("}f|NxL_wD9Qd)\"[", stringArray0);
      Object object0 = jSONObject0.opt("}f|NxL_wD9Qd)\"[");
      assertNull(object0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      long long0 = jSONObject0.optLong("[]");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject.doubleToString(4328.60749521);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("4328.60749521", 948.57828857);
      jSONObject0.optString("4328.60749521", "wC/1H?RS");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ": ";
      Short short0 = new Short((short)2244);
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(2990);
      String string0 = jSONObject0.optString("wheel.json.JSONObject", "op");
      assertEquals("op", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("wheel.json.JSONArray", stringArray0);
      String string0 = jSONObject0.optString("|jU[j~_*n7");
      assertEquals("", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONObject("");
      int int0 = jSONObject0.optInt("", (-5240));
      assertEquals((-5240), int0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Long long0 = new Long((-1L));
      hashMap0.put(long0, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("ls|");
      assertEquals(0, int0);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Double double0 = new Double(4328.60749521);
      String string0 = JSONObject.valueToString(double0, 0, 92);
      assertNotNull(string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-90));
      String string0 = JSONObject.valueToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double double0 = new Double(4102.977445109);
      JSONObject.numberToString(double0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(262);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[262] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float float0 = new Float(1.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[]";
      stringArray0[2] = "[]";
      stringArray0[3] = "[]";
      stringArray0[4] = "[]";
      stringArray0[5] = "[]";
      stringArray0[6] = "[]";
      stringArray0[7] = "[]";
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.optLong("j\">%emJ7@Qt~||eG", 0L);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.putOpt("s?WSX_.69s xo'", hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("[]", (-1L));
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = JSONObject.quote("Sy\u0001E5'_yv/+{lPs1@&");
      assertEquals("\"Sy\\u0001E5'_yv/+{lPs1@&\"", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = JSONObject.quote("JW>>H\"");
      assertEquals("\"JW>>H\\\"\"", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("\b", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.154327141142871
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Float float0 = new Float(1555.9594);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.doubleToString(4328.60749521);
      assertEquals("4328.60749521", string0);
      
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap1.put(hashMap0, hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("to");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of to
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] is not a number.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "000";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-392), (-392));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity(object0);
      Double double0 = new Double((-716.73911885));
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("w>x'W*\"81N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w>x'W*\\\"81N\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Short short0 = new Short((short) (-360));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "";
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}f|NxL_wD9Qd)\"[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }f|NxL_wD9Qd)\"[
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(": ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, "1+mS|T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      int int0 = 315;
      JSONObject.valueToString(jSONArray0, 315, 867);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-185), (-185));
      try { 
        Long.decode("P]MRbQcQ]n9nU");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"P]MRbQcQ]n9nU\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String string0 = JSONObject.valueToString(boolean0, (-2601), 10);
      assertNotNull(string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(2775.52463);
      Double.isFinite(2775.52463);
      jSONObject0.put("", (Object) double0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "r3wn8XNZW'0|xT";
      try { 
        jSONObject0.getString("r3wn8XNZW'0|xT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"r3wn8XNZW'0|xT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("isformat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isformat\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
