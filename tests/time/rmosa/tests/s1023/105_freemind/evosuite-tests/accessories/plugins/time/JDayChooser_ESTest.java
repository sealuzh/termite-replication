/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 09:53:31 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.ImageObserver;
import java.awt.image.Raster;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.FileNotFoundException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JButton;
import javax.swing.JEditorPane;
import javax.swing.JList;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis((-50L));
      int int0 = ImageObserver.HEIGHT;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0967652698097203
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(28);
      jDayChooser0.updateUI();
      JButton[] jButtonArray0 = new JButton[1];
      JButton jButton0 = jDayChooser0.selectedDay;
      jButtonArray0[0] = null;
      jDayChooser0.weeks = jButtonArray0;
      // Undeclared exception!
      try { 
        jDayChooser0.updateUI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1701419978689667
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      Point point0 = jDayChooser0.getLocation();
      jDayChooser0.getLocation(point0);
      jDayChooser0.setMonth(28);
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1295), 28, (-1295));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Date date1 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(date1, date0);
      jDayChooser0.setMonth(41);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getCursor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      SystemColor systemColor0 = SystemColor.controlHighlight;
      jDayChooser0.setForeground(systemColor0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      jDayChooser0.setCalendar(calendar0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-50L));
      int int0 = ImageObserver.HEIGHT;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 415, (-50L), (-1893), (-1893), '');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.setAlignmentX(1142.0F);
      defaultTreeCellRenderer0.getFont();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.getTransferHandler();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6955852330739245
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4Z]5s^B+\"BZd");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(36, 36, 36);
      mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 0L, 36, 36, 'e');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1893), 415, (-1893), (-1893), 'd');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-4039), 252L, (-1404), 33, '');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(3);
      Locale locale0 = Locale.US;
      jDayChooser0.setLocale(locale0);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      jDayChooser0.setEnabled(true);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 162, 0L, (-3126), (-3126), '_', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      PDFDocument pDFDocument0 = new PDFDocument("shutdown");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(36, 36, 36);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setMonth(36);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis((-50L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.695518092694581
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis((-2039L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(10046);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.063182573009241
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<;u");
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getAutoscrolls();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 19, (-2865L), 164, 19, 'I');
      KeyEvent.getExtendedKeyCodeForChar(28);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.isWeekOfYearVisible();
      Color color0 = Color.white;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.isValidateRoot();
      ActionEvent actionEvent0 = new ActionEvent("", 1072, "day", 1041);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.white;
      jDayChooser0.setForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = ImageObserver.FRAMEBITS;
      jDayChooser0.setMonth(16);
      SystemColor systemColor0 = SystemColor.desktop;
      jDayChooser0.setSundayForeground(systemColor0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis((-2039L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuSelectionManager.defaultManager();
      jDayChooser0.init();
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[0];
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      sVGGeneratorContext_GraphicContextDefaults0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(iCC_ProfileArray0, (RenderingHints) null);
      ColorModel.getRGBdefault();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 226;
      intArray0[2] = 699;
      intArray0[3] = (-294);
      intArray0[4] = 0;
      Point point0 = new Point((-2791), 43);
      // Undeclared exception!
      try { 
        Raster.createBandedRaster((DataBuffer) null, 0, 226, (-4442), intArray0, intArray0, point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // DataBuffer cannot be null
         //
         verifyException("java.awt.image.Raster", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.GERMAN;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[10];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis((-15L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(false);
      int int0 = ImageObserver.HEIGHT;
      jDayChooser0.setMonth(2);
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent(":", 703, "day", 703);
      actionEvent0.paramString();
      actionEvent0.paramString();
      jDayChooser0.getSelectedDay();
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.GERMAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("14");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMaxSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getComponentListeners();
      jDayChooser0.setFocus();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 26, "=C4(<o dZku8`");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(2605);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1411));
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMaxDayCharacters(8714);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      jDayChooser0.drawDays();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 8714);
      jDayChooser0.focusLost(focusEvent0);
      JEditorPane jEditorPane0 = null;
      try {
        jEditorPane0 = new JEditorPane((String) null, "day");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JEditorPane", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = ImageObserver.HEIGHT;
      jDayChooser0.setMonth(2);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.decorationBordersVisible = true;
      jDayChooser0.setYear((-181));
      int int0 = ImageObserver.HEIGHT;
      jDayChooser0.setMonth(2);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, color0.getRed());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8962978287089136
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setRequestFocusEnabled(false);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getLocale();
      MockCalendar[] mockCalendarArray0 = new MockCalendar[0];
      JList<MockCalendar> jList0 = new JList<MockCalendar>(mockCalendarArray0);
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setBackground(color0);
      jDayChooser0.repaint();
      jDayChooser0.getLocale();
      jDayChooser0.setWeekOfYearVisible(false);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      Dimension dimension0 = metalComboBoxUI_MetalComboBoxLayoutManager0.preferredLayoutSize(jDayChooser0);
      jDayChooser0.setSize(dimension0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.drawDays();
      jDayChooser0.addListeners(6);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(28, "day", 28, 0, 0, 320, (-483), 100, 320, (-2459), 10000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month -483
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.decorationBackgroundColor;
      jDayChooser0.getDaysInMonth();
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getBackground();
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1404));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.696323676435319
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(164);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 8224);
      jDayChooser0.getTreeLock();
      jDayChooser0.focusGained(focusEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.repaint((-231L), 2991, (-1), 2991, 8937);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser1.setMonth(164);
      Color color0 = Color.orange;
      assertEquals(0, color0.getBlue());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isFocusable();
      jDayChooser0.getY();
      jDayChooser0.isWeekOfYearVisible();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        mockSimpleDateFormat0.parse("day", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      boolean boolean0 = true;
      jDayChooser0.setDecorationBackgroundVisible(true);
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      try { 
        fileUtil0.openInputStreamElement("day");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5785502760826877
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      
      jDayChooser1.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getComponentListeners();
      jDayChooser0.setMaxDayCharacters(4492);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-1));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.decorationBackgroundColor;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setEnabled(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      int int0 = jDayChooser0.getDay();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(164);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(22);
      assertEquals(22, jDayChooser0.getDay());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1404));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(3115);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Cursor.getDefaultCursor();
      jDayChooser0.maxSelectableDate = null;
      SystemColor systemColor0 = SystemColor.controlHighlight;
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jYearChooser0.setDayChooser(jDayChooser0);
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jYearChooser0.setDayChooser(jDayChooser0);
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      
      jDayChooser1.setWeekOfYearVisible(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser1.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser1.getDay());
  }
}
