/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 09:56:18 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.795338716182451
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setIndent("-expandEmpty-xhtml-xhtmt-nvwlkpe");
      outputFormat0.getLineSeparator();
      outputFormat0.getLineSeparator();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.getLineSeparator();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ES";
      outputFormat0.parseOptions(stringArray0, 2261);
      outputFormat1.setNewLineAfterNTags(2261);
      outputFormat1.getAttributeQuoteCharacter();
      outputFormat0.setIndent("|'*>*ATl@xe");
      outputFormat1.getAttributeQuoteCharacter();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals("|'*>*ATl@xe", outputFormat0.getIndent());
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0105301834040734
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-trimText";
      outputFormat0.setTrimText(true);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false, (String) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      outputFormat0.parseOptions(stringArray0, 1365);
      String string0 = outputFormat0.getEncoding();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertNull(string0);
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "C])y_";
      stringArray0[1] = "-suppressDeclaration";
      stringArray0[2] = "";
      stringArray0[3] = "-xhtml-xhtml=Z3`CCd^Gqm8";
      stringArray0[4] = "-newie";
      stringArray0[5] = "}-1";
      stringArray0[6] = "-indent";
      stringArray0[7] = "";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "-expandEmptZ9%gFx";
      stringArray0[1] = "";
      stringArray0[3] = "";
      outputFormat0.parseOptions(stringArray0, 1);
      String string0 = outputFormat0.getEncoding();
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("", string0);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Qsp4`Bi`", true);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "-padText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("d<o0qyG;QcIw\u0003", true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-lineSeparator";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isOmitEncoding());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-omitEncoding";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "-suppressDeclaration";
      stringArray0[5] = "";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isOmitEncoding());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "-newies";
      OutputFormat outputFormat0 = new OutputFormat("=M,");
      // Undeclared exception!
      outputFormat0.setIndentSize(2147483645);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setEncoding("1:iM?v");
      String[] stringArray0 = new String[4];
      outputFormat0.setNewLineAfterNTags(1);
      stringArray0[0] = "";
      stringArray0[1] = "n^";
      stringArray0[2] = "]=d4^[+y./x:Z7{{<GI";
      stringArray0[3] = "1:iM?v";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals("1:iM?v", outputFormat0.getEncoding());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "-indent";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "-lineSeparator";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(3, int0);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandmptynX>qe8", true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "-encoding";
      stringArray0[2] = "";
      stringArray0[3] = "-encoding";
      stringArray0[4] = "";
      outputFormat0.setIndentSize(1);
      stringArray0[5] = "UTF-8";
      stringArray0[6] = "-encoding";
      stringArray0[7] = "UTF-8";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setIndent("");
      outputFormat0.setIndent("-encoding");
      assertEquals("-encoding", outputFormat0.getIndent());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-encoding", false, "-encoding");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "-encoding";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0894379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setTrimText(true);
      outputFormat0.setLineSeparator("uf__JC\"c0Z");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D<K{N1z=GqV";
      stringArray0[1] = "D<K{N1z=GqV";
      stringArray0[2] = "D<K{N1z=GqV";
      stringArray0[3] = "C<-%X";
      stringArray0[4] = null;
      stringArray0[5] = "uf__JC\"c0Z";
      outputFormat0.parseOptions(stringArray0, 1);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setEncoding("nX>q$e");
      outputFormat0.setAttributeQuoteCharacter('\'');
      // Undeclared exception!
      try { 
        outputFormat1.setAttributeQuoteCharacter('/');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (/)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setTrimText(true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setLineSeparator("C<-%X");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "C<-%X";
      outputFormat0.parseOptions(stringArray0, 4152);
      outputFormat0.parseOptions(stringArray0, 4152);
      outputFormat0.setEncoding("e\"S{Rn$U;|");
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertEquals("e\"S{Rn$U;|", outputFormat0.getEncoding());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setTrimText(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isExpandEmptyElements();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setIndent("-encoding");
      outputFormat0.setNewlines(true);
      outputFormat0.setNewLineAfterNTags((-824));
      assertEquals((-824), outputFormat0.getNewLineAfterNTags());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setSuppressDeclaration(true);
      outputFormat1.isOmitEncoding();
      outputFormat1.getEncoding();
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      int int0 = outputFormat3.getNewLineAfterNTags();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9396395458476661
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      outputFormat0.setIndentSize(0);
      stringArray0[2] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "-newlines";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandmptynX>qe8", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandmptynX>qe8";
      stringArray0[1] = "-indentSize";
      stringArray0[2] = "-expandmptynX>qe8";
      stringArray0[3] = "-expandmptynX>qe8";
      stringArray0[4] = "-expandmptynX>qe8";
      stringArray0[5] = "-expandmptynX>qe8";
      stringArray0[6] = "-expandmptynX>qe8";
      stringArray0[7] = "-expandmptynX>qe8";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-expandmptynX>qe8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("We4y`9B#D", true, "We4y`9B#D");
      outputFormat0.setNewlines(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getLineSeparator();
      outputFormat0.isSuppressDeclaration();
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9713931362744876
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setNewlines(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent("");
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setEncoding("");
      outputFormat0.setPadText(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndent("");
      outputFormat0.isNewlines();
      outputFormat0.setIndentSize((-1547));
      outputFormat0.setExpandEmptyElements(false);
      OutputFormat outputFormat1 = new OutputFormat("", true);
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat0.getIndent();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setTrimText(false);
      outputFormat0.setIndent("");
      assertTrue(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ( )
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true);
      outputFormat0.setNewlines(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setXHTML(true);
      outputFormat0.setPadText(false);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setNewlines(true);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setPadText(false);
      boolean boolean0 = outputFormat0.isXHTML();
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1313650219229507
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(false);
      outputFormat0.isXHTML();
      outputFormat0.setNewlines(false);
      outputFormat0.setSuppressDeclaration(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setLineSeparator("-lineSeparator");
      outputFormat0.setNewLineAfterNTags(2);
      outputFormat0.isNewlines();
      outputFormat0.isXHTML();
      outputFormat0.getIndent();
      outputFormat0.setIndent(false);
      outputFormat0.setIndent(false);
      outputFormat0.getEncoding();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getLineSeparator();
      assertEquals("-lineSeparator", outputFormat0.getLineSeparator());
      
      outputFormat1.setSuppressDeclaration(true);
      assertFalse(outputFormat1.isXHTML());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setNewlines(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent("");
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setEncoding("");
      outputFormat0.setPadText(true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndent("");
      outputFormat0.setLineSeparator("");
      outputFormat0.setOmitEncoding(true);
      outputFormat0.isNewlines();
      outputFormat0.isPadText();
      outputFormat0.getIndent();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.isNewlines();
      outputFormat0.setOmitEncoding(false);
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      
      outputFormat0.setNewLineAfterNTags((-358));
      outputFormat0.setIndent(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-htl-newies";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "-htl-newies";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "-htl-newies";
      stringArray0[7] = "-htl-newies";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals((-358), int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-htl-newies", true, "-htl-newies");
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator("");
      String[] stringArray0 = new String[2];
      outputFormat0.setIndent(false);
      stringArray0[1] = "-htl-newies";
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat1.isTrimText());
      
      outputFormat1.setTrimText(false);
      outputFormat0.getAttributeQuoteCharacter();
      boolean boolean0 = outputFormat1.isTrimText();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("WMK", false, "WMK");
      outputFormat0.setIndent("");
      outputFormat0.setTrimText(false);
      outputFormat0.setEncoding("ma|xp");
      outputFormat0.setLineSeparator("vwAKXSc:J");
      outputFormat0.setIndent("8bUEL^");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.getLineSeparator();
      outputFormat0.getNewLineAfterNTags();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setIndent("WMK");
      outputFormat0.isTrimText();
      outputFormat0.isOmitEncoding();
      outputFormat0.setLineSeparator("-omitEncoding");
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertEquals("ma|xp", outputFormat0.getEncoding());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, int0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmptynX>q$e8", true, "-xhtmlnX>q$e8");
      outputFormat0.setTrimText(true);
      outputFormat0.isTrimText();
      outputFormat0.setEncoding("-expandEmptynX>q$e8");
      assertTrue(outputFormat0.isTrimText());
      assertEquals("-expandEmptynX>q$e8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ($)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Z?", true);
      outputFormat0.setAttributeQuoteCharacter('\"');
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("Z?", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = true;
      OutputFormat outputFormat0 = new OutputFormat("Zk$u3U|{-0Q~j#kZ", true);
      outputFormat0.setLineSeparator("Zk$u3U|{-0Q~j#kZ");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isPadText();
      outputFormat0.isPadText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Zk$u3U|{-0Q~j#kZ";
      stringArray0[1] = "D<K{N1z=GqV%,oe4qq";
      stringArray0[2] = "Zk$u3U|{-0Q~j#kZ";
      stringArray0[3] = "Zk$u3U|{-0Q~j#kZ";
      stringArray0[4] = "Zk$u3U|{-0Q~j#kZ";
      stringArray0[5] = "Zk$u3U|{-0Q~j#kZ";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.isOmitEncoding();
      outputFormat0.setNewLineAfterDeclaration(false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('`');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (`)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(">/s~-:m|mS,`e7e,M6y", true, "$O");
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("$O", outputFormat0.getEncoding());
      assertEquals(">/s~-:m|mS,`e7e,M6y", outputFormat0.getIndent());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent(false);
      assertTrue(outputFormat0.isTrimText());
      
      outputFormat0.setTrimText(false);
      boolean boolean0 = outputFormat0.isPadText();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isXHTML());
      
      String[] stringArray0 = new String[4];
      outputFormat0.setXHTML(true);
      stringArray0[0] = "-expandEmptZ9%gFx";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expandEmptZ9%gFx";
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String string0 = outputFormat0.getIndent();
      assertFalse(outputFormat0.isOmitEncoding());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isPadText());
      assertEquals("  ", string0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewlines());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent((String) null);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "n^";
      OutputFormat outputFormat0 = new OutputFormat("n^");
      String string1 = "-xhtml-xhtmt-nvwlkpe";
      int int0 = 1;
      String[] stringArray0 = new String[3];
      stringArray0[1] = "-xhtml-xhtmt-nvwlkpe";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("HLZC)", true);
      assertEquals("HLZC)", outputFormat0.getIndent());
      
      outputFormat0.setIndent(true);
      assertEquals("  ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("+Htr#p9=X", true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+Htr#p9=X";
      stringArray0[1] = "-expandEmptyZv9%gFx";
      stringArray0[2] = "+Htr#p9=X";
      stringArray0[3] = "+Htr#p9=X";
      stringArray0[4] = "UTF-8";
      stringArray0[5] = "+Htr#p9=X";
      stringArray0[6] = "";
      stringArray0[7] = "+Htr#p9=X";
      stringArray0[8] = "+Htr#p9=X";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setIndent("UTF-8");
      assertEquals("UTF-8", outputFormat0.getIndent());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Hu<aqmFA,I=GD";
      stringArray0[1] = "";
      stringArray0[3] = "Hu<aqmFA,I=GD";
      outputFormat0.parseOptions(stringArray0, 0);
      String string0 = outputFormat0.getEncoding();
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("", outputFormat0.getIndent());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", string0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-expandEmptZ9%gFx";
      outputFormat0.parseOptions(stringArray0, 0);
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("\n", string0);
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3755754015654476
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-htl-newiss";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isNewlines());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isXHTML());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isPadText());
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isTrimText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      String[] stringArray0 = new String[9];
      outputFormat0.parseOptions(stringArray0, 101);
      stringArray0[0] = "GOeShg}";
      stringArray0[1] = "a0skZQ*) 3";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "-omitEncoding";
      outputFormat0.parseOptions(stringArray0, 0);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals('\"', char0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("EWC4`D`s>1", false);
      assertEquals("EWC4`D`s>1", outputFormat0.getIndent());
      
      outputFormat0.setIndent(false);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("GOeShg}");
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      outputFormat0.setNewLineAfterDeclaration(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "GOeShg}";
      stringArray0[1] = "GOeShg}";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[17];
      outputFormat0.setLineSeparator("HZC)d^m0");
      stringArray0[0] = "HZC)d^m0";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("HZC)d^m0", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 110);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.549749826558804
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "=ZCCd^G)mr";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isNewlines());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat1.isOmitEncoding());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertTrue(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isPadText());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertEquals("  ", outputFormat1.getIndent());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isXHTML());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-4383));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4383
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expandEmptZ9%gFx";
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false);
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.isPadText();
      boolean boolean0 = outputFormat0.isPadText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "8ee//8/[AT";
      stringArray0[1] = null;
      stringArray0[2] = "Zk$u3U|{-0Q~j#kZ";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(0, int0);
      
      boolean boolean1 = outputFormat0.isXHTML();
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(boolean1 == boolean0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("n^");
      outputFormat0.setIndentSize(1);
      assertEquals(" ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize((-2921));
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[1];
      outputFormat0.setPadText(false);
      stringArray0[0] = "-expandEmptZ9%gFx";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isPadText();
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(boolean0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isTrimText());
      
      String[] stringArray0 = new String[17];
      outputFormat0.setTrimText(true);
      stringArray0[0] = "HZC)d^m0";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("+Htr#p9=X", false);
      outputFormat0.setSuppressDeclaration(false);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "+Htr#p9=X";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("+Htr#p9=X", outputFormat0.getIndent());
      assertEquals(1, int0);
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isNewlines());
      
      outputFormat0.setNewlines(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-expandEmptZ9%gFx";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isNewlines());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      outputFormat0.setIndent("HZC)d^m0");
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "HZC)d^m0";
      stringArray0[2] = "HZC)d^m0";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("HZC)d^m0", outputFormat0.getLineSeparator());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      outputFormat0.setEncoding((String) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 3670);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("]u4WdNj,etty(sg");
      outputFormat0.isNewLineAfterDeclaration();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('2');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (2)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("U+jhL%WtZ", true, "-htl-newiss");
      String[] stringArray0 = new String[6];
      outputFormat0.setOmitEncoding(false);
      stringArray0[0] = "-htl-newiss";
      stringArray0[1] = "-htl-newiss";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("-htl-newiss", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("U+jhL%WtZ", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, int0);
  }
}
