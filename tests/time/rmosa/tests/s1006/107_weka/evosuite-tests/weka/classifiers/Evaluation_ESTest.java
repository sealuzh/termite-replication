/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 21:00:14 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomForest;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.Loader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.truePositiveRate(103);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = 6.0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      stringArray0[2] = "@relation";
      stringArray0[3] = ".arff";
      stringArray0[4] = "@relation";
      stringArray0[5] = ".bsi";
      stringArray0[6] = "@data";
      Evaluation.main(stringArray0);
      evaluation0.rootMeanPriorSquaredError();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("\nThe probability of a word given the class\n", instances0, 5, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: 
         // The probability of a word given the class
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1922020009758243
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = lMT0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("!PJOctx)Fj^H]}aVBdZ");
      lMT0.buildClassifier(instances0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 0;
      gaussianProcesses0.getFilterType();
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2);
      evaluation0.weightedFalseNegativeRate();
      try { 
        evaluation0.updateStatsForPredictor(0.95, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4946236559139785
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      testInstances0.toString();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation1.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Unclassified = 2.0;
      evaluation0.toSummaryString(true);
      Reader reader0 = null;
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4946236559139785
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1780.39993033;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance(1780.39993033, doubleArray0);
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation1.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getSuppressMappingReport");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString(false);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation.getGlobalInfo(gaussianProcesses0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.trueNegativeRate(0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1731.2507060542;
      doubleArray0[2] = (double) 0;
      doubleArray0[19] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(1731.2507060542, doubleArray0);
      denseInstance0.setDataset(instances0);
      evaluation0.falseNegativeRate((-357913946));
      // Undeclared exception!
      try { 
        evaluation0.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((Random) mockRandom0);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      TestInstances.forCapabilities(capabilities1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.relativeAbsoluteError();
      evaluation0.kappa();
      evaluation0.unclassified();
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      capabilities0.setOwner(gaussianProcesses0);
      capabilities0.disableAllClassDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      costSensitiveClassifier0.setCostMatrixSource(selectedTag0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1065.5756387266);
      doubleArray0[1] = 1.1000000014901161;
      doubleArray0[2] = 0.07500000298023224;
      doubleArray0[3] = 2989.1245148;
      doubleArray0[4] = 921.3;
      doubleArray0[5] = 6.0;
      doubleArray0[6] = (-113.3747092051);
      doubleArray0[7] = 2489.531255203;
      doubleArray0[8] = (-2015.61711667798);
      DenseInstance denseInstance0 = new DenseInstance(0.5772156649015329, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1884742833636837
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1780.39993033;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(1780.39993033, doubleArray0);
      denseInstance0.setDataset(instances0);
      evaluation0.falseNegativeRate((-357913946));
      evaluation0.updateStatsForPredictor(0.17499999701976776, denseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.recall(16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.185684493992781
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1780.39993033;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(1780.39993033, doubleArray0);
      denseInstance0.setDataset(instances0);
      evaluation0.falseNegativeRate((-357913946));
      Float float0 = new Float((double) (-2));
      evaluation0.evaluateModelOnce((double) 1, (Instance) denseInstance0);
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      instances1.randomize(mockRandom0);
      evaluation0.kappa();
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (-576.115178);
      doubleArray0[1] = (-2069.0238056420603);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 5134.0837655102;
      doubleArray0[4] = (-249.4044290979);
      doubleArray0[5] = 5134.0837655102;
      doubleArray0[7] = (double) 0;
      doubleArray0[7] = 5134.0837655102;
      DenseInstance denseInstance0 = new DenseInstance(5134.0837655102, doubleArray0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "O9z");
      assertNotNull(string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OPMw~]VTtA");
      SMO sMO0 = new SMO();
      instances0.indexOf(sMO0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(3071);
      double double1 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.KBMeanInformation();
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      TestInstances.forCapabilities(capabilities1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-1);
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      double double1 = evaluation0.unweightedMicroFmeasure();
      evaluation0.setNumericPriorsFromBuffer();
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.totalCost();
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-2);
      int[] intArray0 = new int[1];
      intArray0[0] = 494;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-99.0), intArray0, 1286);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      KDTree kDTree0 = new KDTree();
      evaluation0.unweightedMacroFmeasure();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation1.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1881966855104402
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1780.39993033;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(1780.39993033, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(1927.073350837, doubleArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_Correct = (double) (-2);
      evaluation1.relativeAbsoluteError();
      double double0 = evaluation1.errorRate();
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(72);
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 1622, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.toSummaryString("dontReplaceMissingTipText", false);
      evaluation0.equals(instances0);
      evaluation0.getHeader();
      // Undeclared exception!
      try { 
        instances0.trainCV((-102261132), (-102261132));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be at least 2!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, (-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumFolds = 2922;
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, (-1.7976931348623157E308));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBInformation();
      String[] stringArray0 = new String[3];
      Evaluation.main(stringArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2.0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation2.makeDistribution((-1360.06325545363));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1360
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5895213795772005
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setOptions");
      testInstances0.setNumDate((-3939));
      testInstances0.setNumNominalValues((-3939));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8778197848487042
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.useNoPriors();
      evaluation0.pctUnclassified();
      evaluation0.correlationCoefficient();
      evaluation0.toSummaryString();
      evaluation0.setPriors(instances0);
      KDTree kDTree0 = new KDTree();
      assertEquals(0.01, kDTree0.getMinBoxRelWidth(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      evaluation0.equals(evaluation0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.errorRate();
      evaluation1.getDiscardPredictions();
      SMOreg sMOreg0 = new SMOreg();
      evaluation0.setNumericPriorsFromBuffer();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.95;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      evaluation1.falseNegativeRate(0);
      evaluation1.areaUnderROC((-3));
      Instance instance0 = BallNode.calcCentroidPivot(190, 0, (int[]) null, instances1);
      try { 
        evaluation0.evaluateModelOnce(0.0, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1902232039517582
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toClassDetailsString("GFy");
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = true;
      evaluation0.setDiscardPredictions(true);
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = 'O';
      charArray0[2] = 'E';
      charArray0[3] = '.';
      evaluation0.num2ShortID(2617, charArray0, 2617);
      evaluation0.weightedTruePositiveRate();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(2617);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2617
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      PriorityQueue<SimpleLogistic> priorityQueue0 = new PriorityQueue<SimpleLogistic>();
      HashSet<SimpleLogistic> hashSet0 = new HashSet<SimpleLogistic>(priorityQueue0);
      instances0.removeAll(hashSet0);
      evaluation0.setDiscardPredictions(true);
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.falsePositiveRate(109);
      double double1 = evaluation0.avgCost();
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) evaluation0;
      Attribute attribute0 = new Attribute("Ron Kohavi and George H. John", 72);
      instances0.setClass(attribute0);
      MockRandom mockRandom0 = new MockRandom((-159L));
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 72, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFEntropyGain();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("dM_JKZQ?hH| hHTGT1");
      testInstances0.setNumDate(4);
      Instances instances0 = testInstances0.generate("getClass");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      double double0 = evaluation0.numFalsePositives((-1));
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double1 = evaluation0.trueNegativeRate(11);
      assertEquals(double1, double0, 0.01);
      
      evaluation0.getHeader();
      double double2 = evaluation0.correct();
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double0 = evaluation0.priorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.getHeader();
      boolean boolean0 = evaluation0.equals(textDirectoryLoader0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate(".bsi");
      Evaluation evaluation1 = new Evaluation(instances0);
      double[][] doubleArray0 = new double[0][8];
      evaluation1.m_ConfusionMatrix = doubleArray0;
      // Undeclared exception!
      try { 
        evaluation1.falsePositiveRate(98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1846726042887588
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1780.39993033;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(1780.39993033, doubleArray0);
      evaluation0.falseNegativeRate((-357913946));
      double double0 = evaluation0.m_TotalSizeOfRegions;
      try { 
        evaluation0.evaluateModelOnce((double) 1, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("dM_JKZQ?hH| hHTGT1");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.useNoPriors();
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Capabilities capabilities0 = classificationViaRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("\nRandomTree\n==========\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.numFalsePositives(1);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation1.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double1 = evaluation0.trueNegativeRate(41);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      MockRandom mockRandom0 = new MockRandom((-157L));
      MockRandom mockRandom1 = new MockRandom((-2));
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses0, instances0, 10, (Random) mockRandom1, (Object[]) gaussianProcesses0.TAGS_FILTER);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 794.07;
      doubleArray0[3] = (-2680.630229797854);
      doubleArray0[0] = (double) 2;
      testInstances0.listOptions();
      doubleArray0[6] = (double) 1;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1156, (char[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.49645390070921985
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation2.toMatrixString("T]sX]x5+N");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.delete();
      evaluation0.precision(3999);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1780.39993033;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(1780.39993033, doubleArray0);
      double double0 = evaluation0.m_SumClassPredicted;
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.SFMeanPriorEntropy();
      evaluation0.areaUnderROC((-1));
      try { 
        evaluation0.evaluateModelOnce(1.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("kernelTipText");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_TotalSizeOfRegions;
      evaluation1.m_SumErr = (double) (-1);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.equals(evaluation1);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.setNumericPriorsFromBuffer();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.SFPriorEntropy();
      evaluation2.weightedFalseNegativeRate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      KDTree kDTree0 = new KDTree();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-2533));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.equals(instances0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(0, true, false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.setDiscardPredictions(false);
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      capabilities0.setOwner(gaussianProcesses0);
      capabilities0.disableAllClassDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4947368421052632
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1780.39993033;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(1780.39993033, doubleArray0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelational(474);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      instances0.clear();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC((-1));
      DenseInstance denseInstance0 = new DenseInstance((-4.0), doubleArray0);
      evaluation0.falseNegativeRate(6);
      testInstances0.setNumInstancesRelational((-383));
      evaluation0.areaUnderROC((-1995138716));
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|YT");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      testInstances0.setClassIndex((-1717986918));
      testInstances0.setNumRelationalString(2);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      evaluation0.num2ShortID(1873, (char[]) null, 0);
      double double0 = evaluation0.numFalseNegatives((-1229));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.addNumericTrainClass(478.36, (-2565.530279871));
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray1 = evaluation2.getClassPriors();
      assertNotNull(doubleArray1);
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "Available from http://www.cs.umd.edu/~mount/ANN/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(0, true, true);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      evaluation0.precision(0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DenseInstance denseInstance0 = new DenseInstance(9);
      instances0.add((Instance) denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tOutput help information.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.m_TotalSizeOfRegions;
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.equals(evaluation1);
      // Undeclared exception!
      try { 
        evaluation2.num2ShortID(1751, (char[]) null, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      evaluation0.m_SumClassPredicted = 0.0;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(0, true, true);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      evaluation0.precision(0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      evaluation0.rootMeanSquaredError();
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, binarySparseInstance0, 0.95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("GFy");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.numFalsePositives((-1));
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.getCapabilities();
      evaluation0.toCumulativeMarginDistributionString();
      Evaluation.makeOptionString(naiveBayesMultinomialUpdateable0, true);
      evaluation0.trueNegativeRate((-1));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      intArray0[3] = (-2);
      intArray0[4] = (-1);
      intArray0[5] = 1847;
      intArray0[6] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), intArray0, (-554));
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC((-1031907725));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1031907725);
      doubleArray0[2] = (double) (-1031907725);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1780.39993033;
      doubleArray0[5] = (double) (-1031907725);
      doubleArray0[6] = 661.789582300287;
      doubleArray0[7] = Double.NaN;
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, doubleArray0);
      evaluation0.falseNegativeRate((-2));
      double double0 = evaluation0.m_TotalSizeOfRegions;
      try { 
        evaluation0.evaluateModelOnce(0.22499999403953552, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    \n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      SparseInstance sparseInstance0 = new SparseInstance(496);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String[] stringArray0 = new String[0];
      textDirectoryLoader1.setOptions(stringArray0);
      Evaluation.main(stringArray0);
      evaluation0.rootMeanPriorSquaredError();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(".arff", instances0, 5, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .arff
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-2);
      int[] intArray0 = new int[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-99.0), intArray0, 1286);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.falseNegativeRate((-1091));
      Float float0 = new Float(1286.0);
      try { 
        evaluation0.evaluateModelOnce((double) 494, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 494
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      evaluation0.equals(evaluation0);
      SMOreg sMOreg0 = new SMOreg();
      evaluation0.setNumericPriorsFromBuffer();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.95;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      evaluation0.m_TrainClassVals = doubleArray0;
      instances0.toArray();
      // Undeclared exception!
      try { 
        evaluation0.addNumericTrainClass(0, (-2565.530279871));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.useNoPriors();
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.addNumericTrainClass(0.0, (-219.3));
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("GFy");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = 62.744151239657;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = 1453.54;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForPredictor((-2.0), binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[1];
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      textDirectoryLoader1.setRetrieval(1024);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      DenseInstance denseInstance0 = new DenseInstance(2643.413599, doubleArray0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      evaluation0.equals(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1780.9428824880752;
      gaussianProcesses0.getFilterType();
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(1780.9428824880752, doubleArray0);
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      double double0 = evaluation0.unweightedMicroFmeasure();
      double double1 = evaluation0.meanAbsoluteError();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "main");
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      MockRandom mockRandom0 = new MockRandom((-157L));
      double double0 = evaluation0.falsePositiveRate(483);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.correct();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SMOreg sMOreg0 = new SMOreg();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.addNumericTrainClass((-2565.530279871), 1);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-618.9);
      evaluation0.m_NumTrainClassVals = (-3298);
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[1] = 497.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0E10, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(497.0, doubleArray0);
      // Undeclared exception!
      try { 
        evaluation0.addNumericTrainClass(1.0E10, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3298
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      MockRandom mockRandom0 = new MockRandom((-157L));
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 72, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 0);
      MockRandom mockRandom0 = new MockRandom((-1971L));
      try { 
        evaluation0.crossValidateModel((Classifier) regressionByDiscretization0, instances0, 106, (Random) mockRandom0, (Object[]) regressionByDiscretization0.TAGS_ESTIMATOR);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("dM_JKZQ2hH| hHTGT1");
      testInstances0.setNumDate(4);
      MockRandom mockRandom0 = new MockRandom((-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockRandom mockRandom1 = new MockRandom((-3082L));
      try { 
        evaluation0.crossValidateModel((Classifier) serializedClassifier0, instances0, (-1), (Random) mockRandom1, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(14);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      textDirectoryLoader0.getDataSet();
      int int0 = 84;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(14, charArray0, 3524);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominalValues((-70));
      ZeroR zeroR0 = new ZeroR();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.runClassifier(costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
      Evaluation.getGlobalInfo(zeroR0);
      KDTree kDTree0 = new KDTree();
      Instances instances0 = null;
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominalValues((-70));
      ZeroR zeroR0 = new ZeroR();
      AbstractClassifier.runClassifier(zeroR0, testInstances0.DEFAULT_WORDS);
      Evaluation.getGlobalInfo(zeroR0);
      KDTree kDTree0 = new KDTree();
      assertEquals(0.0, kDTree0.measureTreeSize(), 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@relation";
      stringArray0[1] = "getRevision";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "@relation";
      stringArray0[4] = ".arff";
      stringArray0[5] = ".bsi";
      stringArray0[6] = "@relation";
      stringArray0[7] = ".arff";
      evaluation0.m_ClassNames = stringArray0;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation2 = new Evaluation(instances1, (CostMatrix) null);
      KDTree kDTree0 = new KDTree();
      double double0 = evaluation1.KBRelativeInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.numInstances();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.95, intArray0, 0);
      double double0 = evaluation0.trueNegativeRate(2);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numFalseNegatives(1);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("GFy");
      MockRandom mockRandom0 = new MockRandom((-1));
      instances0.randomize(mockRandom0);
      BallNode.calcCentroidPivot(499, (-1), (int[]) null, instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = ' ';
      charArray0[2] = 'v';
      charArray0[3] = 'H';
      String string0 = evaluation0.num2ShortID(22, charArray0, 499);
      assertEqualsv", string0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      evaluation0.equals(evaluation0);
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.toCumulativeMarginDistributionString();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1086997899));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 2609.1501;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = 3.4;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 3003.98);
      KStar kStar0 = new KStar();
      try { 
        Evaluation.evaluateModel((Classifier) null, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getFilter();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@data";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".arff";
      stringArray0[3] = ".arff";
      stringArray0[4] = "@relation";
      stringArray0[5] = ".bsi";
      filteredClassifier0.setOptions(stringArray0);
      String[] stringArray1 = new String[0];
      textDirectoryLoader0.setOptions(stringArray1);
      Evaluation.main(stringArray1);
      evaluation0.areaUnderROC(111);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      evaluation0.sizeOfPredictedRegions();
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[][] doubleArray1 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray1.length);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1634.82534486399);
      doubleArray0[1] = (-4014.50304317);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getFilter();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances testInstances0 = new TestInstances();
      int int0 = 494;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 494;
      doubleArray0[1] = (double) (-2);
      int[] intArray0 = new int[1];
      intArray0[0] = 494;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-99.0), intArray0, 1286);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-2);
      int[] intArray0 = new int[1];
      intArray0[0] = 494;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-99.0), intArray0, 1286);
      testInstances0.setNumRelational(494);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      evaluation0.num2ShortID(19, charArray0, 19);
      evaluation0.weightedTruePositiveRate();
      MockRandom mockRandom0 = new MockRandom(968L);
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tOutput help information.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(460);
      DenseInstance denseInstance0 = new DenseInstance((-1), (double[]) null);
      evaluation0.falseNegativeRate(3765);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      double double1 = (-1438.5075194505);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance(2203.87919, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom((-53L));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("@relation");
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4767.096820589301;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-53L);
      doubleArray0[3] = (-432.7);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2.0), doubleArray0);
      try { 
        principalComponents0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("@data");
      evaluation0.unweightedMicroFmeasure();
      MockRandom mockRandom0 = new MockRandom(0L);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tOutput help information.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.m_TotalSizeOfRegions;
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      boolean boolean0 = evaluation0.m_NoPriors;
      assertFalse(boolean0);
      
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(13);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.errorRate();
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.toClassDetailsString();
      org.evosuite.runtime.Random.setNextRandom(5);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getFilter();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPredicted;
      MockRandom mockRandom0 = new MockRandom(98);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) textDirectoryLoader0;
      evaluation0.evaluateModel((Classifier) filteredClassifier0, instances0, objectArray0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getFilter();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPredicted;
      try { 
        evaluation0.evaluateModel((Classifier) filteredClassifier0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", 107);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArrayList<GaussianProcesses> arrayList0 = new ArrayList<GaussianProcesses>();
      PriorityQueue<NaiveBayesMultinomialUpdateable> priorityQueue0 = new PriorityQueue<NaiveBayesMultinomialUpdateable>();
      instances0.containsAll(priorityQueue0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '/';
      charArray0[4] = '{';
      charArray0[5] = '{';
      charArray0[6] = '{';
      charArray0[7] = '{';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-3531), charArray0, 3524);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1780.9428824880752;
      gaussianProcesses0.getFilterType();
      doubleArray0[2] = (double) 0;
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      String string0 = evaluation0.num2ShortID(0, charArray0, 93);
      assertEquals("                                                                                            2", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("GFy");
      BallNode.calcCentroidPivot(485, (-1), (int[]) null, instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      LinkedList<DenseInstance> linkedList0 = new LinkedList<DenseInstance>();
      ArrayList<SparseInstance> arrayList0 = new ArrayList<SparseInstance>();
      instances0.addAll(6, (Collection<? extends Instance>) arrayList0);
      KDTree kDTree0 = new KDTree();
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 1217.268534);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, "Can't open file ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = testInstances0.generate("getC");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.equals((Object) null);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-925), true, true);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedData(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      double double0 = evaluation0.m_ClassPriorsSum;
      double double1 = evaluation0.falsePositiveRate((-1));
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setNumString(196);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.numFalsePositives(63);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Object object0 = new Object();
      try { 
        evaluation0.evaluateModel((Classifier) naiveBayesMultinomialUpdateable0, instances1, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      double double1 = evaluation1.numTruePositives(367);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      Float float0 = new Float((double) (-2));
      evaluation0.kappa();
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPredicted;
      int int0 = 7;
      evaluation0.fMeasure(7);
      Instances instances1 = null;
      try {
        instances1 = new Instances((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("GFy");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_SumPriorEntropy = 993.7;
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tOutput help information.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      LogitBoost logitBoost0 = new LogitBoost();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double0 = evaluation0.m_MinTarget;
      double double1 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double2, 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2;
      evaluation0.matthewsCorrelationCoefficient(15);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities capabilities0 = filteredClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("\tCFS Subset Evaluator\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.numFalseNegatives(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("dM_JKZQ?hH| hHTGT1");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.confusionMatrix();
      evaluation0.weightedFalsePositiveRate();
      double double0 = (-2.0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // SVMLightLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("dM_JKZQ?hH| hHTGT1");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(493);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.numTrueNegatives((-1));
      evaluation0.areaUnderROC((-2));
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      assertEquals(1, sparseInstance0.numValues());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      KDTree kDTree0 = new KDTree();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.recall((-441));
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClassPredicted;
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBInformation();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      evaluation0.numTruePositives((-1));
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      String string0 = "D=>vIyzX2A_}-`";
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.weightedAreaUnderROC();
      // Undeclared exception!
      try { 
        mockRandom0.doubles((-1667L), 0.0, (-2148.1106188940958));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("dM_JKZQ?hH| hHTGT1");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderROC((-2));
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      RandomForest randomForest0 = new RandomForest();
      Capabilities capabilities0 = randomForest0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("!VBe");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.pctUnclassified();
      assertEquals(double1, double0, 0.01);
      
      DecisionTable decisionTable0 = new DecisionTable();
      boolean boolean0 = evaluation0.equals(testInstances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[2] = '/';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(2430, charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("GFy");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.precision(27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("    \n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString();
      evaluation0.setPriors(instances0);
      KDTree kDTree0 = new KDTree();
      assertEquals(2, KDTree.WIDTH);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.toSummaryString(".bsi", true);
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = (-1285);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-1285));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      KStar kStar0 = new KStar();
      try { 
        Evaluation.evaluateModel((Classifier) kStar0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.lazy.KStar:
         // 
         // -B <num>
         // \tManual blend setting (default 20%)
         // 
         // -E
         // \tEnable entropic auto-blend setting (symbolic class only)
         // 
         // -M <char>
         // \tSpecify the missing value treatment mode (default a)
         // \tValid options are: a(verage), d(elete), m(axdiff), n(ormal)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation.makeOptionString(gaussianProcesses0, false);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "-z <class name>\n");
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("XxD");
      try { 
        Evaluation.handleCostOption(" ", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("attributes", arrayList0, 23);
      CostMatrix costMatrix0 = new CostMatrix(23);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("GFy");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1717986916));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1717986916
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(0.0, (double[]) null);
      Stacking stacking0 = new Stacking();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) stacking0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setOptions");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.KBRelativeInformation();
      evaluation0.pctUnclassified();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      evaluation0.equals(checkOptionHandler0);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1780.9428824880752;
      gaussianProcesses0.getFilterType();
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(1780.9428824880752, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) gaussianProcesses0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("GFy");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) votedPerceptron0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MinTarget;
      double double1 = evaluation0.weightedPrecision();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Version.VERSION = "";
      double double0 = evaluation0.numFalseNegatives((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      SparseInstance sparseInstance0 = new SparseInstance(1);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      capabilities0.getClassCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = Double.NaN;
      evaluation0.weightedFalsePositiveRate();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      try { 
        middleOutConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.useNoPriors();
      try { 
        evaluation0.toClassDetailsString(".arff");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances1 = new TestInstances();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-99.0), (int[]) null, 10);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedAreaUnderROC();
      KDTree kDTree0 = new KDTree();
      evaluation0.KBRelativeInformation();
      System.setCurrentTimeMillis(0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance0, 6.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.evaluateModel("8;xa<-:JOjkvGz6%P", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name 8;xa<-:JOjkvGz6%P.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        Evaluation.handleCostOption("debugTipText", (-2615));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 15);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("attributes", arrayList0, 23);
      CostMatrix costMatrix0 = new CostMatrix(23);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.useNoPriors();
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
