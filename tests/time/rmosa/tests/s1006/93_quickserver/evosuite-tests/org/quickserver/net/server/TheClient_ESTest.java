/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 21:02:50 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.DataType;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.QuickServerConfig;
import org.quickserver.util.xmlreader.Secure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0543110595891974
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setCommunicationLogging(true);
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getLocalSocketAddress();
      mockSocket0.bind((SocketAddress) null);
      theClient0.setSocket(mockSocket0);
      theClient0.getClientBinaryHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.getServer();
      theClient0.setTimeoutMsg("db-object-pool");
      theClient0.toString();
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Close Connection)}", string0);
      
      theClient0.getClientObjectHandler();
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      theClient0.getSocketChannel();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      MockSocket mockSocket1 = new MockSocket();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      theClient0.getAuthenticator();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      mockSocket0.close();
      theClient0.setSocket(mockSocket0);
      theClient0.getSocketChannel();
      theClient0.getSocket();
      theClient0.toString();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.getSocketChannel();
      System.setCurrentTimeMillis((-1L));
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.getSocketChannel();
      theClient0.getClientExtendedEventHandler();
      theClient0.toString();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.toString();
      theClient0.getAuthenticator();
      theClient0.getSocketChannel();
      theClient0.getClientBinaryHandler();
      theClient0.getAuthenticator();
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Max Connection)}", string0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(9877);
      QuickServer quickServer0 = new QuickServer();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.configQuickServer(quickServerConfig0);
      Object[] objectArray0 = new Object[0];
      theClient0.setServer(quickServer0);
      theClient0.toString();
      theClient0.getServer();
      assertEquals(9877, theClient0.getTimeout());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(500L);
      TheClient theClient0 = new TheClient();
      theClient0.setSocket((Socket) null);
      theClient0.setSocket((Socket) null);
      theClient0.setClientEvent((ClientEvent) null);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.quickserver.net.server.TheClient", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getSocketChannel();
      theClient0.getClientEvent();
      theClient0.getAuthenticator();
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis(500L);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer(",>EmB", 13);
      Secure secure0 = quickServer0.getSecure();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) secure0;
      objectArray0[1] = (Object) theClient0;
      objectArray0[2] = (Object) theClient0;
      objectArray0[3] = (Object) theClient0;
      objectArray0[4] = (Object) secure0;
      objectArray0[5] = (Object) ",>EmB";
      quickServer0.initService(objectArray0);
      quickServer0.setClientEventHandler("sCb");
      quickServer0.makeServerSocket();
      theClient0.setServer(quickServer0);
      theClient0.setCommunicationLogging(true);
      theClient0.getClientBinaryHandler();
      theClient0.setMaxAuthTry(4242);
      theClient0.setTimeout(0);
      theClient0.getClientExtendedEventHandler();
      theClient0.toString();
      theClient0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getSocket();
      theClient0.getClientBinaryHandler();
      theClient0.getSocket();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      assertEquals(4242, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.getSocket();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      QuickServer quickServer0 = new QuickServer("org.quickserver.net.server.TheClient");
      theClient0.setServer(quickServer0);
      theClient0.setClientAuthenticationHandler(authenticator0);
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.getSocket();
      theClient0.getAuthenticator();
      System.setCurrentTimeMillis((-15L));
      org.quickserver.net.qsadmin.Authenticator authenticator1 = new org.quickserver.net.qsadmin.Authenticator();
      SocketChannel.open();
      System.setCurrentTimeMillis((-15L));
      theClient0.getClientAuthenticationHandler();
      theClient0.getAuthenticator();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxConnectionMsg();
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(9877);
      CommandHandler commandHandler0 = new CommandHandler();
      QuickServer quickServer0 = new QuickServer();
      Object[] objectArray0 = new Object[0];
      quickServer0.setStoreObjects(objectArray0);
      quickServer0.setTimeout(0);
      theClient0.setServer(quickServer0);
      theClient0.toString();
      theClient0.getServer();
      assertEquals(9877, theClient0.getTimeout());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      ClientCommandHandler clientCommandHandler0 = theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler(clientCommandHandler0);
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("D_/#Xg:8");
      theClient0.setMaxAuthTryMsg("");
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.toString();
      theClient0.getClientEvent();
      theClient0.getMaxAuthTryMsg();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.getServer();
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("u+", 958);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("...");
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("83p93t'$NFdXuO2cwg");
      theClient0.getMaxAuthTryMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("~2*c(");
      Data data0 = new Data();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)0;
      data0.setPassword(byteArray0);
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte) (-102);
      data0.setPassword(byteArray0);
      theClient0.setClientData(data0);
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.getSocketChannel();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.198616238838059
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      Data data0 = new Data();
      theClient0.getClientData();
      theClient0.setMaxAuthTry((-2772));
      TheClient theClient1 = new TheClient();
      theClient1.getClientObjectHandler();
      theClient0.setTrusted(false);
      theClient1.getAuthenticator();
      theClient1.setAuthenticator((Authenticator) null);
      theClient0.getClientBinaryHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientData();
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      theClient1.getTrusted();
      theClient0.getClientAuthenticationHandler();
      MockSocket mockSocket0 = new MockSocket();
      theClient1.getSocketChannel();
      theClient1.getClientAuthenticationHandler();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient1.getAuthenticator();
      theClient0.getMaxAuthTry();
      theClient1.getClientData();
      theClient0.getTrusted();
      assertFalse(theClient0.getTrusted());
      
      theClient1.getSocketChannel();
      theClient1.getClientWriteHandler();
      theClient1.getAuthenticator();
      theClient1.getClientBinaryHandler();
      assertEquals(0, theClient1.getMaxAuthTry());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getClientData();
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      nonBlockingClientHandler0.getSocketChannel();
      theClient0.setSocketChannel((SocketChannel) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      int int0 = 2777;
      QuickServer quickServer0 = new QuickServer();
      DataType dataType0 = DataType.OUT;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)1;
      // Undeclared exception!
      try { 
        authenticator0.handleAuthentication((ClientHandler) nonBlockingClientHandler0, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // String/Byte mode not implemented!
         //
         verifyException("org.quickserver.net.server.QuickAuthenticationHandler", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1952296882816973
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.getServer();
      theClient0.getSocket();
      theClient0.toString();
      theClient0.getClientData();
      theClient0.setMaxAuthTry(83);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.toString();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.getClientWriteHandler();
      theClient0.setMaxConnectionMsg("2U$J\"ayfY^gy[1");
      theClient0.getClientAuthenticationHandler();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(83, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout((-1617));
      theClient0.getTimeout();
      theClient0.setMaxAuthTry((-1617));
      assertEquals((-1617), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("{TheClient ");
      theClient0.getTimeoutMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      theClient0.setMaxAuthTry(74);
      theClient0.toString();
      theClient0.setTimeout(74);
      theClient0.setTimeout(74);
      theClient0.getTimeout();
      theClient0.setMaxAuthTry(74);
      assertEquals(74, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.setTimeoutMsg("");
      theClient0.getTimeoutMsg();
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TheClient theClient0 = new TheClient();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(theClient0.getTrusted());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      ClientEventHandler clientEventHandler0 = theClient0.getClientEventHandler();
      theClient0.setClientEventHandler(clientEventHandler0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getTimeout();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTryMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }
}
