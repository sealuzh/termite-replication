/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 20:45:22 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8751832500087795
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject2 = jSONObject1.put("Null key.", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(20);
      Writer writer0 = jSONObject1.write(stringWriter0);
      jSONObject2.write(writer0);
      int int0 = 1025;
      JSONObject.valueToString(jSONObject1, 1025, 1025);
      String string0 = "m:63`/}} 5+@Y";
      try { 
        jSONObject0.getJSONArray("m:63`/}} 5+@Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m:63`/}} 5+@Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject.doubleToString(1453.81);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, (-70125688), 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject.valueToString("(OX ExJI|");
      JSONObject.valueToString(byte0, (byte)48, (-139831379));
      jSONObject0.optDouble("&~@,QM");
      Byte.compare((byte) (-46), (byte)118);
      JSONObject.quote("getlistIterator");
      jSONObject0.toString();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(44, 1);
      jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8083695164005986
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.listIterator();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(",PK-j[~]xs WH", (-1120.904946575));
      int int0 = jSONObject0.optInt(",PK-j[~]xs WH");
      assertEquals((-1120), int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-4));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.length();
      Byte byte1 = new Byte((byte)16);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", byte1);
      jSONObject1.optInt("] is not a JSONArray.");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("for", (Map) hashMap0);
      JSONObject.valueToString("for", 59, 2189);
      Double double0 = new Double(1.0);
      boolean boolean0 = jSONObject1.isNull("for");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0978100054573563
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000030", 0L);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      jSONObject0.getDouble("java.lang.Long@00000000030");
      JSONObject jSONObject2 = jSONObject1.put("rev", (Collection) linkedList1);
      int int0 = (-517);
      jSONObject2.toString((-517), (-517));
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject((Object) jSONObject2, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONObject", 1L);
      double double0 = jSONObject0.getDouble("wheel.json.JSONObject");
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Boolean boolean0 = Boolean.valueOf("0");
      JSONObject jSONObject1 = jSONObject0.put("0", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("0");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "null");
      JSONObject jSONObject0 = new JSONObject("null", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8833703845117034
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Object) "wheel.json.JSONArray");
      JSONObject jSONObject1 = jSONObject0.put("@&b4:(6", (long) 0);
      jSONObject1.toString(120, 5);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "_Zo?G$e[~>V@feip");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("_Zo?G$e[~>V@feip", true);
      jSONObject1.has("_Zo?G$e[~>V@feip");
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.101241191122625
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isintern", (Object) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("for", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(47);
      jSONObject2.write(stringWriter0);
      jSONObject1.optInt("for");
      Short short0 = new Short((short) (-2673));
      JSONObject.getNames((Object) short0);
      String string0 = jSONObject2.optString("true");
      assertEquals("", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Double double0 = new Double(1043.28);
      String string0 = JSONObject.quote("7h<w</O2:vr!?Yfs");
      assertEquals("\"7h<w<\\/O2:vr!?Yfs\"", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(13);
      Object object0 = new Object();
      hashMap0.put(integer0, object0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1423.9739));
      jSONObject0.accumulate("IU !t82", float0);
      JSONObject jSONObject1 = jSONObject0.accumulate("IU !t82", float0);
      try { 
        jSONObject1.getBoolean("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1000039501699495
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "bASy");
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", (Object) ".5xXoq}s");
      jSONObject1.keys();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject2 = jSONObject0.put(".5xXoq}s", (Collection) linkedList0);
      jSONObject1.accumulate(".5xXoq}s", linkedList0);
      JSONObject jSONObject3 = jSONObject1.put("bASy", (-461L));
      jSONObject2.put("Unclosed comment", (Object) "-Qj4fU[K'Fjl");
      jSONObject1.getJSONArray(".5xXoq}s");
      jSONObject3.has("d=:B3^Q)L+CV&");
      assertEquals(6, jSONObject1.length());
      assertEquals(6, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(object0);
      JSONObject jSONObject1 = jSONObject0.put("null", (Object) "null");
      jSONObject1.optJSONObject("null");
      JSONObject jSONObject2 = jSONObject1.accumulate("null", object0);
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "bASy");
      String string0 = ".5xXoq}s";
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", (Object) ".5xXoq}s");
      jSONObject1.keys();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put(".5xXoq}s", (Collection) linkedList0);
      jSONObject1.accumulate(".5xXoq}s", linkedList0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(".5xXoq}s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of .5xXoq}s
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("getjin", object0);
      jSONObject1.accumulate("getjin", object0);
      JSONObject.testValidity("getjin");
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6358885264021619
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = JSONObject.quote("p#Ykjt[6/0\"a6-");
      assertEquals("\"p#Ykjt[6/0\\\"a6-\"", string0);
      
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      Float float0 = new Float(0.0);
      hashMap0.put((Long) null, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString();
      assertNull(string1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.48717948717948717
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = new Integer(44);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("getget");
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      Integer integer1 = new Integer(1556);
      Byte byte0 = new Byte((byte) (-10));
      Float float0 = new Float((-561.4331931594832));
      JSONObject jSONObject1 = jSONObject0.accumulate("\"java.lang.Object@0000000002\"", float0);
      jSONObject1.put("&V", (-1767.4));
      Integer.getInteger("pu");
      Integer.getInteger("pu");
      jSONObject0.append("pu", "getreverse");
      Boolean boolean1 = new Boolean((String) null);
      double double0 = jSONObject0.getDouble("\"java.lang.Object@0000000002\"");
      assertEquals((-561.4331665039062), double0, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      Integer integer0 = new Integer(3279);
      Integer integer1 = new Integer(3279);
      Byte byte0 = new Byte((byte) (-8));
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("getreverse", object1);
      jSONObject1.getString("getreverse");
      String string0 = "wheel.json.JSONArray";
      Integer.getInteger("getreverse");
      Integer.getInteger("K1EX.&@{']qNfa5k;Qa");
      JSONObject.valueToString("getreverse");
      try { 
        jSONObject1.getBoolean("getreverse");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getreverse\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("getjin", object0);
      try { 
        jSONObject0.getBoolean("getjin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getjin\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer integer0 = new Integer((-70125688));
      Float float0 = new Float((float) (-70125688));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = JSONObject.doubleToString((-70125688));
      assertEquals("-7.0125688E7", string0);
      
      String string1 = jSONObject0.toString((-70125688));
      assertEquals("{}", string1);
      
      String string2 = JSONObject.quote("{}");
      assertEquals("\"{}\"", string2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Collection) null);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.valueOf("getreverse");
      JSONObject.valueToString(boolean0);
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(6);
      Byte byte0 = new Byte((byte) (-10));
      int int0 = Byte.compare((byte)83, (byte)121);
      jSONObject0.accumulate("pL~3ySFm;Qe", byte0);
      Integer.getInteger("getreverse");
      jSONObject0.toString(1263, 6);
      int int1 = jSONObject0.getInt("pL~3ySFm;Qe");
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8136605216916037
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("SL0`n4Syv)FB#5nkiQ", (Collection) linkedList0);
      try { 
        jSONObject1.getLong("SL0`n4Syv)FB#5nkiQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"SL0`n4Syv)FB#5nkiQ\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Byte byte0 = new Byte((byte) (-77));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Long long0 = new Long(59);
      String string0 = "";
      jSONObject0.put("", (long) 59);
      jSONObject0.optLong("");
      Long.compare(59, (-1L));
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      try { 
        jSONArray1.getJSONObject(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[10] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("L}{r'JhR\"}@h");
      JSONTokener jSONTokener1 = new JSONTokener("{");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Long long0 = new Long(1L);
      Long.remainderUnsigned(1L, 1L);
      try { 
        Long.parseUnsignedLong("{}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2806483581169434
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Float float0 = new Float((float) 59);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("K'i");
      JSONObject.quote("Ax$d{`f76>'tCt]*% ");
      JSONObject jSONObject1 = jSONObject0.put("\"Ax$d{`f76>'tCt]*% \"", 16L);
      jSONObject1.optInt("\"Ax$d{`f76>'tCt]*% \"", (-4627));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("\"K'i\"", (Collection) linkedList0);
      jSONObject1.optInt("\"Ax$d{`f76>'tCt]*% \"", 965);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("\"K'i\"");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer(101);
      Byte byte0 = new Byte((byte) (-8));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getreverse", object0);
      Integer integer1 = new Integer(548);
      Integer.getInteger("K1EX.&@{']qNfa5k;Qa");
      JSONObject jSONObject2 = jSONObject1.put("getreverse", (double) 101);
      jSONObject2.getLong("getreverse");
      Integer.getInteger("getreverse");
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("p7OH6'7q", jSONArray0);
      boolean boolean0 = new Boolean("p7OH6'7q");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("ksc_RhB,O,;0`} }l", (Object) linkedList0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Long long0 = new Long((-10L));
      JSONObject jSONObject0 = new JSONObject(long0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Double double0 = new Double(27);
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-1071), 27);
      jSONObject0.opt("min");
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000004\"", (Object) boolean0);
      jSONObject1.opt("\"java.lang.Object@0000000004\"");
      jSONObject1.toString();
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString((-4441.902));
      assertEquals("-4441.902", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5723992881587088
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("equ");
      JSONObject jSONObject1 = new JSONObject((Object) " of ");
      JSONObject jSONObject2 = jSONObject0.put("b7/Sur/D.$y@jQ8mdk", true);
      JSONObject.getNames((Object) jSONObject0);
      jSONObject1.optDouble("i_'gE6Vt1@i*7Y", 0.0);
      Boolean.compare(true, true);
      jSONObject0.toString(84);
      jSONObject1.opt("Null po_nter");
      jSONObject2.put("\r", (-576.571149387758));
      jSONObject2.optBoolean("b7/Sur/D.$y@jQ8mdk");
      JSONArray jSONArray0 = jSONObject2.names();
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "isreplaceAll");
      // Undeclared exception!
      jSONObject0.toString(3620, (-208));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)23);
      JSONObject.valueToString(byte0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      jSONObject0.put("'", (Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.put("toS", (Object) boolean0);
      jSONObject0.getBoolean("toS");
      try { 
        jSONObject1.getDouble("p:ChW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p:ChW\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-1806), (-5437));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|Ou%z\"MnO=z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |Ou%z\"MnO=z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getjin", (Object) jSONObject0);
      try { 
        jSONObject0.getBoolean("getjin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getjin\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      Short short0 = new Short((short)48);
      JSONObject.valueToString(short0);
      Integer integer0 = new Integer(160);
      Integer integer1 = new Integer((-290));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("getreverse", jSONArray0);
      Integer.getInteger("getreverse");
      Integer.getInteger((String) null);
      JSONObject jSONObject1 = jSONObject0.append("getreverse", (Object) null);
      try { 
        jSONObject1.getBoolean("getreverse");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getreverse\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\"#ub-j2\\N9vj'qe)ny";
      boolean boolean0 = new Boolean("\"#ub-j2N9vj'qe)ny");
      String string1 = "tbk{7nhc>2{1=;+n8Y";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = 27;
      String string2 = "wheel.json.JSONObject";
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.valueToString(jSONObject1, 27, 61);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"#ub-j2N9vj'qe)ny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"#ub-j2N9vj'qe)ny
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("] is not a number.", (-4494.442375886443));
      assertEquals((-4494.442375886443), double0, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Collection) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1829430989272922
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "W";
      JSONObject jSONObject0 = new JSONObject((Object) "W");
      jSONObject0.toString();
      try { 
        jSONObject0.getJSONObject("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      Byte byte0 = new Byte((byte) (-27));
      hashMap0.put(jSONArray0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = jSONObject0.names();
      assertNotNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer(1689);
      Integer.sum(1689, 1689);
      JSONObject jSONObject0 = new JSONObject(integer0);
      int int0 = jSONObject0.optInt("Ax$d{`f76>'tCt]*% ", 1689);
      assertEquals(1689, int0);
      
      Float float0 = new Float((float) 1689);
      jSONObject0.optString("toS", (String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = new Integer(1689);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject.quote("gettoString");
      jSONObject0.optInt("Ax$d{`f76>'tCt]*% ", 1689);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("Ax$d{`f76>'tCt]*% ", (Collection) linkedList0);
      Float float0 = new Float((float) 1689);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("Ax$d{`f76>'tCt]*% ");
      jSONObject0.toJSONArray(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.getNames((Object) jSONObject0);
      Integer integer0 = new Integer(59);
      JSONObject jSONObject1 = jSONObject0.put("-Qj4fU[K'Fjl", (Object) integer0);
      try { 
        jSONObject1.getJSONArray("-Qj4fU[K'Fjl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-Qj4fU[K'Fjl\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.099633990865473
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.quote("U/w}K>ZwvPk^^I_EB");
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)3325);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("gettoString", 0L);
      Long.compare((short)3325, 1934L);
      jSONObject1.optDouble("islogicalAnd", 0.0);
      String string0 = jSONObject0.toString(1);
      jSONObject0.optString("gettoString", (String) null);
      Float float0 = new Float((-1996.4498F));
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(object0);
      JSONObject jSONObject1 = jSONObject0.put("null", (Object) "null");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      String string1 = jSONObject1.optString("null");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString(",", ",");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put(",", (long) 0);
      Long.compare((-1L), 0L);
      String string0 = "me7tm j";
      jSONObject2.optString("me7tm j", "");
      JSONObject.quote("");
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = null;
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      int int0 = 27;
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(hashMap0, 27, (-1060));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isintern", (Object) hashMap0);
      Boolean boolean0 = new Boolean("wheel.json.JSONObject$1");
      try { 
        jSONObject1.append("isintern", "isintern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[isintern] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "";
      JSONObject.quote("getintern");
      JSONObject jSONObject0 = new JSONObject((Object) "\"getintern\"");
      int int0 = 0;
      jSONObject0.optInt("jbLa)kB8</N", 0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string1 = "issplit";
      JSONTokener jSONTokener0 = new JSONTokener("issplit");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of issplit
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", 1084L);
      jSONObject1.getInt("A JSONObject text must end with '}'");
      jSONObject0.put("getjin", object0);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("B7%y|[.%mJ");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isintern", (Object) hashMap0);
      try { 
        jSONObject1.getInt("isintern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isintern\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(",", (Map) hashMap0);
      try { 
        jSONObject0.getDouble(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Double double0 = new Double(0.0);
      Float float0 = new Float(0.0);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("8y3#s{>O]3aM", (-1079L));
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.getLong(":Ofg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":Ofg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = JSONObject.quote("f/wE#Og_+&o");
      assertEquals("\"f/wE#Og_+&o\"", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer(59);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "81Z}cG:+k%t/b*7";
      String string0 = JSONObject.doubleToString((-2983.184179040548));
      assertEquals("-2983.184179040548", string0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer1 = new Integer(2628);
      hashMap0.put(integer1, "81Z}cG:+k%t/b*7");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Collection<Float> collection0 = hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "mJ%D)6~P1k>5z";
      stringArray0[0] = "mJ%D)6~P1k>5z";
      stringArray0[2] = "mJ%D)6~P1k>5z";
      stringArray0[4] = "mJ%D)6~P1k>5z";
      stringArray0[5] = "mJ%D)6~P1k>5z";
      JSONObject jSONObject1 = jSONObject0.put("mJ%D)6~P1k>5z", 0);
      stringArray0[6] = "mJ%D)6~P1k>5z";
      stringArray0[7] = "mJ%D)6~P1k>5z";
      stringArray0[8] = "mJ%D)6~P1k>5z";
      JSONObject jSONObject2 = new JSONObject(collection0, stringArray0);
      jSONObject1.optJSONArray((String) null);
      jSONObject0.optDouble("mJ%D)6~P1k>5z", (double) 0);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      jSONObject1.put("mJ%D)6~P1k>5z", (Map) hashMap0);
      String string0 = "VuKyUhVM8v)fGeQ^{?";
      try { 
        jSONObject2.getJSONObject("VuKyUhVM8v)fGeQ^{?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VuKyUhVM8v)fGeQ^{?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      // Undeclared exception!
      try { 
        stringWriter0.write("YD'O:$Ir2", 2917, 2917);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = new Float(2010.696F);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      JSONObject.valueToString(linkedList0, (-1179665543), (-1851));
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      Integer integer0 = new Integer(99);
      JSONObject.testValidity(integer0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "Expected '";
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)0);
      String string1 = "Z?Y|5NOWHHNm1-";
      JSONObject jSONObject1 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject1.accumulate("Z?Y|5NOWHHNm1-", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONArray0.put((double) (-2516));
      String string0 = JSONObject.valueToString(jSONArray0, (-2516), 102);
      assertNotNull(string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("] is not a JSONObject.", (-1598));
      assertEquals((-1598), int0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Double double0 = new Double((-2324.5));
      JSONObject jSONObject0 = new JSONObject(double0);
      double double1 = jSONObject0.optDouble("L'Gm", 1394.446211217011);
      assertEquals(1394.446211217011, double1, 0.01);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.opt((String) null);
      jSONObject0.toString(0, (int) (short)0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      Integer integer0 = new Integer(0);
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.opt("true");
      jSONObject0.toString(0, 13);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString(87, (-219));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<JSONObject, String> hashMap1 = new HashMap<JSONObject, String>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0162239159443127
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject.quote("p#Ykjt[6/0\"a6-");
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optLong("p#Ykjt[6/0\"a6-");
      jSONObject0.optLong("[]");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject.getNames((Object) "_Zo?G$e[~>V@feip");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("_Zo?G$e[~>V@feip", true);
      jSONObject1.get("_Zo?G$e[~>V@feip");
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject0.getDouble("_Zo?G$e[~>V@feip");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_Zo?G$e[~>V@feip\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("w=*?eM7JX)N;%>[>B6L", 0L);
      JSONObject jSONObject1 = jSONObject0.put("XdaF n-]ZH0'+Z|e>C", (Object) "XdaF n-]ZH0'+Z|e>C");
      jSONObject1.putOpt("XdaF n-]ZH0'+Z|e>C", "XdaF n-]ZH0'+Z|e>C");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = new Integer(59);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString(boolean0, 27, (-656));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("java.lang.Boolean@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of java.lang.Boolean@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 27;
      JSONObject.valueToString((Object) null, 27, 27);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("toU", "toU");
      JSONObject.valueToString(hashMap0, 12, 27);
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("3", 1938L);
      String string0 = "IDv";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("IDv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of IDv
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      hashMap0.put((Double) null, "YW48:}2F8:l}8");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("uKHY8Q4)&+", "uKHY8Q4)&+");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("uKHY8Q4)&+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"uKHY8Q4)&+\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject.valueToString((Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) ";c*[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Float float0 = new Float((float) 59);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Double double0 = new Double(Double.NaN);
      Double.max(59, 0.0);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = JSONObject.quote("T");
      assertEquals("\"T\"", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer integer0 = new Integer(44);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Double double0 = new Double(44);
      Double.max(44, 44);
      JSONObject.testValidity(object0);
      jSONObject0.optBoolean("Unclosed comment");
      try { 
        jSONObject0.getInt("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float(2010.696F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = new Object();
      jSONObject0.putOpt("[]", (Object) null);
      jSONObject0.toString((-2490), 50);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("]@7", true);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      Integer integer0 = new Integer(0);
      Short short0 = new Short((short)0);
      Short.toUnsignedLong((short)0);
      hashMap0.put((Double) null, short0);
      hashMap0.remove((Object) integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("\"\"", false);
      JSONObject.doubleToString(0.0);
      Short short1 = new Short((short)101);
      jSONObject0.append("\"\"", short1);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.quote("getdecode");
      assertEquals("\"getdecode\"", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.isNull("\"#ub-j2N9vj'qe)ny");
      String string0 = "tbk{7nhc>2{1=;+n8Y";
      double double0 = 0.0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        linkedList0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("my");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"my\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{*62I?|O%?");
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.opt("{*62I?|O%?");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (Object) null);
      try { 
        jSONObject0.getBoolean("\"j-t$*,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"j-t$*,\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = new Integer(59);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.opt((String) null);
      JSONObject.quote((String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-219), (-858));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(83);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      String string1 = "";
      String string2 = null;
      try { 
        jSONObject0.put((String) null, 907);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0041938407563429
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.quote("p#Ykjt[6/0\"a6-");
      assertEquals("\"p#Ykjt[6/0\\\"a6-\"", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"p#Ykjt[6/0\"a6-\"";
      stringArray0[1] = "\"p#Ykjt[6/0\"a6-\"";
      stringArray0[2] = "p#Ykjt[6/0\"a6-";
      stringArray0[3] = "p#Ykjt[6/0\"a6-";
      stringArray0[4] = "p#Ykjt[6/0\"a6-";
      stringArray0[5] = "p#Ykjt[6/0\"a6-";
      stringArray0[6] = "\"p#Ykjt[6/0\"a6-\"";
      stringArray0[7] = "\"p#Ykjt[6/0\"a6-\"";
      JSONObject jSONObject0 = new JSONObject("p#Ykjt[6/0\"a6-", stringArray0);
      int int0 = jSONObject0.optInt("Q;=a");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.quote(":\n");
      assertEquals("\":\\n\"", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer integer0 = new Integer(59);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "81Z}cG:+k%t/b*7";
      JSONObject.doubleToString((-2939.98127649081));
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("", "getdecode");
      hashMap1.put((String) null, "0");
      Double double0 = new Double(27);
      JSONObject.valueToString(double0, 27, (-2506));
      jSONObject0.opt("B+K('}(PXT%=");
      JSONObject jSONObject1 = jSONObject0.put("0", (Object) "");
      jSONObject1.opt("JSONArray initial value should be a string or collection or array.");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      String string1 = JSONObject.doubleToString((-2506));
      assertEquals("-2506", string1);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Collection) null);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("ke");
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      String string0 = "-8UwvT4Hr5{K\\[+0G~";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "-8UwvT4Hr5{K[+0G~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      short short0 = (short)8192;
      Short short1 = new Short((short)8192);
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double double0 = new Double(1043.28);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer(843);
      JSONObject.doubleToString(0);
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>(843);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("0", (double) 0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-1209.0919708219342));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("~O%;3UxWK*eP{d^[E% ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~O%;3UxWK*eP{d^[E% \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      Integer integer0 = new Integer(3279);
      Byte byte0 = new Byte((byte) (-8));
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("getreverse", object1);
      Integer.getInteger("getreverse");
      Integer.getInteger("K1EX.&@{']qNfa5k;Qa");
      jSONObject1.remove("getreverse");
      try { 
        jSONObject1.getBoolean("getreverse");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getreverse\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("^NkMC2\"5vAfh]U8");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(2622);
      Integer integer1 = new Integer(6);
      Integer.getInteger("95L=7J|WAR#M", (Integer) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("getparseFloat", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object1 = JSONObject.NULL;
      jSONObject0.putOpt("F+A5ZIC;$/u", object1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONObject$1");
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Bad value from toJSONString: ", 1274L);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Bad value from toJSONString: 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.testValidity((Object) null);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = new Integer(44);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "txlw!Y}W'mdB?";
      stringArray0[1] = "!~5E$-F 2; EZ@MLS";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = jSONObject0.optString("txlw!Y}W'mdB?", "!~5E$-F 2; EZ@MLS");
      assertEquals("!~5E$-F 2; EZ@MLS", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("zW80:eR");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of zW80:eR
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("h~RBF}E{L!LCS<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of h~RBF}E{L!LCS<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{qaEoW$JC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {qaEoW$JC
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "isintern";
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("hj]L$}/mInE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"hj]L$}/mInE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.quote("EOK,");
      assertEquals("\"EOK,\"", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("~O%;3UxWK*eP{d^[E% ");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("I>=&", 69);
      assertEquals(69, int0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(". \"pRR4la(s8w5'W", ". \"pRR4la(s8w5'W");
      Float float0 = new Float(1.0F);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Double double0 = new Double(1.0F);
      Double.max(1.0F, (-1527.1120504952548));
      Short short0 = new Short((short)43);
      JSONObject.testValidity(short0);
      boolean boolean0 = jSONObject0.has("key");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("1 ^?y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1 ^?y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("(I{_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(I{_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
