/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 03:52:29 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(":H4e9");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("otide");
      String string1 = lovinsStemmer0.stemString("otide");
      assertEquals("ot", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.10764579773876
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("war0pex");
      lovinsStemmer0.stem("~ae1kVRpQ");
      lovinsStemmer0.toString();
      String string0 = "-97C4i.P\\=J[";
      lovinsStemmer0.stemString("war0pic");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stemString("OQ1Gi6~ApMUB<SA");
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      // Undeclared exception!
      try { 
        lovinsStemmer2.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1075222036218397
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("invalid cvs revision - not enough parts separated by dots!ex");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.stemString("jk)XAv#&@V3q4l(");
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("invalid cvs revision - not enough parts separated by dots!ex");
      lovinsStemmer0.stem("invalid cvs revision - not enough parts separated by dots!ex");
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer1.stemString("invalid cvs revision - not enough parts separated by dots!ex");
      assertEquals("invalis cv revis - not enough part separ by dot!ex", string1);
      
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("F=)4|.:Zv2Ym1gG_");
      assertEquals("f=)4|.:zv2ym1g_", string2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.100963336162914
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("Y}");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("y}");
      assertEquals("y}", string1);
      
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stem("invalid CVS revision - not enough parts separated by dots!");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("8034piclismit");
      lovinsStemmer0.stem("8034");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer1.stem("umpt");
      assertEquals("um", string3);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.878602053427583
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("8034");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("8034");
      assertTrue(string1.equals((Object)string0));
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stem("invalid CVS revision - not enough parts separated by dots!");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("8034piclismit");
      lovinsStemmer0.stem("8034");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer1.stem("umpt");
      assertEquals("um", string3);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("istr");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "yt";
      stringArray0[1] = "&x5PTCRXJujh";
      stringArray0[2] = "v";
      stringArray0[3] = " $VHH@{P80mY,p";
      stringArray0[4] = "uuR\"/gO*:QzW~YB";
      stringArray0[5] = "W-ZnO-\"7:_F!jo";
      stringArray0[6] = "Z[lc_Q6vi>6A";
      stringArray0[7] = "-h";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("j&6O#");
      assertEquals("j&6o#", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("@pPo^N:~");
      lovinsStemmer0.stemString("@ppo^n:~");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("pansend");
      assertEquals("pansens", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("R0iev");
      assertEquals("r0ief", string0);
      
      lovinsStemmer0.stem("R0iev");
      String string1 = lovinsStemmer0.stemString("r0ief");
      assertEquals("r0ief", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8848616963634437
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "()zrMle9|$Ax8D?M$";
      stringArray0[1] = "()zrMle9|$Ax8D?M$";
      stringArray0[2] = "()zrMle9|$Ax8D?M$";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also anauthor field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als anauthor field, then th edit field giv th edit of th book or collect in which th refer appear.", string0);
      
      lovinsStemmer0.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is als anauthor field, then th edit field giv th edit of th book or collect in which th refer appear.");
      String string1 = lovinsStemmer0.stem("\tDisplays this help.");
      assertEquals("\tdisplays this help.", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      String string0 = lovinsStemmer0.stemString("The Mathem+tiEal Reviews number.");
      assertEquals("th mathem+tie review number.", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2756304369699905
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "K;,#i3MFW6j!w/fkRgh";
      stringArray0[1] = "RtA";
      stringArray0[2] = "ns";
      stringArray0[3] = "}P';q";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("ation");
      String string1 = lovinsStemmer0.stemString("RtA");
      assertEquals("rt", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("learnet");
      assertEquals("learnet", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("ical");
      assertEquals("ical", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("iev");
      assertEquals("ief", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("PlHH)NY?(xWca");
      String string0 = lovinsStemmer0.stemString("{OEtiDD{");
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4968553459119497
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Any additional information that can help the reader. The first word should be capitalized.");
      assertEquals("any addit inform that can help th reader. th first word should be capital.", string0);
      
      String string1 = lovinsStemmer0.stemString("any addit inform that can help th reader. th first word should be capital.");
      assertEquals("any addit inform that can help th reader. th first word should be capit.", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("J");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      String[] stringArray0 = new String[7];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("Morgan Kaufmann Publishers");
      assertEquals("morgan kaufman publishes", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4888888888888889
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("FfEy[G]j^*D");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("Can't find class called: ");
      assertEquals("can't find clas cal: ", string0);
      
      String string1 = lovinsStemmer0.stemString("editxon");
      assertEquals("editxon", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.49763033175355453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("an annotation. it is not used by he standard bibliography styles, but may be use by others that produce an annotated bibliography.ond");
      assertEquals("an annot. it is not us by he standard bibliograph styl, but may be us by other that produc an annot bibliograph.ons", string0);
      
      String string1 = lovinsStemmer0.stemString("an annot. it is not us by he standard bibliograph styl, but may be us by other that produc an annot bibliograph.ons");
      assertEquals("an annot. it is not us by he standard bibliograph styl, but may be us by other that produc an annot bibliograph.on", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("flagyz");
      assertEquals("flagys", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "()zrMle9|$Ax8D?M$";
      stringArray0[1] = "()zrMle9|$Ax8D?M$";
      stringArray0[2] = "()zrMle9|$Ax8D?M$";
      String string0 = lovinsStemmer0.stem("bex");
      assertEquals("bic", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.48837209302325585
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("M4p5W[V6A[ ZH~/`");
      String string0 = lovinsStemmer0.stemString("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("arra-dimens of 'new string[3][4][]': ", string0);
      
      String string1 = lovinsStemmer0.stemString("'|");
      assertEquals("'|", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Machine Learning");
      assertEquals("mach learn", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("year");
      assertEquals("year", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("izing");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("!'/FX20Ton");
      assertEquals("!'/fx20t", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.1034138160485583
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.stem("A journal name. Abb_eviations are provided for many journals.");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("a journal name. abb_eviations are provided for many journals.");
      assertEquals("a journ nam. ab_evi ar provid for man journ.", string2);
      
      String string3 = lovinsStemmer0.stemString("aIclity");
      assertEquals("aicl", string3);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("wyw0jlhex");
      assertEquals("wyw0jlhec", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("lctqix");
      assertEquals("lctqic", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("J");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("#m={\ny=~K@ AL");
      assertEquals("#m={\ny=~k@ ", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ionals");
      assertEquals("ion", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("end");
      assertEquals("ens", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("pand");
      assertEquals("pans", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("vad");
      assertEquals("vas", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ytkbyt");
      assertEquals("ytkbys", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("luccidtex");
      assertEquals("luccidtic", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Bled, Slovenia");
      String string0 = lovinsStemmer0.stem("DjU?tZ'RrS");
      assertEquals("dju?tz'r", string0);
      
      String string1 = lovinsStemmer0.stem("entation");
      assertEquals("ent", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("rwe1zowugwh8xqperid");
      assertEquals("rwe1zowugwh8xqperis", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("an annotation. it is not used by he standard bibliography styles, but may be use by others that produce an annotated bibliography.ond");
      assertEquals("an annotation. it is not used by he standard bibliography styles, but may be use by others that produce an annotated bibliography.ons", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ffey[g]j^*dlux");
      assertEquals("ffey[g]j^*dluc", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("istpex");
      assertEquals("istpic", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("lid");
      assertEquals("lis", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Quote parse error.");
      assertEquals("quot pars error.", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ioning");
      assertEquals("ion", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.49350649350649345
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "T_^<h+NGVB WyW0jLH";
      stringArray0[1] = "RtA";
      String string0 = lovinsStemmer0.stemString("A report published by a school or other institution, usually numbered within a series.");
      assertEquals("a report publ by a school or other institut, usu number within a ser.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stem("a report publ by a school or other institut, usu number within a ser.");
      assertEquals("a report publ by a school or other institut, usu number within a ser.", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("']rp$LTT,>(.}J");
      assertEquals("']rp$lt,>(.}j", string0);
      
      String string1 = lovinsStemmer0.stemString("$Revision:");
      assertEquals("$revis:", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("$revis:");
      assertEquals("$rev:", string2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("full");
      assertEquals("fl", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("lvydpjuetend");
      assertEquals("lvydpjuetens", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ator");
      assertEquals("at", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("iefuad");
      assertEquals("iefuas", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("errorax");
      assertEquals("errorac", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("cid");
      assertEquals("cis", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("lud");
      assertEquals("lus", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("PROCEEDINGS");
      assertEquals("proceed", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stem("proceed");
      assertEquals("proceed", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("5d^.4cah3lmdex");
      assertEquals("5d^.4cah3lmdic", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("encies");
      assertEquals("enci", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("elyert");
      assertEquals("elyers", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("lovinsstemmermit");
      assertEquals("lovinsstemmermis", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("714@$+zU-lUs");
      assertEquals("714@$+zu-lus", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("arizing");
      assertEquals("ariz", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ealy");
      assertEquals("eal", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("series");
      assertEquals("ser", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("a hyperlink to a resource.her");
      assertEquals("a hyperlink to a resourc.hes", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("referher");
      assertEquals("referhes", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ness");
      assertEquals("nes", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ioned");
      assertEquals("ion", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4962962962962963
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.et");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.et", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ement");
      assertEquals("ement", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("kIyyp`8gVuUHy");
      assertEquals("kiyyp`8gvuuh", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("acious");
      assertEquals("ac", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("!C'");
      assertEquals("!c'", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("rud");
      assertEquals("rus", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3045974969685552
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("nul");
      assertEquals("nl", string1);
  }
}
