/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 03:37:08 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.Proxy;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("");
      theClient0.getMaxAuthTryMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 10);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.toString();
      MockSocket mockSocket0 = new MockSocket("", 10);
      mockSocket0.getLocalPort();
      theClient0.setSocket(mockSocket0);
      theClient0.setTimeout((-3192));
      theClient0.getSocket();
      theClient0.getCommunicationLogging();
      theClient0.getClientBinaryHandler();
      assertEquals((-3192), theClient0.getTimeout());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.260960815263037
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(0);
      TheClient theClient1 = new TheClient();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient1.toString();
      theClient0.getServer();
      theClient1.getMaxConnectionMsg();
      theClient1.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      theClient1.getClientEvent();
      theClient1.setServer((QuickServer) null);
      theClient0.getClientAuthenticationHandler();
      TheClient theClient2 = new TheClient();
      theClient2.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient2.getClientBinaryHandler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      theClient2.setTimeoutMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient1.setSocketChannel((SocketChannel) null);
      theClient1.setTrusted(true);
      theClient1.setSocketChannel((SocketChannel) null);
      MockInetAddress.getLoopbackAddress();
      theClient0.getClientData();
      theClient0.getClientObjectHandler();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", 0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@6514e28c
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setMaxAuthTryMsg("/server-mode");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientEventHandler();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      theClient0.getClientEventHandler();
      theClient0.getClientData();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.getSocket();
      theClient0.getCommunicationLogging();
      theClient0.getClientEventHandler();
      theClient0.getServer();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.toString();
      theClient0.getMaxConnectionMsg();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.getClientEvent();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getServer();
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:41>", blockingClientHandler0.getName());
      
      theClient0.setServer((QuickServer) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      org.quickserver.net.qsadmin.Authenticator authenticator1 = new org.quickserver.net.qsadmin.Authenticator();
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      theClient0.setClientAuthenticationHandler(authenticator1);
      theClient0.getClientEventHandler();
      theClient0.toString();
      theClient0.getClientAuthenticationHandler();
      //  // Unstable assertion: assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      QuickServer quickServer0 = new QuickServer("=");
      QuickServer quickServer1 = new QuickServer();
      theClient0.getClientExtendedEventHandler();
      theClient0.getTrusted();
      MockInetAddress.getLocalHost();
      int int0 = (-67);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("=", (-67));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-67
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte) (-2);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)43;
      byteArray0[3] = (byte)127;
      byteArray0[8] = (byte) (-100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient0.setTimeout((-1341));
      theClient0.getSocket();
      theClient0.getCommunicationLogging();
      int int0 = theClient0.getTimeout();
      assertEquals((-1341), int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientCommandHandler();
      TheClient theClient1 = new TheClient();
      theClient0.getClientEvent();
      TheClient theClient2 = new TheClient();
      theClient2.getMaxConnectionMsg();
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:30>", blockingClientHandler0.getName());
      
      TheClient theClient0 = new TheClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      String string0 = theClient0.toString();
      //  // Unstable assertion: assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      QuickServer quickServer0 = new QuickServer("=");
      QuickServer quickServer1 = new QuickServer();
      theClient0.setServer(quickServer1);
      theClient0.getServer();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("=", 0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@6514e28c
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxConnectionMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.closingConnection(nonBlockingClientHandler0);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setCommunicationLogging(false);
      theClient0.getClientEvent();
      theClient0.getMaxAuthTryMsg();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getClientCommandHandler();
      theClient0.getTrusted();
      TheClient theClient1 = new TheClient();
      nonBlockingClientHandler0.getSocketChannel();
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:23>", nonBlockingClientHandler0.getName());
      
      theClient1.getClientExtendedEventHandler();
      boolean boolean0 = theClient0.getTrusted();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.261950424367441
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(3624);
      theClient0.setTimeoutMsg("H");
      theClient0.getClientExtendedEventHandler();
      theClient0.setTimeoutMsg("H");
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.getMaxAuthTry();
      theClient0.setTimeout(1000);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.setMaxAuthTry((-1731));
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient1.setAuthenticator((Authenticator) null);
      theClient1.setTimeout(0);
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      TheClient theClient2 = new TheClient();
      theClient2.setClientEvent(clientEvent0);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      String string0 = blockingClientHandler0.toString();
      //  // Unstable assertion: assertEquals("{<ClientHandler-Pool#-1-ID:11> - [non-connected]}", string0);
      
      int int0 = theClient0.getMaxAuthTry();
      //  // Unstable assertion: assertEquals((-1731), int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTimeoutMsg("FXva");
      TheClient theClient1 = new TheClient();
      TheClient theClient2 = new TheClient();
      theClient2.getClientObjectHandler();
      theClient0.getTimeoutMsg();
      theClient1.getClientWriteHandler();
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)0;
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getLocalPort();
      theClient0.setSocket(mockSocket0);
      theClient0.setSocket(mockSocket0);
      theClient0.setTimeout((-1));
      theClient0.getSocket();
      assertEquals((-1), theClient0.getTimeout());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("no socket");
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "no socket");
      theClient0.toString();
      theClient0.getMaxConnectionMsg();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket((String) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(3471);
      theClient0.getSocket();
      theClient0.getCommunicationLogging();
      int int0 = theClient0.getTimeout();
      assertEquals(3471, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getSocketChannel();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("PRE_STARTUP");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      theClient0.getClientWriteHandler();
      theClient0.getMaxAuthTryMsg();
      String string0 = theClient0.toString();
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getAuthenticator();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setTimeoutMsg("");
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.setMaxConnectionMsg("\"?");
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }
}
