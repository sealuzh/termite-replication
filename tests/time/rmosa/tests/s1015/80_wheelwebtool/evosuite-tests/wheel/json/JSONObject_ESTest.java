/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 04:09:56 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.quote("] not found");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"] not found\"";
      stringArray0[1] = "\"] not found\"";
      stringArray0[2] = "] not found";
      stringArray0[3] = "\"] not found\"";
      stringArray0[4] = "] not found";
      stringArray0[5] = "] not found";
      stringArray0[6] = "\"] not found\"";
      stringArray0[7] = "] not found";
      JSONObject jSONObject0 = new JSONObject("] not found", stringArray0);
      jSONObject0.optJSONArray("iscompare");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-30803738), (-30803738));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5772388985080297
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "[]");
      JSONObject jSONObject1 = jSONObject0.put("Expected '", 0L);
      jSONObject1.optInt("Expected '");
      jSONObject1.getLong("Expected '");
      JSONObject jSONObject2 = jSONObject0.put("[]", 44.538);
      jSONObject1.getString("Expected '");
      jSONObject1.append("] is not a Boolean.", "] is not a Boolean.");
      jSONObject1.keys();
      jSONObject1.toString();
      jSONObject1.toString();
      jSONObject0.toString(0, 0);
      try { 
        jSONObject2.getJSONArray("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2838229612915466
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("$", (-732L));
      jSONObject1.optInt("getpush", 105);
      JSONObject.doubleToString(0.0);
      jSONObject1.optDouble("$");
      jSONObject1.toString(1550, 1550);
      StringWriter stringWriter0 = new StringWriter(1550);
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = 'J';
      stringWriter0.write(charArray0);
      StringWriter stringWriter1 = stringWriter0.append('P');
      stringWriter1.write(1550);
      jSONObject1.write(stringWriter1);
      try { 
        jSONObject0.getBoolean("$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Object object0 = new Object();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      String[] stringArray0 = JSONObject.getNames((Object) ",\n");
      assertEquals(1, stringArray0.length);
      
      String string0 = JSONObject.valueToString(linkedList1);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put((Boolean) null, jSONObject0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-3763), (-3763));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("getputAll", 1713);
      JSONObject.getNames((Object) jSONObject0);
      linkedList0.add(jSONObject0);
      jSONObject0.put("getputIfAbsent", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("getputIfAbsent");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",mi", 28L);
      jSONObject1.optInt(",mi");
      jSONObject1.getInt(",mi");
      jSONObject0.optJSONArray("c302Dzl%s\"YH");
      try { 
        jSONObject0.getJSONObject("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer((short) (-2615));
      Integer.divideUnsigned((short) (-2615), 18);
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put("re", false);
      assertEquals(6, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Float float0 = new Float(0.0);
      hashMap0.put(float0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put("sho", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      linkedList0.pollLast();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "sho");
      StringWriter stringWriter2 = stringWriter1.append('>');
      Writer writer0 = jSONObject1.write(stringWriter2);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("mi", (-1L));
      jSONObject1.optLong("mi");
      int int0 = jSONObject1.getInt("mi");
      assertEquals((-1), int0);
      
      String string0 = JSONObject.quote("mi");
      assertEquals("\"mi\"", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("J[As.s~>Zn.VVot+ fc", Double.NaN);
      JSONObject jSONObject1 = jSONObject0.put("mi", 19L);
      jSONObject1.getInt("mi");
      long long0 = jSONObject0.optLong("mi");
      assertEquals(19L, long0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "gThN";
      stringArray0[1] = "wheel.json.JSONObject$Null";
      stringArray0[2] = ": ";
      stringArray0[1] = "G2L8eiU9?Ig";
      stringArray0[3] = "mV[";
      stringArray0[5] = "wheel.json.JSONObject$1";
      stringArray0[6] = "tg-cz";
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.put("tg-cz", (Object) boolean0);
      boolean boolean1 = jSONObject0.optBoolean("tg-cz");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(49);
      hashMap0.put((Integer) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      // Undeclared exception!
      try { 
        jSONObject0.toString(49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("nst", (Collection) linkedList0);
      jSONObject1.optJSONArray("nst");
      boolean boolean0 = new Boolean("nst");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(9);
      JSONObject jSONObject2 = jSONObject0.put("mi", (-1L));
      jSONObject2.optInt("mi");
      try { 
        jSONObject1.getInt("mi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Map) null);
      jSONObject0.toString((-20684708), 994);
      jSONObject1.put("8%vY#Y}qIRe=)b&", (Map) null);
      jSONObject1.getString("8%vY#Y}qIRe=)b&");
      try { 
        jSONObject1.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("isN", (Collection) linkedList0);
      jSONObject0.isNull("isN");
      JSONObject jSONObject1 = jSONObject0.put("isN", (Object) "isN");
      Object object0 = jSONObject1.get("isN");
      assertEquals("isN", object0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Double double0 = new Double(0.0);
      Short.compare((short) (-527), (short)628);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      jSONArray0.put(false);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("'exP}z8O`t#06", true);
      JSONObject jSONObject1 = jSONObject0.put("mi", (-3633L));
      double double0 = jSONObject1.optDouble("mi", (double) (-3633L));
      assertEquals((-3633.0), double0, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("not", (Collection) linkedList0);
      jSONObject0.optJSONArray((String) null);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.opt("not");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.185684493992781
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "2@Bx";
      int int0 = 70;
      jSONObject0.optInt("2@Bx", 70);
      jSONObject0.optInt("2@Bx", 10);
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.append("2@Bx", double0);
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject.valueToString(boolean0, 70, 10);
      jSONObject1.append("P}TM$PhcC_UHBe.", hashMap0);
      jSONObject1.keys();
      jSONObject0.optInt("w/3/vuszm#p@i", 70);
      Double.isFinite(10);
      jSONObject1.getJSONArray("2@Bx");
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      double double1 = 0.0;
      double double2 = (-1442.471);
      try { 
        jSONObject1.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Short short0 = new Short((short)4938);
      hashMap0.put("D", short0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Long long0 = new Long(0L);
      jSONObject1.append("D", long0);
      JSONObject jSONObject2 = jSONObject1.accumulate("D", "]RNi");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, (-232), 13);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(",mi", 28L);
      int int0 = jSONObject1.getInt(",mi");
      assertEquals(28, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("O", (Collection) linkedList0);
      jSONObject0.append("O", jSONObject1);
      Integer integer0 = new Integer(10);
      JSONObject.getNames((Object) integer0);
      JSONObject jSONObject2 = jSONObject1.put("O", (-1721));
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0gDE", 0L);
      StringWriter stringWriter0 = new StringWriter(128);
      JSONObject jSONObject1 = jSONObject0.put("Missing value", (long) 128);
      int int0 = jSONObject1.getInt("0gDE");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("com", (-3633L));
      try { 
        jSONObject1.getJSONObject("com");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"com\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = "";
      JSONObject.quote("gWg+mDRv7@o[");
      JSONObject.quote("");
      Byte byte0 = new Byte((byte)70);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "hQ?u_Hq\"pt7zt";
      stringArray0[2] = "";
      stringArray0[3] = "gWg+mDRv7@o[";
      stringArray0[4] = "";
      stringArray0[5] = "\"\"";
      stringArray0[6] = "gWg+mDRv7@o[";
      stringArray0[7] = "\"gWg+mDRv7@o[\"";
      stringArray0[8] = "\"\"";
      JSONObject jSONObject0 = new JSONObject("getdoubleToLongBits", stringArray0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("\"\"", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6799967248273541
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject.quote("05TA/*[[h");
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("\"05TA/*[[h\"", (Map) hashMap0);
      try { 
        jSONObject0.getInt("\"05TA/*[[h\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"05TA/*[[h\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("E7hmm=!/~X\"QiZ", jSONObject0);
      JSONObject.valueToString("E7hmm=!/~X\"QiZ");
      hashMap0.put("\"java.lang.String@0000000002\"", "E7hmm=!/~X\"QiZ");
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.put("E7hmm=!/~X\"QiZ", 9);
      long long0 = jSONObject1.getLong("E7hmm=!/~X\"QiZ");
      assertEquals(9L, long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Boolean.logicalOr(true, false);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.keys();
      jSONObject0.optJSONObject("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 19, (-351));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.quote(")6D&]");
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.toString(47, 355);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ha";
      stringArray0[1] = "ha";
      stringArray0[2] = "ha";
      stringArray0[3] = "ha";
      stringArray0[4] = "ha";
      stringArray0[5] = "ha";
      stringArray0[6] = "{QtJw7PW=y=0g;M";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject.doubleToString(0.0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("co");
      jSONObject0.putOpt("co", "\"co\"");
      jSONObject0.optBoolean("co");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("co");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of co
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.names();
      Long long0 = new Long((-1L));
      jSONObject0.put("A JSONArray text must start with '['", (Object) long0);
      try { 
        jSONObject0.getJSONArray("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put(".p", (Collection) linkedList0);
      try { 
        jSONObject0.getBoolean(".p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".p\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      String string0 = JSONObject.quote(")6D&]");
      assertEquals("\")6D&]\"", string0);
      
      Object object0 = new Object();
      jSONObject0.append(")6D&]", iterator0);
      jSONObject0.toString(70, 57);
      String string1 = jSONObject0.optString(")6D&]", "\")6D&]\"");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = JSONObject.quote("Null key.");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put("\"Null key.\"", boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.optString("\"Null key.\"");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      Double double0 = new Double((-831.7363952));
      try { 
        jSONObject0.accumulate((String) null, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = "";
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("", (Map) hashMap0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Byte byte0 = new Byte((byte)62);
      JSONObject.numberToString(byte0);
      jSONObject0.optString("KR", "");
      JSONObject.getNames(jSONObject0);
      jSONObject0.names();
      try { 
        jSONObject0.getDouble("ftu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ftu\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "<VRWjC";
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put("<VRWjC", boolean0);
      String string1 = "C<Q{D9Wl(DJA";
      short short0 = (short)3151;
      Short short1 = new Short((short)3151);
      JSONObject jSONObject1 = jSONObject0.accumulate("C<Q{D9Wl(DJA", short1);
      jSONObject1.put("C<Q{D9Wl(DJA", true);
      try { 
        jSONObject1.append("C<Q{D9Wl(DJA", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[C<Q{D9Wl(DJA] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put("E7>mm=!/~X\"QipZ", boolean0);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      hashMap2.put("E7>mm=!/~X\"QipZ", "E7>mm=!/~X\"QipZ");
      Byte byte0 = new Byte((byte) (-77));
      JSONObject.numberToString(byte0);
      JSONObject.doubleToString((byte) (-77));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      Double double0 = new Double((-831.7363952));
      JSONObject jSONObject1 = jSONObject0.accumulate("E7>mm=!/~X\"QipZ", hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-658), (-658));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString((-522), (-1695));
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = Boolean.valueOf("{}");
      Boolean.logicalOr(false, false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "";
      long long0 = 10L;
      String string1 = "{Q";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {Q
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject.valueToString((Object) null, 956, 105);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "D7}E|7gg6J9?%|v@Dn");
      String string0 = "re";
      short short0 = (short)69;
      Short.toUnsignedLong((short) (-1136));
      // Undeclared exception!
      jSONObject0.toString(2990);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(8192);
      Short short0 = new Short((short)34);
      hashMap0.put(integer0, short0);
      String string0 = jSONObject0.toString(4);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-35), 70);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 160, 160);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Float float0 = new Float((-46.165F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("de", (-3004.4234857595));
      JSONTokener jSONTokener0 = new JSONTokener("ispush");
      jSONTokener0.skipPast("de");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 6 of ispush
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = ",9%*";
      HashMap<Short, Float> hashMap1 = new HashMap<Short, Float>();
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(3190.0F);
      JSONObject.valueToString(hashMap1);
      String string1 = "] is not a JSONArray.";
      JSONTokener jSONTokener0 = new JSONTokener(",9%*");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("6:T9{g(L)Vk.|u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 6:T9{g(L)Vk.|u
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      Object object0 = new Object();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      String string0 = "A JSONArray text must start with '['";
      int int0 = (-30710023);
      String string1 = null;
      try { 
        jSONObject0.put((String) null, (Object) "A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("wheel.json.JSONObject$Null", 1021L);
      jSONObject0.optJSONArray((String) null);
      Object object0 = jSONObject0.opt("not");
      assertNull(object0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Double double0 = new Double(4938.502);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      StringWriter stringWriter0 = new StringWriter(24);
      StringWriter stringWriter1 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("6", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>(42);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) "sho");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      JSONObject jSONObject1 = jSONObject0.put("sho", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("D", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("] is not a JSONObject.", (String) null);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("E7>mm=!/~X\"QiZ", "E7>mm=!/~X\"QiZ");
      Float.sum((-1.0F), (-362.21835F));
      HashMap<Short, Float> hashMap1 = new HashMap<Short, Float>();
      Long long0 = new Long((-1218L));
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(2032.6326F);
      String string0 = JSONObject.valueToString(float0);
      Float float1 = new Float((-363.21835F));
      String string1 = JSONObject.quote("M{8gR^s,FzP%o!");
      assertEquals("\"M{8gR^s,FzP%o!\"", string1);
      
      String string2 = JSONObject.valueToString(float1);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = JSONObject.doubleToString(0.0);
      assertEquals("0", string3);
      
      int int0 = jSONObject0.optInt("Bad value from toJSONString: ");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = new Double(0.0);
      Short.compare((short) (-527), (short)628);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      jSONArray0.put(false);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string0 = "cle";
      String string1 = null;
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Double double0 = new Double(3769.9434);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter(3099);
      stringWriter0.append('A');
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)0);
      jSONObject0.accumulate("N#W)g[i3&Ke$WETM", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = JSONObject.doubleToString((-1151.516));
      Boolean boolean0 = new Boolean(false);
      String string1 = JSONObject.valueToString(boolean0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",9%*";
      stringArray0[1] = "";
      JSONObject.quote("M{8gR^s,FzP%o!");
      JSONObject jSONObject1 = jSONObject0.put("\"M{8gR^s,FzP%o!\"", true);
      jSONObject1.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("r T:7d8v>>wrv(*WT'h", jSONArray0);
      jSONObject1.toString((-2908), (-816));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.length();
      JSONObject jSONObject1 = jSONObject0.put("", false);
      jSONObject1.has("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("'p_q<r0q");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.593117783173604
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("D)a;)tEvfPx6ADR&:=|");
      jSONObject0.optDouble("D)a;)tEvfPx6ADR&:=|");
      String string0 = "";
      jSONObject0.put("", 1.0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "D)a;)tEvfPx6ADR&:=|";
      stringArray0[3] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.getDouble("");
      Double double0 = new Double(Double.NaN);
      Double.min(0.0, 1120.29);
      Float float0 = new Float(0.0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      hashMap0.put("wa", (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0432514071457581
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Object object1 = new Object();
      JSONObject.valueToString(object1, 11, 92);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("E7hmm=!/~X\"QiZ", jSONObject0);
      JSONObject.valueToString("E7hmm=!/~X\"QiZ");
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject1.getLong("E7hmm=!/~X\"QiZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"E7hmm=!/~X\\\"QiZ\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("mi", (-1L));
      assertEquals(1, jSONObject0.length());
      
      int int0 = jSONObject1.getInt("mi");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.8420446800160575
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = JSONObject.quote("05TA/*[[h");
      assertEquals("\"05TA/*[[h\"", string0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = ",9%*";
      JSONObject jSONObject0 = new JSONObject((Object) ",9%*");
      // Undeclared exception!
      jSONObject0.toString(1420, 1420);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("~RwP?_");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~RwP?_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("#C ,i", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = JSONObject.quote("/SkC\"R@Y(0ByJ6");
      assertEquals("\"/SkC\\\"R@Y(0ByJ6\"", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Gcki_]m>s.J4p";
      stringArray0[1] = "";
      stringArray0[2] = "+JN4ct7t";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String string0 = "=if4E";
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float(2484.24803601);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean(",/", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean.logicalAnd(false, false);
      hashMap0.put(boolean0, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "%b~*e5Du{2-7|q";
      JSONObject.quote("%b~*e5Du{2-7|q");
      jSONObject0.toString();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1378));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(49);
      hashMap0.put((Integer) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
      
      String string1 = JSONObject.valueToString((Object) null);
      assertEquals("null", string1);
      
      String string2 = JSONObject.doubleToString(0.0);
      assertEquals("0", string2);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",9%*";
      stringArray0[1] = "";
      stringArray0[2] = ")Q[7rB])-@y=7b#bqT";
      stringArray0[3] = "";
      Long long0 = new Long((-417L));
      Long.getLong(")Q[7rB])-@y=7b#bqT", long0);
      JSONObject.valueToString(long0);
      Float float0 = new Float(1.0);
      Float.max((-417L), (-417L));
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-734));
      JSONObject.valueToString(jSONObject1);
      jSONObject0.remove("");
      double double0 = new Integer((-734));
      assertEquals((-734), double0, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      Byte byte0 = new Byte((byte) (-113));
      Byte.compare((byte)93, (byte)73);
      String string0 = JSONObject.valueToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove("<l`dFwiMINsQIgb,{");
      assertNull(object0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 897);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("@0bN");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Long long0 = new Long(0L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Long long0 = new Long(0L);
      Byte byte0 = new Byte((byte)96);
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("{137Ks'`]<5Y", (double) (byte)96);
      assertEquals(96.0, double0, 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("co", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("isadd", "KR");
      assertEquals("KR", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("wheel.json.JSONObject$1");
      assertEquals("", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("0RN", 1.0);
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("-2223.640072786061.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of -2223.640072786061.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("HKrlZMS  PdVd");
      Byte byte0 = new Byte((byte) (-88));
      jSONObject0.putOpt("O@D/]us", byte0);
      jSONObject0.optJSONArray((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      JSONObject.quote("M{8gR^s,FzP%o!");
      JSONObject.doubleToString((-2223.640072786061));
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(5047);
      jSONObject0.write(stringWriter0);
      long long0 = jSONObject0.optLong("", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", (-1778L));
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("3BY2Px");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3BY2Px\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(" at character ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("JSON does not allow non-finite numbers.");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean(";N^u-h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";N^u-h\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("E7>mm=!/~X\"QiZ", "E7>mm=!/~X\"QiZ");
      Byte byte0 = new Byte((byte) (-77));
      JSONObject.numberToString(byte0);
      int int0 = (-2820);
      JSONObject.valueToString(jSONObject0, (byte) (-77), (-2820));
      Long long0 = new Long(1L);
      JSONTokener jSONTokener0 = new JSONTokener("E7>mm=!/~X\"QiZ");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of E7>mm=!/~X\"QiZ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList0, 125, (-2501));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(",", boolean0);
      String string0 = JSONObject.valueToString(hashMap0, 125, 125);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Short short0 = new Short((short)23);
      hashMap0.put(short0, short0);
      BiFunction<Object, Object, Boolean> biFunction0 = (BiFunction<Object, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("istoString", true);
      jSONObject0.toString((-1711), 846);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      hashMap0.put((Double) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(846, 2700);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      int int0 = (-14);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("true", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = JSONObject.quote("\f");
      assertEquals("\"\\f\"", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = JSONObject.quote("|ia\">IUyr8E/");
      assertEquals("\"|ia\\\">IUyr8E/\"", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"L\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Short short0 = new Short((short)3);
      String string0 = JSONObject.valueToString(short0, (short)3, (short)3);
      assertNotNull(string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double double0 = new Double((-1358.917484));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Integer.getInteger("3cC)fedC}cr");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("h;L)j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of h;L)j
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("/'+~", 10);
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(846, 846);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt("d_d&o#u0G", (-42724917));
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("PPYZn7)zh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"PPYZn7)zh\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.testValidity(jSONArray0);
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = JSONObject.quote("] not found.");
      assertEquals("\"] not found.\"", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("co");
      JSONObject jSONObject1 = jSONObject0.putOpt("co", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getgetClass", (Object) "getgetClass");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("[KN} e X<B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[KN} e X<B\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
