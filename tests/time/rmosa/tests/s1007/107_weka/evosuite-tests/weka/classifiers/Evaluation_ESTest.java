/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 21:40:18 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.Stack;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.GainRatioAttributeEval;
import weka.attributeSelection.OneRAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.IntervalEstimator;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomForest;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.SimpleKMeans;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.Loader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.estimators.KernelEstimator;
import weka.estimators.PoissonEstimator;
import weka.estimators.UnivariateKernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5895213795772005
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities0 = m5Rules1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.totalCost();
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities0 = m5Rules1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5428866763466784
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(11);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "        if (i.attribute(j).isNominal())\n");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-22);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorEntropy = 80.0;
      evaluation0.SFMeanEntropyGain();
      double double0 = evaluation0.matthewsCorrelationCoefficient(11);
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.SFMeanEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities1 = m5Rules1.getCapabilities();
      capabilities0.getRevision();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-337));
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.parallelStream();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      evaluation0.numFalseNegatives((-2));
      evaluation0.weightedTruePositiveRate();
      int int0 = (-1380);
      char[] charArray0 = new char[0];
      evaluation0.setNumericPriorsFromBuffer();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(10, charArray0, (-1506));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFSchemeEntropy();
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      evaluation0.m_PriorEstimator = univariateKernelEstimator0;
      evaluation0.kappa();
      evaluation0.weightedFalsePositiveRate();
      try { 
        evaluation0.evaluateModelOnce((-0.9189385332046727), (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.handleCostOption((String) null, 0);
      RandomTree randomTree0 = new RandomTree();
      randomTree0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_MaxTarget;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootRelativeSquaredError();
      evaluation0.confusionMatrix();
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Evaluation.makeOptionString((Classifier) null, false);
      int int0 = 23;
      Integer integer0 = new Integer(23);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      m5Rules0.getCapabilities();
      capabilities0.getRevision();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(14);
      evaluation0.priorEntropy();
      evaluation0.trueNegativeRate(5);
      evaluation0.SFMeanPriorEntropy();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities.forInstances(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Integer integer0 = new Integer(10);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 106.84253;
      evaluation0.updateMargins(doubleArray0, 8, 1.0);
      double double0 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Capabilities.forInstances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getRevision();
      DenseInstance denseInstance0 = new DenseInstance((-1), (double[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(0.75, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stringFreeStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      int[] intArray0 = new int[1];
      intArray0[0] = (-2238);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, (-2238));
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities.forInstances(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.setPriors(instances0);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.getDiscardPredictions();
      try { 
        evaluation0.updateStatsForPredictor(3132.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities capabilities0 = filteredClassifier0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      testInstances0.generate("weka/core/Capabilities.props");
      evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation1.areaUnderROC(45);
      evaluation0.m_NumClasses = (-3077);
      evaluation0.confusionMatrix();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (-3077);
      doubleArray0[2] = (double) 45;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-3077));
      SparseInstance sparseInstance0 = new SparseInstance(45);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (double) (-1);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray1, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Capabilities.forInstances(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      Vote vote0 = new Vote();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      Capabilities capabilities1 = vote0.getCapabilities();
      capabilities1.getClassCapabilities();
      // Undeclared exception!
      try { 
        evaluation0.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities.forInstances(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation.makeOptionString(filteredClassifier0, true);
      Integer integer0 = new Integer(2);
      Enumeration enumeration0 = textDirectoryLoader0.listOptions();
      assertNotNull(enumeration0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(11);
      Evaluation evaluation0 = new Evaluation(instances0);
      Integer integer0 = new Integer(11);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities.forInstances(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.m_TotalCoverage;
      evaluation0.setPriors(instances0);
      double double3 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.incorrect();
      assertEquals(double4, double3, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 1.2000000029802322;
      doubleArray0[7] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance(1.2000000029802322, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = 1987.0;
      try { 
        evaluation0.updateStatsForPredictor(6, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_TotalCoverage;
      evaluation0.numFalseNegatives(9);
      evaluation0.weightedTruePositiveRate();
      double double2 = evaluation0.falsePositiveRate(14);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate((String) null);
      databaseLoader0.getNextInstance(instances1);
      try { 
        evaluation0.updateStatsForIntervalEstimator((IntervalEstimator) null, (Instance) null, 874.6804781);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.truePositiveRate(13);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[5] = (double) 13;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      OneRAttributeEval oneRAttributeEval0 = new OneRAttributeEval();
      Capabilities capabilities0 = oneRAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7369305949381175
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstancesRelational(5);
      Instances instances0 = testInstances0.generate("{2jbBm*");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5G&$P<sT>\"]8");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumClass = (double) 5;
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      evaluation0.trueNegativeRate(1505);
      evaluation0.weightedMatthewsCorrelation();
      PART pART0 = new PART();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      arffLoader0.retrieveFile();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) pART0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.addNumericTrainClass(Double.NaN, 1128.703884750579);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Evaluation.handleCostOption("", 0);
      RandomTree randomTree0 = new RandomTree();
      randomTree0.toGraph();
      randomTree0.getCapabilities();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 283;
      intArray0[2] = 0;
      intArray0[3] = 283;
      SparseInstance sparseInstance0 = new SparseInstance(690.816591, doubleArray0, intArray0, (-1112551771));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0);
      SparseInstance sparseInstance1 = new SparseInstance(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray1 = new double[0];
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray1, (Instance) sparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5884082070354566
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 102261132);
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      Stack<RandomForest> stack0 = new Stack<RandomForest>();
      LinkedHashSet<RandomForest> linkedHashSet0 = new LinkedHashSet<RandomForest>(stack0);
      instances0.containsAll(linkedHashSet0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.unweightedMacroFmeasure();
      String string0 = evaluation2.toSummaryString(" ", true);
      assertEquals(" \nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.errorRate();
      assertEquals(double2, double1, 0.01);
      
      evaluation1.setNumericPriorsFromBuffer();
      evaluation0.totalCost();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities0 = m5Rules1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities1 = m5Rules1.getCapabilities();
      capabilities1.getRevision();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-2));
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.trueNegativeRate(2);
      evaluation1.SFMeanPriorEntropy();
      MockRandom mockRandom0 = new MockRandom();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_WithClass = (-0.25);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, 6.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      m5Rules0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      double double1 = evaluation0.m_TotalCoverage;
      evaluation0.setPriors(instances0);
      double double2 = evaluation0.numFalseNegatives(9);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.kappa();
      double double3 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double3, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.falseNegativeRate((-371));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.883501065030505
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      RandomTree randomTree0 = new RandomTree();
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-1491.6618810657426);
      doubleArray0[2] = (double) 2018;
      doubleArray0[3] = (double) (-2);
      doubleArray0[5] = (double) 2018;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.handleCostOption((String) null, 0);
      RandomTree randomTree0 = new RandomTree();
      randomTree0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.useNoPriors();
      // Undeclared exception!
      try { 
        evaluation1.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setRetrieval(13);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.pctIncorrect();
      Random.setNextRandom((-1456206972));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 102261132);
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderROC(0);
      double double1 = evaluation0.falseNegativeRate(3);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stratify(1160134876);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)15);
      binarySparseInstance0.setMissing((int) (byte) (-97));
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.truePositiveRate((-102261132));
      double double1 = evaluation0.fMeasure((-1));
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation1.rootMeanSquaredError();
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double1 = evaluation0.meanAbsoluteError();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Evaluation.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 106.84253;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1194), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1194
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClassPredicted;
      double double1 = evaluation0.avgCost();
      evaluation0.setNumericPriorsFromBuffer();
      double double2 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) filteredClassifier0, instances0, (-1), (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.setFastDistanceCalc(true);
      Evaluation.handleCostOption((String) null, 2311);
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFMeanSchemeEntropy();
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalseNegatives((-1));
      evaluation1.setPriors(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.meanPriorAbsoluteError();
      evaluation1.areaUnderPRC(3315);
      // Undeclared exception!
      try { 
        evaluation0.recall(3315);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3315
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 0);
      TestInstances testInstances0 = new TestInstances();
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      Capabilities capabilities0 = poissonEstimator0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RandomTree randomTree0 = new RandomTree();
      RandomTree randomTree1 = new RandomTree();
      randomTree0.getCapabilities();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      try { 
        evaluation0.setPriors(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " statistics for each class.\n";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@data";
      textDirectoryLoader0.setCharSet("@relation");
      stringArray0[3] = ".arff";
      stringArray0[4] = "@relation";
      try { 
        Evaluation.evaluateModel("@relation", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name @relation.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstancesRelational(5);
      Instances instances0 = testInstances0.generate("{2jbBm*");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5G&$Pk<sT>\"]8");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-632.831586788703);
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2.0));
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.areaUnderROC((-1));
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel1.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities1 = m5Rules0.getCapabilities();
      capabilities1.getRevision();
      TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances2 = new TestInstances();
      TestInstances testInstances3 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(100);
      evaluation0.trueNegativeRate((-2));
      evaluation0.SFMeanPriorEntropy();
      MockRandom mockRandom0 = new MockRandom();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4888888888888889
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.handleCostOption((String) null, 0);
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation0.m_SumPredicted;
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      capabilities0.toSource(".bsi");
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.matthewsCorrelationCoefficient(0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances2.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-2));
      evaluation0.priorEntropy();
      testInstances0.generate("h!{U.hHf# z@0PrM>6");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      assertEquals("", databaseLoader0.getUser());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      RandomTree randomTree0 = new RandomTree();
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      int int0 = (-102261132);
      evaluation1.truePositiveRate(0);
      MockRandom mockRandom0 = new MockRandom();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        ConverterUtils.DataSource.read((Loader) matlabLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1902570071495406
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 0);
      RandomTree randomTree0 = new RandomTree();
      randomTree0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_NumFolds = (-157);
      evaluation0.confusionMatrix();
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Capabilities.forInstances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.precision(488);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.areaUnderPRC(494);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomial0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instances.test(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      try { 
        arffLoader1.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.weightedTruePositiveRate();
      PART pART0 = new PART();
      int[] intArray0 = new int[7];
      intArray0[0] = (-16);
      intArray0[1] = (-243);
      intArray0[2] = 5;
      intArray0[3] = (-704);
      intArray0[4] = 184;
      intArray0[4] = 113;
      intArray0[6] = 13;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, intArray0, Integer.MIN_VALUE);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((Classifier) pART0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.falseNegativeRate((-55));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumSqrErr = 0.95;
      double double0 = evaluation0.falseNegativeRate(600);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      RandomTree randomTree0 = new RandomTree();
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      int[] intArray0 = new int[0];
      Instance instance0 = BallNode.calcCentroidPivot(intArray0, instances0);
      instances0.add(instance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities.forInstances(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.truePositiveRate(34);
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) instances0;
      try { 
        evaluation0.crossValidateModel((Classifier) filteredClassifier0, (Instances) null, 479, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MockRandom mockRandom0 = new MockRandom();
      IBk iBk0 = new IBk();
      try { 
        evaluation0.crossValidateModel((Classifier) iBk0, instances0, 1589, (java.util.Random) mockRandom0, (Object[]) iBk0.TAGS_WEIGHTING);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities0 = m5Rules1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.setMinimumNumberInstances((-1));
      Instances instances0 = testInstances0.generate();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("olBYO  48t\"");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.numFalseNegatives((-1));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.SFEntropyGain();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      capabilities0.toSource(".bsi");
      String string0 = evaluation0.toMatrixString("~PAwG");
      assertEquals("~PAwG\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString((String) null);
      assertEquals("null\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      String string1 = evaluation0.num2ShortID(65, charArray0, 61);
      assertEquals("7777777777777777777777777777777777777777777777777777777777777", string1);
      
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stratify(1160134876);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)15);
      binarySparseInstance0.setMissing((int) (byte) (-97));
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.truePositiveRate((-102261132));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.m_MaxTarget;
      double double1 = evaluation0.precision(46);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 0);
      RandomTree randomTree0 = new RandomTree();
      randomTree0.setMinNum(93.0);
      randomTree0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_NumFolds = (-157);
      Integer integer0 = new Integer((-2));
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities0 = m5Rules1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      
      Evaluation.handleCostOption("", 109);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) databaseLoader0;
      objectArray0[3] = (Object) databaseLoader0;
      objectArray0[4] = (Object) capabilities0;
      objectArray0[5] = (Object) evaluation0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) textDirectoryLoader0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 109);
      evaluation0.equals(defaultTableModel0);
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = ',';
      charArray0[2] = '-';
      charArray0[3] = 'X';
      charArray0[4] = '8';
      charArray0[5] = '4';
      charArray0[6] = 'g';
      charArray0[7] = 'U';
      String string0 = evaluation0.num2ShortID(113, charArray0, 96);
      assertEquals("                                                                                             ?4,", string0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 0);
      RandomTree randomTree0 = new RandomTree();
      randomTree0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '.';
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID((-1), charArray0, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities0 = m5Rules1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.precision(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      testInstances0.setHandler(gainRatioAttributeEval0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(1402.12683181411);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1402
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.evaluateModelOnce(125.0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 125
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      instances0.stratify(1160134876);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)15);
      binarySparseInstance0.setMissing((int) (byte) (-97));
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.truePositiveRate((-102261132));
      double double0 = evaluation0.recall(6);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.fMeasure((-1112551771));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_WithClass = (-0.25);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(-0.0, evaluation0.SFMeanSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMicroFmeasure();
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.truePositiveRate(273);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities.forInstances(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.setPriors(instances0);
      Integer integer0 = new Integer((-1616));
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      String string0 = evaluation0.toClassDetailsString("debugTipText");
      assertEquals("debugTipText\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_ClassPriorsSum;
      double double2 = evaluation0.m_Incorrect;
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@data";
      stringArray0[4] = ".arff";
      stringArray0[5] = "@relation";
      stringArray0[6] = "@relation";
      stringArray0[7] = ".arff";
      try { 
        Evaluation.evaluateModel(classifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      instances0.stratify(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      binarySparseInstance0.setMissing(2);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) costSensitiveClassifier0, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0);
      PipedReader pipedReader0 = new PipedReader(3395);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setDiscardPredictions(true);
      assertTrue(evaluation1.getDiscardPredictions());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.setFastDistanceCalc(true);
      Evaluation.handleCostOption((String) null, 0);
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1112551771));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1112551771
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      RandomTree randomTree0 = new RandomTree();
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(2018);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(189);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 189
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0);
      Utils.SMALL = 0.0;
      evaluation0.toSummaryString();
      PipedReader pipedReader0 = new PipedReader(3395);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation1.numInstances();
      evaluation1.correct();
      evaluation1.precision((-2572));
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      KernelEstimator kernelEstimator0 = new KernelEstimator(100.0);
      Capabilities capabilities0 = kernelEstimator0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      instances0.stratify(2);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      textDirectoryLoader0.setOptions(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setDebug(true);
      evaluation0.getRevision();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      try { 
        AbstractClassifier.forName(".arff", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .arff
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel2.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      AbstractClassifier.runClassifier(m5Rules0, testInstances0.DEFAULT_WORDS);
      Evaluation.getGlobalInfo(m5Rules1);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      String string0 = Evaluation.makeOptionString(naiveBayesUpdateable0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      RandomForest randomForest0 = new RandomForest();
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) randomForest0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.trees.RandomForest:
         // 
         // -I <number of trees>
         // \tNumber of trees to build.
         // -K <number of features>
         // \tNumber of features to consider (<1=int(logM+1)).
         // -S
         // \tSeed for random number generator.
         // \t(default 1)
         // -depth <num>
         // \tThe maximum depth of the trees, 0 for unlimited.
         // \t(default 0)
         // -print
         // \tPrint the individual trees in the output
         // -num-slots <num>
         // \tNumber of execution slots.
         // \t(default 1 - i.e. no parallelism)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      RandomTree randomTree0 = new RandomTree();
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.m_MaxTarget;
      // Undeclared exception!
      try { 
        evaluation0.precision(2124638077);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2124638077
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "kernelTipText");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.unweightedMacroFmeasure();
      String string0 = evaluation0.toSummaryString(".bsi", false);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(".bsi\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities.forInstances(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.precision((-3797));
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".arff";
      stringArray0[1] = "H";
      stringArray0[2] = "@data";
      stringArray0[3] = "@data";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "@data";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "weka/core/Capabilities.props";
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("@data", instances0, (-3797), stringArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @data
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      try { 
        Evaluation.handleCostOption("SELECT", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "fy");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "modelFileTipText");
      assertNotNull(string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
