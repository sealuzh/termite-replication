/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 22:03:19 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", (Collection) linkedList0);
      jSONObject0.put("ROdK9RZ", true);
      boolean boolean0 = jSONObject1.getBoolean("ROdK9RZ");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("HS,nIFO9N\"|/B", false);
      jSONObject1.put("HS,nIFO9N\"|/B", (Object) jSONObject0);
      jSONObject0.names();
      jSONObject0.optJSONArray("HS,nIFO9N\"|/B");
      boolean boolean0 = jSONObject0.has("HS,nIFO9N\"|/B");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.106547739023696
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "6G&:RgGKTc24-68=u");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("true", (Object) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      jSONObject1.optInt((String) null, 260);
      jSONObject1.toString((-2937), (-2937));
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Integer integer0 = new Integer((-688));
      hashMap0.put((Boolean) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2756304369699905
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("r");
      JSONObject jSONObject1 = jSONObject0.put("has", (Object) "has");
      JSONObject.getNames(jSONObject1);
      String string0 = jSONObject0.optString("has");
      assertNotNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("isvalueOf", 801);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = jSONObject1.isNull("isvalueOf");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "iu'h8/";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("iu'h8/", object0);
      try { 
        jSONObject1.getBoolean("iu'h8/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iu'h8/\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("not", (Collection) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject0.names();
      jSONObject0.getJSONArray("not");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{s*a|G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {s*a|G
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.101241191122625
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 908L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.getLong("ROdK9RZ");
      JSONObject jSONObject2 = jSONObject1.put("ROdK9RZ", (Collection) linkedList0);
      Byte byte0 = new Byte((byte)69);
      jSONObject0.put("] is not a Boolean.", (Object) byte0);
      jSONObject0.toString((-3663), (-3663));
      JSONObject.valueToString(object0, (-3663), (-3663));
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject2.toJSONArray(jSONArray0);
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.095924398920587
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-1203));
      JSONObject jSONObject1 = new JSONObject(integer0);
      JSONObject jSONObject2 = jSONObject0.put("wai", (-1L));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.put("wai", (Collection) linkedList0);
      jSONObject1.toString((-3663), (-2480));
      JSONObject.valueToString(linkedList0, 829, (-3663));
      Float float0 = new Float((-1.0F));
      Boolean boolean0 = Boolean.valueOf("[]");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.put((Collection) null);
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.optString("] is not a Boolean.", (String) null);
      jSONObject0.optString((String) null);
      try { 
        jSONObject0.getJSONArray("yQf~Lqz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"yQf~Lqz\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1168.111);
      assertEquals("1168.111", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "1168.111");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1168.111";
      stringArray0[1] = "1168.111";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("1168.111", (Object) "1168.111");
      jSONObject2.getInt("1168.111");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8760902794872374
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("ROdK9RZ", 908L);
      jSONObject0.toString((-3663), (-3663));
      JSONObject.quote("{\n\"java.lang.String@0000000004\": java.lang.Long@0000000005,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(61);
      hashMap0.put(jSONObject0, integer0);
      HashMap<JSONObject, Float> hashMap1 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      jSONObject1.optJSONArray("ROdK9RZ");
      jSONObject0.optString("ROdK9RZ", "true");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(1134, 1134);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      JSONObject.testValidity(jSONObject2);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString((-781), 44);
      JSONObject.quote("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      Float float0 = new Float((-336.9114733867377));
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{^.=.joK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 8 of {^.=.joK
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{?#s;g4P=D5z+#HPZ0D");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 19 of {?#s;g4P=D5z+#HPZ0D
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("iu'h8/", object0);
      jSONObject1.put("iu'h8/", false);
      jSONObject0.getBoolean("iu'h8/");
      try { 
        jSONObject1.getDouble("iu'h8/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iu'h8/\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.845325034315053
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Float float0 = new Float((-2232.3112399863944));
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(8192);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put("", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("cTj#4", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      StringWriter stringWriter0 = new StringWriter(10);
      stringWriter0.close();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
      
      Long long0 = new Long(1929L);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      JSONObject.getNames((Object) long0);
      Byte byte0 = new Byte((byte)55);
      JSONObject.quote("/l(l=O?XO!3dm]-+y/");
      jSONObject1.optString("istoUnsignedLong", "<G");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject1);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Short> hashMap0 = new HashMap<Long, Short>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject1.put((String) null, 801);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Float.max(1094.0F, 2146.8662F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("0", stringArray0);
      jSONObject0.put("0", (-419.76400048));
      jSONObject0.getDouble("0");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (Object) "");
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Float float0 = new Float((-165.9F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("fSp=\"", 1164.2);
      Byte byte0 = new Byte((byte)13);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.8649859267415604
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      Object object1 = new Object();
      Float.isFinite(1.0F);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\",\n\"";
      stringArray0[1] = "\",\n\"";
      stringArray0[2] = "\",\n\"";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\",\n\"", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ln9u;(/&@/hw8<Ds", 908L);
      double double0 = jSONObject0.getDouble("ln9u;(/&@/hw8<Ds");
      assertEquals(908.0, double0, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt("'`t%I", long0);
      Float.isFinite(196.1F);
      double double0 = jSONObject1.getDouble("'`t%I");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Y');
      Object object0 = JSONObject.NULL;
      int int0 = (-2475);
      JSONObject.valueToString(object0, (-2475), (-2475));
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "null", (-2475), (-2475));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ln9u;(/&@/hw8<Ds", 712L);
      double double0 = new Long(712L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject0.accumulate("ln9u;(/&@/hw8<Ds", jSONArray0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2016.8613115);
      Float float0 = new Float((-2602.278896432));
      JSONObject jSONObject1 = jSONObject0.put("=Z$5", (Object) jSONArray0);
      jSONObject0.accumulate("=Z$5", "=Z$5");
      JSONObject.valueToString(jSONObject0);
      Byte byte0 = new Byte((byte)79);
      JSONObject jSONObject2 = jSONObject0.append("=Z$5", byte0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-3314.0));
      JSONObject jSONObject1 = jSONObject0.put("/l(l=O?XO!3dm]-+y/", (Object) float0);
      JSONObject jSONObject2 = jSONObject1.accumulate("/l(l=O?XO!3dm]-+y/", float0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1118.513F);
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t";
      stringArray0[1] = "c8@dQ~_<";
      jSONObject1.keys();
      stringArray0[2] = "CR,";
      stringArray0[3] = "4K}\"Sa}";
      stringArray0[4] = "Null pointer";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, 44, 1203);
      JSONObject jSONObject3 = jSONObject2.optJSONObject("\"${");
      assertNull(jSONObject3);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-3314.0));
      JSONObject jSONObject1 = jSONObject0.put("/l(l=O?XO!3dm]-+y/", (Object) float0);
      Float float1 = new Float((-1.0F));
      try { 
        jSONObject1.append("/l(l=O?XO!3dm]-+y/", "/l(l=O?XO!3dm]-+y/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[/l(l=O?XO!3dm]-+y/] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Short short0 = new Short((short)19);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$1", 1349.83137939403);
      byte byte0 = (byte)40;
      Byte byte1 = new Byte((byte)40);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.put(":,01~Z", (double) (short)19);
      jSONObject1.optDouble(":,01~Z");
      Integer integer0 = new Integer((-848));
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("has", 1);
      double double0 = jSONObject1.optDouble("has", (double) 1);
      assertEquals(1.0, double0, 0.01);
      
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = new JSONObject(jSONArray0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optBoolean("w|", false);
      Short short0 = new Short((short)3453);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject2 = new JSONObject(stringWriter0);
      jSONObject2.write(stringWriter0);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.587973990795769
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject();
      long long0 = 908L;
      JSONObject jSONObject1 = new JSONObject((Object) "j~M`::;5&V8'\"");
      // Undeclared exception!
      jSONObject1.toString(1520, 48);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = new Object();
      jSONObject0.isNull("U}KjU/:l<2]3^#Q@");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("getoptString", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iu'h8/", (Object) jSONObject0);
      try { 
        jSONObject0.getBoolean("iu'h8/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iu'h8/\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray1 = jSONArray0.put((Collection) linkedList0);
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(jSONArray1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "p";
      stringArray0[1] = ",KFoz\"!M}=PGt";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte.toUnsignedLong((byte)0);
      jSONObject0.optDouble(",KFoz\"!M}=PGt", (double) (byte)0);
      jSONObject0.optLong(",KFoz\"!M}=PGt", (long) (byte)0);
      Boolean boolean0 = Boolean.FALSE;
      Byte.toUnsignedLong((byte)88);
      JSONObject jSONObject1 = new JSONObject(",KFoz\"!M}=PGt", stringArray0);
      jSONObject1.optDouble(",KFoz\"!M}=PGt", 2251.69499429);
      jSONObject1.optLong("D5</fjiYU65yKd9KO35", 0L);
      Boolean boolean1 = Boolean.FALSE;
      Short short0 = new Short((short) (-4876));
      JSONObject.getNames((Object) short0);
      HashMap<JSONObject, Object> hashMap0 = null;
      try {
        hashMap0 = new HashMap<JSONObject, Object>((-108916131), (short) (-4876));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -108916131
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/l(l=O?XO!3dm]-+y/", (Object) "/l(l=O?XO!3dm]-+y/");
      try { 
        jSONObject0.getJSONArray("/l(l=O?XO!3dm]-+y/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/l(l=O?XO!3dm]-+y/\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1829430989272922
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Jp)HM*pk&)AzfS:#HY$";
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      jSONObject0.put("^4$bTCw[`C_I", (Map) hashMap0);
      String string1 = null;
      JSONObject.quote("JSONObject[");
      jSONObject0.optLong("Jp)HM*pk&)AzfS:#HY$", (-2043L));
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"JSONObject[\"");
      char[] charArray0 = new char[0];
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Jp)HM*pk&)AzfS:#HY$", 0, 0);
      jSONObject0.write(stringWriter2);
      try { 
        jSONObject0.getJSONArray("Jp)HM*pk&)AzfS:#HY$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Jp)HM*pk&)AzfS:#HY$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("' and instead saw '", hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote("d>V^D>GZl");
      assertEquals("\"d>V^D>GZl\"", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("y^|h5uD`Gl=]|FbN^i", true);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "/l(l=O?XO!3d<]-+y/";
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.optString("] is not a JSONObject.");
      assertEquals("", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.toString((-4708), (-1828));
      jSONObject0.toString(1023, 47);
      JSONObject.valueToString(jSONObject0, 1023, 1279);
      Float float0 = new Float((float) (-1828));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject jSONObject1 = jSONObject0.putOpt("9y'|VVDXvNri", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      Byte byte0 = new Byte((byte)104);
      Byte.compare((byte)104, (byte)32);
      Integer integer0 = new Integer((byte)104);
      hashMap0.put(byte0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("-376..", 1L);
      String string0 = jSONObject0.getString("-376..");
      assertNotNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("/l(l=O?XO!3dm]-+y/", (Object) null);
      try { 
        jSONObject0.getBoolean("\"^@Z&GmhQJORSh9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"^@Z&GmhQJORSh9\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.9786632931034053
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "KOw[J");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("KOw[J", stringArray0);
      jSONObject0.opt((String) null);
      jSONObject0.append("KOw[J", (Object) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt("3", (int) (byte)0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.append("", (Object) null);
      jSONObject1.has("ey>JLw+hwb%8B22P");
      Float float0 = new Float(0.0F);
      Float.sum(0.0F, (byte)0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      hashMap0.put("hlz7", float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Consumer<Object> consumer0 = null;
      // Undeclared exception!
      try { 
        linkedList0.forEach((Consumer<? super JSONObject>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", 2802.322146428514);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt(":#PHr=?*[h", (-75));
      String string0 = "Null keK.";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Null keK.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Null keK.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 160, 16);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONArray0.put((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)0);
      Double double0 = new Double(2527.107595287693);
      Object object0 = new Object();
      String string0 = jSONObject0.optString("pa", "`Nv([mU");
      assertEquals("`Nv([mU", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 1134, 1134);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("isnumberToString", (-45.02003645561367));
      assertEquals((-45.02003645561367), double0, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("iu'h8/");
      assertEquals("\"iu'h8/\"", string0);
      
      String string1 = JSONObject.valueToString((Object) null, 114, 114);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("] is not a Boolean.");
      jSONObject0.optLong("] is not a Boolean.", (-768L));
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"] is not a Boolean.\"");
      int int1 = 0;
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "] is not a Boolean.", 0, 276);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("TzhL(I(wVI|j", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.154327141142871
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1168.111);
      assertEquals("1168.111", string0);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("xcp%4tky>W,g&Mh%O");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("/l(l=O?XO!3dm]-+y/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/l(l=O?XO!3dm]-+y/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 908L);
      jSONObject1.optInt("ROdK9RZ");
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 908L);
      JSONObject.getNames((Object) jSONObject1);
      jSONObject1.getInt("ROdK9RZ");
      Byte byte0 = new Byte((byte)2);
      Integer integer0 = new Integer(1033);
      String string0 = JSONObject.valueToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Double double0 = new Double(2621.236331273);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(70, 70);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-932), 506);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.min(0.0F, 461.02F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt("it", 46);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0010978655241447
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = JSONObject.quote("ln9u;(/&@/hw8<Ds");
      assertEquals("\"ln9u;(/&@/hw8<Ds\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("\"ln9u;(/&@/hw\\8<Ds\"");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/l(l=O?XO!3dm]-+y/", (Object) "/l(l=O?XO!3dm]-+y/");
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.getInt("/l(l=O?XO!3dm]-+y/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/l(l=O?XO!3dm]-+y/\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getInt("jfUt?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jfUt?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.quote("UU2s\"z=4d`(StzV'E");
      assertEquals("\"UU2s\\\"z=4d`(StzV'E\"", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "uV%";
      JSONObject jSONObject1 = jSONObject0.put("uV%", 0.0);
      jSONObject1.optLong("uV%", (-578L));
      try { 
        jSONObject1.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Long long0 = new Long(707L);
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Float float0 = new Float(0.0F);
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString();
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(93.0);
      Double double1 = new Double(0.0);
      hashMap0.put(double0, double1);
      Double double2 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.put("[d_<U:", (Object) double2);
      JSONObject.doubleToString(1134);
      jSONObject1.has("1134");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("/l(l=O?XO!3dm]-+y/", (Object) "/l(l=O?XO!3dm]-+y/");
      try { 
        jSONObject0.getLong("/l(l=O?XO!3dm]-+y/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/l(l=O?XO!3dm]-+y/\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iu'h8/", 0.0);
      jSONObject1.get("iu'h8/");
      try { 
        jSONObject1.getJSONObject("iu'h8/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iu'h8/\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("has", (Object) "has");
      try { 
        jSONObject0.getBoolean("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"has\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)102);
      jSONObject0.put("", (Object) byte0);
      jSONObject0.remove("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.valueToString("x$o2v=hC5");
      assertNotNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject.valueToString(linkedList0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("LWGk8N$*oUt'#(=,");
      jSONObject0.put("LR$Kn'\"!SW-}9g=~C.", 1158L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("li");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"li\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Float float0 = new Float((-2023.84));
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.remove("isoptJSONObject");
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      HashMap<Double, JSONObject> hashMap1 = new HashMap<Double, JSONObject>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      double double0 = jSONObject0.optDouble(",");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.put("getformat", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("va");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"va\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Map<Integer, Double> map0 = null;
      Byte byte0 = new Byte((byte)0);
      Double double0 = new Double((byte)0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("ln9u;(/&@/hw8<Ds");
      jSONObject0.optDouble("ln9u;(/&@/hw8<Ds", 1861.69);
      Float float0 = new Float((-1766.248F));
      jSONObject0.put("ln9u;(/&@/hw8<Ds", (Object) "isoptJSONObject");
      boolean boolean0 = new Boolean("ln9u;(/&@/hw8<Ds");
      Boolean boolean1 = Boolean.FALSE;
      String string1 = JSONObject.valueToString(boolean1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      try { 
        jSONObject0.accumulate((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = new Integer(1155);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.valueToString(float0, 9, 9);
      assertNotNull(string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      int int0 = 2;
      String string0 = ".W(0%*m`aP@i5";
      Boolean.getBoolean(".W(0%*m`aP@i5");
      Boolean.logicalXor(false, false);
      int int1 = 48;
      JSONObject.valueToString(boolean0, 2, 48);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Boolean boolean0 = new Boolean("rev");
      Integer integer0 = new Integer((-1110));
      hashMap0.put(boolean0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(44, 47);
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(2692.152505539015);
      hashMap0.put((Double) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "r*m=2hW0#6G47WD";
      int int0 = (-812);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-812), 2448);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-52526265));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("!\"r]wc");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Short short0 = new Short((short)640);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Boolean.valueOf(true);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float.isFinite((-2860.3218F));
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.0376491662493996
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = ",\n";
      JSONObject.quote(",\n");
      Object object1 = new Object();
      Float.isFinite(1.0F);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put(jSONObject0, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONObject cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("A\"V4l9'fn6:-t%sj1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A\\\"V4l9'fn6:-t%sj1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("C", float0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("z(IN.!8\"EE4i77i[m<");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of z(IN.!8\"EE4i77i[m<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", 1L);
      assertEquals(1L, long0);
      
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote("n;IQ%S=t$v^f]>9%#R");
      assertEquals("\"n;IQ%S=t$v^f]>9%#R\"", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "p";
      stringArray0[1] = "`bmXB^j_.1{`$";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte.toUnsignedLong((byte)0);
      jSONObject0.optDouble("`bmXB^j_.1{`$", (double) (byte)0);
      jSONObject0.optLong("`bmXB^j_.1{`$", (long) (byte)0);
      Float.isFinite(0L);
      Float.sum(2071.1125F, 0L);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      String string0 = "Q";
      Float float0 = new Float((-1.0F));
      hashMap0.put("Q", float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      LinkedList<JSONObject> linkedList2 = new LinkedList<JSONObject>();
      // Undeclared exception!
      try { 
        linkedList2.forEach((Consumer<? super JSONObject>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) "/l(l=O?XO!3dm]-+y/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>(57);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("9,,=WV/nq,", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "9,,=\\WV/nq,\\";
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>(57);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = null;
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      long long0 = jSONObject0.optLong("isnotifyAll");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("isnumberToString", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject();
      Object object1 = jSONObject0.opt("xNH<m]lA5E2Q");
      assertNull(object1);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("isdoubleToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isdoubleToString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("ln9u;(/&@/hw8<Ds", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("x0$o2v=hC5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of x0$o2v=hC5
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
