/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 28 18:45:48 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = JSONObject.quote("-<2&/xPy)g%vKag[<C");
      assertEquals("\"-<2&/xPy)g%vKag[<C\"", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("}EMP3_Wl<Li0({4JK");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }EMP3_Wl<Li0({4JK
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5171063970610277
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9830877585747856
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "ic@CLR2xuRs");
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)102);
      jSONObject0.put("", (Object) byte0);
      Object object0 = jSONObject0.remove("");
      assertEquals((byte)102, object0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("bKhll>3+~OS`\"{uOn^", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(")", 908L);
      long long0 = jSONObject0.optLong(")");
      assertEquals(908L, long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0449311748495913
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1.0));
      JSONObject jSONObject1 = jSONObject0.accumulate("t][1Qo= i]~bZ", double0);
      long long0 = jSONObject1.optLong("t][1Qo= i]~bZ");
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)2275);
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONArray", short0);
      int int0 = jSONObject1.optInt("wheel.json.JSONArray");
      assertEquals(2275, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-1823));
      JSONObject jSONObject1 = jSONObject0.accumulate("2Om}", short0);
      int int0 = jSONObject1.optInt("2Om}");
      assertEquals((-1823), int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a Boolean.", 908L);
      double double0 = jSONObject0.optDouble("] is not a Boolean.");
      assertEquals(908.0, double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(".", (-2670L));
      double double0 = jSONObject0.optDouble(".");
      assertEquals((-2670.0), double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-1423.01581192.", (-1588L));
      Object object0 = jSONObject1.opt("-1423.01581192.");
      assertEquals((-1588L), object0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.keys();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7671949977916748
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("na", float0);
      boolean boolean0 = jSONObject1.isNull("na");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.473502385080649
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("val", float0);
      boolean boolean0 = jSONObject1.has("val");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getfloatToRawIntBits", true);
      String string0 = jSONObject0.getString("getfloatToRawIntBits");
      assertNotNull(string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("S%", 34);
      long long0 = jSONObject1.getLong("S%");
      assertEquals(34L, long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.accumulate("wa", jSONObject1);
      JSONObject jSONObject3 = jSONObject2.getJSONObject("wa");
      assertFalse(jSONObject3.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((float) 918L);
      linkedList0.add(float0);
      jSONObject0.put("}-Y3mj^x>i}.In*Cin", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("}-Y3mj^x>i}.In*Cin");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      int int0 = jSONObject1.getInt(".");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("}-Y3mj^x>i}.In*Cin", 908L);
      int int0 = jSONObject0.getInt("}-Y3mj^x>i}.In*Cin");
      assertEquals(908, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) float0);
      double double0 = jSONObject1.getDouble("true");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8200759753606217
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isdecode", true);
      boolean boolean0 = jSONObject1.getBoolean("isdecode");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6957425341696344
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("", object0);
      Object object1 = jSONObject0.get("");
      assertSame(object0, object1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.666278442414676
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = JSONObject.valueToString("", 0, 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.792953480427564
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-42841071), (-42841071));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, 0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8405578943558434
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-2407));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("{}");
      assertNull(object0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.2798542258336674
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("j)vh6gW", (Collection) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-26752530));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1580510496905323
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("getwait", 861.6562);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-1.0));
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optString((String) null, (String) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = jSONObject0.optString("rm41BG\"i|T{#|", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("", "getmax");
      assertEquals("getmax", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(";5U^O5j", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong("] is not a JSONObject.", 1002L);
      assertEquals(3, jSONObject0.length());
      assertEquals(1002L, long0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", (-86L));
      assertEquals((-86L), long0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(",", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5936174605927702
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.optInt((String) null, 8);
      assertEquals(3, jSONObject0.length());
      assertEquals(8, int0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", (-788));
      assertEquals((-788), int0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, (double) 918L);
      assertEquals(918.0, double0, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      double double0 = jSONObject0.optDouble(": ", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      double double0 = jSONObject0.optDouble("", (-1490.0));
      assertEquals((-1490.0), double0, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("2Om}", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Long long0 = new Long(0L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("2Om}", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-1834), (-1834));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.1786549963416462
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(2692.152505539015);
      hashMap0.put((Double) null, double0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-812), 2448);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.8300761041596003
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double(Double.NaN);
      hashMap0.put("}-Y3mj^x>i}.In*Cin", double0);
      jSONObject0.put("}-Y3mj^x>i}.In*Cin", (Map) hashMap0);
      try { 
        jSONObject0.toString((-1030), 400);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5169478013981716
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      jSONObject0.toString(8192, 8192);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.9161764725781798
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double(0L);
      hashMap0.put((Object) null, double0);
      jSONObject0.put("a", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(108, 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("java.lang.Float@0000000006.", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Collection<Boolean> collection0 = hashMap0.values();
      try { 
        jSONObject0.put((String) null, collection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer((-713));
      hashMap0.putIfAbsent(integer0, "b");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("-620.7180810484771", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.3986496111888456
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("isput", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.4849258911092231
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      jSONObject0.put("] is not a JSONObject.", (Map) hashMap0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = JSONObject.valueToString(linkedList0, 92, 92);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.8869312248636236
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "cmsI3x8&4R'ax =)S2");
      jSONObject0.toString(59, 59);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.798340142981541
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.append(".", object0);
      String string0 = jSONObject0.toString((-1030), 400);
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 1498, 1498);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.30463609734923813
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      linkedList0.push(jSONObject0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.6867831479680375
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.7963116401738131
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("2Om}", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1839637727244874
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.append(",\n", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = JSONObject.quote("</%^g<uML!|Z05wY`M");
      assertEquals("\"<\\/%^g<uML!|Z05wY`M\"", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "getparseBoolean";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("", true);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("isreplace");
      JSONObject jSONObject1 = jSONObject0.put(string0, (Object) hashMap0);
      String string1 = jSONObject1.optString(string0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      jSONObject0.put("~RC^26a}", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("~RC^26a}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Expected a ',' or ']'", "Expected a ',' or ']'");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("Expected a ',' or ']'");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(".", 0L);
      double double0 = jSONObject0.optDouble(".");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.4241299173467734
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) float0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.5622590391891036
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Integer integer0 = new Integer((-3269));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) "true");
      try { 
        jSONObject1.getLong("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("wa", jSONObject0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("wa");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{}", false);
      try { 
        jSONObject1.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("}-Y3mj^x>i}.In*Cin", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("}-Y3mj^x>i}.In*Cin");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("}-Y3mj^x>i}.In*Cin", 918L);
      try { 
        jSONObject0.getJSONArray("}-Y3mj^x>i}.In*Cin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}-Y3mj^x>i}.In*Cin\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.591095563595939
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Float float0 = new Float((-1.0));
      jSONObject0.accumulate("chpV`&/ 57\"gfI", float0);
      jSONObject0.getInt("chpV`&/ 57\"gfI");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("}-Y3mj^x>i}.In*Cin", 908L);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject1.getDouble("}-Y3mj^x>i}.In*Cin");
      assertEquals(908.0, double0, 0.01);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.9559838465843624
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      boolean boolean0 = jSONObject1.optBoolean("true");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.6425559869377246
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("2Om}", "2Om}");
      boolean boolean0 = jSONObject1.optBoolean("2Om}", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.accumulate("bNNa", boolean0);
      boolean boolean1 = jSONObject1.optBoolean("bNNa");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-620.7180810484771));
      assertEquals("-620.7180810484771", string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put(")", (Collection) linkedList0);
      jSONObject0.append(")", "}-Y3mj^x>i}.In*Cin");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")", 908L);
      try { 
        jSONObject1.append(")", "}-Y3mj^x>i}.In*Cin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[)] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.3760552852604169
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("iscompare");
      jSONObject0.accumulate("iscompare", boolean0);
      Double double0 = new Double(0);
      jSONObject0.accumulate("iscompare", double0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.3356031336424652
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("[]", jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", (Object) null);
      jSONObject0.accumulate("", "wheel.json.JSONTokener");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.3066687254045313
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("", object0);
      int int0 = jSONObject0.optInt("");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.6784539852375093
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("]tW", (Map) null);
      Short short0 = new Short((short) (-1466));
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{^D4QX1\b'?r,-[.XV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {^D4QX1\b'?r,-[.XV
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=1.0318204422829809
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n\"java.lang.String@0000000002\": {},\n\"java.lang.String@0000000006\": [null]\n                                                                                                                                                                                                                                                                                                                                                                                                                }");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("ra");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ra
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=1.9458143797600496
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.accumulate("] is not a number.", object0);
      boolean boolean0 = jSONObject0.optBoolean("] is not a number.");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=1.9430096637858085
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "xhGDn^nX~$");
      // Undeclared exception!
      jSONObject0.toString(1167);
  }

  /**
  //Test case number: 172
  /*Coverage entropy=1.8836642879810856
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "6omMvn(I>L");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 735, 735);
  }

  /**
  //Test case number: 173
  /*Coverage entropy=1.558255126072715
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      long long0 = jSONObject0.optLong(",:]}/\"[{;=#");
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 174
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 175
  /*Coverage entropy=1.7206699609551361
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }
}
