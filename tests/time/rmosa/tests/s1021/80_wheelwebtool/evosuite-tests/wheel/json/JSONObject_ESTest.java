/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 09:01:32 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(float0);
      Double double0 = new Double(1081.7270344442722);
      JSONObject jSONObject1 = jSONObject0.append("u|nDejpry", double0);
      jSONObject1.optJSONArray("u|nDejpry");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("j", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("!Lb=2|F4-Sm\"NH#", 1.0);
      Integer integer0 = new Integer(3);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("j");
      assertNotSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = JSONObject.valueToString("", 39, 65);
      Float float0 = new Float((float) 39);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(10);
      Double double0 = Double.valueOf(Double.NaN);
      hashMap0.put(integer0, double0);
      try { 
        JSONObject.valueToString(hashMap0, 20, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("j", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("!Lb=2|F4-Sm\"NH#", 1.0);
      Integer integer0 = new Integer(3);
      JSONObject jSONObject1 = jSONObject0.put("pu", 92);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("j");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("zI,", (-1L));
      jSONObject0.optJSONArray((String) null);
      jSONObject0.optInt("zI,");
      JSONArray jSONArray0 = jSONObject1.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.284067161535747
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "w;emt|kq>";
      stringArray0[1] = "w;emt|kq>";
      stringArray0[2] = "w;emt|kq>";
      stringArray0[3] = "w;emt|kq>";
      stringArray0[4] = "w;emt|kq>";
      stringArray0[5] = "w;emt|kq>";
      JSONObject jSONObject0 = new JSONObject("w;emt|kq>", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("w;emt|kq>", true);
      jSONObject1.names();
      jSONObject1.optDouble("w;emt|kq>", (-1560.88485871287));
      jSONObject1.optString("w;emt|kq>");
      jSONObject1.getBoolean("w;emt|kq>");
      String string0 = "0.0";
      JSONObject jSONObject2 = jSONObject0.putOpt("0.0", "w;emt|kq>");
      String string1 = "L#du1RGa-:j";
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("L#du1RGa-:j", (Map) hashMap0);
      JSONObject.getNames(jSONObject2);
      int int0 = 10;
      JSONObject jSONObject3 = jSONObject0.put("wheel.json.JSONObject", 10);
      try { 
        jSONObject3.getJSONArray("=3G9(m8zH40vTEIl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=3G9(m8zH40vTEIl\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5295166892072647
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2257L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.87565606324755
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-42));
      hashMap0.put(integer0, integer0);
      JSONObject.valueToString(hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.Integer@0000000002\":java.lang.Integer@0000000002}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.optLong("{\"java.lang.Integer@0000000002\":java.lang.Integer@0000000002}");
      JSONObject.quote("8/2b+~=SBRIb");
      Boolean boolean0 = Boolean.TRUE;
      try { 
        jSONObject0.append((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject.valueToString(linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray(":S4[[L6");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8768603988557397
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<String, Long> hashMap1 = new HashMap<String, Long>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
      
      jSONObject0.put("isset", 0.0);
      jSONObject0.getLong("isset");
      String string0 = jSONObject0.toString((-751));
      Float float0 = new Float((float) 2);
      JSONObject.testValidity(float0);
      String string1 = jSONObject0.toString((-1086), 1768);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("/5", (Collection) linkedList0);
      JSONObject.getNames((Object) jSONObject0);
      String string0 = jSONObject1.optString("/5");
      assertNotNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("j", (Map) hashMap0);
      jSONObject0.put("!Lb=2|F4-Sm\"NH#", (Object) "!Lb=2|F4-Sm\"NH#");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("!Lb=2|F4-Sm\"NH#", 1.0);
      jSONObject1.getLong("!Lb=2|F4-Sm\"NH#");
      try { 
        Long.parseUnsignedLong("j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("issubList", jSONArray1);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      Long long0 = new Long(283L);
      Boolean boolean0 = new Boolean(true);
      hashMap0.put(long0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) ",kN>SofV/um{]~");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(",kN>SofV/um{]~", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      JSONObject.valueToString(hashMap1);
      JSONObject jSONObject0 = new JSONObject("{}");
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONTokener0.next();
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6884526475116584
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("O~dB=bEc:N", 516.2046950141);
      jSONObject1.optInt("O~dB=bEc:N");
      jSONObject0.getDouble("O~dB=bEc:N");
      JSONObject.doubleToString(0.0);
      jSONObject0.toString(57);
      jSONObject1.optLong("O~dB=bEc:N", (long) 57);
      jSONObject1.has("O~dB=bEc:N");
      try { 
        jSONObject1.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Wul<", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject1.put("Wul<", 12.558503819514286);
      Integer integer0 = new Integer(3);
      jSONObject2.getDouble("Wul<");
      JSONObject.quote("getoptString");
      jSONObject1.toString(24, 3);
      JSONObject.doubleToString(3);
      Iterator iterator0 = jSONObject2.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>(60);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(117);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 104);
      jSONObject1.optDouble("");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("j", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("!Lb=2|F4-Sm\"NH#", 1.0);
      Integer integer0 = new Integer(3);
      String string0 = JSONObject.quote("!Lb=2|F4-Sm\"NH#");
      assertEquals("\"!Lb=2|F4-Sm\\\"NH#\"", string0);
      
      double double0 = jSONObject1.optDouble("!Lb=2|F4-Sm\"NH#", 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1952.0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.100665982609539
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optLong("b+7@_");
      Boolean.getBoolean("W");
      Boolean.logicalOr(false, true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("|3O'Q6Fh zZ6[F5", (Collection) linkedList0);
      Boolean boolean1 = new Boolean("W");
      StringWriter stringWriter0 = new StringWriter(1861);
      StringWriter stringWriter1 = stringWriter0.append('Q');
      jSONObject0.write(stringWriter1);
      String string0 = JSONObject.valueToString("|3O'Q6Fh zZ6[F5");
      Float float0 = new Float(0.0F);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'g';
      charArray0[2] = 'Q';
      stringWriter1.write(charArray0);
      jSONObject1.append("|3O'Q6Fh zZ6[F5", float0);
      assertEquals(2, jSONObject0.length());
      
      String string1 = JSONObject.valueToString(stringWriter1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.592283174744059
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(39, 39);
      JSONObject.valueToString("", 39, 88);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{\n                                                                              \"java.lang.String@0000000004\": [],\n                                                                              \"java.lang.String@0000000007\": \"java.lang.Class@0000000008\",\n                                                                              \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                       }");
      jSONObject0.write(stringWriter1);
      Float float0 = new Float((float) 39);
      JSONObject.numberToString(float0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.append("\"java.lang.String@0000000010\"", "java.lang.Float@0000000012");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "j";
      JSONObject jSONObject1 = jSONObject0.put("j", (Map) hashMap0);
      try { 
        jSONObject1.append("j", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[j] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1023956589129735
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "heel.json.JSONArray";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "";
      JSONObject jSONObject1 = jSONObject0.put("", 123);
      jSONObject1.optLong("g+jr");
      stringArray0[3] = "";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.put("heel.json.JSONArray", 0);
      jSONObject2.names();
      jSONObject2.optString("[]", "[]");
      Object object0 = new Object();
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      Double double0 = new Double(123);
      hashMap0.replace(double0, "");
      Short short0 = new Short((short)162);
      Short short1 = new Short((short)162);
      jSONObject2.getInt("heel.json.JSONArray");
      assertEquals(2, jSONObject2.length());
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("istoUpperCase", "istoUpperCase");
      Object object0 = new Object();
      jSONObject0.accumulate("istoUpperCase", "istoUpperCase");
      jSONObject0.isNull("istoUpperCase");
      JSONTokener jSONTokener0 = new JSONTokener("istoUpperCase");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("wheel.json.JSONException", object0);
      try { 
        jSONObject0.getBoolean("wheel.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONException\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1136, 1136);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.doubleToString((-2299.73090335169));
      assertEquals("-2299.73090335169", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string1 = jSONObject0.optString("-2299.73090335169");
      assertEquals("", string1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Double.isFinite(0.0);
      Float float0 = new Float(0.0F);
      Float.max((short)92, 0.0F);
      Short short0 = new Short((short)92);
      JSONObject.getNames((Object) short0);
      String string0 = JSONObject.doubleToString(Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("null", true);
      jSONObject0.optBoolean("null", false);
      String string1 = jSONObject0.toString(8192);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{zYfa:N!hv-dush=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 16 of {zYfa:N!hv-dush=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "{$V";
      JSONTokener jSONTokener0 = new JSONTokener("{$V");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {$V
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.getNames((Object) boolean0);
      int int0 = 922;
      JSONObject.valueToString(hashMap0, 922, 91);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("JSON does not allow non-finite numbers.", (-981L));
      int int0 = jSONObject0.optInt("JSON does not allow non-finite numbers.", 2450);
      assertEquals((-981), int0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("$GA1=_b> <mB'Ls@A");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      HashMap<JSONObject, Byte> hashMap1 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.put("{zYfa:N!hv-dush=", (Map) hashMap1);
      try { 
        jSONObject0.getJSONArray("{zYfa:N!hv-dush=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{zYfa:N!hv-dush=\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-1592));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2842967826608906
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("", 123);
      jSONObject1.names();
      jSONObject1.optString("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.accumulate("A JSONObject text must begin with '{'", boolean0);
      jSONObject0.optBoolean("A JSONObject text must begin with '{'", true);
      jSONObject2.names();
      jSONObject0.isNull("get");
      Float float0 = new Float((-645.955541421));
      Byte byte0 = new Byte((byte) (-33));
      Long long0 = new Long(123);
      Long.compareUnsigned((-1L), 0L);
      Object object1 = new Object();
      JSONObject jSONObject3 = jSONObject2.putOpt(":/t,8J+jT^b_e!d", object1);
      int int0 = jSONObject3.optInt("equ", (-247));
      assertEquals(4, jSONObject2.length());
      assertEquals((-247), int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("y2InA[F-@}HE9`HZr9m", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Integer integer0 = Integer.getInteger(",\n", 967);
      JSONObject.valueToString(integer0, (-6870), 1282);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("is", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Null pointer", 8192);
      String string0 = jSONObject0.optString("Null pointer", "null");
      assertNotNull(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("", "");
      Integer integer0 = new Integer(3);
      jSONObject0.accumulate("92>oc!HVa-", hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      String string0 = JSONObject.quote("sOFY_@slTf/}$)");
      assertEquals("\"sOFY_@slTf/}$)\"", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("Gv;T}m_$\"g09C~sFgJF", object0);
      JSONObject jSONObject2 = jSONObject1.accumulate("Gv;T}m_$\"g09C~sFgJF", "Gv;T}m_$\"g09C~sFgJF");
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("Wul<", "/]wfi");
      JSONObject jSONObject2 = jSONObject1.accumulate("Wul<", "/]wfi");
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("Dzpx^x\"8By*{%");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(boolean0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("=36`OiB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of =36`OiB
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("iskeys");
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(" of ", (-1981.3137));
      assertEquals((-1981.3137), double0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{", 0.0);
      String string0 = "$ Q ex#=";
      Double double0 = new Double(2563.7214);
      JSONObject jSONObject1 = jSONObject0.putOpt("{", double0);
      jSONObject1.optLong("{");
      String string1 = "E.jf57q7vuI";
      jSONObject1.remove("{");
      String string2 = "Unclosed comment";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0, 27, 42);
      assertNotNull(string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 104);
      jSONObject1.optLong("");
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.accumulate("T!IH5dZU[DJ2$<b", long0);
      jSONObject1.optLong("T!IH5dZU[DJ2$<b", 0L);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of t
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1426.0364426267251));
      assertEquals("-1426.0364426267251", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isclear", (Object) null);
      try { 
        jSONObject0.getInt("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("gettoString", (Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.valueToString("gettoString", 2657, 8);
      jSONObject0.getString("gettoString");
      HashMap<JSONObject, Float> hashMap1 = new HashMap<JSONObject, Float>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap2);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append(";>NJ:", ";>NJ:");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      Writer writer1 = jSONObject0.write(stringWriter1);
      assertNotSame(writer1, writer0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(2894.5947F);
      Integer integer0 = new Integer(99);
      hashMap0.put(float0, integer0);
      jSONObject0.put("", true);
      JSONObject.doubleToString(2894.5947F);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put((String) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(2064, (-1481));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0833116341224143
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = JSONObject.quote("] not found.");
      assertEquals("\"] not found.\"", string0);
      
      Float float0 = new Float((float) (-1673));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "] not found.";
      stringArray0[2] = "\"] not found.\"";
      stringArray0[3] = "\"] not found.\"";
      stringArray0[4] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      int int0 = jSONObject0.optInt("is");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      HashMap<JSONObject, Byte> hashMap1 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.valueOf("000");
      hashMap0.put("000", boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ro", true);
      try { 
        jSONObject1.getInt("ro");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ro\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer.compareUnsigned(2104, 988);
      Integer.divideUnsigned(2016, (-2089));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(13);
      Integer integer1 = new Integer(13);
      hashMap0.put(integer0, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
      
      String string1 = JSONObject.doubleToString(792.5375180673);
      assertEquals("792.5375180673", string1);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Short short0 = new Short((short) (-1023));
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer.getInteger("] is not a JSONObject.");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "`,|OG";
      stringArray0[1] = "] is not a JSONArray.";
      stringArray0[2] = "l4#E4|Y\"~=yB8F?B]";
      stringArray0[3] = "{Y';3vT!u#n";
      stringArray0[4] = "not";
      stringArray0[5] = "getnotify";
      stringArray0[6] = "[#i1OPv@[Mmd";
      stringArray0[7] = "^_eca$DPRJtK_-";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      long long0 = jSONObject0.optLong(";_kqQw", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject.quote("pZW9,e=#");
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.remove((String) null);
      try { 
        jSONObject0.get("\"pZW9,e=#\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"pZW9,e=#\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("Y?`>O?6b=c* 5&A^T", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("istoUpperCase", "\u0007_%'wUG");
      assertEquals("\u0007_%'wUG", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("/]wfi", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Vr'+u0=+9,=", false);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      short short0 = (short) (-1023);
      Short short1 = new Short((short) (-1023));
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "getadd";
      int int0 = 128;
      int int1 = 8;
      JSONObject.valueToString(linkedList0, 8, 128);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(13);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("0YU^FQbZF0o6p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0YU^FQbZF0o6p\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("\u0001A/x]0", 1071L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = JSONObject.quote("y~kd9oH(Ot5R]7Bya");
      assertEquals("\"y~kd9oH(Ot5R]7Bya\"", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(jSONObject0, 16, 523);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString(20, 2300);
      String string0 = JSONObject.valueToString(jSONArray0, 123, 2);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 1832, (-1));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("/]wfi", "/]wfi");
      Integer integer0 = new Integer(1215);
      String string0 = JSONObject.quote("/]wfi");
      String string1 = jSONObject1.toString(1215, (-20652918));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      hashMap0.put((JSONObject) null, (String) null);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 47, (-1570));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = jSONObject0.toString(110, 47);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.quote("!s4'CYdlXGkEbB\"dGn");
      assertEquals("\"!s4'CYdlXGkEbB\\\"dGn\"", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.getString(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "+~r6Y]im";
      jSONObject0.opt("+~r6Y]im");
      Object object0 = new Object();
      String string1 = "\\u";
      jSONObject0.accumulate(string1, "+~r6Y]im");
      jSONObject0.names();
      try { 
        jSONObject0.getLong(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1.0));
      JSONObject jSONObject1 = jSONObject0.accumulate("to", double0);
      try { 
        jSONObject1.getBoolean("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("E8S9d;.(?", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 104);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("Ys_{ZdfAi=3", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Float float0 = new Float((float) 83);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate(",:]}/\"[{;=#", object0);
      jSONObject1.isNull(",:]}/\"[{;=#");
      JSONTokener jSONTokener0 = new JSONTokener(",:]}/\"[{;=#");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{zYfa:N!h-ush=", (Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject1.getDouble("{zYfa:N!h-ush=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{zYfa:N!h-ush=\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("dec");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dec\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Wul<", "Wul<");
      try { 
        jSONObject0.getBoolean("Wul<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Wul<\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("it");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"it\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(1631.9983812824385);
      JSONObject jSONObject1 = jSONObject0.put("1631.9983812824385", false);
      assertEquals(1, jSONObject0.length());
      
      Object object0 = jSONObject1.get("1631.9983812824385");
      assertEquals(false, object0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, "/]wfi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("] is not a Boolean.", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ",t\n";
      stringArray0[0] = ",t\n";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("/]wfi", object0);
      jSONObject1.optLong("/]wfi", (-1741L));
      double double0 = jSONObject1.optDouble("/]wfi", (-374.44));
      assertEquals(1, jSONObject0.length());
      assertEquals((-374.44), double0, 0.01);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.0376491662493996
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = JSONObject.quote(",t\n");
      assertEquals("\",t\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(",t\n");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("2,1tak");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2,1tak\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt(".", 928);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "H']5WX:en~";
      jSONObject0.optInt("H']5WX:en~", (-770));
      JSONTokener jSONTokener0 = new JSONTokener("getgetClass");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of getgetClass
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Unclosed comment", 747.942);
      assertEquals(747.942, double0, 0.01);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = new Boolean(false);
      hashMap0.put("getreverseBytes", boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("istoString");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt("yp0>6bC1Ru(w`N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"yp0>6bC1Ru(w`N\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      try { 
        jSONObject0.get("heel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"heel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      Float.min((-1.0F), (-2694.5F));
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("3Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 3Y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
