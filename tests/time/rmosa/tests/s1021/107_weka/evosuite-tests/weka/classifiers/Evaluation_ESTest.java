/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 08:29:49 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.util.ArrayList;
import java.util.Random;
import java.util.Spliterator;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.evaluation.output.prediction.Null;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.REPTree;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.JSONLoader;
import weka.core.converters.Loader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.estimators.UnivariateKernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      instances0.spliterator();
      textDirectoryLoader0.setCharSet("\tOutput synopsis for classifier (use in conjunction  with -h)\n");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = '\'';
      charArray0[2] = '`';
      charArray0[3] = '7';
      charArray0[4] = 'K';
      charArray0[5] = '.';
      charArray0[6] = 'Q';
      charArray0[7] = 'f';
      evaluation0.num2ShortID(19, charArray0, 19);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.listOptions();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@data";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".arff";
      stringArray0[3] = ".bsi";
      stringArray0[5] = "@relation";
      stringArray0[6] = "@relation";
      Evaluation.main(stringArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '`';
      doubleArray0[1] = (double) '.';
      doubleArray0[2] = (double) '7';
      doubleArray0[3] = (double) '\'';
      doubleArray0[4] = (double) '.';
      doubleArray0[5] = (double) '`';
      doubleArray0[6] = (double) '`';
      doubleArray0[7] = (double) 'Q';
      doubleArray0[8] = (double) 'f';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      intArray0[2] = 84;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(19, 19, intArray0, instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.49206349206349204
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      double double1 = evaluation0.weightedTruePositiveRate();
      evaluation0.falsePositiveRate((-2));
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.m_CostMatrix = null;
      double double2 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.numTrueNegatives((-1451908575));
      double double3 = evaluation0.matthewsCorrelationCoefficient((-1));
      evaluation0.KBMeanInformation();
      String string0 = evaluation0.toMatrixString("@relation");
      assertEquals("@relation\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double4 = evaluation0.kappa();
      assertEquals(1.0, double4, 0.01);
      
      double double5 = evaluation0.KBRelativeInformation();
      assertEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      instances0.spliterator();
      String string0 = "eg+}{\"[";
      SparseInstance sparseInstance0 = new SparseInstance(71);
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\nInstances sorted accordFng to first attribute:\n ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 528.6720724522;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(21);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, (-518.4976344));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("d4[9!", arrayList0, 5);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.weightedPrecision();
      double double2 = evaluation1.m_Unclassified;
      double double3 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double3, double1, 0.01);
      
      double double4 = evaluation0.numTruePositives(1240);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.avgCost();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.weightedTruePositiveRate();
      evaluation0.falsePositiveRate((-2));
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.KBInformation();
      M5P m5P0 = new M5P();
      try { 
        evaluation0.evaluateModelOnce((Classifier) m5P0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances1, 20);
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.falseNegativeRate(20);
      double double1 = evaluation0.m_SumErr;
      evaluation1.unweightedMacroFmeasure();
      MultiScheme multiScheme0 = new MultiScheme();
      double double2 = evaluation1.KBMeanInformation();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.SFEntropyGain();
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MultiScheme multiScheme0 = new MultiScheme();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      try { 
        matlabLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.setCharSet("@relation");
      Version.MINOR = (-1642);
      textDirectoryLoader0.setOutputFilename(false);
      IBk iBk0 = new IBk(111);
      LogitBoost logitBoost0 = new LogitBoost();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution((-0.4375));
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("reset");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.weightedPrecision();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation1.truePositiveRate(1240);
      assertEquals(0.0, double2, 0.01);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      evaluation1.evaluateModel((Classifier) null, instances0, objectArray0);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk();
      evaluation0.m_SumClass = (double) 4;
      LogitBoost logitBoost0 = new LogitBoost();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",\"l");
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedMatthewsCorrelation();
      instances0.spliterator();
      textDirectoryLoader0.setCharSet(".arff");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      evaluation0.numFalseNegatives((-1));
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setClassifier((Classifier) null);
      AbstractClassifier.makeCopies(logitBoost0, 77);
      // Undeclared exception!
      try { 
        Evaluation.makeOptionString(logitBoost0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.SingleClassifierEnhancer", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances1, 20);
      Evaluation evaluation0 = new Evaluation(instances1);
      textDirectoryLoader0.setOutputFilename(false);
      IBk iBk0 = new IBk((-331));
      LogitBoost logitBoost0 = new LogitBoost();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[1];
      intArray0[0] = (-331);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 20);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getRevision();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, binarySparseInstance0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Use a kernel estimator for numeric attributes rather than a normal distribution.");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.toMatrixString((String) null);
      try { 
        evaluation1.evaluationForSingleInstance((Classifier) multiScheme0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumAbsErr;
      evaluation0.unweightedMacroFmeasure();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.toMatrixString("x|<kOx\"xb,07Uj");
      evaluation0.kappa();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("reset");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFalseNegativeRate();
      double double1 = evaluation1.m_SumClassPredicted;
      double double2 = evaluation1.SFMeanEntropyGain();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation1.numTrueNegatives((-1));
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Mo<z|h$!p#2\"<|";
      stringArray0[1] = "0zu$>";
      stringArray0[2] = "hence";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("distributionForInstance");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "@data");
      textDirectoryLoader0.setOutputFilename(true);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString("getLearningRate");
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      String string1 = Evaluation.makeOptionString((Classifier) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.49275362318840576
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Use a kernel estimator for numeric attributes rather than a normal distribution.");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(0.0, 222.960288217);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Evaluation.makeOptionString(multiClassClassifier0, false);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      multiClassClassifier0.setDebug(false);
      evaluation0.setPriors(instances0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.SFMeanSchemeEntropy();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.numTrueNegatives((-1114383320));
      double double2 = evaluation0.matthewsCorrelationCoefficient(1);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.KBMeanInformation();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 1;
      evaluation0.updateMargins(doubleArray0, 3, Double.NaN);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.49275362318840576
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Use a kernel estimator for numeric attributes rather than a normal distribution.");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), 222.960288217);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Evaluation.makeOptionString(multiClassClassifier0, false);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      multiClassClassifier0.setDebug(false);
      evaluation0.setPriors(instances0);
      evaluation0.SFMeanSchemeEntropy();
      double double1 = evaluation0.SFMeanSchemeEntropy();
      double double2 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.numTrueNegatives((-1114383320));
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.matthewsCorrelationCoefficient(1);
      assertNotEquals(double4, double0, 0.01);
      
      evaluation0.KBMeanInformation();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[6] = (double) 1;
      evaluation0.updateMargins(doubleArray0, 3, 0.0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Use a kernel estimator for numeric attributes rather than a normal distribution.");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = 0.0;
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet(".arff");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      evaluation0.numFalseNegatives((-1));
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      AbstractClassifier.makeCopies(logitBoost0, 77);
      evaluation0.numFalseNegatives((-1));
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.weightedAreaUnderPRC();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.rootMeanPriorSquaredError();
      evaluation0.relativeAbsoluteError();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) logitBoost0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("+b0tz8X");
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      Null null0 = new Null();
      instances0.lastIndexOf(null0);
      AbstractClassifier.makeCopies(logitBoost0, 634);
      Evaluation.makeOptionString(logitBoost0, false);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 1479.48123363);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "y(S~");
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 634, (-1.7976931348623157E308));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.setCharSet("@relation");
      Version.MINOR = (-1642);
      IBk iBk0 = new IBk((-331));
      LogitBoost logitBoost0 = new LogitBoost();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9Zsw>H3 S/e9y*Au 5+");
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0, 20);
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-331));
      LogitBoost logitBoost0 = new LogitBoost();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9Zsw>H3 S/e9y*Au 5+");
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      evaluation0.SFPriorEntropy();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 20;
      doubleArray0[2] = 1.2;
      doubleArray0[3] = (double) 20;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) (-331);
      doubleArray0[6] = (double) 1;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getRevision");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(3388.499113030138, 657.2262062569716);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MissingClass;
      textDirectoryLoader0.setCharSet("+b0tz8X");
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Evaluation evaluation1 = new Evaluation(instances0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) testInstances0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) mockRandom0;
      try { 
        evaluation1.crossValidateModel((Classifier) additiveRegression0, (Instances) null, (-2), (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1905565069848159
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("reset");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFMeasure();
      testInstances0.setNumInstances(1368);
      String string0 = evaluation0.toClassDetailsString("$?1G.Ru67Z");
      assertEquals("$?1G.Ru67Z\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0, 20);
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk((-331));
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.getDiscardPredictions();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      evaluation0.SFPriorEntropy();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 20;
      doubleArray0[2] = 1.2;
      doubleArray0[3] = (double) 20;
      doubleArray0[4] = (double) 4;
      TestInstances testInstances0 = new TestInstances();
      Object object1 = new Object();
      try { 
        Evaluation.handleCostOption("graph", 20);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = true;
      Stack<Object> stack0 = new Stack<Object>();
      instances0.retainAll(stack0);
      Version.MINOR = (-1642);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      evaluation0.recall((-3012));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      Object object0 = new Object();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      BayesNet bayesNet0 = new BayesNet();
      try { 
        evaluation0.evaluateModel((Classifier) bayesNet0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("reset");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.m_SumClassPredicted;
      double double2 = evaluation1.SFMeanEntropyGain();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.numTrueNegatives(69);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Use a kernel estimator for numeric attributes rather than a normal distribution.");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setDebug(true);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Use a kernel estimator for numeric attributes rather than a normal distribution.");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(Double.NaN, 2763.983242);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet(".bsi");
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      evaluation0.numFalseNegatives(4);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setUseResampling(false);
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      IBk iBk0 = new IBk();
      assertEquals(0, iBk0.getWindowSize());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("reset");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numFalsePositives(1348);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("reset");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numFalsePositives((-1));
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom((-2));
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiScheme multiScheme0 = new MultiScheme();
      int[] intArray0 = new int[5];
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 14;
      intArray0[4] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-1840));
      instances0.lastIndexOf(binarySparseInstance0);
      AbstractClassifier.makeCopies(multiScheme0, 2482);
      IBk iBk0 = new IBk();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.truePositiveRate(1);
      evaluation0.weightedFMeasure();
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate("setCrossValidate");
      instances0.deleteAttributeType((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumSqrPredicted;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3388.499113030138;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = 0.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Use a kernel estimator for numeric attributes rather than a normal distribution.");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setCharSet("F");
      double double0 = evaluation0.m_SumPriorSqrErr;
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      evaluation0.areaUnderROC((-2));
      // Undeclared exception!
      try { 
        evaluation0.precision(2147483645);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483645
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Use a kernel estimator for numeric attributes rather than a normal distribution.");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = (-2);
      intArray0[4] = (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0, intArray0, (-2));
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Use a kernel estimator for numeric attributes rather than a normal distribution.");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.weightedTruePositiveRate();
      int int0 = (-815);
      double double1 = new Integer((-815));
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("reset");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      Instances instances1 = new Instances(instances0, (-1));
      CostMatrix costMatrix0 = new CostMatrix(11);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.setCharSet("@relation");
      Version.MINOR = (-1642);
      textDirectoryLoader0.setOutputFilename(false);
      IBk iBk0 = new IBk(116);
      iBk0.toString();
      IBk iBk1 = new IBk();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "IBk: No model built yet.";
      double double0 = evaluation0.m_Unclassified;
      try { 
        evaluation0.setPriors(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.truePositiveRate((-1541));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.matthewsCorrelationCoefficient((-3471));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double2, 0.01);
      
      Vote vote0 = new Vote();
      vote0.getCombinationRule();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      SelectedTag selectedTag0 = vote0.getCombinationRule();
      multiClassClassifierUpdateable0.setMethod(selectedTag0);
      double double3 = evaluation0.precision(10);
      assertEquals(double3, double1, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("reset");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numTrueNegatives((-1));
      double double2 = evaluation1.numTruePositives((-2));
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\nInstances sorted accordFng to first attribute:\n ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      evaluation0.unweightedMacroFmeasure();
      MultiScheme multiScheme0 = new MultiScheme();
      assertEquals("Whether debug information is output to console.", multiScheme0.debugTipText());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LMT lMT0 = new LMT();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities capabilities0 = lMT0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString("Buffer is null!", true);
      assertEquals("Buffer is null!\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanAbsoluteError();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.areaUnderROC(6);
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double double0 = evaluation0.m_ClassPriorsSum;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.m_MissingClass;
      double double2 = Evaluation.MIN_SF_PROB;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4324);
      try { 
        evaluation1.evaluationForSingleInstance((double[]) null, binarySparseInstance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      int int0 = evaluation0.m_NumClasses;
      AbstractClassifier.makeCopies(logitBoost0, 500);
      evaluation0.setDiscardPredictions(false);
      evaluation0.weightedFalseNegativeRate();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 65;
      doubleArray0[2] = Double.NaN;
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(500);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\nInstances sorted accordFng to first attribute:\n ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      SparseInstance sparseInstance0 = new SparseInstance(1085);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1205.867;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (double) 1085;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("AWlGaDlcS yM*lL4");
      textDirectoryLoader0.listOptions();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorSqrErr;
      textDirectoryLoader0.getOptions();
      evaluation0.weightedFalseNegativeRate();
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Use a kernel estimator for numeric attributes rather than a normal distribution.");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.trueNegativeRate(3339);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedMatthewsCorrelation();
      instances0.spliterator();
      textDirectoryLoader0.setCharSet(".arff");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setUseResampling(true);
      AbstractClassifier.makeCopies(logitBoost0, 20);
      evaluation0.errorRate();
      DenseInstance denseInstance0 = new DenseInstance(103);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-969));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setCharSet("hP6s2l");
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalseNegatives(500);
      evaluation1.m_NoPriors = true;
      LogitBoost logitBoost0 = new LogitBoost();
      int int0 = evaluation1.m_NumClasses;
      AbstractClassifier.makeCopies(logitBoost0, 0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation1.m_WithClass;
      evaluation1.KBRelativeInformation();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4.5, doubleArray0);
      try { 
        evaluation1.updateStatsForPredictor(507.88953144062, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LMT lMT0 = new LMT();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities capabilities0 = lMT0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      evaluation0.toSummaryString("Buffer is null!", true);
      evaluation0.weightedAreaUnderROC();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Evaluation.handleCostOption((String) null, 111);
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.setCharSet("@relation");
      PipedReader pipedReader0 = new PipedReader(326);
      LogitBoost logitBoost0 = new LogitBoost();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1000.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(600, doubleArray0);
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-1));
      evaluation0.weightedAreaUnderPRC();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String string0 = Evaluation.makeOptionString(costSensitiveClassifier0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      instances0.spliterator();
      textDirectoryLoader0.setCharSet("\tOutput synopsis for classifier (use in conjunction  with -h)\n");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      textDirectoryLoader1.setOutputFilename(true);
      evaluation0.numFalseNegatives((-1546));
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      AbstractClassifier.makeCopies(logitBoost0, 953);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedTruePositiveRate();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "\tDeprecated: use \"-classifications ...\" instead.\n");
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.totalCost();
      double double0 = evaluation0.trueNegativeRate(100000);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONLoader jSONLoader0 = new JSONLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("f:6}c.)|#<d~zEB");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      textDirectoryLoader0.setOutputFilename(true);
      doubleArray0[0] = (-604.08545);
      doubleArray0[1] = (-604.08545);
      doubleArray0[2] = 1168.6829593692407;
      doubleArray0[3] = (-604.08545);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-604.08545));
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "2#),`J4elDfT8%");
      DenseInstance denseInstance0 = new DenseInstance(21);
      REPTree rEPTree0 = new REPTree();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) rEPTree0, (Instance) denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.listOptions();
      textDirectoryLoader0.setCharSet("-t <name of training file>\n");
      textDirectoryLoader0.setOutputFilename(true);
      IBk iBk0 = new IBk((-1642));
      iBk0.getTechnicalInformation();
      iBk0.toString();
      IBk iBk1 = new IBk();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.falsePositiveRate(1487);
      assertEquals(0.0, double1, 0.01);
      
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = false;
      evaluation0.m_ClassIsNominal = false;
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setCharSet("-v\n");
      double double1 = evaluation0.m_SumPriorSqrErr;
      textDirectoryLoader1.getOptions();
      double double2 = evaluation0.weightedFalseNegativeRate();
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double double3 = evaluation0.pctIncorrect();
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("reset");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int int0 = (-2744);
      try { 
        evaluation0.crossValidateModel("`3q-?{", instances0, (-2744), testInstances0.DEFAULT_WORDS, (Random) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: `3q-?{
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = new Instances(instances0, 20);
      Evaluation evaluation0 = new Evaluation(instances1);
      textDirectoryLoader0.setOutputFilename(false);
      IBk iBk0 = new IBk(116);
      LogitBoost logitBoost0 = new LogitBoost();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setCharSet("F");
      double double1 = evaluation0.m_SumPriorSqrErr;
      textDirectoryLoader1.getOptions();
      double double2 = evaluation0.areaUnderROC(2147483645);
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.avgCost();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.incorrect();
      textDirectoryLoader0.setCharSet("+b0tz8X");
      Instances instances1 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      Null null0 = new Null();
      instances0.lastIndexOf(null0);
      Classifier[] classifierArray0 = AbstractClassifier.makeCopies(logitBoost0, 634);
      double double1 = evaluation0.m_ClassPriorsSum;
      evaluation0.weightedTruePositiveRate();
      evaluation0.falsePositiveRate(634);
      evaluation0.fMeasure((-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 634.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 634;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(634);
      try { 
        evaluation0.evaluateModel((Classifier) logitBoost0, instances1, (Object[]) classifierArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.classifiers.meta.LogitBoost cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONLoader jSONLoader0 = new JSONLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-582.104636);
      doubleArray0[1] = (-582.104636);
      doubleArray0[2] = (-582.104636);
      DenseInstance denseInstance0 = new DenseInstance((-582.104636), doubleArray0);
      instances0.add((Instance) denseInstance0);
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances0, 28);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -582
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Use a kernel estimator for numeric attributes rather than a normal distribution.");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate((-2));
      double double0 = evaluation0.m_SumErr;
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(3023);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3023
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      String string0 = evaluation0.getRevision();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals("9101", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setCharSet("F");
      evaluation0.weightedFalseNegativeRate();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-1116462894));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1116462894
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      LogitBoost logitBoost0 = new LogitBoost();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`oM'+0jL3.M>?7>m@^";
      stringArray0[1] = "          s[j] = new String(i.stringValue(j));\n";
      stringArray0[2] = "No training file and no object input file given.";
      stringArray0[3] = "l.CG_  &|g. 8nEr}";
      stringArray0[4] = "PzO";
      try { 
        Evaluation.evaluateModel((Classifier) logitBoost0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.LogitBoost:
         // 
         // -Q
         // \tUse resampling instead of reweighting for boosting.
         // -P <percent>
         // \tPercentage of weight mass to base training on.
         // \t(default 100, reduce to around 90 speed up)
         // -F <num>
         // \tNumber of folds for internal cross-validation.
         // \t(default 0 -- no cross-validation)
         // -R <num>
         // \tNumber of runs for internal cross-validation.
         // \t(default 1)
         // -L <num>
         // \tThreshold on the improvement of the likelihood.
         // \t(default -Double.MAX_VALUE)
         // -H <num>
         // \tShrinkage parameter.
         // \t(default 1)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3430.0686944986;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      LogitBoost logitBoost0 = new LogitBoost();
      textDirectoryLoader0.getRevision();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@data";
      stringArray0[0] = ".bsi";
      stringArray0[4] = "@data";
      try { 
        Evaluation.evaluateModel((Classifier) logitBoost0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double1, 0.01);
      
      instances0.spliterator();
      textDirectoryLoader0.setCharSet(".arff");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      double double2 = evaluation0.m_SumPredicted;
      double double3 = evaluation0.m_ClassPriorsSum;
      LogitBoost logitBoost0 = new LogitBoost();
      AbstractClassifier.makeCopies(logitBoost0, 77);
      Evaluation.makeOptionString(logitBoost0, true);
      double double4 = evaluation0.m_TotalSizeOfRegions;
      double double5 = evaluation0.m_Incorrect;
      double double6 = evaluation0.m_TotalCost;
      double double7 = evaluation0.correlationCoefficient();
      assertEquals(double7, double0, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Stacking stacking0 = new Stacking();
      stacking0.getTechnicalInformation();
      instances0.lastIndexOf(stacking0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.unweightedMicroFmeasure();
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances1, 20);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances1);
      textDirectoryLoader0.setOutputFilename(false);
      IBk iBk0 = new IBk((-331));
      LogitBoost logitBoost0 = new LogitBoost();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9Zsw>H3 S/e9y*Au 5+");
      MockRandom mockRandom0 = new MockRandom();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      AbstractClassifier.makeCopies(multiClassClassifierUpdateable0, 0);
      evaluation0.toSummaryString(".arff", false);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances2, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\nInstances sorted accordFng to first attribute:\n ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString();
      try { 
        Evaluation.handleCostOption("\nInstances sorted accordFng to first attribute:\n ", 111);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.listOptions();
      Spliterator<Instance> spliterator0 = instances0.spliterator();
      textDirectoryLoader0.setCharSet(".arff");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Object object0 = new Object();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) spliterator0;
      objectArray0[1] = object0;
      objectArray0[3] = (Object) textDirectoryLoader2;
      objectArray0[4] = (Object) spliterator0;
      objectArray0[5] = (Object) spliterator0;
      objectArray0[6] = (Object) textDirectoryLoader2;
      IBk iBk0 = new IBk();
      Evaluation.getGlobalInfo(iBk0);
      String string0 = "9;'}[4\\u='";
      try { 
        CostMatrix.parseMatlab(string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("rehet");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Version.MINOR = (-2);
      testInstances0.setNumString(2);
      evaluation0.falsePositiveRate(195225776);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1100));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1100
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.setCharSet("@relation");
      Version.MINOR = (-1642);
      textDirectoryLoader0.setOutputFilename(false);
      IBk iBk0 = new IBk(116);
      iBk0.toString();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.SFMeanPriorEntropy();
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      instances0.spliterator();
      textDirectoryLoader0.setCharSet("eg+}{\"[");
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.m_SumErr;
      evaluation0.unweightedMacroFmeasure();
      MultiScheme multiScheme0 = new MultiScheme();
      boolean boolean0 = evaluation1.equals("eg+}{\"[");
      assertFalse(boolean0);
      
      double double2 = evaluation1.unclassified();
      assertTrue(evaluation1.equals((Object)evaluation0));
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances1, 20);
      Evaluation evaluation0 = new Evaluation(instances1);
      textDirectoryLoader0.setOutputFilename(false);
      IBk iBk0 = new IBk((-331));
      LogitBoost logitBoost0 = new LogitBoost();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      try { 
        evaluation0.crossValidateModel((Classifier) logitBoost0, instances0, 116, (Random) mockRandom0, (Object[]) iBk0.TAGS_WEIGHTING);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = new Instances(instances0, (-1995138716));
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(true);
      IBk iBk0 = new IBk((-2));
      LogitBoost logitBoost0 = new LogitBoost();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      try { 
        evaluation0.crossValidateModel((Classifier) iBk0, instances1, (-363), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MissingClass;
      textDirectoryLoader0.setCharSet("+b0tz8X");
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      double double1 = evaluation0.m_SumAbsErr;
      double double2 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.SFPriorEntropy();
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("`Zm{luP.ci$zmS");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      double double1 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.truePositiveRate(1063);
      double double3 = evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.setNumericPriorsFromBuffer();
      double double4 = evaluation0.errorRate();
      assertEquals(double4, double3, 0.01);
      
      double double5 = evaluation0.trueNegativeRate((-713));
      assertEquals(double5, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = false;
      evaluation0.m_ClassIsNominal = false;
      try { 
        evaluation0.toClassDetailsString(".arff");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.spliterator();
      textDirectoryLoader0.setCharSet("\tOutput synopsis for classifier (use in conjunction  with -h)\n");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances1);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_SumSchemeEntropy;
      instances0.spliterator();
      textDirectoryLoader0.setCharSet("@data");
      textDirectoryLoader0.getDataSet();
      evaluation0.unweightedMicroFmeasure();
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      textDirectoryLoader0.setCharSet("@relation");
      Version.MINOR = (-1642);
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.meanPriorAbsoluteError();
      MultiScheme multiScheme0 = new MultiScheme();
      try { 
        evaluation0.toMatrixString("@data");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      Version.MINOR = (-1642);
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      IBk iBk0 = new IBk(116);
      iBk0.toString();
      IBk iBk1 = new IBk();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 116;
      doubleArray0[1] = (double) 116;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 20;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 4;
      doubleArray0[8] = Double.NaN;
      iBk1.pruneToK((Instances) null, doubleArray0, 354);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.correct();
      evaluation0.weightedTrueNegativeRate();
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setCharSet(".arff");
      textDirectoryLoader0.getDataSet();
      LogitBoost logitBoost0 = new LogitBoost();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      instances0.lastIndexOf(naiveBayesMultinomialText0);
      M5Rules m5Rules0 = new M5Rules();
      AbstractClassifier.makeCopies(m5Rules0, 108);
      Evaluation.makeOptionString(naiveBayesMultinomialText0, false);
      double double0 = evaluation0.weightedAreaUnderPRC();
      evaluation0.setDiscardPredictions(false);
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.totalCost();
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet(".bsi");
      Instances instances1 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(true);
      evaluation0.numFalseNegatives(4);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setUseResampling(false);
      instances1.lastIndexOf(textDirectoryLoader0);
      AbstractClassifier.makeCopies(logitBoost0, 108);
      Evaluation.makeOptionString(logitBoost0, false);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.setDiscardPredictions(true);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@relation");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalseNegatives(500);
      assertEquals(0.0, double0, 0.01);
      
      LogitBoost logitBoost0 = new LogitBoost();
      int int0 = evaluation0.m_NumClasses;
      AbstractClassifier.makeCopies(logitBoost0, 0);
      double double1 = evaluation0.m_WithClass;
      double double2 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setCharSet("F");
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("getNorm");
      Instances instances1 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      IBk iBk0 = new IBk((-512));
      IBk iBk1 = new IBk();
      iBk1.toString();
      IBk iBk2 = new IBk();
      iBk1.pruneToK(instances1, (double[]) null, 4);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.correct();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances2 = bayesNet0.m_Instances;
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Instances instances0 = null;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONLoader jSONLoader0 = new JSONLoader();
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONLoader jSONLoader0 = new JSONLoader();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "   <-- classified as\n";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      try { 
        Evaluation.evaluateModel((String) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      Null null0 = new Null();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "minWordFrequencyTipText");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "\tThe epsilon for round-off error. (default 1.0e-12)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedMatthewsCorrelation();
      instances0.spliterator();
      textDirectoryLoader0.setCharSet((String) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDataSet();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      textDirectoryLoader3.setOutputFilename(true);
      evaluation0.numFalseNegatives((-1456206972));
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setShrinkage((-1456206972));
      AbstractClassifier.makeCopies(logitBoost0, 77);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".bsi";
      stringArray0[2] = null;
      stringArray0[3] = ".arff";
      stringArray0[4] = ".arff";
      stringArray0[5] = ".arff";
      stringArray0[6] = "@data";
      stringArray0[7] = "@data";
      TextDirectoryLoader.main(stringArray0);
      Evaluation.makeOptionString(naiveBayesMultinomial0, true);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.rootMeanPriorSquaredError();
      double double1 = evaluation0.m_TotalCost;
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 877);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }
}
