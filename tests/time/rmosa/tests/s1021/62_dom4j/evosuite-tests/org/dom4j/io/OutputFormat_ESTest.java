/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 08:21:34 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(")", false, (String) null);
      String string0 = outputFormat0.getEncoding();
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertNull(string0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals(")", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9946571675310574
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-trimText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isNewlines());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "";
      stringArray0[2] = "lEjST]<bL+";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isNewlines());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "-suppressDeclaration";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+GO5XFN";
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.isSuppressDeclaration();
      assertTrue(outputFormat0.isSuppressDeclaration());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isSuppressDeclaration());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-xhtmlB|(i}>hDE");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-lineSeparator";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "-padText";
      outputFormat0.parseOptions(stringArray0, 1500);
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-xhtml(Ko_jf6%@~l";
      stringArray0[1] = "-indentSize";
      stringArray0[2] = "-xhtml(Ko_jf6%@~l";
      stringArray0[3] = "-xhtml(Ko_jf6%@~l";
      stringArray0[4] = "KQ9T';";
      stringArray0[5] = "'bwef4TE_ev|71";
      stringArray0[6] = "'bwef4TE_ev|71";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-xhtml(Ko_jf6%@~l\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent((String) null);
      OutputFormat outputFormat1 = new OutputFormat();
      assertEquals("\n", outputFormat1.getLineSeparator());
      
      outputFormat1.setLineSeparator("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "-expandEmpty  ";
      outputFormat1.setNewLineAfterDeclaration(false);
      stringArray0[2] = "{en*dinzg";
      stringArray0[3] = "{en*dinzg";
      stringArray0[4] = "{en*dinzg";
      stringArray0[5] = "-expandEmpty  ";
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat1.getAttributeQuoteCharacter();
      boolean boolean0 = outputFormat1.isNewLineAfterDeclaration();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags((-1112990308));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-xtmllktcf";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals((-1112990308), int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isXHTML());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-xhtml-xhtmllktcfJx";
      stringArray0[1] = "-indent";
      stringArray0[2] = "|Q5%IT><>[0Ul7.I/*.";
      stringArray0[3] = "E";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isXHTML());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty)", false, "");
      String string0 = outputFormat0.getEncoding();
      assertEquals("", string0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("-expandEmpty)", outputFormat0.getIndent());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml(Ko_jf6%@~l", true, "-omitEncoding");
      assertFalse(outputFormat0.isOmitEncoding());
      
      String string0 = "\\uT\"58/%g<H r%om;";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-xhtml(Ko_jf6%@~l";
      stringArray0[1] = "-xhtml(Ko_jf6%@~l";
      String[] stringArray1 = new String[2];
      stringArray1[0] = string0;
      stringArray1[1] = "-omitEncoding";
      int int0 = outputFormat0.parseOptions(stringArray1, 1);
      assertTrue(outputFormat0.isOmitEncoding());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize((-1357));
      String string0 = outputFormat0.getIndent();
      assertEquals("", string0);
      
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(boolean0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1144174683302812
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[4];
      outputFormat0.setIndent(false);
      stringArray0[0] = "-xhtml(Ko_jf6%@e~l";
      stringArray0[1] = "-xhtml(Ko_jf6%@e~l";
      stringArray0[2] = "-expandEmpty-padText";
      stringArray0[3] = "'1we;4";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-encoding";
      stringArray0[2] = "-encoding";
      stringArray0[3] = "-expandEmpty\"BBpRAzM7In#";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-expandEmpty\"BBpRAzM7In#", outputFormat0.getEncoding());
      assertEquals(4, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-encoding");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-encoding";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setEncoding((String) null);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags(643);
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(643, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('!');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (!)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("0vZG=)X]^}6t:w", true);
      outputFormat0.setAttributeQuoteCharacter('\"');
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("0vZG=)X]^}6t:w", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("IdJ6FA4rL8,=PhW");
      outputFormat0.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0570128495250297
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndentSize((-771));
      outputFormat0.setExpandEmptyElements(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = new OutputFormat("1w6MvHkFJm`l9L");
      outputFormat2.setNewlines(false);
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat3.isTrimText();
      OutputFormat outputFormat4 = new OutputFormat("1w6MvHkFJm`l9L", true);
      outputFormat4.setOmitEncoding(true);
      outputFormat0.isXHTML();
      outputFormat0.setIndent("1w6MvHkFJm`l9L");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat4.isOmitEncoding();
      outputFormat1.setEncoding("7 `X#CaO0");
      outputFormat0.isTrimText();
      outputFormat2.setPadText(true);
      outputFormat0.setIndent("^rN%pDk1X[F0,M;h");
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals("^rN%pDk1X[F0,M;h", outputFormat0.getIndent());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("`'FVyS29o", false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isSuppressDeclaration();
      OutputFormat outputFormat1 = new OutputFormat("`'FVyS29o", false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndentSize(1);
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat0.getIndent();
      outputFormat0.isPadText();
      assertEquals(" ", outputFormat0.getIndent());
      
      outputFormat1.setIndent(true);
      assertEquals("UTF-8", outputFormat1.getEncoding());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      OutputFormat outputFormat0 = new OutputFormat("", true);
      outputFormat0.setNewlines(false);
      outputFormat0.setXHTML(true);
      outputFormat0.isXHTML();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('x');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (x)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.976709928476526
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(true);
      outputFormat0.setEncoding("EiM\"[");
      outputFormat0.setPadText(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "EiM\"[";
      outputFormat0.setSuppressDeclaration(false);
      stringArray0[1] = "EiM\"[";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat1.getLineSeparator();
      outputFormat1.isSuppressDeclaration();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator((String) null);
      outputFormat0.setLineSeparator("");
      outputFormat2.setExpandEmptyElements(true);
      outputFormat2.isSuppressDeclaration();
      outputFormat2.isTrimText();
      outputFormat2.setNewLineAfterNTags(0);
      outputFormat1.getLineSeparator();
      outputFormat2.setExpandEmptyElements(false);
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("EiM\"[", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("?4>", true);
      OutputFormat outputFormat1 = new OutputFormat("?4>", true);
      boolean boolean0 = outputFormat0.isNewlines();
      assertTrue(boolean0);
      assertEquals("?4>", outputFormat0.getIndent());
      
      outputFormat1.setTrimText(false);
      outputFormat0.setIndent((String) null);
      String string0 = outputFormat1.getEncoding();
      assertFalse(outputFormat1.isPadText());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals("UTF-8", string0);
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isXHTML());
      assertFalse(outputFormat1.isTrimText());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("LGiaT}17>mSNnFKw{", false, "LGiaT}17>mSNnFKw{");
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, int0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("LGiaT}17>mSNnFKw{", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("LGiaT}17>mSNnFKw{", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator("");
      outputFormat0.setIndent("");
      outputFormat0.getLineSeparator();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertEquals("\n", outputFormat1.getLineSeparator());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[14];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1189582858));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1189582858
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      OutputFormat outputFormat0 = new OutputFormat("", true);
      outputFormat0.setNewlines(false);
      outputFormat0.isXHTML();
      OutputFormat outputFormat1 = new OutputFormat("", false);
      // Undeclared exception!
      try { 
        outputFormat1.setAttributeQuoteCharacter('x');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (x)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setIndent("");
      outputFormat0.isNewlines();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-urimTe.q`t");
      assertFalse(outputFormat0.isXHTML());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-urimTe.q`t";
      outputFormat0.setXHTML(true);
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewlines(true);
      boolean boolean0 = outputFormat0.isPadText();
      assertEquals("  ", outputFormat0.getIndent());
      assertTrue(boolean0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml ", false, "-xhtml(Ko_jf6%@e~l");
      outputFormat0.setEncoding("`]ei8UGgG6");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-xhtml(Ko_jf6%@e~l";
      stringArray0[1] = "-xhtml ";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals("`]ei8UGgG6", outputFormat0.getEncoding());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isNewlines());
      
      outputFormat0.setNewlines(true);
      boolean boolean0 = outputFormat0.isPadText();
      assertTrue(outputFormat0.isNewlines());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-timText");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-timText";
      outputFormat0.parseOptions(stringArray0, 0);
      String string0 = outputFormat0.getEncoding();
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("UTF-8", string0);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("-timText", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = outputFormat0.getIndent();
      assertNull(string0);
      
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertTrue(boolean0);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.549749826558804
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isPadText());
      assertEquals("  ", outputFormat1.getIndent());
      assertTrue(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isNewlines());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-expandEmpYty";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(true);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("  ", outputFormat0.getIndent());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isPadText());
      
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[12];
      stringArray0[0] = "-trimTe";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isPadText());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-timText");
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      String[] stringArray0 = new String[8];
      outputFormat0.setNewLineAfterDeclaration(false);
      stringArray0[0] = "-timText";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-urimTe.q`t");
      assertFalse(outputFormat0.isOmitEncoding());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-urimTe.q`t";
      outputFormat0.setOmitEncoding(true);
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertFalse(boolean0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("", outputFormat0.getIndent());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhXtmlUTF-8");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-xhXtmlUTF-8";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("-xhXtmlUTF-8", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      outputFormat0.parseOptions(stringArray0, 27);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-expandEmpYty";
      outputFormat0.parseOptions(stringArray0, 0);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', char0);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-timText";
      outputFormat0.setExpandEmptyElements(true);
      stringArray0[1] = "-timText";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3755754015654476
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isNewlines());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-trimTe";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize(116);
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("                                                                                                                    ", outputFormat0.getIndent());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-urimTe.q`t");
      String[] stringArray0 = new String[8];
      outputFormat0.setSuppressDeclaration(false);
      stringArray0[0] = "-urimTe.q`t";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-urimTe.q`t";
      stringArray1[1] = "-urimTe.q`t";
      stringArray1[2] = "-urimTe.q`t";
      stringArray1[3] = "-urimTe.q`t";
      stringArray1[4] = "-urimTe.q`t";
      outputFormat0.parseOptions(stringArray1, 1);
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("-urimTe.q`t", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[1];
      outputFormat0.setNewlines(false);
      stringArray0[0] = "-expandmpNtyv";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-timText");
      String[] stringArray0 = new String[8];
      outputFormat0.setLineSeparator("-timText");
      stringArray0[0] = "-timText";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-timText", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      assertEquals("", outputFormat0.getIndent());
      
      outputFormat0.setIndent(false);
      OutputFormat outputFormat1 = new OutputFormat("");
      outputFormat1.setNewLineAfterDeclaration(true);
      boolean boolean0 = outputFormat1.isExpandEmptyElements();
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(boolean0);
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isXHTML());
      assertFalse(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isPadText());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals("UTF-8", outputFormat1.getEncoding());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-tmllktc");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-tmllktc";
      outputFormat0.setNewLineAfterNTags((-1599));
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals((-1599), outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("-omitEncoding");
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isOmitEncoding());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("-omitEncoding", outputFormat0.getIndent());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isTrimText());
      
      String[] stringArray0 = new String[5];
      outputFormat0.setTrimText(true);
      stringArray0[0] = "-xtmllktcf";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-xhtml(Ko_jf6%@~l");
      boolean boolean0 = outputFormat0.isTrimText();
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(boolean0);
      assertEquals("-expandEmpty-xhtml(Ko_jf6%@~l", outputFormat0.getIndent());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("7XJ(G6gi*z%}^</w6", true, "7XJ(G6gi*z%}^</w6");
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      outputFormat0.setExpandEmptyElements(true);
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('O');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (O)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }
}
