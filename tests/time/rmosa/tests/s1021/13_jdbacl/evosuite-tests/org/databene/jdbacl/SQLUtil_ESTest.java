/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 08:44:15 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.function.Consumer;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("clob");
      Integer integer0 = RawTransaction.ABORT;
      TableContainer tableContainer0 = new TableContainer("clob");
      tableContainer0.setDoc("clob");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("gvOt}P", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDoc("gvOt}P");
      String string0 = defaultDBColumn0.toString();
      assertEquals("gvOt}P : CLOB", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("clob", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn(")", defaultDBTable0, dBDataType0, integer1);
      dBColumnArray0[6] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("clob, gvOt}P, gvOt}P, gvOt}P, gvOt}P, gvOt}P, ), gvOt}P, gvOt}P", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("42X96");
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 256, "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view2lq('3vfd\",$h\"u~[lj");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("alter materialized view2lq('3vfd\",$h\"u~[lj");
      assertFalse(boolean1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter materialized view2lq('3vfd\",$h\"u~[lj";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "alter materialized view2lq('3vfd\",$h\"u~[lj";
      stringArray0[4] = "alter materialized view2lq('3vfd\",$h\"u~[lj";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint constraint", string0);
      
      String string1 = SQLUtil.leftJoin("alter materialized view2lq('3vfd\",$h\"u~[lj", stringArray0, "alter materialized view2lq('3vfd\",$h\"u~[lj", "p1#", stringArray0);
      assertEquals("left join alter materialized view2lq('3vfd\",$h\"u~[lj as p1# on alter materialized view2lq('3vfd\",$h\"u~[lj.alter materialized view2lq('3vfd\",$h\"u~[lj = p1#.alter materialized view2lq('3vfd\",$h\"u~[lj and alter materialized view2lq('3vfd\",$h\"u~[lj.null = p1#.null and alter materialized view2lq('3vfd\",$h\"u~[lj.null = p1#.null and alter materialized view2lq('3vfd\",$h\"u~[lj.alter materialized view2lq('3vfd\",$h\"u~[lj = p1#.alter materialized view2lq('3vfd\",$h\"u~[lj and alter materialized view2lq('3vfd\",$h\"u~[lj.alter materialized view2lq('3vfd\",$h\"u~[lj = p1#.alter materialized view2lq('3vfd\",$h\"u~[lj", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("executealter tabledrop materialized viewselect intocreate maerialized viewih1r.! _azb ? &) 17dj");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter t";
      stringArray0[1] = "delete";
      stringArray0[2] = "executealter tabledrop materialized viewselect intocreate maerialized viewih1r.! _azb ? &) 17dj";
      stringArray0[3] = "executealter tabledrop materialized viewselect intocreate maerialized viewih1r.! _azb ? &) 17dj";
      stringArray0[4] = "executealter tabledrop materialized viewselect intocreate maerialized viewih1r.! _azb ? &) 17dj";
      stringArray0[5] = "executealter tabledrop materialized viewselect intocreate maerialized viewih1r.! _azb ? &) 17dj";
      defaultDBTable0.toString();
      stringArray0[6] = "executealter tabledrop materialized viewselect intocreate maerialized viewih1r.! _azb ? &) 17dj";
      stringArray0[7] = "executealter tabledrop materialized viewselect intocreate maerialized viewih1r.! _azb ? &) 17dj";
      stringArray0[8] = "SCALE SMALLINT";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("release to savepoi?t");
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " deleted");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "alter table");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("J(BBWRJU!j7Eq)nb", (String) null, (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("J(BBWRJU!j7Eq)nb", defaultDatabase0);
      dBCatalog0.getTable("J(BBWRJU!j7Eq)nb", false);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("J(BBWRJU!j7Eq)nb", (DBTable) null, (DBDataType) null, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("\u0001\b7\uFFFF\u0001\t\u000B\uFFFF\u0001\n");
      Character character0 = Character.valueOf('y');
      Character.isIdeographic(445);
      String string0 = SQLUtil.substituteMarkers("", "E\"ck;wPp", character0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "create table";
      stringArray0[1] = "1sU+l3/Sec{wAMB *\"";
      stringArray0[2] = "calll);";
      stringArray0[3] = "exit ";
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = "3w%E(";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "create table";
      stringArray1[1] = "1sU+l3/Sec{wAMB *\"";
      stringArray1[2] = "create table";
      stringArray1[3] = "calll);";
      stringArray1[4] = "3w%E(";
      stringArray1[5] = "update";
      stringArray1[6] = "calll);";
      stringArray1[7] = "create table";
      stringArray1[8] = "create table";
      SQLUtil.leftJoin("3w%E(", stringArray1, "_", "3w%E(", stringArray1);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("left join _ as 3w%E( on 3w%E(.create table = 3w%E(.create table and 3w%E(.1sU+l3/Sec{wAMB *\" = 3w%E(.1sU+l3/Sec{wAMB *\" and 3w%E(.create table = 3w%E(.create table and 3w%E(.calll); = 3w%E(.calll); and 3w%E(.3w%E( = 3w%E(.3w%E( and 3w%E(.update = 3w%E(.update and 3w%E(.calll); = 3w%E(.calll); and 3w%E(.create table = 3w%E(.create table and 3w%E(.create table = 3w%E(.create table");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"on 3w%E(.create table = 3w%E(.create table and 3w%E(.1sU+l3/Sec{wAMB *\" = 3w%E(.1sU+l3/Sec{wAMB *\" and 3w%E(.create table = 3w%E(.create table and 3w%E(.calll\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DBDataType.getInstance((-1736), ":!pT7vlO4H");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("insert", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete:!pt7vlo4h", dBSchema0);
      defaultDBTable0.toString();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete:!pt7vlo4h", defaultDBTable0, 641, "create materialized viewreplication.slavemode");
      SQLUtil.isQuery("select into");
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "Exception closing unmanaged connection: ";
      SQLUtil.isProcedureCall("Exception closing unmanaged connection: ");
      String string1 = "/*4Ec9Om^v3Y:G";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*4Ec9Om^v3Y:G");
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.mutatesStructure("XsdD;r(:");
      String string0 = SQLUtil.renderValue(dBCatalog0);
      assertNull(string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alter index";
      stringArray0[1] = "Exception closing unmanaged connection: ";
      stringArray0[2] = ">";
      String string0 = "xzOtSx|<\\uF'Uf";
      stringArray0[3] = string0;
      stringArray0[5] = ">";
      stringArray0[6] = ">";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ">", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (alter index, Exception closing unmanaged connection: , >, xzOtSx|<\\uF'Uf, , >, >)", string1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = new Boolean("drop index");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "drop index", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("mm5/*,* Gzsu>3I2D");
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer((String) null, compositeDBObject0);
      tableContainer0.getSchema();
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Character character0 = Character.valueOf('\"');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'\"'", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "clob", false, (String[]) null);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("clob");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "Exception closing unmanaged connectoon: ";
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-54545078), "");
      defaultDBColumn0.setNullable(true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      DBDataType.getInstance(3567, "call");
      Integer integer0 = RawTransaction.COMMIT;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("skw'f'gIA7};U06lm");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) nameSpec0;
      objectArray0[2] = (Object) "YE0Hkl:r!&*wlB~";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "YE0Hkl:r!&*wlB~", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.addRequiredCondition("create tableblob", stringBuilder0);
      assertEquals("create tableblob", stringBuilder0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(l*|fUQ-Ge=HHii:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (l*|fUQ-Ge=HHii:
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select intocreate materialized viewih1r3.! _azb ? &) 17dj");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "left";
      // Undeclared exception!
      try { 
        SQLUtil.join("left", "left", stringArray0, "left", "left", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("j");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance(47, "j");
      Integer integer1 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "call";
      stringArray0[1] = "j";
      stringArray0[2] = "call";
      stringArray0[3] = "call";
      stringArray0[4] = "call";
      stringArray0[5] = "call";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("j", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("call");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = " name=";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("exec", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" name=", dBSchema0);
      SQLUtil.mutatesStructure("exec");
      StringBuilder stringBuilder0 = new StringBuilder("dEfyVXzz/j~");
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt((-3010));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3010
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" }c?4RD]c");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "w{YJfT*q";
      stringArray0[1] = " }c?4RD]c";
      stringArray0[2] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "oHvakuP$2vi", false, stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "w{YJfT*q", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
      
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null, (Integer) null, (Integer) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(p-L=ovSn";
      stringArray0[1] = "Ta^EUuV=Mm5";
      stringArray0[2] = "8}J^=yaVJ";
      stringArray0[3] = "(p-L=ovSn";
      stringArray0[4] = "(p-L=ovSn";
      stringArray0[5] = "(p-L=ovSn";
      stringArray0[6] = "(p-L=ovSn";
      stringArray0[7] = "(p-L=ovSn";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "Ta^EUuV=Mm5";
      stringArray1[1] = "8}J^=yaVJ";
      stringArray1[2] = "Ta^EUuV=Mm5";
      stringArray1[3] = "(p-L=ovSn";
      stringArray1[4] = "(p-L=ovSn";
      stringArray1[5] = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("(p-L=ovSn", stringArray0, "d", (String) null, stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("fMDDkf0|Ko$|n~", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("create materialized viewupdatencharacterstream(int, reader, int)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("j");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance(47, "j");
      Integer integer1 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "call";
      stringArray0[1] = "j";
      stringArray0[2] = "call";
      stringArray0[3] = "call";
      stringArray0[4] = "call";
      stringArray0[5] = "call";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("j", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "*/";
      SQLUtil.normalize("*/", true);
      String string1 = "alter materialized view";
      int int0 = 90049;
      StringBuilder stringBuilder0 = new StringBuilder(90049);
      String string2 = "alter materialized view";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition(">hn", stringBuilder0);
      assertEquals(">hn", stringBuilder0.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">hn";
      stringArray0[1] = ">hn";
      stringArray0[2] = "org.h2.store.InDoubtTransaction";
      stringArray0[3] = ">hn";
      stringArray0[4] = null;
      stringArray0[5] = ">hn";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, dBTable0, stringArray0, dBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray1 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray1, stringArray1);
      assertEquals("SELECT * FROM  WHERE ", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "1Y'w/i}P\"-MCQ8<L;c";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("1Y'w/i}P\"-MCQ8<L;c", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6/eae?", dBSchema0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = SQLUtil.normalize("3V+M,", false);
      assertEquals("3V + M,", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("MismatcedNotSeException(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: MismatcedNotSeException(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.h2.index.PageDelegateIndex";
      stringArray0[1] = "^^vV";
      stringArray0[0] = "org.h2.index.PageDelegateIndex";
      stringArray0[3] = "org.h2.index.PageDelegateIndex";
      stringArray0[4] = "^^vV";
      stringArray0[5] = "^^vV";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "^^vV", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.h2.index.PageDelegateIndex", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      File file0 = FileUtil.canonicalFile("org.h2.index.PageDelegateIndex");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      mockPrintWriter1.printf("3&'bYRO", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("dM0Vo_1[p/(w{uUoB", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Jc2", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "dM0Vo_1[p/(w{uUoB";
      stringArray0[1] = "Jc2";
      stringArray0[2] = "exec(l*|fuq-ge=hhii:";
      stringArray0[3] = "dM0Vo_1[p/(w{uUoB";
      stringArray0[4] = "dM0Vo_1[p/(w{uUoB";
      stringArray0[5] = "dM0Vo_1[p/(w{uUoB";
      stringArray0[6] = "Jc2";
      stringArray0[7] = "dM0Vo_1[p/(w{uUoB";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "exec(l*|fuq-ge=hhii:", false, stringArray0);
      dBUniqueConstraint0.setName("Jc2");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("dM0Vo_1[p/(w{uUoB", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-376), "dM0Vo_1[p/(w{uUoB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("XEYR!aD *0", dBTable0, dBDataType0, integer0);
      defaultDBColumn0.toString();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("Jc2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'Jc2' not found in table 'Jc2'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NHC_$Qk##zlZo'95");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "l7DJl0G";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "l7DJl0G", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT l7DJl0G ", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.renderColumnListWithTableName("fMDDkf0|Ko$|n~", stringArray0);
      assertEquals("fMDDkf0|Ko$|n~.null, fMDDkf0|Ko$|n~.null, fMDDkf0|Ko$|n~.null, fMDDkf0|Ko$|n~.null, fMDDkf0|Ko$|n~.null, fMDDkf0|Ko$|n~.null, fMDDkf0|Ko$|n~.null", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1736), ":!pT7vlO4H");
      DBSchema dBSchema0 = new DBSchema(":!pT7vlO4H");
      dBSchema0.getTable(":!pT7vlO4H");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(":!pT7vlO4H", (DBTable) null, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[10];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      System.setCurrentTimeMillis(3277L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("constraint");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "constraint";
      stringArray0[1] = "constraint";
      stringArray0[2] = "constraint";
      stringArray0[3] = "constraint";
      stringArray0[4] = "constraint";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "constraint", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("constraint", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      defaultDBTable0.getForeignKeyConstraints();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("constraint", dBTable0, (DBDataType) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      int int0 = (-2753);
      // Undeclared exception!
      try { 
        stringBuilder1.replace((-2753), (-2753), "constraint");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2753
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("42X45");
      SQLUtil.addRequiredCondition("]Ws=[", stringBuilder0);
      assertEquals("42X45 and ]Ws=[", stringBuilder0.toString());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on null.null = null.null", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = SQLUtil.normalize("h/j\"bp,-#Ze", false);
      assertEquals("h / j \"bp,-#Ze\"", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".class");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table .class", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("6/eae?$k;f?@(J^{", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "SELECT * FROM ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      defaultDBTable0.getIndex((String) null);
      String[] stringArray1 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "update~qxerw", false, stringArray1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "SELECT * FROM ");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(2114);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder2, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.ExecRow[]";
      stringArray0[1] = "org.apache.derby.iapi.sql.execute.ExecRow[]";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.apache.derby.iapi.sql.execute.ExecRow[]", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (org.apache.derby.iapi.sql.execute.ExecRow[], org.apache.derby.iapi.sql.execute.ExecRow[]) REFERENCES null(org.apache.derby.iapi.sql.execute.ExecRow[], org.apache.derby.iapi.sql.execute.ExecRow[])", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "N+PkAX5*n Km}Dh");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)23;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("", string0);
      
      stringArray0[0] = "dM0Vo_1[p/(w{uUoB";
      stringArray0[1] = "X'|Z,1My/tsch9Na";
      stringArray0[2] = "dM0Vo_1[p/(w{uUoB";
      stringArray0[3] = "";
      stringArray0[4] = "X'|Z,1My/tsch9Na";
      stringArray0[5] = "";
      stringArray0[6] = "dM0Vo_1[p/(w{uUoB";
      stringArray0[7] = "V$hf>G+'ZjBs";
      stringArray0[8] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "X'|Z,1My/tsch9Na", false, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      Integer integer0 = RawTransaction.COMMIT;
      String string1 = defaultDBTable0.toString();
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , )", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.7786655906578275
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "/;q %d-";
      SQLUtil.normalize("/;q %d-", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = SQLUtil.normalize("d-^(~.OfnsLB8lrd*G'", true);
      assertEquals("d - ^ (~.OfnsL  B8lrd * G ''", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "derby.storage.reusable";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter tablerelease to savepoint");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("callx", true, "PYU\"@!Y:SWA>kV", "trunca");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK trunca", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{MPMS[Q\"C\f");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "^'SHB>g=S.4T7b/6>#";
      stringArray0[1] = "{MPMS[Q\"C\f";
      stringArray0[2] = "{MPMS[Q\"C\f";
      stringArray0[3] = "{MPMS[Q\"C\f";
      stringArray0[4] = "{MPMS[Q\"C\f";
      stringArray0[5] = "{MPMS[Q\"C\f";
      stringArray0[6] = "{MPMS[Q\"C\f";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "^'SHB>g=S.4T7b/6>#", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (^'SHB>g=S.4T7b/6>#, {MPMS[Q\"C\f, {MPMS[Q\"C\f, {MPMS[Q\"C\f, {MPMS[Q\"C\f, {MPMS[Q\"C\f, {MPMS[Q\"C\f)", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        SQLUtil.join("left", "left", stringArray0, "left", "left", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)3;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$Yd";
      stringArray0[1] = "$Yd";
      stringArray0[2] = "$Yd";
      stringArray0[3] = "$Yd";
      stringArray0[4] = "$Yd";
      stringArray0[5] = "$Yd";
      stringArray0[6] = "$Yd";
      stringArray0[7] = "$Yd";
      stringArray0[8] = "$Yd";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "$Yd";
      stringArray1[1] = "CREATE FORCE AGGREGATE ";
      stringArray1[2] = "$Yd";
      stringArray1[3] = "$Yd";
      stringArray1[4] = "$Yd";
      stringArray1[5] = "$Yd";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("$Yd", stringArray0, "CREATE FORCE AGGREGATE ", "$Yd", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("updateorg.apache.derby.impl.store.access.btree.index.b2i_10_3");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "2.ihS");
      SQLUtil.addOptionalCondition("2.ihS", stringBuilder0);
      assertEquals("2.ihS or 2.ihS", stringBuilder0.toString());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      byte[] byteArray0 = new byte[2];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-67);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("k6H= ?D>/<dbfzlsh", false);
      assertEquals("k6H = ? D > / < dbfzlsh", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("k6H = ? D > / < dbfzlsh", dBCatalog0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("getPassword");
      String string1 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("null.k6H = ? D > / < dbfzlsh", string1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("Kc eJc4w", ",9FuiGiZ0]pV'u{#_m", ",9FuiGiZ0]pV'u{#_m");
      assertEquals("Kc eJc4w", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLUtil.mutatesStructure(" name=");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" name=");
      String[] stringArray0 = new String[5];
      stringArray0[0] = " name=";
      stringArray0[1] = " name=";
      stringArray0[2] = " name=";
      stringArray0[3] = " name=";
      stringArray0[4] = "DAY_OF_WEEK";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "[3Eg =", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("[3Eg =", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" name=", dBTable0, 8, " name=");
      defaultDBColumn0.setNullable(false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " name=");
      dBUniqueIndex0.isIdentical(defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals(" name= NAME=", stringBuilder0.toString());
      
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.isDDL("CONVERT ");
      String string0 = SQLUtil.leftJoin("rename", stringArray0, " name=", "h2.runFinalize", stringArray0);
      assertEquals("left join  name= as h2.runFinalize on rename. name= = h2.runFinalize. name= and rename. name= = h2.runFinalize. name= and rename. name= = h2.runFinalize. name= and rename. name= = h2.runFinalize. name= and rename.DAY_OF_WEEK = h2.runFinalize.DAY_OF_WEEK", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((Object) "+");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("clob", (String[]) null, "clob", "clob", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isProcedureCall("rename");
      String string0 = "drop index";
      DBCatalog dBCatalog0 = new DBCatalog();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("drop index");
      dBCatalog0.equals(jMXPrincipal0);
      // Undeclared exception!
      try { 
        dBCatalog0.removeTable("iZ=<Z_G0_NC8pFi(.n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'iZ=<Z_G0_NC8pFi(.n'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop indexmcz%;v_5(>nqn/f9j", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"drop indexmcz%;v_5(>nqn/f9j\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " as ", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \" as \" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("derby.storage.reusable", (DBSchema) null);
      String string0 = "bEc";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "derby.storage.reusable", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.4733064998116339
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.join("left", "left", stringArray0, "left", "left", stringArray0);
      assertEquals("left join left as left on left.null = left.null and left.null = left.null and left.null = left.null and left.null = left.null and left.null = left.null and left.null = left.null and left.null = left.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("left");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("left", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , ) REFERENCES left(, , , , , , )", string1);
      
      String string2 = SQLUtil.removeComments("left join left as left on left.null = left.null and left.null = left.null and left.null = left.null and left.null = left.null and left.null = left.null and left.null = left.null and left.null = left.null");
      assertTrue(string2.equals((Object)string0));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.7689528313755152
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLUtil.normalize("dM0Vo_1[p/(w{uUoB", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(40, "dM0Vo_1 [ p / (w { uUoB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      defaultDBTable0.toString();
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery(".hK'AJiV^#M");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("MismatdNotSeExcption(");
      assertNull(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updateNCharacterStream(int, Reader, int)");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("insertrelease to )avepoi?", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String string0 = "resultsetho";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      File file0 = FileUtil.canonicalFile("resultsetho");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      String string1 = "\u0001\u0094";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "\u0001\u0094";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\u0001\u0094");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("`", dBCatalog0);
      dBSchema0.getTable("PRIMARY KEY ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1029);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "create materialized viewexecute`j<";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("create table");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBConstraint dBConstraint0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.join("left", "left", stringArray0, "left", "\u0001YSaS#r\"wXP#H$", stringArray0);
      assertEquals("left join left as \u0001YSaS#r\"wXP#H$ on left.null = \u0001YSaS#r\"wXP#H$.null and left.null = \u0001YSaS#r\"wXP#H$.null and left.null = \u0001YSaS#r\"wXP#H$.null and left.null = \u0001YSaS#r\"wXP#H$.null and left.null = \u0001YSaS#r\"wXP#H$.null and left.null = \u0001YSaS#r\"wXP#H$.null and left.null = \u0001YSaS#r\"wXP#H$.null", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.join(",", (String) null, stringArray0, ",", ",", stringArray0);
      assertEquals(", join , as , on null.null = ,.null and null.null = ,.null and null.null = ,.null and null.null = ,.null and null.null = ,.null and null.null = ,.null and null.null = ,.null", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "~g%jk\"0D>m`r!i";
      String string0 = SQLUtil.innerJoin("~g%jk\"0D>m`r!i", stringArray0, "!{v_qC>pF", "alter index", stringArray0);
      assertEquals("!{v_qC>pF as alter index on ~g%jk\"0D>m`r!i.~g%jk\"0D>m`r!i = alter index.~g%jk\"0D>m`r!i", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.join("inner", "rename", stringArray0, "rename", "rename", stringArray0);
      assertEquals("rename as rename on rename.null = rename.null and rename.null = rename.null and rename.null = rename.null and rename.null = rename.null and rename.null = rename.null and rename.null = rename.null and rename.null = rename.null and rename.null = rename.null and rename.null = rename.null", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = SQLUtil.renderValue("create table");
      assertEquals("'create table'", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("derby.storage.reusable", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(32, "derby.storage.reusable");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("derby.storage.reusable", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("derby.storage.reusable DERBY.STORAGE.REUSABLE NULL", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select into", defaultDBTable0, (DBDataType) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".class", (DBTable) null, (-1929), ".class");
      constraintDescriptorList0.add((Object) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
      assertEquals(".class", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("drop indextbajnu5u ! _ = ee - + s (.k", "drop indextbajnu5u ! _ = ee - + s (.k", (String[]) null, "jt<n", "jt<n", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("L9hni", "L9hni", (String[]) null, "L9hni", "update", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.join("OGO^[tgd\"YI+", ", ", stringArray0, ", ", ", ", stringArray0);
      assertEquals("OGO^[tgd\"YI+ join ,  as ,  on , .null = , .null and , .null = , .null and , .null = , .null and , .null = , .null and , .null = , .null and , .null = , .null and , .null = , .null", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("0QRuwWiV=fvi`(", (String[]) null, "0QRuwWiV=fvi`(", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("\\t");
      tableContainer0.getTable("\\t");
      DBDataType dBDataType0 = DBDataType.getInstance((-1425), "into");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("into", (DBTable) null, dBDataType0);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("into", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn1.getNotNullConstraint();
      defaultDBColumn1.setNotNullConstraint((DBNotNullConstraint) null);
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = new Integer((-1425));
      defaultDBColumn1.setFractionDigits(integer2);
      Integer integer3 = RawTransaction.ABORT;
      tableContainer0.setDoc("into");
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("select into", (DBTable) null, dBDataType0, integer3);
      defaultDBColumn0.setDoc("select into");
      defaultDBColumn1.toString();
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("clob");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("clob", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CLOB", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = SQLUtil.normalize("select intocreate materialized viewih1r3.! _azb ? &) 17dj", false);
      assertEquals("select intocreate materialized viewih1r3.! _azb ? &) 17dj", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesStructure("alter indexupdateselect intqx|*ncw");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("Exception loing unmanaged connection: ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "PRO";
      stringArray0[1] = " }c?4RD]c";
      stringArray0[2] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "//", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop table", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, dBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "//");
      stringBuilder0.append((CharSequence) "PRO");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      String string0 = "qHWc<9|'%dmwAkk(2";
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("qHWc<9|'%dmwAkk(2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'qHWc<9|'%dmwAkk(2' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SELECT * FROM ";
      stringArray0[1] = "^^vV";
      stringArray0[2] = "SELECT * FROM ";
      stringArray0[3] = "SELECT * FROM ";
      stringArray0[4] = "^^vV";
      stringArray0[5] = "^^vV";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "^^vV", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("SELECT * FROM ", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SELECT * FROM ", false, dBTable0, stringArray0, dBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "SELECT * FROM ");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("SELECT * FROM ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'SELECT * FROM ' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }
}
