/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 06:46:21 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize((-369));
      advancedSettings0.getBacklog();
      advancedSettings0.setQSObjectPoolMaker("");
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals((-369), int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("b!*]");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setPerformancePreferencesBandwidth(2087);
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setPerformancePreferencesConnectionTime(452);
      advancedSettings0.setMaxThreadsForNioWrite((-1023));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketSendBufferSize((-853));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setUseDirectByteBuffer(false);
      advancedSettings1.setSocketLinger(452);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setPerformancePreferencesConnectionTime(2872);
      advancedSettings1.setDebugNonBlockingMode(false);
      assertEquals(452, advancedSettings1.getSocketLinger());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("</max-threads-for-nio-write>\n");
      advancedSettings0.setClientSocketReceiveBufferSize(2490);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(2490, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(15);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(15, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("QH");
      advancedSettings0.setClientSocketTrafficClass("</client-socket-tcp-no-delay>\n");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-1120));
      advancedSettings0.getQSObjectPoolMaker();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals((-1120), int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-698));
      advancedSettings0.setByteBufferSize((-698));
      advancedSettings0.setQSObjectPoolMaker("ISO-8859-1");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientIdentifier("r<82u");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setClientSocketReceiveBufferSize((-192));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize((-1004));
      assertEquals("r<82u", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-5483));
      advancedSettings0.setPerformancePreferencesConnectionTime(1491);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setDebugNonBlockingMode(false);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      String string0 = "";
      String string1 = "i/o{BJe2fm8je2NHl";
      advancedSettings0.setClientIdentifier("i/o{BJe2fm8je2NHl");
      advancedSettings1.setPerformancePreferencesBandwidth(1491);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("Z@=Y(Pb=rAFss%haB");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Z@=Y(Pb=rAFss%haB
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1406);
      advancedSettings0.toXML((String) null);
      assertEquals(1406, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.052754235510318
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1855));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientIdentifier("yQzB@E&z");
      advancedSettings0.setPerformancePreferencesBandwidth((-3087));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setQSObjectPoolMaker("\t<debug-non-blocking-mode>");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setPerformancePreferencesBandwidth((-3087));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog(115);
      advancedSettings0.setClientSocketReceiveBufferSize(115);
      advancedSettings0.setByteBufferSize(0);
      assertEquals("yQzB@E&z", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1159);
      advancedSettings0.setPerformancePreferencesBandwidth(1159);
      advancedSettings0.setClientSocketSendBufferSize(1159);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getClientSocketSendBufferSize();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(1159, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-107));
      advancedSettings0.setQSObjectPoolMaker("ISO-8859-1");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesBandwidth(13);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.setPerformancePreferencesBandwidth(3009);
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals((-1), advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("b!*]");
      advancedSettings0.setQSObjectPoolMaker("!_&2E+=IaX-#F%;-");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setPerformancePreferencesBandwidth(2087);
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketSendBufferSize((-853));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesConnectionTime(10);
      advancedSettings1.setUseDirectByteBuffer(false);
      advancedSettings1.setSocketLinger(452);
      advancedSettings1.setCharset("");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setPerformancePreferencesConnectionTime(2872);
      advancedSettings1.setDebugNonBlockingMode(false);
      assertEquals(452, advancedSettings1.getSocketLinger());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.681095545078155
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(641);
      advancedSettings0.setCharset("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setBacklog(582);
      advancedSettings0.setClientSocketSendBufferSize((-610));
      advancedSettings0.setByteBufferSize(607);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker("<+-");
      assertEquals((-610), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.toXML("R^C^|-o/El9U!a");
      assertEquals(1, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.toXML("]YzQlrX&!2MGN)3");
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(4153);
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setQSObjectPoolMaker("<performanc-prefeqences-connection-time>");
      advancedSettings0.setBacklog((-1770));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1992));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setBacklog(2534);
      advancedSettings0.getQSObjectPoolMaker();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setByteBufferSize((-170));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(2534, advancedSettings0.getBacklog());
      
      advancedSettings1.getClientSocketSendBufferSize();
      String string0 = advancedSettings1.getCharset();
      assertEquals("ISO-8859-1", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setBacklog((-588));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setCharset((String) null);
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      boolean boolean0 = advancedSettings0.getDebugNonBlockingMode();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(437);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(437, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger(527);
      advancedSettings0.setClientSocketTrafficClass("71");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientIdentifier("yQzB@E&z");
      advancedSettings0.setPerformancePreferencesBandwidth((-3081));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setQSObjectPoolMaker("71");
      advancedSettings0.setPerformancePreferencesBandwidth((-3081));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketReceiveBufferSize(109);
      advancedSettings0.setByteBufferSize(4);
      advancedSettings0.setClientIdentifier("<advanced-settings>\n");
      assertEquals(109, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setQSObjectPoolMaker("lSX{ek1[%*co");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier("lSX{ek1[%*co");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientIdentifier("lSX{ek1[%*co");
      assertEquals("lSX{ek1[%*co", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML("");
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      int int0 = advancedSettings1.getMaxThreadsForNioWrite();
      assertEquals(10, int0);
      
      advancedSettings0.setClientIdentifier("");
      advancedSettings1.setClientIdentifier("");
      assertFalse(advancedSettings1.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings1.getSocketLinger());
      assertEquals(0, advancedSettings1.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings1.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings1.getByteBufferSize());
      assertEquals(0, advancedSettings1.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings1.getPerformancePreferencesBandwidth());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings1.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings1.getCharset());
      assertEquals(0, advancedSettings1.getBacklog());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(3023);
      advancedSettings0.setPerformancePreferencesConnectionTime((-31));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientIdentifier("#UccvtLN#B");
      advancedSettings0.setPerformancePreferencesBandwidth(2120);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("\t<performance-preferences-bandwidth>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<performance-preferences-bandwidth>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.xmlreader.AdvancedSettings");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.xmlreader.AdvancedSettings
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("SmP/{.X?^ 6'4");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // SmP/{.X?^ 6'4
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertNotNull(string0);
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getClientIdentifier();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertTrue(boolean0);
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(0, advancedSettings0.getBacklog());
      
      advancedSettings0.setBacklog(1);
      assertEquals(1, advancedSettings0.getBacklog());
  }
}
