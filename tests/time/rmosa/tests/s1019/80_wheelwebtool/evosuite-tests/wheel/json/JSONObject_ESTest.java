/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 05:28:16 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.719647346918785
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer(169);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.toString(16, 10);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = JSONObject.quote(";/cQ}#h{wvmw");
      assertEquals("\";/cQ}#h{wvmw\"", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(1421);
      JSONObject jSONObject1 = jSONObject0.append("\" h@o|\"", integer0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~a21T~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~a21T~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getmax", "getmax");
      Object object0 = jSONObject1.remove("getmax");
      assertEquals("getmax", object0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7851038147158325
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("K", (-315L));
      long long0 = jSONObject1.optLong("K");
      assertEquals(2, jSONObject0.length());
      assertEquals((-315L), long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("null", 48);
      int int0 = jSONObject0.optInt("null");
      assertEquals(48, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8261674308051874
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-22));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      jSONObject1.optInt("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      double double0 = jSONObject1.optDouble("");
      assertEquals(2, jSONObject0.length());
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      Long long0 = new Long((-1L));
      hashMap0.put("h19#Al^!?CdAc'7F>_", long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("h19#Al^!?CdAc'7F>_");
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0692024658203625
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("9dx4~V&V[Rf~*;opo.", true);
      boolean boolean0 = jSONObject0.optBoolean("9dx4~V&V[Rf~*;opo.");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("7", true);
      Object object0 = jSONObject1.opt("7");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Float float0 = new Float((float) 12);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3734685941026814
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      jSONObject0.has("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float((float) 12);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", (long) 12);
      jSONObject1.getString("wheel.json.JSONObject");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("+/+$|`JU} $+n", 0.0);
      long long0 = jSONObject1.getLong("+/+$|`JU} $+n");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gF", 819);
      long long0 = jSONObject0.getLong("gF");
      assertEquals(819L, long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Float float0 = new Float((-2006.16F));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("8Qf?", (Object) float0);
      long long0 = jSONObject1.getLong("8Qf?");
      assertEquals((-2006L), long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Long long0 = new Long(0L);
      jSONObject0.putOpt("", long0);
      jSONObject0.getInt("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      jSONObject0.getInt("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("] is not a number.", 0L);
      double double0 = jSONObject0.getDouble("] is not a number.");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("p#2 ~M", false);
      Object object0 = jSONObject0.get("p#2 ~M");
      assertEquals(false, object0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.666278442414676
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = JSONObject.valueToString(">\"N16Z(OfCOM(Dh!", 0, 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-121175902), 0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, (-62353088));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7879677305228177
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Float float0 = new Float((float) 12);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-2915), (-2915));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject.testValidity("{\n                        \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                        \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                        \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n            }");
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("tri", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Long long0 = new Long(0L);
      jSONObject0.put("", (Object) long0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optString((String) null, (String) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = jSONObject0.optString("re", "");
      assertEquals("", string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "CiJDq");
      assertEquals("CiJDq", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      long long0 = jSONObject0.optLong("", (-3549L));
      assertEquals((-3549L), long0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 770L);
      assertEquals(770L, long0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.572528756326852
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Short short0 = new Short((short)160);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optLong("jwXP<%(M", 0L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, (-1539));
      assertEquals((-1539), int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.572528756326852
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      int int0 = jSONObject0.optInt("{}", 0);
      assertEquals(0, int0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("", 11);
      assertEquals(11, int0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("B-ri/Qq|Yia;P9M9sT", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("xc44DFpE5", (-3416.171));
      assertEquals((-3416.171), double0, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 2066.503232);
      assertEquals(2066.503232, double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      double double0 = jSONObject0.optDouble("", 2838.10387016);
      assertEquals(2838.10387016, double0, 0.01);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("-389.7448985155887");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("a 6p%M#", stringArray0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = new Integer(169);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.has((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.doubleToString(643.085161);
      assertEquals("643.085161", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1L));
      JSONObject jSONObject1 = jSONObject0.accumulate("", long0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.0070885203363917
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(169);
      linkedList0.addFirst(integer0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("sX(CRc<06MEJ#z)B", 2287);
      // Undeclared exception!
      jSONObject1.toString(2287);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.2798542258336674
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("&nemsVyz(", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      try { 
        jSONObject0.put((String) null, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 902L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.2092536248090335
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Short short0 = new Short((short)160);
      JSONObject jSONObject0 = new JSONObject(short0);
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Double double0 = new Double((-389.7448985155887));
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.3986496111888456
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("op", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.2450431669074418
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("JSONObject[", (Object) jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, (-24668172), (-20652918));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      String string0 = JSONObject.valueToString(hashMap0, 234, 34);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-1), 6);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-1890), (-96));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (byte)1, (byte)1);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.7870020467612302
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Float float0 = new Float((float) 12);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(12, 1258);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.8884699676219987
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"java.lang.String@0000000003\"");
      // Undeclared exception!
      jSONObject0.toString(1069, 1069);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.7760222510077253
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString((-2344));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 2208, (-572));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.6867831479680375
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(604L);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.addFirst((Integer) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.2013670042689852
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-349), (-349));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = JSONObject.quote("noXW9\u0005Aih;;tX x");
      assertEquals("\"noXW9\\u0005Aih;;tX x\"", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("feA<oafK</>-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"feA<oafK<\\/>-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.4277456633953713
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = new Integer(273);
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.getBoolean("`$YKQ>/}0<R1?q3Fi^(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`$YKQ>/}0<R1?q3Fi^(\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.4327072914612193
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getJSONObject("\"\\>{X-+#Jw2T]fP*aAQ\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\\>{X-+#Jw2T]fP*aAQ\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.2367930007966412
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("o_Yf]>ot}VEi}XG3", (Object) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(": ", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gettoArray", 800);
      String string0 = jSONObject1.optString("gettoArray");
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Object, Long> hashMap1 = new HashMap<Object, Long>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Map) hashMap1);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("] is not a JSONArray.");
      assertNotSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("d]Mc#Z@0W", (Object) jSONArray0);
      JSONArray jSONArray1 = jSONObject1.optJSONArray("d]Mc#Z@0W");
      assertSame(jSONArray0, jSONArray1);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.537485097486027
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Float float0 = new Float((float) 3577);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject();
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.8337855468200528
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(169);
      linkedList0.addFirst(integer0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("\"\\>{X-+#Jw2Tc]fP*aAQ\"", stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.338872053314866
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float((float) 12);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.5294599036351055
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("ejG?!2x).", (Object) jSONArray0);
      try { 
        jSONObject0.getJSONObject("ejG?!2x).");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ejG?!2x).\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[]", (Object) jSONArray0);
      JSONArray jSONArray1 = jSONObject0.getJSONArray("[]");
      assertSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ejG!2x)'.", (Object) "CgN~4v}0b");
      try { 
        jSONObject0.getJSONArray("ejG!2x)'.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ejG!2x)'.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-128));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      jSONObject0.getInt("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ejG!2x)'.", (Object) "CgN~4v}0b");
      try { 
        jSONObject1.getInt("ejG!2x)'.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ejG!2x)'.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.put("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}", 53);
      double double0 = jSONObject0.getDouble("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      assertEquals(2, jSONObject0.length());
      assertEquals(53.0, double0, 0.01);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.8446214763655029
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.accumulate("{}", boolean0);
      boolean boolean1 = jSONObject0.getBoolean("{}");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.581573107414146
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gF", 819);
      boolean boolean0 = jSONObject0.optBoolean("gF", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("{}", "{}");
      try { 
        jSONObject0.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.getBoolean("{}");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.960431637008406
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      long long0 = jSONObject1.optLong("");
      assertEquals(4, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-657.687501294608));
      assertEquals("-657.687501294608", string0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-121175902));
      assertEquals("-1.21175902E8", string0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("ejG?!2x).", (Object) jSONArray0);
      JSONObject jSONObject2 = jSONObject1.append("ejG?!2x).", jSONObject1);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.0533458623333836
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.putOpt("", "");
      String string0 = jSONObject0.toString((int) (byte) (-99));
      try { 
        jSONObject0.append("", string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("] is not a JSONArray.", (Object) null);
      Integer integer0 = new Integer(10);
      JSONObject jSONObject2 = jSONObject1.accumulate("] is not a JSONArray.", integer0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=1.4681399390162087
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getmax", "getmax");
      Integer integer0 = new Integer((-1815));
      jSONObject1.accumulate("getmax", integer0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 168
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("9dx4~V&V[Rf~*;opo.", (double) 45);
      long long0 = jSONObject0.optLong("9dx4~V&V[Rf~*;opo.");
      assertEquals(45L, long0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Hw<McC+ ");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {Hw<McC+ 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 171
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 172
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 173
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 174
  /*Coverage entropy=1.664556478966277
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("", object0);
      boolean boolean0 = jSONObject0.isNull("");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 175
  /*Coverage entropy=1.664556478966277
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      boolean boolean0 = jSONObject0.isNull("");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 176
  /*Coverage entropy=1.740511704323769
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 177
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("gettoArray");
      assertEquals("", string0);
  }

  /**
  //Test case number: 178
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      boolean boolean0 = jSONObject0.isNull("o_Yf]>ot}VEi}XG3");
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 179
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n\"java.lang.String@0000000009\": \"java.lang.String@0000000009\",\n\"java.lang.String@0000000004\": [],\n\"java.lang.String@0000000007\": \"java.lang.Class@0000000008\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 180
  /*Coverage entropy=1.6354502583387052
  */
  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer integer0 = new Integer(2);
      JSONObject jSONObject0 = new JSONObject(integer0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", (Map) hashMap0);
      jSONObject1.getJSONObject("Expected a ',' or '}'");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 181
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.put("XG%uUm9a%y8nLlZ", (-403.0040130294));
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble("XG%uUm9a%y8nLlZ");
      assertEquals((-403.0040130294), double0, 0.01);
  }

  /**
  //Test case number: 182
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.put("{\n\"java.lang.String@0000000009\": \"java.lang.String@0000000009\",\n\"java.lang.String@0000000004\": [],\n\"java.lang.String@0000000007\": \"java.lang.Class@0000000008\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}", 0L);
      double double0 = jSONObject0.optDouble("{\n\"java.lang.String@0000000009\": \"java.lang.String@0000000009\",\n\"java.lang.String@0000000004\": [],\n\"java.lang.String@0000000007\": \"java.lang.Class@0000000008\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(4, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 183
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.has("~*([N8yF");
      assertEquals(1, jSONObject0.length());
  }
}
