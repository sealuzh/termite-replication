/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 07:10:25 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", object0);
      boolean boolean0 = jSONObject1.isNull("");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4368192399644037
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "])}Pl.&_4EQ.<$RjRdq";
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.clear();
      jSONObject0.put("vV6;*OV", 1L);
      JSONObject jSONObject1 = jSONObject0.put("])}Pl.&_4EQ.<$RjRdq", (Collection) linkedList0);
      Long long0 = new Long((-367L));
      Long.getLong("])}Pl.&_4EQ.<$RjRdq", long0);
      jSONObject1.accumulate("])}Pl.&_4EQ.<$RjRdq", long0);
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      Float float0 = new Float((float) 1L);
      hashMap0.put((Boolean) null, float0);
      JSONObject jSONObject2 = jSONObject0.put("])}Pl.&_4EQ.<$RjRdq", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject2.toString((-1139));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{)I\"R*EgV^ /@4a");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {)I\"R*EgV^ /@4a
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "{)oIHR*EgV^ /@ga";
      String[] stringArray0 = JSONObject.getNames((Object) "{)oIHR*EgV^ /@ga");
      JSONObject jSONObject0 = new JSONObject("{)oIHR*EgV^ /@ga", stringArray0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(linkedList0, 62, 62);
      assertEquals("[]", string0);
      
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNotSame(jSONArray2, jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      Byte byte0 = new Byte((byte)48);
      HashMap<Object, Double> hashMap1 = new HashMap<Object, Double>();
      Double double0 = new Double((byte)48);
      Double.min((-1.0), (-1.0));
      hashMap1.put(hashMap0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.keys();
      Byte byte1 = new Byte((byte)48);
      jSONObject0.toString((-2483), 1686);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Integer integer0 = new Integer(367);
      hashMap0.put((JSONArray) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      // Undeclared exception!
      try { 
        JSONObject.valueToString(jSONObject0, (-374), (-374));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("getreplaceAll", (Object) null);
      JSONObject.valueToString(hashMap0, 2658, 2658);
      Long long0 = new Long(0L);
      Byte byte0 = new Byte((byte) (-85));
      jSONObject1.append("Substring bounds error", byte0);
      jSONObject0.append("Substring bounds error", "Substring bounds error");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("in", "in");
      JSONObject jSONObject2 = jSONObject0.accumulate("in", "in");
      Byte.toUnsignedInt((byte)9);
      jSONObject1.isNull("in");
      JSONArray jSONArray0 = jSONObject2.optJSONArray("in");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject.quote("T%S(r>`I</750");
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-246));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{?p8ce^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {?p8ce^
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-65));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = "true";
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      jSONObject0.put("true", (Map) hashMap0);
      jSONObject0.get("true");
      StringWriter stringWriter0 = new StringWriter(102);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "true");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "true", 102, (int) (byte) (-65));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("Expected a ',' or ']'", jSONArray0);
      JSONArray jSONArray1 = jSONObject0.getJSONArray("Expected a ',' or ']'");
      assertEquals(1, jSONArray1.length());
      
      String string0 = JSONObject.quote("Y=7=zWFD");
      assertEquals("\"Y=7=zWFD\"", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("in", object0);
      try { 
        jSONObject0.getJSONArray("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"in\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      JSONObject.quote("{}");
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{;ReLb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 1 of {;ReLb
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5884082070354566
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte1);
      jSONObject0.putOpt("", byte1);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.getInt("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      jSONObject0.write(stringWriter1);
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject1.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("5`F%uh", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8751832500087795
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Byte byte1 = Byte.valueOf((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte1);
      JSONObject jSONObject1 = jSONObject0.putOpt("", (Object) null);
      jSONObject0.keys();
      jSONObject0.optInt("");
      jSONObject0.optInt("sig", 0);
      jSONObject0.optJSONArray("sig");
      jSONObject1.opt((String) null);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("sho");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of sho
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1815192735832012
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      jSONObject1.toString();
      Byte.compare((byte)1, (byte)1);
      Float float0 = new Float(0.0F);
      Short short0 = new Short((short) (-283));
      JSONObject jSONObject2 = new JSONObject(short0);
      jSONObject0.opt((String) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("pZ79sS", 1864);
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      jSONObject1.accumulate("pZ79sS", object1);
      jSONObject1.accumulate("pZ79sS", "pZ79sS");
      try { 
        jSONObject1.getInt("pZ79sS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pZ79sS\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("^~P#HCCXl<U)?", (Collection) linkedList0);
      stringWriter0.append((CharSequence) "^~P#HCCXl<U)?");
      jSONObject0.write(stringWriter0);
      Double double0 = new Double(116);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.101241191122625
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Byte byte1 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("true", byte1);
      jSONObject1.keys();
      jSONObject0.optJSONArray("true");
      jSONObject0.optDouble("true");
      jSONObject0.toString((-1625), (-114));
      assertEquals(2, jSONObject0.length());
      
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject(object0);
      jSONObject2.isNull("ZqW55pEt`r:j`F");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long((-784L));
      jSONObject0.accumulate("JCYA1;2ikLdFc_S<:", long0);
      jSONObject0.optDouble("JCYA1;2ikLdFc_S<:", (double) (-784L));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("||MQN&&vkVlqR|9j|7");
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", true);
      jSONObject0.toString();
      JSONObject jSONObject2 = jSONObject1.putOpt(",\n", "{\"java.lang.String@0000000005\":\"java.lang.Class@0000000006\",\"java.lang.String@0000000007\":java.lang.Boolean@0000000008}");
      jSONObject2.opt(",\n");
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      BiFunction<JSONObject, Object, JSONObject> biFunction0 = (BiFunction<JSONObject, Object, JSONObject>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONObject0, jSONObject0, biFunction0);
      jSONObject0.put(",\n", 2582L);
      int int0 = jSONObject0.optInt(",\n");
      assertEquals(2582, int0);
      
      boolean boolean0 = jSONObject0.optBoolean(",\n", false);
      assertFalse(boolean0);
      
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      Long long0 = new Long(0L);
      JSONObject jSONObject2 = jSONObject1.accumulate(" of ", long0);
      jSONObject1.accumulate(",\n", jSONObject2);
      jSONObject2.getInt(" of ");
      Byte byte0 = Byte.valueOf((byte)13);
      JSONObject jSONObject3 = new JSONObject(byte0);
      try { 
        jSONObject3.getInt("issplit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issplit\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      String string0 = "5`F%uh";
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("5`F%uh", long0);
      jSONObject0.names();
      try { 
        jSONObject1.getJSONArray("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      StringWriter stringWriter0 = new StringWriter(2);
      Long.toUnsignedString((long) 2);
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Short short0 = new Short((short) (-459));
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer0 = new Integer(69);
      hashMap0.put(jSONArray0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("getcopyValueOf", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(47);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.toJSONArray((JSONArray) null);
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.646075300795112
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject.doubleToString((-922.3161));
      JSONObject jSONObject0 = new JSONObject((Object) "#eN=3C5f3m9Oy1Pz");
      // Undeclared exception!
      jSONObject0.toString(3601);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "isputOpt";
      JSONObject jSONObject0 = new JSONObject((Object) "isputOpt");
      // Undeclared exception!
      jSONObject0.toString(2014, 2014);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      String string0 = JSONObject.valueToString(boolean0, 9, (-575));
      assertNotNull(string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1878840226652085
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      Byte.compare((byte)1, (byte) (-99));
      JSONObject.getNames((Object) jSONObject0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "2~_;,wh~mB}%.";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject1.getString("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Long long0 = new Long((-274L));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`)0Vzk)R*IBbw#/";
      stringArray0[1] = "JSONArray[";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("toS", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("toS");
      assertNotSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(",", false);
      try { 
        jSONObject1.getJSONObject(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(";Xk@l!wOS@\"^ZIQzk:", true);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.put("in", (-1L));
      StringWriter stringWriter0 = new StringWriter(2933);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append((CharSequence) "in");
      StringWriter stringWriter2 = new StringWriter(2933);
      String string0 = jSONObject1.optString("in");
      assertNotNull(string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("\b", (Map) hashMap1);
      String string0 = jSONObject1.optString("\b", "uF");
      assertNotNull(string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Long long0 = new Long((-6L));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "IYw!nP/t";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = " of ";
      stringArray0[5] = "";
      stringArray0[6] = " `1x0lW}Fn]";
      Long.compareUnsigned((-6L), (-1L));
      stringArray0[7] = "IYw!nP/t";
      stringArray0[8] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(long0, stringArray0);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject0.put("", (double) (-6L));
      jSONObject2.getDouble("");
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long((-784L));
      JSONObject jSONObject1 = jSONObject0.accumulate(")<8vMRgh", hashMap0);
      Long long1 = new Long((-784L));
      try { 
        jSONObject0.append(")<8vMRgh", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[)<8vMRgh] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      // Undeclared exception!
      jSONObject0.toString(5613, 5613);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("] not found.", (-2557L));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("L:^QZ");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt("mg;^;e\"8G", "0(Bn|?$)@S-~1B3");
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.accumulate("mg;^;e\"8G", object0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      int int0 = 107;
      try { 
        JSONObject.valueToString(double0, 13, 107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1875292030318554
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject((Object) "{?9p8ce^");
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.toString();
      Double double0 = new Double((-200.108104918758));
      jSONObject0.put("/%|_'", (Object) double0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("||MQN&&vkVlqR|9j|7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ||MQN&&vkVlqR|9j|7
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("flo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"flo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$1", (Object) "wheel.json.JSONObject$1");
      jSONObject1.remove("wheel.json.JSONObject$1");
      Float float0 = new Float((-2789.7944F));
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>(0);
      JSONObject jSONObject1 = jSONObject0.put("U\"3Z2^{8>", (Map) hashMap0);
      jSONObject0.optBoolean("false", true);
      jSONObject0.putOpt("(WV)+N\"4&[;;l^n7", "(WV)+N\"4&[;;l^n7");
      jSONObject0.optString("");
      JSONObject jSONObject2 = jSONObject1.optJSONObject("U\"3Z2^{8>");
      assertNotSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float float0 = new Float((-3282.6982F));
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-318), (-318));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      String string0 = "EA6";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("EA6", hashMap0);
      try { 
        jSONObject1.getBoolean("EA6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"EA6\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject.quote("*Lyxv(4~q");
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject.valueToString(hashMap0, (-803), (-3251));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Short short0 = new Short((short)0);
      Byte byte0 = new Byte((byte) (-64));
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      hashMap0.put((Object) null, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.putOpt("Oi3X'C2JTf<S)", hashMap0);
      jSONObject1.keys();
      Byte byte1 = new Byte((byte) (-64));
      // Undeclared exception!
      try { 
        jSONObject1.toString((-4177984), (-4177984));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.48717948717948717
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Short short0 = new Short((short)172);
      Byte byte0 = new Byte((byte) (-64));
      hashMap0.put(byte0, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      Iterator iterator0 = jSONObject0.keys();
      Byte byte1 = new Byte((byte) (-27));
      StringWriter stringWriter0 = new StringWriter(1);
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject0.write(writer0);
      JSONObject.valueToString(iterator0, (byte) (-64), 32);
      jSONObject0.optJSONArray("0");
      try { 
        jSONObject0.getJSONArray("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Byte byte1 = new Byte((byte)91);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.putOpt("getnotifyAll", "getnotifyAll");
      StringWriter stringWriter0 = new StringWriter((byte)1);
      stringWriter0.append((CharSequence) "getnotifyAll");
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      Float float0 = new Float(1.0);
      hashMap0.put((Float) null, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "dtO@q[tq=g;D`G MF_");
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.optInt("Hjb^$n", (-1034));
      assertEquals((-1034), int0);
      
      StringWriter stringWriter0 = new StringWriter(116);
      stringWriter0.append((CharSequence) "^~P#HCCXl<U)?");
      Long long0 = new Long(1260L);
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.valueToString(jSONObject0, (-1656), 20);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("qL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of qL
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 46, 46);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[", (Object) null);
      JSONObject jSONObject2 = jSONObject1.put("[", (-232));
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(1052L);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, long0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)4525);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("g:@E`SFW1,uqmkE");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.quote(".6+g3C-/y}b$_vK6cgO");
      assertEquals("\".6+g3C-/y}b$_vK6cgO\"", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = JSONObject.quote("w)TNDm,YoCt+3F/DQ%*");
      assertEquals("\"w)TNDm,YoCt+3F/DQ%*\"", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      Long long0 = new Long((-2030L));
      hashMap0.put("] is not a JSONArray.", long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Short short0 = new Short((short)0);
      Byte byte0 = new Byte((byte) (-64));
      hashMap0.put(byte0, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.putOpt("0", boolean0);
      JSONObject.getNames((Object) byte0);
      int int0 = jSONObject1.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Byte byte0 = new Byte((byte)51);
      Byte byte1 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt(" of ", byte0);
      jSONObject1.put("dec", (Object) " of ");
      jSONObject0.getDouble(" of ");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Byte byte0 = new Byte((byte) (-64));
      hashMap0.put(byte0, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      String string1 = jSONObject0.toString((int) (byte) (-64), 1416);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Byte byte0 = new Byte((byte) (-88));
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double(Double.NaN);
      hashMap0.put(byte0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = ",:]}/\\\"[{;=#";
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.putOpt(",:]}/\"[{;=#", boolean0);
      jSONObject1.keys();
      Byte byte1 = new Byte((byte) (-88));
      try { 
        jSONObject1.toString((-475), 1641);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Byte byte0 = new Byte((byte)88);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      hashMap0.put("", (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Boolean.valueOf("\"Ihibp,5l3UC");
      JSONObject jSONObject1 = jSONObject0.putOpt("is", boolean1);
      jSONObject1.keys();
      Byte byte1 = new Byte((byte)6);
      jSONObject1.toString(8, 8);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of '
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short)0);
      Byte byte0 = new Byte((byte)18);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      hashMap0.put((Object) null, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(92);
      jSONObject0.putOpt("is", integer0);
      jSONObject0.keys();
      Byte byte1 = new Byte((byte)18);
      // Undeclared exception!
      try { 
        jSONObject0.toString(43, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      Long long0 = new Long(0L);
      hashMap0.put((String) null, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) null);
      // Undeclared exception!
      try { 
        jSONObject0.toString(1416, 1416);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.remove("isskipPast");
      String string0 = "^~P#HCCXl<U)?";
      StringWriter stringWriter0 = new StringWriter(116);
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'h';
      charArray0[2] = 'j';
      charArray0[3] = '{';
      charArray0[4] = 'x';
      charArray0[5] = '7';
      charArray0[6] = '=';
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, 116, (-3717));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      Float float0 = new Float((-3188.97F));
      Float float1 = new Float((-1384.5531F));
      hashMap0.put(float0, float1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("%2*j%,^1;b)PvJ", (Object) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.2815553875954016
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float(496.4213318529);
      String[] stringArray0 = new String[8];
      stringArray0[0] = " of ";
      stringArray0[1] = "||MQN&&vkVlqR|9j|7";
      stringArray0[2] = "||MQN&&vkVlqR|9j|7";
      stringArray0[3] = "||MQN&&vkVlqR|9j|7";
      stringArray0[4] = "||MQN&&vkVlqR|9j|7";
      stringArray0[5] = "||MQN&&vkVlqR|9j|7";
      stringArray0[6] = "||MQN&&vkVlqR|9j|7";
      stringArray0[7] = "||MQN&&vkVlqR|9j|7";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("||MQN&&vkVlqR|9j|7", (Map) hashMap0);
      Double double0 = new Double(3076.1816444163037);
      JSONObject.valueToString("||MQN&&vkVlqR|9j|7");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double double1 = new Double(0.0);
      JSONObject.valueToString(double1, 39, 59);
      jSONObject0.has("||MQN&&vkVlqR|9j|7");
      boolean boolean0 = jSONObject1.isNull("a`);1(gvd~p|zoJ");
      assertTrue(boolean0);
      
      long long0 = jSONObject0.optLong("||MQN&&vkVlqR|9j|7");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("A JSONObject text must end with '}'", "A JSONObject text must end with '}'");
      try { 
        jSONObject1.getLong("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must end with '}'\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float((-2906.0F));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("x5~");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONArray jSONArray0 = new JSONArray();
      Byte.compare((byte)1, (byte)1);
      Long long0 = new Long((-15L));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      Byte.toUnsignedInt((byte)1);
      jSONObject0.getLong("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("s+mv}kC*.u7d", (-2950L));
      try { 
        jSONObject0.getJSONObject("getreplaceFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getreplaceFirst\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(1541.2504F);
      hashMap0.put(float0, "-922.3161.");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.accumulate((String) null, "?y6`Ps4)5W}G=}!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "in";
      JSONObject jSONObject1 = jSONObject0.putOpt("in", "in");
      try { 
        jSONObject1.getInt("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"in\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("in", "in");
      byte byte0 = (byte)9;
      Byte.toUnsignedInt((byte)9);
      int int0 = 46;
      try { 
        jSONObject0.getDouble("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"in\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("6w[4i3Cu69Ws26[(&", "6w[4i3Cu69Ws26[(&");
      try { 
        jSONObject0.getBoolean("6w[4i3Cu69Ws26[(&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6w[4i3Cu69Ws26[(&\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("get", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("A JSONObject text must end with '}'", 0.0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      jSONArray0.put((Map) hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("Null key.", 0.0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("I/V!=t63t1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of I/V!=t63t1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Byte byte1 = new Byte((byte)1);
      Long long0 = new Long((byte)1);
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("va", 13);
      assertEquals(13, int0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0432514071457581
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      String string0 = JSONObject.quote("EXU0\"?K~p[M&U:~`");
      assertEquals("\"EXU0\\\"?K~p[M&U:~`\"", string0);
      
      JSONObject.valueToString("\"EXU0\"?K~p[M&U:~`\"", 39, (-2390));
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("]aD4Umd>8\"");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("o:tjh}oW/IRj6}wl.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o:tjh}oW/IRj6}wl.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("pZ79sS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pZ79sS\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = null;
      linkedList0.push((String) null);
      jSONObject0.put("true", (Collection) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.removeAll(linkedList0);
      linkedList0.addAll((Collection<? extends String>) linkedList1);
      String string1 = null;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Float float0 = new Float(1279.2305F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("[DXey");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[DXey\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("] is not a JSONArray.", true);
      assertTrue(boolean0);
      
      String string0 = JSONObject.quote("] is not a JSONArray.");
      assertEquals("\"] is not a JSONArray.\"", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{)oIHR*EgV^ /@ga");
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("{)oIHR*EgV^ /@ga", 393L);
      try { 
        jSONObject0.getDouble("{)oIHR*EgV^ /@ga");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{)oIHR*EgV^ /@ga\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Short short0 = new Short((short) (-280));
      Short.toUnsignedLong((short) (-280));
      Short.compare((short) (-280), (short) (-280));
      JSONObject.testValidity(short0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("e`( |/I1", (-1873.3249656));
      assertEquals((-1873.3249656), double0, 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean(",\n", false);
      Long long0 = new Long(0L);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("] is not a Boo-lean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ] is not a Boo-lean.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean(";P,bx,C");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Byte byte0 = new Byte((byte) (-127));
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Float float0 = new Float((-3238.3F));
      String string0 = JSONObject.valueToString(float0, 43, 43);
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-164), 105);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Long long0 = new Long(0L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte byte0 = (byte)48;
      Byte byte1 = new Byte((byte)48);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>((byte)48, 1.0F);
      hashMap0.put(jSONArray0, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.putOpt(",:]}/\"[{;=#", (Object) null);
      try { 
        jSONArray0.getJSONObject((byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[48] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 6, 6);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("w1}/$&_BbOV", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("\f");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(boolean0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-89));
      Byte.toUnsignedInt((byte) (-89));
      Byte.compare((byte)34, (byte) (-50));
      Byte.compare((byte) (-89), (byte) (-89));
      jSONObject0.append("^~P#HCCXl<U)?", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Double double0 = new Double((-719.48162650994));
      try { 
        jSONObject0.append((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("A JSONObject text must begin with '{'", 469.9);
      assertEquals(469.9, double0, 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Byte byte1 = new Byte((byte)91);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble((String) null);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("flo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"flo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("N':S/du`I$U=)[b}w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N':S/du`I$U=)[b}w\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = JSONObject.quote("] is not a number.");
      assertEquals("\"] is not a number.\"", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject.quote("*Lyxv(4~q");
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", 0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("A JSONObject text must end with '}'", "hzg._zq");
      assertEquals("hzg._zq", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-3619), (-3619));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(104);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "in");
      StringWriter stringWriter1 = new StringWriter(2933);
      String string0 = jSONObject0.optString("in");
      assertEquals("", string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "6.dhcv\\2^|v(Vs";
      jSONObject0.opt("6.dhcv\u0002^|v(Vs");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "6.dhcv\u0002^|v(Vs", 92, 92);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-89));
      Byte.toUnsignedInt((byte) (-89));
      StringWriter stringWriter0 = new StringWriter(167);
      Byte.compare((byte) (-54), (byte) (-54));
      Byte.toUnsignedInt((byte) (-42));
      Integer integer0 = new Integer(0);
      JSONObject.valueToString(integer0, (byte) (-54), 214);
      jSONObject0.has("^~P#HCCXl<U)?");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.getJSONObject(128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[128] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }
}
