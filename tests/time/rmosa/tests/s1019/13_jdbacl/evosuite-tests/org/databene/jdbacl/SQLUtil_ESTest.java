/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 06:43:05 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = new Boolean((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint constraint", string0);
      
      boolean boolean1 = SQLUtil.isDDL("foreign key constraint constraint");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(48, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("ei$*HlGsc0G*", stringArray0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      DBDataType dBDataType0 = DBDataType.getInstance((-3104), "select dnto");
      Integer integer0 = RawTransaction.COMMIT;
      DBSchema dBSchema0 = new DBSchema("executecreate unique ndex");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executejnl", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "executejnl";
      stringArray0[1] = "executecreate unique ndex";
      stringArray0[2] = "executecreate unique ndex";
      stringArray0[3] = null;
      stringArray0[4] = "executejnl";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "executecreate unique ndex", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("executejnl", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, dBTable0, dBDataType0, integer0, integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer1, integer2);
      defaultDBColumn1.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"executecreate unique ndex\" PRIMARY KEY (executejnl, executecreate unique ndex, executecreate unique ndex, , executejnl, , , , )", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLUtil.isDDL("create uknique ndex");
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "}meEfr\\";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}meEfr");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "}meEfr";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("}meEfr", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '}meEfr' has no foreign key with the columns (}meEfr)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("LOG10(double)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"double\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLUtil.isDDL("d]]}-;|2[#");
      DBCatalog dBCatalog0 = new DBCatalog("d]]}-;|2[#");
      DBSchema dBSchema0 = new DBSchema("IWaB!k#i_1G0BR[", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("d]]}-;|2[#", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "d]]}-;|2[#";
      stringArray0[1] = "crea";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "IWaB!k#i_1G0BR[", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("E]G4!N}y\"iQO2X/Z", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fWg%#\"WiBnW6{njg?z");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, mockPrintWriter0);
      assertEquals("E]G4!N}y\"iQO2X/Z", dBForeignKeyConstraint0.getName());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "drop index";
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "executeq";
      stringArray0[1] = "executeq";
      stringArray0[2] = "executeq";
      stringArray0[3] = "drop index";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop index", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("42X64");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("callelse", "`,C&I|6", "QJ>XN`+ol1Oo");
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "drop table[zqbl@vr$d", (Object[]) stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLUtil.isProcedureCall("ELSE");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ELSE", false, "L}LaS4'F}|;`NJo3|y", "ELSE");
      dBCheckConstraint0.setDoc("L}LaS4'F}|;`NJo3|y");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      stringBuilder0.reverse();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      Integer integer0 = new Integer(71);
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      dBCatalog0.getTable((String) null, false);
      DBDataType dBDataType0 = DBDataType.getInstance(71, "BLOB");
      Integer integer1 = new Integer(71);
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ELSE", (DBTable) null, dBDataType0, integer2, integer2);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("0.0BLOB", stringBuilder1.toString());
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ELSE CHECK ELSE", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create uknique ndex");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create uknique ndex", defaultDBTable0, (DBDataType) null, integer0, (Integer) null);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("create uknique ndex, create uknique ndex, create uknique ndex, create uknique ndex, create uknique ndex, create uknique ndex", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.567944147734173
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLUtil.normalize("86%$x,v/t", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("86%$x,v/t");
      Integer.getInteger("++rg2(qsjGJ_RZE!Qv");
      TableContainer tableContainer0 = new TableContainer("86 % $ x, v / t");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("0-;COm)4)F_;q", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLUtil.normalize("86%$x,v/t", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("86%$x,v/t");
      Integer.getInteger("++rg2(qsjGJ_RZE!Qv");
      String[] stringArray0 = new String[8];
      String string0 = ".('k&JHw{x2[y7x*eF";
      stringArray0[0] = ".('k&JHw{x2[y7x*eF";
      stringArray0[1] = ".db";
      stringArray0[2] = "Wy:tuZMG4z7g4ZzX1";
      stringArray0[3] = "v%\"S7ecC";
      stringArray0[4] = "86%$x,v/t";
      stringArray0[5] = "86 % $ x, v / t";
      stringArray0[6] = "86%$x,v/t";
      stringArray0[7] = "++rg2(qsjGJ_RZE!Qv";
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "adter tableblob";
      stringArray0[1] = "adter tableblob";
      stringArray0[2] = "S+A%>j.r'";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "adter tableblob";
      // Undeclared exception!
      try { 
        SQLUtil.join("adter tableblob", "adter tableblob", stringArray0, (String) null, "create tabl", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[0];
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringBuilder0;
      SQLUtil.renderValue(stringBuilder0);
      Object[] objectArray1 = new Object[3];
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        stringBuilder0.delete((-1300), 3671);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1300
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775296L));
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "*na>");
      SQLUtil.normalize("*na>", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLUtil.isQuery("scTict dnto");
      Integer integer0 = new Integer(335740937);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("/#@!-|prR5K71pXC", false);
      DBDataType dBDataType0 = DBDataType.getInstance(335740937, "BLOB");
      Integer.getInteger("BLOB");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, (Integer) null, integer2);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isDML("callslec,");
      Integer.getInteger("UNIQUE ");
      SQLUtil.parseColumnTypeAndSize("/*");
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("adte");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container null", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("*/", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rI0}qI{2[o0(.Qok");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3Q";
      stringArray0[1] = "";
      DBDataType.getInstance((-1098), "H");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "rI0}qI{2[o0(.Qok", true, stringArray0);
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "3Q", true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint1);
      SQLUtil.typeAndName(dBUniqueConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "unique constraint rI0}qI{2[o0(.Qok");
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(rowOutputTextLog0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      Locale locale0 = Locale.JAPAN;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "ND-_P", (Object[]) stringArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("3Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '3Q' not found in table 'rI0}qI{2[o0(.Qok'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[12];
      SQLUtil.renderColumnListWithTableName("}i~~X^+6Nj##}``?C(e", stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = new Boolean(true);
      String string0 = SQLUtil.normalize("$Ot,-9]~+:'i<O", true);
      assertEquals("$ Ot, - 9 ] ~ + : 'i<O'", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")";
      stringArray0[1] = ")";
      stringArray0[2] = ")";
      stringArray0[3] = ")";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(")", stringArray0, "mn^5", ")", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile("n1Ubt");
      File file0 = FileUtil.canonicalFile((File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.FRENCH;
      MockPrintStream mockPrintStream0 = new MockPrintStream("select,");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select,");
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "execute43x58.u", objectArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c!oVA{I!");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3Q";
      stringArray0[1] = "";
      DBDataType.getInstance((-1098), "H");
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderValue("Zv");
      SQLUtil.isDML("callslec,");
      SQLUtil.normalize("c!oVA{I!", false);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLUtil.renderValue("ELSE");
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("n1Ubt");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer integer0 = new Integer(878);
      DBDataType dBDataType0 = DBDataType.getInstance(90114, "n1Ubt");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("n1Ubt", defaultDBTable0, dBDataType0, integer1, integer1);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Unexpected connection error:";
      stringArray0[1] = "n1Ubt";
      stringArray0[2] = "Unexpected connection error:";
      stringArray0[3] = "n1Ubt";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Unexpected connection error:", false, defaultDBTable1, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (Unexpected connection error:, n1Ubt, Unexpected connection error:, n1Ubt) REFERENCES n1Ubt(Unexpected connection error:, n1Ubt, Unexpected connection error:, n1Ubt)", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "[K";
      stringArray0[1] = "[K";
      stringArray0[2] = "[K";
      stringArray0[3] = "[K";
      stringArray0[4] = "[K";
      stringArray0[5] = "[K";
      stringArray0[6] = "[K";
      stringArray0[7] = "[K";
      stringArray0[8] = "[K";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[K", true, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      assertEquals("null.[K", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("#(e0dX!^;j", true);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertEquals("table", defaultDBTable1.getObjectType());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(i7FW[Dp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (i7FW[Dp
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean.valueOf("jNL");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("jNL", true, "jNL", "jNL");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("BT;PHo~*+um>ZT8\"");
      assertNull(boolean0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT jNL CHECK jNL", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9549783515321212
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = SQLUtil.normalize("d]]}-;|2[#", false);
      assertEquals("d ] ] } - ; | 2 [ #", string0);
      
      Boolean boolean0 = new Boolean("d]]}-;|2[#");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("d]]}-;|2[#", (DBSchema) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "d]]}-;|2[#";
      stringArray0[1] = "alter tableselect,";
      stringArray0[2] = "L";
      stringArray0[3] = "d ]  ] } - ; | 2 [ #";
      stringArray0[4] = "|6rS-defqINAx|Pq";
      stringArray0[5] = "d]]}-;|2[#";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "d]]}-;|2[#", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT d]]}-;|2[# UNIQUE (d]]}-;|2[#, alter tableselect,, L, d ]  ] } - ; | 2 [ #, |6rS-defqINAx|Pq, d]]}-;|2[#)", string1);
      
      String string2 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.d]]}-;|2[#, null.alter tableselect,, null.L, null.d ]  ] } - ; | 2 [ #, null.|6rS-defqINAx|Pq, null.d]]}-;|2[#", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[11];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("KsnedRp&?KHBv");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.printf("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLUtil.isQuery("selectselect intoselect dnto");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("getCharacterStream(long, long)", true, "selectselect intoselect dnto", "selectselect intoselect dnto");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("X+rgJ(qsj|J_RZE!Qv");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0D";
      stringArray0[1] = "X+rgJ(qsj|J_RZE!Qv";
      stringArray0[2] = "drop table";
      stringArray0[3] = "drop table";
      stringArray0[4] = " AND ";
      stringArray0[5] = "0D";
      stringArray0[6] = "drop table";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop table", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(1782);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"drop table\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(M0'ABRb`");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "select into";
      stringArray0[1] = " TML^s_t";
      stringArray0[2] = "select into";
      stringArray0[4] = "(M0'ABRb`";
      stringArray0[5] = "select into";
      stringArray0[6] = "O>";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " TML^s_t", false, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLUtil.isDML("delete1n`xx#w;u0-cw;z");
      TableContainer tableContainer0 = new TableContainer("delete1n`xx#w;u0-cw;z");
      assertEquals("delete1n`xx#w;u0-cw;z", tableContainer0.getName());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLUtil.normalize("7J4U)rk;Z^r?J|uMI", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = new Boolean("7J4U) rk ;  Z ^ r ? J | uMI");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select,");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "drop index";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "drop index";
      stringArray0[1] = null;
      stringArray0[2] = "oFm";
      stringArray0[3] = "drop index";
      stringArray0[4] = "n1Ubt";
      String[] stringArray1 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec1);
      Boolean boolean0 = new Boolean(stringArray0[1]);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "rename];re2r=1+z:q0ubrk";
      stringArray0[1] = "43X50.U";
      stringArray0[2] = "43X50.U";
      stringArray0[3] = ">";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ">", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("43X50.U", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("43X50.U", false, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (rename];re2r=1+z:q0ubrk, 43X50.U, 43X50.U, >) REFERENCES null(rename];re2r=1+z:q0ubrk, 43X50.U, 43X50.U, >)", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select", false, "select", "select");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("delete", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = SQLUtil.normalize("86%$x,v/t", false);
      assertEquals("86 % $ x, v / t", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = new Boolean("E$uXMcK+|AcvV");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("&~N:/L`nmB", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder("&~N:/L`nmB");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("&~N:/L`nmB", stringBuilder1.toString());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("N");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("N", false, "N", "N");
      boolean boolean1 = SQLUtil.isProcedureCall("executejc'1a}!s");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("callslec,");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesStructure("execute");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SQLUtil.isDDL("58/h75Co/<");
      String[] stringArray1 = new String[7];
      stringArray1[0] = "Q+JkS436~\"(kT:/D2M4";
      stringArray1[1] = "execute";
      stringArray1[2] = "58/h75Co/<";
      stringArray1[3] = "execute";
      stringArray1[4] = "58/h75Co/<";
      stringArray1[5] = "58/h75Co/<";
      stringArray1[6] = "Q+JkS436~\"(kT:/D2M4";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("58/h75Co/<", stringArray0, "58/h75Co/<", "execute", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "executee\"xh03[8gap5'mt";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "create materialized view";
      stringArray1[1] = "executee\"xh03[8gap5'mt";
      stringArray1[2] = "executee\"xh03[8gap5'mt";
      String string0 = SQLUtil.join("zI", "zI", stringArray0, "zI", "zI", stringArray1);
      assertEquals("zI join zI as zI on zI.executee\"xh03[8gap5'mt = zI.create materialized view", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = "";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, (String[]) null, "", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLUtil.normalize("{Mr2r\"}QJ)6%RAWv~Y", false);
      Boolean boolean0 = new Boolean("1.rTPxi[)");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2075);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" TML^s_t");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "0D", false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT 0D ", stringBuilder0.toString());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("X+rgJ(qsj|J_RZE!Qv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: X+rgJ(qsj|J_RZE!Qv
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char char0 = 'Q';
      Character character0 = new Character('Q');
      Character.lowSurrogate(34);
      SQLUtil.renderValue(character0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("#k5r8g|");
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = ")83eQ4JA8@Z6";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '#k5r8g|' has no foreign key with the columns (, )83eQ4JA8@Z6)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLUtil.normalize("[i$.3zXaWY+", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[i$.3zXaWY+");
      Boolean boolean0 = new Boolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" V:Z1%/B7W|ih7");
      SQLUtil.typeAndName(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      VersionNumber versionNumber0 = VersionNumber.valueOf("COLUMNNUMBER");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "ei=thKp#~]L:K_%c", versionNumber0);
      VersionNumber.valueOf("d@PAH");
      defaultDatabase0.getCatalog("0vg@h2~q|& ");
      SQLUtil.ownerDotComponent(defaultDatabase0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("");
      File file0 = FileUtil.canonicalFile((File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("JAVA_CLASS", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("JAVA_CLASS", dBSchema0);
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderValue(dBCatalog0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.9510567829046702
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = SQLUtil.normalize(" V:Z1%/B7W|ih7", false);
      assertEquals("V : Z1 % / B7W | ih7", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" V:Z1%/B7W|ih7");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "V : Z1 % / B7W | ih7";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " V:Z1%/B7W|ih7", false, stringArray0);
      dBUniqueConstraint0.setName("V : Z1 % / B7W | ih7");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"V : Z1 % / B7W | ih7\" UNIQUE (V : Z1 % / B7W | ih7)", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(V : Z1 % / B7W | ih7)", string2);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.removeComments("}US1T>chPFqGPWFlG");
      assertEquals("}US1T>chPFqGPWFlG", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      boolean boolean0 = SQLUtil.isProcedureCall("&rop index");
      assertFalse(boolean0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&rop index", (DBTable) null, 66552, "call");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CALL", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[13];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-348243495), "\u0001\u00B6");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\u0001\u00B6", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("\u0001\u00B6", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("n1Ubt");
      String[] stringArray0 = new String[1];
      SQLUtil.join("n1Ubt", "n1Ubt", stringArray0, "n1Ubt", "S+A%>j.r'", stringArray0);
      SQLUtil.renderColumnListWithTableName("drop table", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.isDML("X+rgJ(qsjJ_RZE!Qv");
      SQLUtil.isQuery("X+rgJ(qsjJ_RZE!Qv");
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("AJ/uVzd[EmP?@6^H");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.join("AJ/uVzd[EmP?@6^H", ".", (String[]) null, ".", "AJ/uVzd[EmP?@6^H", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("Qv^O>pi.kl.L", stringArray0, (String) null, "Qv^O>pi.kl.L", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnListWithTableName("}i~~X^+Nj##}``?C(e", stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tableblob");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("delete1n`xx#w;u0-cw;z");
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("delete1n`xx#w;u0-cw;z", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "jNL";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean.valueOf("jNL");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("jNL", true, "jNL", "jNL");
      StringBuilder stringBuilder0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("jNL", true, "jNL", "jNL");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = SQLUtil.normalize("coalesce", true);
      assertEquals("coalesce", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " NULL", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("DROP TABLE IF EXISTS ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, "W^X)", stringArray0);
      assertEquals("null as W^X) on ", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("selectselect intoselect dnto");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "selectselect intoselect dnto";
      String string0 = SQLUtil.innerJoin("selectselect intoselect dnto", stringArray0, "selectselect intoselect dnto", "selectselect intoselect dnto", stringArray0);
      assertEquals("selectselect intoselect dnto as selectselect intoselect dnto on selectselect intoselect dnto.selectselect intoselect dnto = selectselect intoselect dnto.selectselect intoselect dnto", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.ExecutionFactory";
      stringArray0[1] = "org.apache.derby.iapi.sql.execute.ExecutionFactory";
      stringArray0[2] = "org.apache.derby.iapi.sql.execute.ExecutionFactory";
      stringArray0[3] = "org.apache.derby.iapi.sql.execute.ExecutionFactory";
      stringArray0[4] = "org.apache.derby.iapi.sql.execute.ExecutionFactory";
      stringArray0[5] = "org.apache.derby.iapi.sql.execute.ExecutionFactory";
      stringArray0[6] = "org.apache.derby.iapi.sql.execute.ExecutionFactory";
      stringArray0[7] = "org.apache.derby.iapi.sql.execute.ExecutionFactory";
      stringArray0[8] = "org.apache.derby.iapi.sql.execute.ExecutionFactory";
      String string0 = SQLUtil.innerJoin("org.apache.derby.iapi.sql.execute.ExecutionFactory", stringArray0, "inserttml^s_t", "org.apache.derby.iapi.sql.execute.ExecutionFactory", stringArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("", (String[]) null, "", "01S00", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLUtil.isDML("\u0001\u010F");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("mk_PoGBdjl)qS`", true, "mk_PoGBdjl)qS`", "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT mk_PoGBdjl)qS` ", stringBuilder0.toString());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g_MflMu<");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g_MflMu<", defaultDBTable0, (-1964), "select dnto");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("g_MflMu< SELECT DNTO NULL", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column g_MflMu<", string1);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      Integer integer0 = new Integer((-1591));
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      dBCatalog0.getTable("execcreate uknique ndex", false);
      DBDataType dBDataType0 = DBDataType.getInstance(115, "execcreate uknique ndex");
      Integer.getInteger((String) null);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("else", (DBTable) null, dBDataType0, (Integer) null, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("EXECCREATE UKNIQUE NDEX", stringBuilder1.toString());
      assertEquals("EXECCREATE UKNIQUE NDEX", stringBuilder0.toString());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1383), "alter materialized view");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.util.Tool");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("o", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("o ALTER MATERIALIZED VIEW(0,1) NULL", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("/hhX|(qEhs!/dFO$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: /hhX|(qEhs!/dFO$
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "[i UX=mNr$");
      SQLUtil.addOptionalCondition("[i UX=mNr$", stringBuilder0);
      assertEquals("[i UX=mNr$ or [i UX=mNr$", stringBuilder0.toString());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "create uknique ndex");
      SQLUtil.addRequiredCondition("create uknique ndex", stringBuilder0);
      assertEquals("create uknique ndex and create uknique ndex", stringBuilder0.toString());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("delete1n`xx#w;u0-cw;z");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("TIMEZONE_MINUTE");
      assertNull(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select dnto");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create table");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderColumnListWithTableName("}i~~X^+Nj##}``?C(e", stringArray0);
      assertEquals("}i~~X^+Nj##}``?C(e.null", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "*+Ck~fCpD/@");
      SQLUtil.normalize("", false);
      String[] stringArray0 = null;
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, "", false, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("X+rgJ(qsj|J_RZE!Qv");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("- ");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select,");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "drop index";
      String[] stringArray0 = new String[1];
      SQLUtil.join("n1Ubt", "drop index", stringArray0, "n1Ubt", "zI", stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-28856934), "n1Ubt");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.compile.NumericConstantNode", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("n1Ubt");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("n1UbtN1UBT(3)", stringBuilder0.toString());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("alter tableblob");
      dBCatalog0.getTable("alter tableblob", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-1756812348), "alter tableblob");
      Integer.getInteger("alter tableblob");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = new Integer((-1756812348));
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer1, integer2);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "alter tableblob");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("alter tableblobALTER TABLEBLOB(-1756812348,1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("drop materialized view", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("scTict dnto");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("E^$C#Kk-Wx;*#Pg'M", false);
      assertEquals("E ^ $ C # Kk - Wx ; * # Pg 'M'", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.leftJoin("scTict dnto", stringArray0, "vG`I6bP>{T=", "scTict dnto", stringArray0);
      assertEquals("left join vG`I6bP>{T= as scTict dnto on ", string1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("S+A%>j.r'", "S+A%>j.r'", stringArray0, (String) null, "S+A%>j.r'", stringArray0);
      assertEquals("S+A%>j.r' join null as S+A%>j.r' on S+A%>j.r'.null = S+A%>j.r'.null", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[12];
      String string0 = SQLUtil.join("}i~~X^+6Nj##}``?C(e", "}i~~X^+6Nj##}``?C(e", stringArray0, "`15-]~T$PB2 `C,K|", "`15-]~T$PB2 `C,K|", stringArray0);
      assertEquals("}i~~X^+6Nj##}``?C(e join `15-]~T$PB2 `C,K| as `15-]~T$PB2 `C,K| on }i~~X^+6Nj##}``?C(e.null = `15-]~T$PB2 `C,K|.null and }i~~X^+6Nj##}``?C(e.null = `15-]~T$PB2 `C,K|.null and }i~~X^+6Nj##}``?C(e.null = `15-]~T$PB2 `C,K|.null and }i~~X^+6Nj##}``?C(e.null = `15-]~T$PB2 `C,K|.null and }i~~X^+6Nj##}``?C(e.null = `15-]~T$PB2 `C,K|.null and }i~~X^+6Nj##}``?C(e.null = `15-]~T$PB2 `C,K|.null and }i~~X^+6Nj##}``?C(e.null = `15-]~T$PB2 `C,K|.null and }i~~X^+6Nj##}``?C(e.null = `15-]~T$PB2 `C,K|.null and }i~~X^+6Nj##}``?C(e.null = `15-]~T$PB2 `C,K|.null and }i~~X^+6Nj##}``?C(e.null = `15-]~T$PB2 `C,K|.null and }i~~X^+6Nj##}``?C(e.null = `15-]~T$PB2 `C,K|.null and }i~~X^+6Nj##}``?C(e.null = `15-]~T$PB2 `C,K|.null", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("hgp*WV)\"CJDOz^z", "hgp*WV)\"CJDOz^z", (String[]) null, "hgp*WV)\"CJDOz^z", "X+rgJ(qsj|J_RZE!Qv", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("inner", "inner", stringArray0, "exaxbd6!q,k/M1waP", "inner", stringArray0);
      assertEquals("exaxbd6!q,k/M1waP as inner on ", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("*2iW?4m EO>{#<!qFlF", (String[]) null, "*2iW?4m EO>{#<!qFlF", "//", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("select into", stringBuilder0);
      assertEquals("select into", stringBuilder0.toString());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.join("y*'(:", "delveteq>xw=n-x&@dk", stringArray0, "delveteq>xw=n-x&@dk", "delveteq>xw=n-x&@dk", stringArray0);
      assertEquals("y*'(: join delveteq>xw=n-x&@dk as delveteq>xw=n-x&@dk on delveteq>xw=n-x&@dk.null = delveteq>xw=n-x&@dk.null and delveteq>xw=n-x&@dk.null = delveteq>xw=n-x&@dk.null and delveteq>xw=n-x&@dk.null = delveteq>xw=n-x&@dk.null and delveteq>xw=n-x&@dk.null = delveteq>xw=n-x&@dk.null", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.leftJoin("Qv^O>pi.kl.L", stringArray0, (String) null, "Qv^O>pi.kl.L", stringArray0);
      assertEquals("left join null as Qv^O>pi.kl.L on Qv^O>pi.kl.L.null = Qv^O>pi.kl.L.null and Qv^O>pi.kl.L.null = Qv^O>pi.kl.L.null and Qv^O>pi.kl.L.null = Qv^O>pi.kl.L.null and Qv^O>pi.kl.L.null = Qv^O>pi.kl.L.null", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "adter tableblob";
      stringArray0[1] = "adter tableblob";
      stringArray0[2] = "adter tableblob";
      stringArray0[3] = "adter tableblob";
      stringArray0[4] = "adter tableblob";
      stringArray0[5] = "adter tableblob";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "adter tableblob";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "updateBlob(";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("truncateselect dnto");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("N", true, "N", "N");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.7786655906578275
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLUtil.normalize("d]]}-;|2[#", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("d ]  ] } - ; | 2 [ #", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.substituteMarkers("", "create materialized view<lni-z:92ub)mf`", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("86%$x,v/t");
      String string0 = SQLUtil.substituteMarkers("86%$x,v/t", "qXcNSZQyG", "qXcNSZQyG");
      assertEquals("86%$x,v/t", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("create unique indexalter tableblob");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("(?y^gRYN");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("(?y^gRYN", (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("CAX[dS-+", "CAX[dS-+", "CAX[dS-+");
      assertEquals("'CAX[dS-+'", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("De?6ie]x5", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("drop table");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("delete1n`xx");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("delete1n`xx#w;u0-cw;z");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("S%\"cjXW0N=\"9rnr[");
      assertFalse(boolean0);
  }
}
