/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 18:09:10 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.SocketException;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.getClientObjectHandler();
      theClient0.toString();
      QuickServer quickServer0 = new QuickServer();
      QuickServerConfig quickServerConfig0 = quickServer0.getConfig();
      quickServer0.initServer(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.toString();
      theClient0.setTimeout((-3127));
      theClient0.getClientExtendedEventHandler();
      theClient0.getServer();
      theClient0.getClientExtendedEventHandler();
      assertEquals((-3127), theClient0.getTimeout());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("s*BlC(@-rJa=$g]]");
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientEvent();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setTrusted(false);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      byte[] byteArray0 = new byte[4];
      theClient0.setTimeoutMsg("");
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient0.toString();
      theClient0.getServer();
      theClient0.getTimeoutMsg();
      theClient0.getClientObjectHandler();
      theClient0.getClientEvent();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientObjectHandler();
      theClient0.getTimeoutMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientCommandHandler();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("6");
      theClient0.setMaxAuthTry((-2614));
      theClient0.getAuthenticator();
      theClient0.getClientAuthenticationHandler();
      theClient0.toString();
      theClient0.setMaxConnectionMsg("`m\"e5X");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("SocketTimeoutException : {0}", 1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.toString();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals((-2614), int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(2364);
      theClient0.setTrusted(false);
      theClient0.setCommunicationLogging(false);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getMaxAuthTry();
      theClient0.getClientEvent();
      assertEquals(2364, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(0);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTrusted();
      theClient0.toString();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getCommunicationLogging();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.setTimeout(1312);
      theClient0.getTrusted();
      theClient0.getClientEventHandler();
      assertEquals(1312, theClient0.getTimeout());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#0-ID:61>", nonBlockingClientHandler0.getName());
      
      theClient0.setMaxConnectionMsg("wvvf]-.m");
      theClient0.getMaxConnectionMsg();
      //  // Unstable assertion: assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setTrusted(false);
      theClient0.getClientObjectHandler();
      byte[] byteArray0 = new byte[4];
      theClient0.setTimeoutMsg(" ");
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient0.toString();
      theClient0.getServer();
      theClient0.getTimeoutMsg();
      theClient0.getClientObjectHandler();
      theClient0.getClientEvent();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientObjectHandler();
      theClient0.getTimeoutMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.getServer();
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setMaxConnectionMsg("");
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.toString();
      theClient0.setClientEventHandler(commandHandler0);
      MockInetAddress.getLocalHost();
      theClient0.setTimeout(1881);
      theClient0.getClientBinaryHandler();
      theClient0.getTimeout();
      TheClient theClient1 = new TheClient();
      theClient0.getSocket();
      assertEquals(1881, theClient0.getTimeout());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[0];
      theClient0.setCommunicationLogging(false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient0.getClientWriteHandler();
      theClient0.setTimeout((-10));
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getSocket();
      theClient0.getSocketChannel();
      theClient0.getTimeout();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      theClient0.getCommunicationLogging();
      theClient0.getAuthenticator();
      theClient0.getClientObjectHandler();
      theClient0.getSocket();
      assertEquals((-10), theClient0.getTimeout());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      theClient0.toString();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#0-ID:46>", nonBlockingClientHandler0.getName());
      
      theClient0.setMaxConnectionMsg("org.quickserver.util.xmlreader.Secure");
      theClient0.setTimeoutMsg("no socket");
      theClient0.getClientData();
      ClientData clientData0 = theClient0.getClientData();
      theClient0.setClientData(clientData0);
      TheClient theClient1 = new TheClient();
      theClient1.setMaxAuthTryMsg("");
      TheClient theClient2 = new TheClient();
      theClient2.setTrusted(true);
      theClient0.getMaxAuthTryMsg();
      //  // Unstable assertion: assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientExtendedEventHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setTimeoutMsg(",4F7&|");
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte)0;
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 2148);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      theClient0.setTimeout((-1260));
      TheClient theClient1 = new TheClient();
      theClient1.getClientBinaryHandler();
      theClient0.getTimeout();
      TheClient theClient2 = new TheClient();
      theClient0.getSocket();
      assertEquals((-1260), theClient0.getTimeout());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#0-ID:16>", nonBlockingClientHandler0.getName());
      
      theClient0.getClientData();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.setMaxAuthTryMsg("");
      TheClient theClient1 = new TheClient();
      theClient0.getMaxAuthTryMsg();
      //  // Unstable assertion: assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientBinaryHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(0);
      assertEquals("<ClientHandler-Pool#0-ID:1>", nonBlockingClientHandler0.getName());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      theClient0.getClientData();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      TheClient theClient1 = new TheClient();
      theClient0.setMaxAuthTryMsg("<Am");
      theClient0.setTrusted(false);
      theClient0.getMaxAuthTryMsg();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      MockSocket mockSocket0 = new MockSocket();
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getChannel();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.toString();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-1);
      byteArray0[1] = (byte)36;
      byteArray0[5] = (byte) (-71);
      byteArray0[7] = (byte)113;
      byteArray0[8] = (byte) (-34);
      try { 
        nonBlockingClientHandler0.sendClientBinary(byteArray0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Connection is no more open!
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getMaxAuthTry();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, int0);
  }
}
