/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 17:55:46 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("false", (-504L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      double double0 = jSONObject0.optDouble("false");
      assertEquals((-504.0), double0, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
      
      Byte byte0 = new Byte((byte) (-2));
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a Boolean.", boolean0);
      jSONObject1.optBoolean("] is not a Boolean.", true);
      boolean boolean1 = jSONObject1.isNull("not");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "gO)==}U1;$\"</l";
      try { 
        jSONObject0.getBoolean("gO)==}U1;$\"</l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gO)==}U1;$\\\"<\\/l\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1000039501699495
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.append("Substring bounds error", (Object) null);
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject2 = jSONObject0.put("*L0", (Map) hashMap0);
      String string0 = jSONObject0.toString(2, 810);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "X)7:zF/IUuG$4yoQ";
      stringArray0[8] = string0;
      stringArray0[2] = "X)7:zF/IUuG$4yoQ";
      stringArray0[3] = "is";
      stringArray0[4] = "is";
      jSONObject1.optJSONObject("*L0");
      try { 
        jSONObject2.getString("X)7:zF/IUuG$4yoQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"X)7:zF/IUuG$4yoQ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2774737549423403
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      hashMap0.keySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      JSONObject.testValidity(jSONObject1);
      jSONObject0.append("GIL_vSXiF,dT'7C", "GIL_vSXiF,dT'7C");
      int int0 = jSONObject1.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Ph}X=).i\"HrEi";
      boolean boolean0 = true;
      jSONObject0.put("Ph}X=).i\"HrEi", true);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 0, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",\n";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString(linkedList0, 103, 103);
      Double double0 = new Double(103);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      String string0 = JSONObject.valueToString(hashMap0, 352, 25);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONArray0.optJSONObject(34);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Long long0 = new Long(34);
      JSONObject jSONObject2 = jSONObject0.accumulate("ck~]&", long0);
      double double0 = jSONObject2.optDouble("ck~]&");
      assertEquals(34.0, double0, 0.01);
      
      boolean boolean1 = jSONObject1.isNull("ck~]&");
      assertTrue(boolean1);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 17, 12);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.append("Substring bounds error", (Object) null);
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      jSONObject0.put("*LM0", (Map) hashMap0);
      Double double0 = new Double(0L);
      Double.isFinite(0.0);
      JSONObject.getNames((Object) double0);
      String string0 = jSONObject1.getString("Substring bounds error");
      assertNotNull(string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8794450460513974
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONObject.quote("/1");
      JSONObject jSONObject1 = jSONObject0.put("/1", (Collection) null);
      Integer integer0 = new Integer((-17));
      JSONObject jSONObject2 = jSONObject1.accumulate("\"/1\"", integer0);
      JSONObject.valueToString(jSONObject0);
      Integer integer1 = new Integer((-17));
      Integer integer2 = new Integer((-17));
      jSONObject2.optString(",\n", "\"/1\"");
      jSONObject0.toString(0, (int) integer1);
      JSONObject jSONObject3 = new JSONObject();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject.doubleToString(0.0);
      jSONObject2.getLong("\"/1\"");
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.572948035186329
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("X)7:zF/IUuG$4yoQ", (Map) hashMap0);
      jSONObject1.optLong("X)7:zF/IUuG$4yoQ");
      int int0 = (-332);
      jSONObject0.toString((-332), (-332));
      JSONObject jSONObject2 = jSONObject0.getJSONObject("X)7:zF/IUuG$4yoQ");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{\"java.lang.String@0000000003\": {}}";
      stringArray0[1] = "gethashCode";
      stringArray0[2] = "gethashCode";
      stringArray0[3] = "{\"java.lang.String@0000000003\": {}}";
      JSONObject jSONObject3 = new JSONObject("{\"java.lang.String@0000000003\": {}}");
      jSONObject2.optString("{\"java.lang.String@0000000003\": {}}");
      try { 
        jSONObject3.getBoolean("D/4Gu2t\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D/4Gu2t\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      jSONObject0.put("X)7:zF/IUuG$4yoQ", (Map) hashMap0);
      JSONObject.quote("X)7:zF/IUuG$4yoQ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('9');
      Writer writer0 = jSONObject0.write(stringWriter1);
      assertSame(writer0, stringWriter1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer((-332));
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(479, 57);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.Integer@0000000002\": java.lang.Boolean@0000000003}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      short short0 = (short) (-2362);
      JSONObject.valueToString(linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener("}KZSB");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }KZSB
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.87996524719584
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString("ck");
      JSONObject jSONObject1 = jSONObject0.put("ck", (Collection) null);
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.accumulate("\"java.lang.String@0000000004\"", integer0);
      JSONObject.valueToString("ck");
      JSONObject.valueToString(jSONObject0);
      Integer integer1 = new Integer(0);
      int int0 = new Integer(0);
      jSONObject2.optString(",\n", "\"java.lang.String@0000000004\"");
      jSONObject0.toString(0, (int) integer1);
      JSONObject jSONObject3 = new JSONObject();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject.doubleToString(0.0);
      jSONObject2.getLong("\"java.lang.String@0000000004\"");
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)77);
      linkedList0.add(byte0);
      JSONObject jSONObject1 = jSONObject0.put("toU", 0.0);
      double double0 = jSONObject1.getDouble("toU");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) hashMap0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.add((Byte) null);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("\n", (-1297L));
      assertEquals((-1297L), long0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ck", (Collection) null);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optBoolean("ck");
      jSONObject1.optJSONArray("ck");
      JSONObject jSONObject3 = jSONObject2.optJSONObject("ck");
      assertNull(jSONObject3);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(object0);
      String string0 = "\\r";
      jSONObject0.put("\r", (Collection) null);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5901377123969231
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.getNames(jSONObject1);
      JSONObject.valueToString(jSONObject1);
      JSONObject jSONObject2 = new JSONObject((Object) "wheel.json.JSONObject@0000000002");
      Integer integer0 = new Integer(10);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.accumulate("uMx", jSONArray0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.valueToString(boolean0);
      jSONObject0.optString("uMx", ",\n");
      try { 
        jSONObject1.getInt("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Float float0 = new Float(0.0F);
      String string0 = jSONObject0.toString(44, 44);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("{}", (-1154.892));
      double double0 = jSONObject1.getDouble("{}");
      assertEquals((-1154.892), double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1862978654914522
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = JSONObject.doubleToString(559.11);
      assertEquals("559.11", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "559.11");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6376129104430255
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("getwait");
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      Boolean.logicalAnd(false, true);
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      int int0 = jSONObject0.optInt("getwait");
      assertEquals(0, int0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5786122886681098
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) null);
      jSONObject1.put("#f", (-1741));
      String string1 = jSONObject0.optString("0");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = JSONObject.quote("OH^R59/9vm.ENS(#%");
      assertEquals("\"OH^R59/9vm.ENS(#%\"", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1043874073835953
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Integer integer0 = Integer.valueOf(65);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put(".", (Collection) null);
      Integer integer1 = new Integer(2458);
      jSONObject1.accumulate("P", integer1);
      Byte byte0 = new Byte((byte)45);
      JSONObject.valueToString(byte0);
      Byte.compare((byte)65, (byte)65);
      jSONObject1.optString("ck", ".");
      jSONObject1.getInt("P");
      jSONObject1.length();
      jSONObject1.optString(".", ".");
      JSONObject.numberToString(byte0);
      jSONObject1.toString(2458, 3);
      jSONObject1.put("R+@u>+1", (double) 0);
      JSONObject.quote("XO");
      JSONObject.valueToString((Object) null, 0, 2458);
      jSONObject0.put("BEM%1M%_JK\"xbY!8", 0.0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
      
      String string1 = JSONObject.valueToString((Object) null, 12, 12);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      String string0 = jSONObject0.toString((-332), (-332));
      String string1 = jSONObject0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      JSONObject jSONObject1 = jSONObject0.put("gethashCode", 0.0);
      jSONObject1.keys();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(jSONObject1);
      double double0 = jSONObject0.optDouble("gethashCode");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      String string0 = jSONObject0.toString((-332), (-332));
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("{}", 0.0);
      double double0 = jSONObject1.optDouble("{}", (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject0.put("j|", (Object) null);
      try { 
        jSONObject3.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.103943406939595
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString("ck");
      JSONObject jSONObject1 = jSONObject0.put("ck", (Collection) null);
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.accumulate("\"java.lang.String@0000000004\"", integer0);
      JSONObject.valueToString("ck");
      jSONObject0.optString("\"java.lang.String@0000000004\"", ",\n");
      jSONObject2.getInt("\"java.lang.String@0000000004\"");
      jSONObject0.length();
      jSONObject2.optString(",\n", "\"java.lang.String@0000000004\"");
      JSONObject.numberToString(integer0);
      String string0 = jSONObject1.toString(0, 2452);
      jSONObject2.put("iscompare", 0.0);
      // Undeclared exception!
      JSONObject.quote(string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Byte byte0 = new Byte((byte) (-2));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.accumulate("L)OZI", (Object) null);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "iscompare";
      String string1 = null;
      try { 
        jSONObject0.put((String) null, 1675.3141632571);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("IoakAQFWO<6yRziB.]", (-1006.177593196));
      JSONArray jSONArray0 = jSONObject0.optJSONArray("B");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5815881170272683
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Double double0 = new Double(588.4);
      JSONObject jSONObject0 = new JSONObject(double0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = Integer.getInteger("\r", 3381);
      hashMap0.put("wheel.json.JSONObject$Null", integer0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>(hashMap0);
      jSONObject0.put("wheel.json.JSONObject$Null", (Map) hashMap1);
      try { 
        jSONObject0.getLong("wheel.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$Null\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject.quote("DS|=^,vu?inLE/Q?PnR");
      Byte byte0 = new Byte((byte)1);
      Byte.toUnsignedLong((byte)1);
      Byte byte1 = new Byte((byte)41);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.add(byte0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("(>Ge[U ?u/S&f*l", (Object) byte0);
      jSONObject0.getLong("(>Ge[U ?u/S&f*l");
      jSONObject0.toJSONArray(jSONArray0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("(>Ge[U ?u/S&f*l", (Object) linkedList0);
      jSONObject1.optString("PQRd%}jT;Jf]<YGlj");
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Float.sum((-1249.7527F), (-1249.7527F));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      jSONObject0.optString((String) null, (String) null);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter(2);
      stringWriter0.append('>');
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      JSONObject jSONObject2 = new JSONObject();
      Double double0 = new Double(0.0F);
      JSONObject jSONObject3 = jSONObject0.put("djmhgYK,a} K^cOjE", (Collection) null);
      Byte byte0 = new Byte((byte)50);
      JSONObject.valueToString(jSONObject3);
      jSONObject3.optLong((String) null);
      Byte byte1 = Byte.valueOf((byte)50);
      JSONObject jSONObject4 = jSONObject3.putOpt((String) null, byte1);
      assertSame(jSONObject4, jSONObject0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject.quote("toS");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("toS", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-769L));
      Long.divideUnsigned((-6291L), 2948L);
      Long long1 = new Long(0L);
      Long long2 = new Long((-6291L));
      Long.min(0L, (-1L));
      Long.min((-769L), 0L);
      Long.getLong("{>'\"WY ry<)J.oec", long2);
      Long.getLong("{>'\"WY ry<)J.oec", long1);
      Long.sum((-769L), 0L);
      String string0 = JSONObject.quote("{>'\"WY ry<)J.oec");
      assertEquals("\"{>'\\\"WY ry<)J.oec\"", string0);
      
      JSONObject.valueToString("\"{>'\"WY ry<)J.oec\"", (-1762), 418);
      String string1 = JSONObject.doubleToString(6257375873035802L);
      assertEquals("6.257375873035802E15", string1);
      
      jSONObject0.optJSONArray("4-B!^Lzx");
      boolean boolean0 = jSONObject0.optBoolean("6.257375873035802E15");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-1762));
      jSONObject0.put("XRo(DUI}VEC(W?I^H", (Object) integer0);
      String string2 = JSONObject.quote(",");
      assertEquals("\",\"", string2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      jSONObject0.put("Wd}P<DH", (Collection) linkedList1);
      try { 
        jSONObject0.getBoolean("Wd}P<DH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Wd}P<DH\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject(float0);
      int int0 = 2;
      StringWriter stringWriter0 = new StringWriter(2);
      stringWriter0.append('>');
      JSONObject jSONObject2 = new JSONObject();
      Double double0 = new Double((-1.0));
      Long long0 = new Long(2);
      JSONObject.numberToString(float0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("2=wN 3bc\"kp1KD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 2=wN 3bc\"kp1KD
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 123;
      Integer integer0 = new Integer(123);
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(">}z^Yz0", (-970.7120072));
      assertEquals((-970.7120072), double0, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte byte0 = (byte)97;
      Byte byte1 = new Byte((byte)97);
      JSONObject jSONObject0 = new JSONObject(byte1);
      String string0 = "getvalues";
      Long long0 = Long.getLong("getvalues", 1L);
      String string1 = "iscomputeIfPresent";
      long long1 = 0L;
      jSONObject0.optLong("iscomputeIfPresent", 0L);
      Long.min(0L, 1L);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.104174754539364
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString("ck");
      JSONObject jSONObject1 = jSONObject0.put("ck", (Collection) null);
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.accumulate("\"java.lang.String@0000000004\"", integer0);
      JSONObject.valueToString("ck");
      String string0 = ",\n";
      jSONObject0.optString("\"java.lang.String@0000000004\"", ",\n");
      jSONObject2.getInt("\"java.lang.String@0000000004\"");
      jSONObject0.length();
      jSONObject2.optString(",\n", "\"java.lang.String@0000000004\"");
      jSONObject0.toString(0, 0);
      // Undeclared exception!
      jSONObject0.toString(8448);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Double double0 = new Double(959.0645642362125);
      Double double1 = new Double(0.0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      Double.isFinite(959.0645642362125);
      jSONObject0.append("jhmvvAO", double0);
      jSONObject0.optJSONArray("jhmvvAO");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double double0 = new Double(588.4);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      HashMap<Short, String> hashMap1 = new HashMap<Short, String>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      double double1 = jSONObject0.optDouble("dU7:M");
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "lD!gfCT:\"=";
      jSONObject0.optDouble("lD!gfCT:\"=", 2629.8);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "lD!gfCT:\"=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1815192735832012
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("Am>7G]Fz^O", true);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject(float0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      jSONObject1.optString("] is not a Boolean.", "");
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.0978100054573563
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{N}.6yp3_Zs1j[U-'");
      Float.sum(758.5F, (-840.93335F));
      jSONObject0.put("", 2254L);
      jSONObject0.optInt("");
      jSONObject0.optJSONArray("JSONArray initial value should be a string or collection or array.");
      JSONObject.quote("{N}.6yp3_Zs1j[U-'");
      Long long0 = new Long(1L);
      Float float0 = new Float((double) 1L);
      JSONObject.getNames((Object) float0);
      jSONObject0.keys();
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}c}6:ojZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }c}6:ojZ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "] is not a Boolean.";
      jSONObject0.put("] is not a Boolean.", 1L);
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8856883005138299
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "Q nT]`0{)]W";
      String string1 = "'QdU7kbV";
      JSONObject.quote("'QdU7kbV");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string2 = "Je`u#\\o";
      JSONObject jSONObject1 = jSONObject0.put("Je`u#o", (Collection) null);
      Integer integer0 = new Integer((-17));
      String string3 = "isdoubleToString";
      jSONObject0.accumulate("isdoubleToString", jSONObject1);
      JSONObject.valueToString("\"'QdU7kbV\"");
      Integer integer1 = new Integer((-2056));
      Integer integer2 = new Integer((-2056));
      String string4 = null;
      jSONObject0.optString((String) null, (String) null);
      // Undeclared exception!
      jSONObject1.toString(0, 88);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = ">?v~{3Ck\"XDu}7|";
      long long0 = 4491L;
      jSONObject0.put(">?v~{3Ck\"XDu}7|", 4491L);
      String string1 = null;
      String string2 = "YiP1*v~s`GsL5=";
      JSONObject jSONObject1 = jSONObject0.put("YiP1*v~s`GsL5=", 4491L);
      jSONObject1.getDouble("YiP1*v~s`GsL5=");
      int int0 = (-1588);
      Integer integer0 = new Integer((-1588));
      Integer.compare((-108), 23);
      try { 
        jSONObject1.getJSONObject("YiP1*v~s`GsL5=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"YiP1*v~s`GsL5=\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)22);
      jSONObject0.accumulate(".", byte0);
      jSONObject0.isNull(".");
      Object object0 = jSONObject0.get(".");
      assertEquals((byte)22, object0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("getdivideUnsigned", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject.quote("ck");
      JSONObject jSONObject1 = jSONObject0.put("ck", (Collection) null);
      JSONObject.doubleToString(0.0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("ck");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject("{}");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("a");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, 47, 10);
      JSONObject.quote("[]");
      Double double0 = new Double(10);
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("\"[]\"", (Collection) linkedList0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean(">s7O\"Lm-NNy1w", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.put("ck", (Collection) null);
      StringWriter stringWriter0 = new StringWriter(19);
      StringWriter stringWriter1 = stringWriter0.append('B');
      jSONObject0.write(stringWriter1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer((-1267));
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.putIfAbsent(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(123);
      Boolean boolean0 = new Boolean("equ");
      Integer integer1 = new Integer(13);
      Boolean.logicalXor(false, true);
      Boolean boolean1 = new Boolean("equ");
      hashMap0.put(integer1, boolean1);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Integer integer0 = Integer.getInteger("2dcw1%8^*;2:3(ff^x", 46);
      hashMap0.put((Short) null, integer0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("P", (-1120));
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      Byte byte0 = new Byte((byte) (-2));
      jSONObject0.accumulate("L)%OZI", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("isnotify", 1792L);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      jSONObject0.optLong("getcompare");
      jSONObject0.put("e is not a JSONArray.", (Object) stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Double double0 = new Double(588.4);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      String string0 = JSONObject.quote("eIJ:RAC4");
      assertEquals("\"eIJ:RAC4\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = JSONObject.valueToString(jSONObject0, 12, 59);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 2938, 2938);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("\"\"");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("true", false);
      try { 
        jSONObject1.getDouble("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("is", "is");
      JSONObject.valueToString(jSONObject1);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject2 = jSONObject1.put("is", (Collection) linkedList0);
      Integer integer0 = new Integer(97);
      jSONObject2.accumulate("is", (Object) null);
      JSONObject.valueToString(jSONObject2);
      String string0 = "wai";
      Long long0 = new Long(97);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject.quote("A JSONObject text must end with '}'");
      Integer integer0 = new Integer(10);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", false);
      jSONObject1.accumulate("A JSONObject text must end with '}'", integer0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("val");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"val\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "to";
      stringArray0[3] = "XP";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{N}.6yp3_Zs1j[U-'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {N}.6yp3_Zs1j[U-'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.toString((-2265));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject0.toJSONArray(jSONArray0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer((-2697));
      Boolean boolean0 = new Boolean(true);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      int int0 = (-842);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-842));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Double double0 = new Double(588.4);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer.getInteger((String) null);
      hashMap0.put((Integer) null, (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
      
      jSONObject0.optJSONObject("Y#E)SC$I<dOFxa^lK");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(" YM9^6P19x?3OI", " YM9^6P19x?3OI");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("a");
      jSONObject0.optJSONArray("@w7vs(h_P");
      JSONObject jSONObject1 = jSONObject0.append("isshortValue", (Object) null);
      jSONObject1.append("isshortValue", "isshortValue");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.accumulate("w6{s", linkedList0);
      try { 
        jSONObject0.append("w6{s", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[w6{s] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1096L));
      String string0 = null;
      try { 
        jSONObject0.append((String) null, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(65);
      jSONObject0.put("VijJ)", true);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringBuffer0, 65, (-1234));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1299
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0, 65, 65);
      assertNotNull(string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("no", 4);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      Float float0 = new Float(0.0F);
      BiFunction<Object, Object, Byte> biFunction0 = (BiFunction<Object, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(float0, biFunction0);
      Object object0 = new Object();
      JSONObject.valueToString(object0, 20, 12);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5891783264039585
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString("ck");
      int int0 = 0;
      Integer integer0 = new Integer(0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"java.lang.String@0000000004\"", integer0);
      JSONObject.valueToString("ck");
      jSONObject0.optString("\"java.lang.String@0000000004\"", ",\n");
      jSONObject1.getInt("\"java.lang.String@0000000004\"");
      jSONObject0.length();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(12, 87);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = stringWriter0.append('>');
      stringWriter1.append((CharSequence) "Am>7G]Fz^O");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.accumulate("/", "Am>7G]Fz^O");
      JSONObject.valueToString(jSONObject0);
      jSONObject1.optString("/", ",\n");
      try { 
        jSONObject2.getInt("39.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"39.0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.5888083670994821
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString("ck");
      Integer integer0 = new Integer((-20));
      JSONObject jSONObject1 = jSONObject0.accumulate("\"java.lang.String@0000000004\"", integer0);
      JSONObject.valueToString("ck");
      jSONObject0.optString("\"java.lang.String@0000000004\"", ",\n");
      jSONObject1.getInt("\"java.lang.String@0000000004\"");
      jSONObject1.optString((String) null, "vW+3fr_{{<@x4");
      jSONObject0.length();
      Integer integer1 = new Integer((-3939));
      JSONObject.quote("ck");
      Float float0 = new Float((double) (-20));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.2001730010839116
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject.quote("dS|=^,vu?/nfEg/Q?P^R");
      JSONObject jSONObject0 = new JSONObject((Object) "dS|=^,vu?/nfEg/Q?P^R");
      jSONObject0.toString((-1386));
      String string0 = "";
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = JSONObject.quote(";Y");
      assertEquals("\";Y\"", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("] is not a Boolean.", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-4230.1892109));
      Byte byte0 = Byte.valueOf((byte)117);
      hashMap0.replace(float0, byte0);
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      hashMap0.clear();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      jSONObject0.putOpt("JSON does not allow non-finite numbers.", double0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      Float float0 = new Float(59.65119F);
      hashMap0.put(float0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected a ',' or '}'";
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("Expected a ',' or '}'", true);
      try { 
        jSONObject0.getInt("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or '}'\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf((String) null);
      try { 
        jSONObject0.accumulate((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("@*WmT[L8nVC5n^", false);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        Long.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("Wd}P<DH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Wd}P<DH\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      jSONObject0.remove((String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-55.0902922));
      hashMap0.put((String) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      Function<String, Double> function0 = (Function<String, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfAbsent((String) null, function0);
      jSONObject0.remove((String) null);
      jSONObject0.optJSONArray("r:");
      try { 
        jSONObject0.getInt("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.doubleToString((-1900.319416));
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean(false);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      int int0 = jSONObject0.optInt("L?=", 8192);
      assertEquals(8192, int0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("w .C)|LW%");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = JSONObject.getNames((Object) null);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer((-332));
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put((Integer) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(57, (-332));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(16, 16);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(2336);
      StringWriter stringWriter1 = stringWriter0.append('9');
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "Am>7G]Fz^O");
      stringWriter2.write(2);
      char[] charArray0 = new char[0];
      stringWriter1.write(charArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("\r", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(":T~8op8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of :T~8op8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.opt("wheel.json.JSONArray");
      jSONObject0.put("wheel.json.JSONArray", 0L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("", (Object) jSONObject1);
      String string1 = "";
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("", (Object) "");
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("DS|=^,vu?/nLE/Q?P^R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"DS|=^,vu?/nLE/Q?P^R\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
