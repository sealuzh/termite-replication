/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 09:12:28 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{j',|ocs");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {j',|ocs
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{JFzbqPo");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {JFzbqPo
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("}D`LsV(XL");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }D`LsV(XL
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6383285682293793
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("min", false);
      String string0 = jSONObject0.toString(44, 31);
      assertNotNull(string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Map) null);
      jSONObject1.remove("Bad value from toJSONString: ");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\t", (long) 10);
      String string0 = jSONObject1.optString("\t");
      assertNotNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("sh", (long) 35);
      long long0 = jSONObject0.optLong("sh");
      assertEquals(35L, long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-84));
      JSONObject jSONObject1 = jSONObject0.putOpt("sub", byte0);
      long long0 = jSONObject1.optLong("sub");
      assertEquals((-84L), long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isoptJSONObject", (-1.0));
      int int0 = jSONObject1.optInt("isoptJSONObject");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Bad value from toJSONString: ", (-873.82300315372));
      assertEquals((-873.82300315372), double0, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)79);
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Object) byte0);
      double double0 = jSONObject1.optDouble("Bad value from toJSONString: ");
      assertEquals(79.0, double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-116));
      JSONObject jSONObject1 = jSONObject0.put("3V?vTCIBIxukPg@c", (Object) byte0);
      double double0 = jSONObject1.optDouble("3V?vTCIBIxukPg@c");
      assertEquals((-116.0), double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("J*w%Y/", "J*w%Y/");
      Object object0 = jSONObject1.opt("J*w%Y/");
      assertEquals("J*w%Y/", object0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("d?i36/#", object0);
      boolean boolean0 = jSONObject1.has("d?i36/#");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Rp((=YQyJ(u{", (Object) float0);
      String string0 = jSONObject0.getString("Rp((=YQyJ(u{");
      assertNotNull(string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isoptJSONObject", (-1.0));
      long long0 = jSONObject1.getLong("isoptJSONObject");
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("C9N([p+", (Object) jSONArray0);
      JSONArray jSONArray1 = jSONObject0.getJSONArray("C9N([p+");
      assertSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("sh", (long) 35);
      int int0 = jSONObject1.getInt("sh");
      assertEquals(35, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7326587201992074
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("d#Z(qF{pw3d$E6s", float0);
      int int0 = jSONObject1.getInt("d#Z(qF{pw3d$E6s");
      assertEquals((-2294), int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-84));
      JSONObject jSONObject1 = jSONObject0.putOpt("sub", byte0);
      double double0 = jSONObject1.getDouble("sub");
      assertEquals((-84.0), double0, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8200759753606217
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("lo", true);
      boolean boolean0 = jSONObject0.getBoolean("lo");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\f", (Object) "\f");
      Object object0 = jSONObject0.get("\f");
      assertEquals("\f", object0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("&E$=R", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.666278442414676
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = JSONObject.valueToString("ro3.N", 926, 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.666278442414676
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, 0, (short)76);
      assertNotNull(string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-5190), 0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.788191435362226
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-2209), 41);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-4605));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("q+*/+GJt/|%v", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, jSONObject0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("", "");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6715952780212544
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("", (Collection) linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) "FG#?m7k,tZ9oDY6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Double double0 = new Double(2907.453243731);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gethashCode", 0L);
      int int0 = jSONObject0.getInt("gethashCode");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double double0 = new Double(2907.453243731);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", 237);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 438.729525);
      long long0 = jSONObject1.getLong("");
      assertEquals(438L, long0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("Bad value from toJSONString: ", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>(0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("{jcViS!8c(=;.m^\"", (-1445L));
      assertEquals((-1445L), long0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong((String) null, 1L);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Bad value from toJSONString: ", (int) (short)0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("<,<@`VWQ7|zX", (-1854));
      assertEquals((-1854), int0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Double double0 = new Double(2907.453243731);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      int int0 = jSONObject0.optInt("", 237);
      assertEquals(237, int0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("s<JN", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", (double) 21);
      assertEquals(21.0, double0, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("A]~toz$?d;ZIb", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("d?i36/#");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.3030924037617193
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1616);
      JSONObject jSONObject1 = jSONObject0.accumulate("", double0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Double double0 = new Double((-1661.4269349895));
      hashMap0.put((Integer) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7822053480824616
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double double0 = new Double(3024);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 3024, 3024);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7682192157531085
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(3980, 3980);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.add((Boolean) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-39L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 3266);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.8558085030413587
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Map) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0, 34, 34);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      String string0 = JSONObject.valueToString(hashMap0, (-4605), (-128044258));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 3014, (-16));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-302), 120);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.7119964716978848
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      StringWriter stringWriter0 = new StringWriter(34);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.6113583739370252
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Unterminated string", (Object) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.955955681689552
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float((-3692.57587867));
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      hashMap0.put((Byte) null, float0);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.toString(120);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(false);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.add(boolean0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 69, (short)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.2677946372884996
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "VW@JK7T%cmK&jq");
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("VW@JK7T%cmK&jq", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.6614769771805253
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("SkuHO\":Oa\u0006//7|RE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"SkuHO\\\":Oa\\u0006//7|RE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = JSONObject.quote("eeKQL(</\"");
      assertEquals("\"eeKQL(<\\/\\\"\"", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "\\u";
      String string1 = JSONObject.quote(string0);
      assertEquals("\"\\\\u\"", string1);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject(">/n1`&L)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">/n1`&L)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.5358551955461082
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[ugwP0YL[";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.4185564143607379
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Double double0 = new Double((-2294.8252F));
      try { 
        jSONObject0.accumulate((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.3592367006650063
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      Float float0 = new Float((float) 2330L);
      jSONObject0.put(string0, (Object) float0);
      String string1 = jSONObject0.optString(string0, string0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("U#:");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.502417502380445
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.valueOf(false);
      linkedList0.add(boolean0);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.putOpt("+3Oy'pwX_HWf~Wjq+|", "+3Oy'pwX_HWf~Wjq+|");
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.0900596587107838
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Double double0 = new Double(330.4081472433);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.338872053314866
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.4921530032950385
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.accumulate("+xUniZ+kh", long0);
      long long1 = jSONObject1.getLong("+xUniZ+kh");
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\f", (Object) "\f");
      long long0 = jSONObject0.optLong("\f");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("SkuHO\":Oa\u0006//7|RE", (Map) null);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("SkuHO\":Oa\u0006//7|RE");
      assertNotSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.3961001489141087
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isoptJSONObject", (-1.0));
      try { 
        jSONObject1.getJSONObject("isoptJSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isoptJSONObject\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.3961001489141087
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("n", (-441.6));
      try { 
        jSONObject0.getJSONArray("n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{}", 2450.355263380567);
      int int0 = jSONObject0.optInt("{}");
      assertEquals(2450, int0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("C9N([p+", (Object) jSONArray0);
      try { 
        jSONObject1.getInt("C9N([p+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"C9N([p+\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      Float float0 = new Float((float) 2330L);
      jSONObject0.put(string0, (Object) float0);
      double double0 = jSONObject0.getDouble(string0);
      assertEquals(2330.0, double0, 0.01);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.0692024658203625
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("lo", true);
      boolean boolean0 = jSONObject0.optBoolean("lo");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.6005011139717424
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1624.2576F);
      jSONObject0.put("ha", (Object) double0);
      boolean boolean0 = jSONObject0.optBoolean("ha");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.7269369375735457
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("N2k", "N2k");
      boolean boolean0 = jSONObject0.optBoolean("N2k");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("flo", false);
      boolean boolean0 = jSONObject1.getBoolean("flo");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = JSONObject.doubleToString((short)39);
      assertEquals("39", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-20652939));
      assertEquals("-2.0652939E7", string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-3211.911448));
      assertEquals("-3211.911448", string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Unterminated string", (Object) null);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("Unterminated string");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.6270327303856096
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Short short0 = new Short((short)2026);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Map) null);
      try { 
        jSONObject1.append("Bad value from toJSONString: ", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Bad value from toJSONString: ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.6528806356652013
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Short short0 = new Short((short)2026);
      JSONObject jSONObject0 = new JSONObject(short0);
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Map) null);
      jSONObject0.accumulate("Bad value from toJSONString: ", (Object) null);
      jSONObject1.accumulate("Bad value from toJSONString: ", hashMap0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("@?D$4S4'.8", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.7756394837233485
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Short short0 = new Short((short)2026);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Map) null);
      jSONObject0.accumulate("Bad value from toJSONString: ", (Object) null);
      jSONObject1.append("Bad value from toJSONString: ", (Object) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{j3ViS!8c(=;X.m^\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 12 of {j3ViS!8c(=;X.m^\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("=o%Q{2tKC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of =o%Q{2tKC
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("co", object0);
      boolean boolean0 = jSONObject0.isNull("co");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1.0F));
      jSONObject0.put(",u", (Object) double0);
      boolean boolean0 = jSONObject0.isNull(",u");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 170
  /*Coverage entropy=1.8308939447177783
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(4006);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=1.7812167809316266
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject.valueToString(jSONObject0, 39, 2465);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 172
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("5KC%xC", (int) (short)0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 173
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 174
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.String@0000000005\":wheel.json.JSONObject@0000000004,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 175
  /*Coverage entropy=1.8270722164693372
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("Bad value from toJSONString: ", (Map) null);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 176
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("", (-2637L));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 177
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("-6`um\"Z}2nWX=", (Collection) linkedList0);
      jSONObject0.optJSONArray("-6`um\"Z}2nWX=");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 178
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Short short0 = new Short((short)2026);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.has((String) null);
      assertEquals(1, jSONObject0.length());
  }
}
