/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 09:14:48 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775020L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(9223372036854775625L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addLast(range0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList1);
      Long.sum(933L, 9223372036854775625L);
      Long.divideUnsigned(2147483647L, 933L);
      Object object0 = new Object();
      linkedList0.removeLastOccurrence(object0);
      linkedList0.add((Range) null);
      Long.max((-17L), 793L);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(9223372036854775020L, 9223372036854775020L);
      Range range1 = Range.of(9223372036854775020L, 9223372036854775807L);
      Range.of(2054L);
      range0.equals(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of((-32717L), (-1683L));
      Range.of((-1683L));
      Range range1 = Range.of((-1683L), (-1683L));
      Range.of((-1683L), 0L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775807L), (-9223372036854775807L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775807L), (-9223372036854775807L));
      Long long0 = new Long((-1666L));
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      String string0 = range1.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ -9223372036854775807 .. -9223372036854775807 ]/SB", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 439L, 4294967295L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString();
      Range range1 = Range.of(range_CoordinateSystem1, 439L, 4294967295L);
      range0.endsBefore(range1);
      range0.equals(object0);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("bitLength must be >=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.bitLength must be >=0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 439L, 4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(range0);
      range0.toString(range_CoordinateSystem0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(1293L, 65535L);
      Range range1 = Range.of(32767L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.addLast(range0);
      Long.sum(9223372036854775807L, 0L);
      Long.divideUnsigned(2689L, 670L);
      linkedList1.removeLastOccurrence(range0);
      linkedList1.add(range0);
      Long.max(1L, 4259L);
      Range range1 = Range.of((-1560L));
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.043137604749472
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483649L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.contractBegin((-1428L));
      Range range1 = Range.ofLength(2147483659L);
      Object object0 = new Object();
      range0.spliterator();
      range0.equals(range1);
      Range range2 = Range.ofLength(2147483659L);
      range2.startsBefore(range0);
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3L), 127L);
      Object object0 = new Object();
      range0.equals("The second parameter in the comparison is null.");
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 127L, (-3L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(9223372036854775643L, 9223372036854775643L);
      Object object0 = new Object();
      range0.complement(range0);
      Object object1 = new Object();
      long long0 = (-3278L);
      Range range1 = Range.of((-3278L), (-3278L));
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3278 would make range [9223372036854775643 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3121L, 3121L);
      range1.endsBefore(range0);
      Range range2 = Range.of(2871L);
      range1.equals(range2);
      range2.equals(range1);
      range1.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("y0aW%#{.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse y0aW%#{. into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775807L), (-9223372036854775807L));
      range0.getBegin();
      Long long0 = new Long(2519L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.6888794541139402
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(9223372036854775625L);
      Range.of(257L, 257L);
      Range range1 = Range.of(4294967299L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      Range range2 = range0.asRange();
      Long long0 = new Long(4294967299L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 4294967299L, 4294967299L);
      boolean boolean0 = range2.equals(range3);
      assertFalse(boolean0);
      assertFalse(range3.isEmpty());
      assertSame(range3, range1);
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.090364701389587
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 9223372036854775625L;
      Range range0 = Range.of(9223372036854775625L);
      Range range1 = range0.asRange();
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long.max(9223372036854775625L, (-417L));
      Range range2 = range1.intersection(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getEnd(range_CoordinateSystem0);
      Long long1 = new Long(9223372036854775626L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range0.split(9223372036854775625L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 570L, 2147483647L);
      Object object0 = new Object();
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-1683L), 36L);
      Range range1 = Range.of((-1683L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775625L);
      range0.equals((Object) null);
      long long0 = range0.getEnd();
      assertEquals(9223372036854775624L, long0);
      
      long long1 = range0.getLength();
      assertEquals(9223372036854775625L, long1);
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(9223372036854775625L);
      Range range1 = Range.of(9223372036854775625L);
      Long long0 = new Long(9223372036854775625L);
      String string0 = range1.toString();
      //  // Unstable assertion: assertEquals("[ 9223372036854775625 .. 9223372036854775625 ]/0B", string0);
      
      Range range2 = Range.of(9223372036854775638L);
      boolean boolean0 = range0.equals(range2);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertSame(range0, range1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483656L);
      Range range0 = range_Builder0.build();
      Range range1 = range0.asRange();
      Long long0 = new Long(2147483656L);
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(":v4ytq:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.:v4ytq:
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1722696170693387
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Long long0 = new Long(1462L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of((-2404L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.of(127L);
      Range range2 = range0.asRange();
      range2.getBegin();
      Long long0 = new Long(127L);
      range0.equals(range1);
      range1.intersection(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.parseRange("1,03#dtZ}`Cr3G", range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483656L);
      Range range0 = range_Builder0.build();
      range0.toString();
      range0.equals("[ 0 .. 2147483655 ]/0B");
      Long long0 = new Long(255L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.713572066704311
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 255 .. 255 ]/0B", string0);
      
      Range range1 = Range.ofLength(255L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-1212L), (-1212L));
      Range range2 = Range.of((-967L));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      Range range3 = Range.parseRange("[ 255 .. 254 ]/0B");
      boolean boolean0 = range3.equals(range0);
      //  // Unstable assertion: assertSame(range3, range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1675288820277174
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3121L, 3121L);
      range1.endsBefore(range0);
      Range range2 = Range.of(2871L);
      range1.equals(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals("");
      Range range1 = Range.of((-2147483648L));
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.713572066704311
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775040L);
      linkedList0.addLast(range0);
      Long.sum(3470L, 9223372036854775807L);
      Long.divideUnsigned(9223372036854775643L, 3470L);
      linkedList0.removeLastOccurrence(range_CoordinateSystem0);
      Range range1 = Range.of(3470L, 9223372036854775643L);
      linkedList0.add(range1);
      Long.max(3470L, 9223372036854775040L);
      range1.complementFrom(linkedList0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483608L, 2147483608L);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("?x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.?x
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-22L), (-22L));
      range_CoordinateSystem0.getAbbreviatedName();
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("SB", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(182L);
      Range range1 = Range.ofLength(182L);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("bitLength muDt be >=0", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse bitLength muDt be >=0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 6868L, 6868L);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-2077L));
      Long long0 = new Long((-2077L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-279L), (-1L));
      range0.equals(range1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1238927498215925
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-1683L));
      Range range1 = Range.of((-1683L));
      Range range2 = range1.asRange();
      Range range3 = Range.of((-1683L), (-1L));
      assertFalse(range3.equals((Object)range1));
      
      Long long0 = new Long(1251L);
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
      assertNotSame(range2, range3);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775807L), (-9223372036854775807L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      Long long0 = new Long((-1666L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -9223372036854775807 .. -9223372036854775806 ]/SB", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long long0 = new Long((-2077L));
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-2077L));
      Long long0 = new Long((-128L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = range0.asRange();
      Long long0 = new Long(255L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("length must be >= 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.length must be >= 0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.contractBegin((-1428L));
      Range range1 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      range0.spliterator();
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(3863L);
      Range range1 = Range.of(3863L);
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.929568618777601
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Long long0 = new Long((-1428L));
      range0.equals(long0);
      range0.getLength();
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.4965075614664793
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(255L);
      Long long0 = new Long(255L);
      range0.toString();
      Range range2 = Range.of(1L);
      range1.equals((Object) null);
      range1.split(255L);
      range0.complement(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3535781515098884
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long((-284L));
      Long.max(9223372036854775807L, 257L);
      linkedList0.add(range0);
      linkedList0.addLast(range0);
      Long.sum((-2147483648L), 9223372036854775807L);
      long long1 = (-17L);
      Long.divideUnsigned(9223372036854771421L, (-17L));
      linkedList0.removeLastOccurrence(long0);
      linkedList0.add(range0);
      Long.max((-1L), (-17L));
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.9891972161647633
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 439L, 9223372036854775020L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addLast((Range) null);
      Long.sum((-1318L), 793L);
      Long.divideUnsigned((-2495L), 439L);
      linkedList0.removeLastOccurrence(range0);
      linkedList0.add(range0);
      long long0 = (-296L);
      Long.max((-296L), (-17L));
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(182L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1157L, 1157L);
      range0.equals((Object) null);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(966L);
      Long long0 = new Long((-2077L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.ofLength(930L);
      Long long0 = new Long((-3918L));
      range0.isEmpty();
      range0.getLength();
      Integer integer0 = new Integer(2130706397);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = 4388L;
      Range range0 = Range.ofLength(4388L);
      range0.split(4388L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1439L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775805L));
      Long long0 = new Long((-9223372036854775805L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-32768L), 32767L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.v
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(1L, 1504L);
      range0.getLength();
      List<Range> list0 = range0.split(1L);
      range0.equals(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("u(:6e&J+WqGgpIe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.u(:6e&J+WqGgpIe
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483692L, 2147483692L);
      Object object0 = new Object();
      range0.isEmpty();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-22L), (-22L));
      range_CoordinateSystem0.getAbbreviatedName();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.Comparators.values();
      range0.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1701L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1701 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      long long0 = new Long(255L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      range1.intersection(range0);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertTrue(range1.isEmpty());
      
      Range range3 = Range.ofLength(6413L);
      assertNotSame(range3, range0);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      range0.endsBefore(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of(381L);
      range0.isSubRangeOf(range1);
      Range.Comparators.values();
      range0.toString();
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L);
      range0.asRange();
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 124L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-24L), 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.8918202981106305
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(1722L, 1722L);
      Range range1 = Range.of(1722L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(401L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-934L));
      range0.iterator();
      Range range2 = Range.of((-794L));
      List<Range> list0 = range1.complement(range2);
      assertTrue(list0.contains(range1));
      
      String string0 = range1.toString();
      assertEquals("[ 1722 .. 4294967295 ]/0B", string0);
      
      range_Builder1.contractEnd(951L);
      String string1 = range0.toString();
      assertEquals("[ 1722 .. 1722 ]/0B", string1);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      boolean boolean0 = range2.startsBefore(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.contractEnd((-2277L));
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complement(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1159L, 1159L);
      Object object0 = new Object();
      range0.isEmpty();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(2147483667L);
      Object object0 = new Object();
      range0.complement(range0);
      Object object1 = new Object();
      Range.Comparators.values();
      Range.Comparators.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.452890416210175
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-32720L), (-1683L));
      Range range1 = Range.of((-1683L));
      Range range2 = range1.asRange();
      Range range3 = Range.of((-1683L), (-1L));
      range3.complement(range2);
      Long long0 = new Long(1251L);
      range2.equals(range0);
      range2.iterator();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.1302718268744694
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(9223372036854775643L, 9223372036854775643L);
      Object object0 = new Object();
      range0.complement(range0);
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.ofLength(127L);
      Range range0 = Range.of(127L);
      Range range1 = Range.of(127L);
      Range range2 = Range.ofLength(127L);
      boolean boolean0 = range2.startsBefore(range0);
      assertTrue(boolean0);
      assertFalse(range2.isEmpty());
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      String string0 = range1.toString();
      assertSame(range1, range0);
      assertEquals("[ 127 .. 127 ]/0B", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = 4294967295L;
      long long1 = 739L;
      Range range0 = Range.of(739L);
      long long2 = 1453L;
      Range range1 = Range.of(1453L);
      range0.asRange();
      range1.startsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.900980466620676
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      range0.startsBefore(range1);
      Long long0 = new Long((-2077L));
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-97L), 26L);
      String string0 = range0.toString();
      assertEquals("[ -97 .. 26 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-97L), 26L);
      Object object0 = new Object();
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = range0.asRange();
      Long long0 = new Long((-2629L));
      Range.Builder range_Builder0 = new Range.Builder(1586L);
      range0.toString();
      Range range2 = Range.of((-2629L));
      range2.isSubRangeOf(range1);
      Object object0 = new Object();
      range1.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4541L, (-1897L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(9223372036854775625L);
      Range range1 = range0.asRange();
      Long long0 = new Long((-2077L));
      Long.compare((-2038L), 9223372036854775625L);
      range1.equals(long0);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range0.split((-936L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(181L);
      Range range0 = range_Builder0.build();
      String string0 = range0.toString();
      assertEquals("[ 0 .. 180 ]/0B", string0);
      
      boolean boolean0 = range0.equals("[ 0 .. 180 ]/0B");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(1944L);
      boolean boolean0 = range0.equals("B-?7Q9ur[/K");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = range0.asRange();
      Long long0 = new Long(215L);
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("qLctbMtT)3k/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.qLctbMtT)3k/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.802987011748893
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.of(127L);
      Range range2 = Range.of(1L);
      Range range3 = Range.ofLength(1L);
      assertFalse(range3.isEmpty());
      
      range0.equals(range1);
      assertNotSame(range0, range3);
      assertFalse(range0.equals((Object)range3));
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      String string0 = range2.toString();
      assertEquals("[ 1 .. 1 ]/0B", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.toString();
      Long long0 = new Long(2147483656L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Null Range used in range comparison operation.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Null Range used in range comparison operation.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147482907L, 2147483647L);
      Object object0 = new Object();
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.9909112080063878
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 1703L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      Object object0 = new Object();
      range0.equals(object0);
      range0.isEmpty();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(255L, long0);
      
      boolean boolean1 = range1.intersects(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483656L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.8635991844539275
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775020L);
      Object object0 = new Object();
      range0.toString();
      boolean boolean0 = range0.equals("The second parameter in the comparison is null.");
      assertFalse(boolean0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2147483647 .. 9223372036854775020 ]/0B", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of((-2147483137L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5193L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.950137844444038
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.equals("");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.0063008592935807
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 439L, 9223372036854775020L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 439 .. 9223372036854775020 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 439 .. 9223372036854775020 ]/0B");
      Range.Comparators.values();
      Range.Comparators.values();
      long long0 = range0.getLength();
      assertSame(range0, range1);
      assertEquals(9223372036854774582L, long0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      Long long0 = new Long((-2077L));
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("MdR0tvCoIL8j3%TN;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.MdR0tvCoIL8j3%TN;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.ofLength(2147483667L);
      Object object0 = new Object();
      range0.endsBefore(range0);
      Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(1944L);
      range0.getEnd();
      Object object0 = new Object();
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-3291L));
      long long0 = range0.getEnd();
      assertEquals((-3291L), long0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.811419498301341
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.contractEnd((-2277L));
      range0.toString();
      range0.equals(range_Builder0);
      // Undeclared exception!
      try { 
        range0.split((-2277L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.8444872614601695
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem.values();
      List<Range> list0 = range0.split(2147483647L);
      assertEquals(1, list0.size());
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.ofLength(475L);
      Object object0 = new Object();
      String string0 = "gX}/43698NJky_C";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString();
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("gX}/43698NJky_C", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse gX}/43698NJky_C into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1956L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(4294964811L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(0L, (-1683L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.Comparators.values();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("!`[_cS}x>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.!`[_cS}x>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      Long long0 = new Long((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.0501472437474773
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 788L, 2147483667L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483656L);
      Range range0 = range_Builder0.build();
      range0.iterator();
      range0.toString();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 0 .. 2147483655 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 0 .. 2147483655 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString();
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 2147483647 ]/RB", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.9009804666206755
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-1L));
      range0.getLength();
      range0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("Range coordinates %d, %d are not valid %s coordinates");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Range coordinates %d, %d are not valid %s coordinates into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.940142702686837
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3L), 215L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.803374042989372
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1157L, 1157L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 1813L, 1813L);
      range0.toString();
      Object object0 = new Object();
      range0.equals(object0);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Us{Wshy|RU5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Us{Wshy|RU5
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483649L);
      Range range0 = range_Builder0.build();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(127L);
      long long0 = (-1323L);
      range_Builder0.expandEnd((-1323L));
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((-32768L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(11L, (-1683L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.8635991844539275
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 788L, 2147483667L);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertFalse(range_ComparatorsArray1.equals((Object)range_ComparatorsArray0));
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of(9223372036854775625L);
      Long long0 = new Long(9223372036854775625L);
      String string0 = range0.toString();
      assertEquals("[ 9223372036854775625 .. 9223372036854775625 ]/0B", string0);
      
      Range range1 = Range.of(9223372036854775625L);
      range0.equals(range1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-2205L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2206 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      boolean boolean0 = range0.equals("O4ugtWz}-\"$Gzw>0");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L);
      range1.asRange();
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      String string0 = "number of entries must be >=0";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("number of entries must be >=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.number of entries must be >=0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = 4294967295L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(4294967295L, (-882L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.745837628499016
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.getBegin();
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2485L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, 2485L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of(3971L);
      Range range1 = Range.of(2302L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-1683L));
      long long0 = range0.getBegin();
      assertEquals((-1683L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      Range range1 = range0.intersection(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.9190235060608334
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.of((-4155L));
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addLast(range0);
      Long.sum(793L, (-1318L));
      Long.divideUnsigned((-525L), (-525L));
      linkedList0.removeLastOccurrence(range0);
      linkedList0.add((Range) null);
      Long.max(9990L, (-2495L));
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.811419498301341
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.contractEnd((-2277L));
      range0.toString();
      range0.equals(range_Builder0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = 32123L;
      Range.Builder range_Builder0 = new Range.Builder(32123L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1069L);
      Range.Builder range_Builder1 = range_Builder0.shift(1069L);
      Range.Builder range_Builder2 = range_Builder1.expandEnd((-2045L));
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-2277L));
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long long0 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 1728L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-836L), 1728L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem1, 4294967295L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775638L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2163L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.886165178199426
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.3255270957702256
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483656L);
      Range range0 = range_Builder0.build();
      range0.toString();
      range0.equals("[ 0 .. 2147483655 ]/0B");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483656L, 2147483656L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem2);
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 0 .. 2147483655 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 0 .. 2147483655 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      range0.intersects(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.of(9223372036854775625L);
      Range range1 = range0.asRange();
      Long long0 = new Long((-2059L));
      String string0 = range0.toString();
      assertEquals("[ 9223372036854775625 .. 9223372036854775625 ]/0B", string0);
      
      Range range2 = Range.of(9223372036854775638L);
      range0.endsBefore(range2);
      Range range3 = range1.intersection(range2);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.9504258637418843
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      range0.intersection(range1);
      Long long0 = new Long((-2077L));
      Long.remainderUnsigned(1L, 9223372036854775020L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long((-2277L));
      linkedList0.removeLastOccurrence(long0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      Long.max(1048L, 1048L);
      List<Range> list0 = range0.complementFrom(linkedList1);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.771927887960968
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Range.CoordinateSystem.values();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-395L), (-661L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-423L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -424 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.7129621730528903
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractBegin((-1L));
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long long0 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 1562L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 220L, 1562L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2627L);
      range_Builder0.expandBegin(2250L);
      long long0 = 0L;
      range_Builder0.contractBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("IZrY.gm", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse IZrY.gm into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long long0 = 1069L;
      Range.Builder range_Builder0 = new Range.Builder(1069L);
      long long1 = (-2045L);
      range_Builder0.shift(1069L);
      Range.Builder range_Builder1 = new Range.Builder(1069L);
      range_Builder1.expandEnd((-9223372036854775808L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("(sVl%x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.(sVl%x
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 157L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4387L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long long0 = (-1L);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
