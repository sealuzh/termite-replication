/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 11:05:29 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.PopupMenu;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelListener;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.SwingConstants;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.Element;
import javax.swing.text.GlyphView;
import javax.swing.text.PlainDocument;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import org.apache.batik.css.engine.value.svg.BaselineShiftManager;
import org.apache.batik.dom.svg12.SVG12DOMImplementation;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "@9hm^\"1Bd[lI=fskW+r");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.controlText;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 741.74744F;
      floatArray0[4] = (-4380.9F);
      floatArray0[5] = (-305.0103F);
      floatArray0[6] = 63.0F;
      systemColor0.getRGBComponents(floatArray0);
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 61.0F;
      floatArray1[3] = 1.0F;
      floatArray1[4] = 1.0F;
      systemColor0.getColorComponents(floatArray1);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.getLocale();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w~Qh^d}#");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1149, 3, 1149, 34, 10043, 3);
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser0 = new JDayChooser();
      Time time0 = new Time(1149);
      jDayChooser0.setSelectableDateRange(mockDate0, time0);
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.695595912841106
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(14, 4, (-253), 4, 21, 3857);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(5, (-1437625606), (-253), (-542), 1, 3);
      mockGregorianCalendar1.isLeapYear(3);
      mockGregorianCalendar0.isWeekDateSupported();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.repaint();
      jDayChooser0.setCalendar(mockGregorianCalendar1);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters((-542));
      jDayChooser0.addListeners(3);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActionEvent actionEvent0 = new ActionEvent("", 5, "");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      StringContent stringContent0 = new StringContent();
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      Element element0 = plainDocument0.getParagraphElement((-2529));
      GlyphView glyphView0 = new GlyphView(element0);
      Color color0 = Color.ORANGE;
      Timestamp timestamp0 = new Timestamp(20L);
      jDayChooser0.setMaxSelectableDate(timestamp0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color0.getBlue());
      
      Instant instant0 = MockInstant.ofEpochSecond((-138L));
      Date.from(instant0);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6956064543588734
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.repaint();
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      jDayChooser0.addComponentListener((ComponentListener) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 268, 268, 268, 3, (-1995));
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.drawWeeks();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent("", 5, "");
      jDayChooser0.setDay(5);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-765));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDayPanel();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getName();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.sundayForeground;
      Color.getColor("org.apache.xpath.axes.IteratorPool", (-3775));
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 12;
      floatArray0[1] = (float) 12;
      floatArray0[2] = (float) (-3775);
      floatArray0[3] = 1543.1F;
      floatArray0[4] = (float) 12;
      Color.RGBtoHSB(12, 12, 12, floatArray0);
      jDayChooser0.setForeground(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 12, 12, 8225, 12, '8');
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.89728921219231
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.repaint();
      jDayChooser0.setFocus();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Date date0 = jDayChooser1.getMaxSelectableDate();
      int int0 = jDayChooser1.getDay();
      assertEquals(14, int0);
      
      JDayChooser jDayChooser2 = new JDayChooser();
      int int1 = SwingConstants.NORTH_EAST;
      Date date1 = jDayChooser1.setMinSelectableDate(date0);
      assertSame(date1, date0);
      
      jDayChooser2.setWeekOfYearVisible(true);
      jDayChooser2.setFocus();
      jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(40);
      jDayChooser0.isDayBordersVisible();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = new Locale("\"xr~mQ3<_", "West", "x");
      jDayChooser0.setLocale(locale0);
      boolean boolean0 = false;
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setEnabled(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = null;
      try {
        pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D((PDFDocumentGraphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8972877393840326
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.repaint();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("", vetoableChangeListenerProxy0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy1);
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Date date0 = jDayChooser1.getMaxSelectableDate();
      int int0 = jDayChooser1.getDay();
      assertEquals(14, int0);
      
      jDayChooser1.initDecorations();
      JDayChooser jDayChooser2 = new JDayChooser();
      int int1 = SwingConstants.NORTH_EAST;
      Date date1 = jDayChooser1.setMinSelectableDate(date0);
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertSame(date1, date0);
      
      jDayChooser2.setWeekOfYearVisible(false);
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1744, (-1437625606), 1, 10043, 1744, 1141);
      mockGregorianCalendar0.isLeapYear(14);
      mockGregorianCalendar0.isWeekDateSupported();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.repaint();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setDay((-2268));
      jDayChooser0.setMonth(26);
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.pink;
      ActionEvent actionEvent0 = new ActionEvent("S^~ V", 14, "S^~ V");
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      BaselineShiftManager baselineShiftManager0 = new BaselineShiftManager();
      sVG12DOMImplementation0.registerCustomCSSValueManager(baselineShiftManager0);
      sVG12DOMImplementation0.getLocale();
      jDayChooser0.setDay(3);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(3, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5778234187024895
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.updateUI();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertSame(date1, date0);
      
      jDayChooser0.initDecorations();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.983339251668879
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(210, 210, 1744, 210, 210, 14);
      mockGregorianCalendar0.isLeapYear(12);
      mockGregorianCalendar0.isWeekDateSupported();
      jDayChooser0.repaint();
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      jDayChooser0.addComponentListener((ComponentListener) null);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      Color color0 = jDayChooser0.weekdayForeground;
      Color.getColor("Metal", 152);
      jDayChooser0.updateUI();
      jDayChooser0.setForeground(color0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDay(12);
      jDayChooser0.drawWeeks();
      jDayChooser0.setYear((-140));
      assertEquals(12, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.list();
      jDayChooser0.getAccessibleContext();
      jDayChooser0.setVisible(true);
      jDayChooser0.setMonth(3);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2588), true, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.transferFocusDownCycle();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-2556), "H!#J-M", 1383);
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      basicTreeUI0.getExpandedIcon();
      JButton jButton0 = new JButton((Icon) null);
      actionEvent0.setSource(jButton0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.57776930087716
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(1);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      // Undeclared exception!
      try { 
        styleContext0.getFont((AttributeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.StyleConstants", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      DebugGraphics debugGraphics0 = new DebugGraphics(pDFDocumentGraphics2D0, jDayChooser0);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.removeNotify();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2600), false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 12, 525L, 12, 798, '@');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDay((-3654));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(28);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(2856);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isWeekOfYearVisible();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.create();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDay(572);
      jDayChooser0.setMonth(46);
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth((-2412));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "!=$_";
      stringArray0[0] = "";
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.grabFocus();
      jDayChooser0.initDecorations();
      jDayChooser0.init();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.create();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth((-862));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setLocation(21, (-2395));
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, color0.getBlue());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      Color color0 = Color.ORANGE;
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = DebugGraphics.flashColor();
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.window;
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      jDayChooser0.addMouseWheelListener((MouseWheelListener) null);
      int int0 = 4302;
      Color.getColor("day", 4302);
      jDayChooser0.setDecorationBordersVisible(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4302, 0, 4302, 4302, 1203, 0);
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.getLeastMaximum(4302);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4302
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.UK;
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      sVG12DOMImplementation0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getFont();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      // Undeclared exception!
      try { 
        styleContext0.getFont((AttributeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.StyleConstants", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.transferFocusDownCycle();
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultListModel<MockCalendar> defaultListModel0 = new DefaultListModel<MockCalendar>();
      JList<MockCalendar> jList0 = new JList<MockCalendar>(defaultListModel0);
      Color color0 = jList0.getSelectionForeground();
      Color.getColor("95#mkPpBa?pR#");
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getDaysInMonth();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 28, "day", (-282L), 28);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.getGraphicsConfiguration();
      jDayChooser0.setDecorationBackgroundVisible(false);
      int int0 = 7;
      int int1 = 13;
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = null;
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D((PDFDocumentGraphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.transferFocus();
      jDayChooser0.drawWeeks();
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setWeekdayForeground(systemColor0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 28;
      floatArray0[1] = (float) 28;
      floatArray0[2] = (float) 28;
      floatArray0[3] = (float) 28;
      floatArray0[4] = (float) 28;
      floatArray0[5] = (float) 28;
      // Undeclared exception!
      try { 
        systemColor0.getColorComponents((ColorSpace) null, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.8960770909801887
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 0;
      long long0 = 141L;
      int int1 = 889;
      jDayChooser0.requestFocus(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 141L, 889, 0, 't');
      int int2 = (-1192);
      InputEvent.getModifiersExText((-1192));
      keyEvent0.setSource(jDayChooser0);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.getColorModel();
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getFont();
      jDayChooser0.setDoubleBuffered(false);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getBackground();
      jDayChooser0.setMaxDayCharacters(14);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-163));
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }
}
