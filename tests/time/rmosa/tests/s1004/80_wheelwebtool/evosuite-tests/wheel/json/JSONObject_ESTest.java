/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 19:31:13 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("=WV/", (Collection) null);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject2 = new JSONObject(boolean0);
      JSONObject jSONObject3 = jSONObject1.accumulate("=WV/", jSONObject2);
      jSONObject3.put("=WV/", (Object) null);
      try { 
        jSONObject3.put((String) null, 2507L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2849101541595616
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      jSONObject1.accumulate("0", "?,}I");
      jSONObject0.optBoolean("");
      String string0 = jSONObject1.toString(27, 27);
      JSONObject jSONObject3 = new JSONObject("{\n                                                      \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                      \"java.lang.String@0000000007\": \"java.lang.String@0000000008\"\n                           }");
      JSONObject.valueToString(jSONObject0);
      String string1 = JSONObject.valueToString("");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "~";
      stringArray0[1] = "~";
      stringArray0[2] = "~";
      stringArray0[3] = "~";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      Double double0 = new Double((-834.826));
      JSONObject jSONObject1 = jSONObject0.accumulate("~", double0);
      double double1 = jSONObject1.getDouble("~");
      assertEquals((-834.826), double1, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.087698781999318
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("w/", (Collection) null);
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      JSONObject.quote("A JSONArray text must start with '['");
      Float float0 = new Float((-1917.72355));
      JSONObject.testValidity(float0);
      boolean boolean0 = jSONObject1.has("w/");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5134049813662336
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.putOpt("isaddFirst", float0);
      int int0 = jSONObject1.optInt("isaddFirst", (-1368));
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8783578531833827
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(12, (-1039));
      jSONObject0.remove("0");
      JSONObject jSONObject1 = jSONObject0.append("is", hashMap0);
      jSONObject1.toJSONArray((JSONArray) null);
      jSONObject1.optDouble("0", (-1403.34010441658));
      JSONObject.quote("getoptLong");
      int int0 = (-2809);
      Integer integer0 = new Integer((-2809));
      Integer.getInteger("?Sr{czH+R*+9");
      hashMap0.put(integer0, "\"getoptLong\"");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.append("getoptLong", object0);
      jSONObject2.getJSONArray("is");
      jSONObject0.optBoolean("getoptLong");
      try { 
        jSONObject0.getBoolean("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.accumulate("", object0);
      jSONObject0.opt("");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("[", stringArray0);
      jSONObject0.keys();
      jSONObject0.names();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      jSONObject0.put("[", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("[");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1928457941826096
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      jSONObject1.put("rVy8`eplLdCePmew`8", (Object) jSONObject0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("", object0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('!');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      // Undeclared exception!
      jSONObject2.write(stringWriter2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5895213795772005
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(false, false);
      JSONObject.valueToString(boolean0, 18, 230);
      Byte byte0 = new Byte((byte)51);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Boolean@0000000001";
      stringArray0[1] = "java.lang.Boolean@0000000001";
      stringArray0[2] = "java.lang.Boolean@0000000001";
      Byte.toUnsignedInt((byte)51);
      Byte.toUnsignedLong((byte)51);
      stringArray0[3] = "java.lang.Boolean@0000000001";
      Byte.toUnsignedLong((byte)18);
      stringArray0[4] = "java.lang.Boolean@0000000001";
      stringArray0[5] = "java.lang.Boolean@0000000001";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.optLong("c)l4k'^*KUMtqgI7", (-1L));
      jSONObject0.optInt("java.lang.Boolean@0000000001", 230);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject0.toJSONArray(jSONArray0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Boolean@0000000001", object0);
      JSONObject jSONObject2 = jSONObject1.putOpt("getclear", (Object) null);
      jSONObject2.put(",\"2Kcs~+V`6h_-", (Object) ",\"2Kcs~+V`6h_-");
      jSONObject1.append("getclear", jSONArray0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject.valueToString(hashMap0, 2, 783);
      JSONObject.testValidity(hashMap0);
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      jSONObject1.getString("");
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Map) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("NTMz&w/Z<yg", object0);
      try { 
        jSONObject0.getBoolean("NTMz&w/Z<yg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"NTMz&w/Z<yg\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("nK8-", true);
      boolean boolean0 = jSONObject1.getBoolean("nK8-");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      Object object0 = new Object();
      jSONObject0.accumulate("", object0);
      jSONObject0.get("");
      JSONObject jSONObject2 = jSONObject1.putOpt("", "");
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2849101541595616
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(322);
      linkedList0.add(integer0);
      JSONObject jSONObject1 = jSONObject0.put("w/", (Collection) linkedList0);
      Integer integer1 = new Integer(322);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) integer1);
      JSONObject jSONObject3 = jSONObject0.put("", (-1.0));
      jSONObject0.optLong("");
      jSONObject0.getInt("");
      Double double0 = new Double((-1656.2078800589));
      JSONObject jSONObject4 = jSONObject0.accumulate("wheel.json.JSONTokener", double0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.toJSONObject((JSONArray) null);
      jSONObject4.append("w/", (Object) null);
      jSONObject2.put("<I#+P9", (Map) null);
      Byte.valueOf((byte)12);
      jSONObject1.put("(o", (double) 322);
      double double1 = jSONObject3.optDouble("", (-1046.4482238677));
      assertEquals(5, jSONObject3.length());
      assertEquals((-1.0), double1, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("DCQq;0cW:3M^@CE_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"DCQq;0cW:3M^@CE_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4352718511829727
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put(jSONObject0, "\"m|h[$ _vb?R<M>BaA}");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("\"m|h[$ _vb?R<M>BaA}", (Collection) linkedList1);
      jSONObject0.toString(2127);
      JSONObject jSONObject2 = jSONObject1.put("", 19);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.isNull("");
      JSONObject.testValidity(linkedList1);
      assertNotSame(linkedList0, linkedList1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("NTMz&w/Z<yg", object0);
      try { 
        jSONObject0.getBoolean("NTMz&w/Z<yg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"NTMz&w/Z<yg\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject.quote("\"m|h[$ _vb?R<M>BaA}");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{HOyUL#[97+)*9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {HOyUL#[97+)*9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(27, 27);
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      jSONObject1.toString(27, 27);
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{0Hjz`p)A&YsCOp FG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 18 of {0Hjz`p)A&YsCOp FG
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "~r\\'@%EBVXwTq[&6nR";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~r'@%EBVXwTq[&6nR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~r'@%EBVXwTq[&6nR
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      Byte byte0 = new Byte((byte)49);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      try { 
        jSONObject1.append("", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Float float0 = new Float(4570.431);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(120, 9);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-1.0));
      int int0 = jSONObject1.optInt("");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("NTMz&w/Z<yg", (Object) "NTMz&w/Z<yg");
      try { 
        jSONObject1.getBoolean("NTMz&w/Z<yg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"NTMz&w/Z<yg\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("co", (-1L));
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getappend", false);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1843752507353837
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = ")|7O%wp;'wrn6";
      JSONObject jSONObject0 = new JSONObject((Object) "Nn5");
      jSONObject0.optDouble(")|7O%wp;'wrn6", 0.0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('&');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Nn5");
      stringWriter2.append((CharSequence) ")|7O%wp;'wrn6");
      jSONObject0.write(stringWriter2);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      JSONTokener jSONTokener0 = new JSONTokener("Nn5");
      JSONTokener jSONTokener1 = new JSONTokener(")|7O%wp;'wrn6");
      JSONTokener jSONTokener2 = new JSONTokener(">~ddqDzjX");
      jSONTokener1.toString();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Nn5
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "iscomputeIfPresent";
      Long.getLong("iscomputeIfPresent");
      JSONObject.valueToString((Object) null);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((-811));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-811] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("JSONArray[", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5906757807316017
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ':' after a key", 2356);
      Byte byte0 = new Byte((byte)46);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Expected a ':' after a key";
      stringArray0[1] = "Expected a ':' after a key";
      stringArray0[2] = "Expected a ':' after a key";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.put("Expected a ':' after a key", (Object) jSONArray0);
      jSONObject3.optDouble("Expected a ':' after a key");
      Float.min(2716.853F, 2716.853F);
      jSONObject3.getJSONArray("Expected a ':' after a key");
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("}f", object0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          JSONObject jSONObject0 = new JSONObject();
          String string0 = "w/";
          LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
          jSONObject0.putOpt("] is not a Boolean.", "] is not a Boolean.");
          jSONObject0.put("w/", (-1.0));
          int int0 = 8448;
          // Undeclared exception!
          jSONObject0.toString(8448);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("w/", (Collection) linkedList0);
      Integer integer0 = new Integer(2241);
      jSONObject1.put("", (Object) integer0);
      jSONObject0.optLong("");
      jSONObject0.getInt("");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = "equ";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("&<Ywh;<6)?z Vp|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of &<Ywh;<6)?z Vp|
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.4398860526697708
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("w/", (Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject0.put("", (-1.0));
      jSONObject0.optLong("");
      jSONObject0.getInt("");
      Float float0 = new Float(262.316701836451);
      Float float1 = new Float((-133.16941784));
      Object object0 = new Object();
      jSONObject1.putOpt("wheel.json.JSONObject$Null", object0);
      jSONObject3.remove("par");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "w/";
      JSONObject jSONObject4 = new JSONObject(jSONObject0, stringArray0);
      jSONObject3.names();
      jSONObject1.optJSONArray("w/");
      jSONObject2.optLong("w/", 0L);
      long long0 = jSONObject3.optLong("for");
      assertEquals(3, jSONObject3.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Float float0 = new Float(1358.0652);
      jSONObject0.append("[", "[");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("[");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 2, 2);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("gettrim", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.put((String) null, (-1026));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject((String) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, object0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.2829875394034933
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer.getInteger("w/");
      linkedList0.add((Integer) null);
      JSONObject jSONObject1 = jSONObject0.put("w/", (Collection) linkedList0);
      Integer integer0 = new Integer(322);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) integer0);
      JSONObject jSONObject3 = jSONObject0.put("", (double) 322);
      jSONObject0.optLong("");
      jSONObject0.getInt("");
      Double double0 = new Double((-1656.2078800589));
      jSONObject0.accumulate("wheel.json.JSONTokener", double0);
      jSONObject2.put("<I#+P9", (Map) null);
      Byte.valueOf((byte)12);
      double double1 = jSONObject3.optDouble("", (-1046.4482238677));
      assertEquals(4, jSONObject3.length());
      assertEquals(322.0, double1, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ':' after a key", (-1401));
      Float float0 = new Float(1.0);
      String string0 = "QjwXk=Rcp#Nc";
      Object object0 = new Object();
      jSONObject1.put("QjwXk=Rcp#Nc", object0);
      jSONObject1.optDouble("Expected a ':' after a key");
      String string1 = "]Ch";
      Float.min(2046, (-1401));
      String string2 = "C+{xj&$";
      try { 
        jSONObject1.getJSONArray("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONObject[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Long long0 = Long.valueOf((-1L));
      Integer integer0 = new Integer(48);
      hashMap0.put(long0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.quote("RhBkT^S");
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "";
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\"m|h[$ _vb?R<M>BaA}", true);
      byte byte0 = (byte)117;
      HashMap<Byte, Double> hashMap1 = new HashMap<Byte, Double>();
      BiFunction<Double, Object, Double> biFunction0 = (BiFunction<Double, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.accumulate("Expected a ',' or ']'", object0);
      jSONObject2.toString();
      try { 
        jSONObject2.getJSONArray("\"m|h[$ _vb?R<M>BaA}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"m|h[$ _vb?R<M>BaA}\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Double double0 = new Double((-794.26466369));
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Object> hashMap1 = new HashMap<JSONArray, Object>();
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap1.put((JSONArray) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject1.toString((-537), 2646);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("2", 0L);
      try { 
        jSONObject0.getBoolean("2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      String string0 = JSONObject.quote("+DfUEA8QyH/Lc*S>");
      assertEquals("\"+DfUEA8QyH/Lc*S>\"", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("gettoJSONArray", true);
      hashMap0.put(":,d~-u", "umQEG+f7\"ZWz?Ak");
      JSONObject jSONObject1 = jSONObject0.optJSONObject("`");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")|7O%wp;'wrn6";
      JSONObject jSONObject0 = new JSONObject(")|7O%wp;'wrn6", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt(")|7O%wp;'wrn6", ")|7O%wp;'wrn6");
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "true";
      jSONObject1.optDouble("true", (-4020.0667));
      stringWriter0.append((CharSequence) ")|7O%wp;'wrn6");
      Float float0 = new Float((-198.877549188217));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 23;
      StringWriter stringWriter0 = new StringWriter(23);
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'c';
      charArray0[2] = 'm';
      charArray0[3] = 'w';
      charArray0[4] = ')';
      char char0 = 'R';
      JSONObject.valueToString(jSONObject0, 24, (-30733247));
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "{}", (-22654515), (-2451));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(",", 0L);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("y~+", object0);
      try { 
        jSONObject1.getDouble("y~+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y~+\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.834316144066809
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Float float0 = new Float((-1859.492899));
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(">", (-694));
      assertEquals((-694), int0);
      
      Boolean boolean0 = new Boolean((String) null);
      String string0 = JSONObject.quote(">'P^o$:A/0\"jO,");
      assertEquals("\">'P^o$:A/0\\\"jO,\"", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put(">|NY0b:v{-:", (Object) null);
      try { 
        jSONObject0.getBoolean(">|NY0b:v{-:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">|NY0b:v{-:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONException", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ':' after a key", 45);
      Float float0 = new Float(1.0);
      Byte byte0 = new Byte((byte)46);
      JSONObject jSONObject2 = jSONObject1.put("Expected a ':' after a key", (Object) byte0);
      jSONObject2.optDouble("Expected a ':' after a key");
      Float.min((byte)46, (byte)46);
      JSONArray jSONArray0 = new JSONArray();
      Float float1 = new Float(0.0);
      try { 
        jSONArray0.getJSONObject((byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[46] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put("istoUpperCase", (Object) long0);
      jSONObject1.optDouble("istoUpperCase");
      try { 
        jSONObject0.getBoolean("NTMz&w/Z<yg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"NTMz&w/Z<yg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject.quote(">EaN,:=F\"9/I/>#vm%");
      JSONTokener jSONTokener0 = new JSONTokener(">EaN,:=F\"9/I/>#vm%");
      Object object0 = new Object();
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("]S-L");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Short short0 = new Short((short)1);
      Short.toUnsignedInt((short)1);
      JSONObject.getNames((Object) short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.8643771862195314
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject.quote("(tW*F@/| ");
      JSONObject jSONObject0 = new JSONObject((Object) "(tW*F@/| ");
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      jSONObject0.put("is", (Map) hashMap0);
      jSONObject0.put("F 11wcHlghO.{i3Z6", (Object) "F 11wcHlghO.{i3Z6");
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("q^_FF%", (-555));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double double0 = new Double(2444.228650107609);
      Integer integer0 = new Integer(107);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.has("Xn");
      JSONTokener jSONTokener0 = new JSONTokener("Xn");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Xn
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("G,cJ]xUY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G,cJ]xUY\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", false);
      jSONObject0.optBoolean("");
      jSONObject0.optString("", "\t");
      try { 
        jSONObject1.getJSONObject("QZ0>hNerzW;/>2v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"QZ0>hNerzW;/>2v\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\"{9a&IBcuAI", true);
      Object object0 = jSONObject1.remove("\"{9a&IBcuAI");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("wheel.json.JSONTokener");
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      Boolean boolean0 = new Boolean(false);
      jSONObject0.append("wheel.json.JSONTokener", boolean0);
      String string0 = jSONObject0.optString("wheel.json.JSONTokener");
      assertFalse(linkedList0.contains(string0));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer((-1268));
      Object object0 = new Object();
      hashMap0.put(integer0, object0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1829430989272922
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString("\"{9a&IBcuAI");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.String@0000000002\"", true);
      jSONObject1.toString(39, (-904));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.append("getput", object0);
      Byte byte0 = new Byte((byte)2);
      jSONObject0.putOpt("\"java.lang.String@0000000002\"", byte0);
      jSONObject2.optJSONObject("\"{9a&IBcuAI");
      String[] stringArray0 = JSONObject.getNames(jSONObject2);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Long long0 = new Long(2635L);
      hashMap0.putIfAbsent(long0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getvalueOf", true);
      try { 
        jSONObject1.getJSONObject("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalueOf\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = JSONObject.quote(">'P^oA/0\"jO,");
      assertEquals("\">'P^oA/0\\\"jO,\"", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("YF!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"YF!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("\"\"", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject.getNames((Object) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addAll((Collection<? extends String>) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("int", (Object) linkedList1);
      JSONObject jSONObject2 = jSONObject1.put("int", 0.0);
      jSONObject2.getInt("int");
      Double double0 = new Double(0.0);
      try { 
        jSONObject2.getBoolean("4{-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4{-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NTMz&w/Z<yg";
      Byte byte0 = new Byte((byte) (-79));
      JSONObject jSONObject1 = jSONObject0.put("NTMz&w/Z<yg", (Object) byte0);
      jSONObject1.optBoolean("NTMz&w/Z<yg");
      jSONObject1.getLong("NTMz&w/Z<yg");
      try { 
        jSONObject1.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>(13);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("XtKUOrk^:8%jNU", (-2369.766846973612));
      int int0 = new Integer(13);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("x");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (-207.521782));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("^{,-h-]zS:E", false);
      try { 
        jSONObject0.getLong("^{,-h-]zS:E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^{,-h-]zS:E\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      JSONObject.quote((String) null);
      StringWriter stringWriter0 = new StringWriter(83);
      stringWriter0.close();
      jSONObject0.write(stringWriter0);
      String string1 = "Substring bounds error";
      JSONObject jSONObject1 = jSONObject0.accumulate("Substring bounds error", "Substring bounds error");
      try { 
        jSONObject1.getInt("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalAnd(true, true);
      jSONObject0.put("!U[@}R;}/=", (Object) boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject0.getBoolean("!U[@}R;}/=");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      try { 
        jSONObject0.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Byte byte0 = new Byte((byte)30);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject(stringWriter0);
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      Short short0 = new Short((short)3960);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(short0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("%Bb/eEXG>hD?f]8");
      String string0 = JSONObject.valueToString(linkedList0);
      assertFalse(linkedList0.contains(string0));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-1174), (-1174));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double double0 = new Double((-1046));
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(8448, 613);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = JSONObject.quote("-'t9huo0");
      assertEquals("\"-'t9huo0\"", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      jSONObject0.append("isisNaN", long0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, "VTGEtH^97@AKwrGD<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("wheel.json.JSONObject@0000000001", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("Tv?|=G;),vZ4Q");
      jSONObject0.optDouble("istoLowerCase", 1314.4177934);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("A 1vlYP_*SS}Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of A 1vlYP_*SS}Z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("IB'6vrg{yCA9'D", "");
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOpt("e44]Ts", jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.optDouble("true", 0.0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "e44]Ts");
      jSONObject0.write(stringWriter1);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      JSONTokener jSONTokener0 = new JSONTokener("Y`%fjO8Kb{+6\".[B29");
      JSONTokener jSONTokener1 = new JSONTokener("Y`%fjO8Kb{+6\".[B29");
      JSONTokener jSONTokener2 = new JSONTokener("wheel.json.JSONObject$1");
      jSONTokener2.toString();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONObject$1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer((-1739));
      hashMap0.put(long0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, (-4334), (-4334));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double double0 = new Double((-1032.614));
      Float float0 = new Float((-2737.0F));
      JSONObject.valueToString(linkedList0, (-854), 57);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 7, (-1311));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Long long0 = new Long(873L);
      String string0 = JSONObject.valueToString(long0, (-3721), 873);
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Boolean boolean0 = Boolean.valueOf("pus");
      Integer integer0 = new Integer((-5110));
      hashMap0.put(boolean0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean1 = Boolean.valueOf(false);
      hashMap0.put(boolean1, integer0);
      jSONObject0.toString((-1685), 2082);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(4);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) "NTMz&w/Z<yg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("\"", "\"{a&IBcuAI");
      assertEquals("\"{a&IBcuAI", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = new Boolean("d'#KDu9\"=/");
      double double0 = jSONObject0.optDouble("d'#KDu9\"=/");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject.quote("");
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("\b", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString((-265.6611));
      assertEquals("-265.6611", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>(13);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("LhT%&z", false);
      Object object0 = new Object();
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("istrim");
      assertFalse(boolean0);
      
      String string0 = JSONObject.quote("istrim");
      assertEquals("\"istrim\"", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float float0 = new Float(0.0F);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"R\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Short short0 = new Short((short)1514);
      Integer integer0 = new Integer(103);
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.add((Boolean) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.TRUE;
      linkedList0.add(boolean0);
      String string0 = JSONObject.valueToString((Object) null, 873, 87);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("isjoin", 2583L);
      assertEquals(2583L, long0);
      
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("[");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = jSONObject0.optInt("getvalueOf", 1597);
      assertEquals(1597, int0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0407451414815978
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ",\n";
      stringArray0[1] = "Sq(YW(g(f+E{0dp>$i";
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      int int0 = jSONObject0.optInt("Sq(YW(g(f+E{0dp>$i");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      Double.sum((-1.0), (-1.0));
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONTokener jSONTokener0 = new JSONTokener("Substring bounds error");
      jSONTokener0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " at character 0 of Substring bounds error";
      stringArray0[1] = "GG&trV1r";
      stringArray0[2] = " at character 0 of Substring bounds error";
      stringArray0[3] = "";
      stringArray0[4] = " at character 0 of Substring bounds error";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.quote("z3");
      jSONObject1.isNull("0");
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("(tW*F@|: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(tW*F@|: \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt("p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("[", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("x");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of x
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
