/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 19:28:58 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = Optimization.m_Debug;
      double[][] doubleArray0 = new double[9][2];
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.constructWithCopy(doubleArray0);
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, false, (boolean[]) null);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(8, 8);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 8;
      doubleArray0[1] = (double) 8;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(8, 8);
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, false, (boolean[]) null);
      assertNotSame(doubleArray0, doubleArray1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[][] doubleArray0 = new double[4][2];
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.constructWithCopy(doubleArray0);
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, (double[]) null, true, (boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity(8, 8);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[1] = (double) 8;
      boolean[] booleanArray0 = new boolean[8];
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      assertArrayEquals(new double[] {8.0, 8.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Optimization.m_Debug;
      double[][] doubleArray0 = new double[10][2];
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.constructWithCopy(doubleArray0);
      double[] doubleArray1 = new double[1];
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, false, (boolean[]) null);
      assertEquals(1, doubleArray2.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(2);
      optimization_DynamicIntArray0.getRevision();
      Optimization.DynamicIntArray optimization_DynamicIntArray1 = (Optimization.DynamicIntArray)optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(2);
      optimization_DynamicIntArray0.addElement(2);
      optimization_DynamicIntArray0.size();
      optimization_DynamicIntArray1.getRevision();
      optimization_DynamicIntArray0.addElement(2);
      optimization_DynamicIntArray0.removeElementAt(2);
      optimization_DynamicIntArray0.size();
      optimization_DynamicIntArray0.copy();
      assertEquals(2, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.addElement(625);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(1747);
      optimization_DynamicIntArray0.removeAllElements();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "8K({j!./]b/[HOd";
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(1747);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[][] doubleArray0 = new double[9][2];
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.constructWithCopy(doubleArray0);
      double[] doubleArray1 = new double[7];
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray1, true, (boolean[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity(8, 8);
      double[] doubleArray0 = new double[2];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.constructWithCopy(doubleArray0);
      double[] doubleArray1 = new double[0];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      assertNotSame(doubleArray1, doubleArray2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[][] doubleArray0 = new double[9][2];
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.constructWithCopy(doubleArray0);
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, true, (boolean[]) null);
      assertEquals(0, doubleArray2.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(87);
      optimization_DynamicIntArray0.elementAt(0);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(0, 0, 1149.3207);
      assertEquals(0.0, matrix0.normInf(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9343987141619293
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(8, 8);
      double[] doubleArray0 = new double[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";=$-YT?#b");
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      matrix0.chol();
      booleanArray0[7] = true;
      Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 8;
      Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(8);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(8);
      Optimization.solveTriangle(matrix0, doubleArray2, true, booleanArray0);
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 8;
      matrix0.eig();
      doubleArray3[1] = (double) 8;
      optimization_DynamicIntArray0.addElement(7);
      Random.setNextRandom(7);
      optimization_DynamicIntArray0.addElement(7);
      assertEquals(3, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9946571675310574
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 8;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(8, 8);
      double[] doubleArray0 = new double[5];
      Optimization.solveTriangle(matrix0, doubleArray0, true, (boolean[]) null);
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(10);
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
