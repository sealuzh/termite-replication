/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 19:30:45 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      doubleArray1[0] = 976.3500272369334;
      doubleArray1[2] = 597.78416;
      doubleArray1[3] = 1.63889054381;
      doubleArray1[4] = 1.63889054381;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 597.78416;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[5] = 1086.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 976.3500272369334;
      doubleArray0[3] = doubleArray4;
      doubleArray0[5] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(2);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("(-inf-0],(0-inf)", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      doubleArray1[0] = 976.3500272369334;
      doubleArray1[2] = 597.78416;
      doubleArray1[3] = 976.3500272369334;
      doubleArray1[4] = (-4141.0);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 597.78416;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[5] = 1086.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1086.0;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-4141.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray0[4] = doubleArray5;
      doubleArray0[5] = doubleArray0[2];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = 597.78416;
      doubleArray1[3] = 978.564325406967;
      doubleArray1[4] = 2519.31412823;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 597.78416;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 978.564325406967;
      double[] doubleArray3 = new double[10];
      doubleArray3[0] = 1086.0;
      doubleArray0[2] = doubleArray3;
      doubleArray0[3] = doubleArray1;
      doubleArray0[4] = doubleArray3;
      doubleArray0[5] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.970620935502287
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("HTx");
      discretize0.setMakeBinary(true);
      int int0 = (-526);
      discretize0.setOutputFormat();
      discretize0.getBinRangesString((-526));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "HTx";
      discretize0.setOptions(stringArray0);
      discretize0.m_DiscretizeCols = null;
      discretize0.binsTipText();
      discretize0.makeBinaryTipText();
      // Undeclared exception!
      try { 
        discretize0.getAttributeIndices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("$Revision: 8964 $");
      discretize0.setMakeBinary(true);
      discretize0.m_UseEqualFrequency = true;
      discretize0.listOptions();
      discretize0.findNumBinsTipText();
      discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r`OZ^P");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)40;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("*3'&");
      discretize0.setBins((byte) (-99));
      discretize0.setOutputFormat();
      discretize0.useBinNumbersTipText();
      discretize0.useBinNumbersTipText();
      discretize0.getBins();
      discretize0.m_NumBins = (-99);
      discretize0.globalInfo();
      discretize0.globalInfo();
      discretize0.setOutputFormat();
      discretize0.binsTipText();
      assertEquals((-99), discretize0.getBins());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setFindNumBins(true);
      int int0 = 600;
      discretize0.m_IgnoreClass = true;
      discretize0.setInvertSelection(false);
      discretize0.m_NumBins = 600;
      discretize0.getOptions();
      StringReader stringReader0 = new StringReader("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[Specifies], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5365859297869138
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize("second");
      discretize0.setInvertSelection(false);
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setInvertSelection(false);
      discretize0.setFindNumBins(true);
      discretize0.globalInfo();
      discretize0.findNumBinsTipText();
      discretize0.getFindNumBins();
      discretize0.getAttributeIndices();
      discretize0.useBinNumbersTipText();
      discretize0.invertSelectionTipText();
      discretize0.setOptions(stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 69;
      Instances instances0 = new Instances("second", arrayList0, 69);
      Filter filter0 = Filter.makeCopy(discretize0);
      try { 
        Filter.useFilter(instances0, filter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "=z;";
      stringArray0[1] = "v.mr{Z";
      stringArray0[2] = "@6ga?jAY";
      stringArray0[3] = "";
      stringArray0[4] = "-";
      stringArray0[5] = "";
      stringArray0[6] = "      if (inst.isMissing(i))\n";
      stringArray0[7] = "lEbL3+*3VBKC*h%";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6|p-+)Jm^[ln;>";
      stringArray0[1] = "6|p-+)Jm^[ln;>";
      stringArray0[2] = "-B";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -B option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      discretize0.getUseBinNumbers();
      discretize0.useBinNumbersTipText();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_IgnoreClass = true;
      discretize0.setInvertSelection(false);
      discretize0.m_MakeBinary = true;
      discretize0.m_NumBins = 600;
      discretize0.getOptions();
      StringReader stringReader0 = new StringReader("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[Specifies], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.435348070075531
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins((-521));
      discretize0.listOptions();
      String[] stringArray0 = new String[0];
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-521);
      doubleArray1[1] = (double) (-521);
      doubleArray1[2] = (double) (-521);
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) (-521);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) (-521);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (double) (-521);
      doubleArray4[2] = (double) (-521);
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (double) (-521);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 909.17368508;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[1] = (double) (-521);
      doubleArray6[2] = 909.17368508;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 909.17368508;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 909.17368508;
      doubleArray6[8] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 909.17368508;
      doubleArray7[1] = 909.17368508;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (-600.0);
      doubleArray7[4] = (double) (-521);
      doubleArray7[5] = 909.17368508;
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (-600.0);
      doubleArray8[2] = 112.297;
      doubleArray8[4] = 909.17368508;
      doubleArray8[5] = (double) (-521);
      doubleArray8[6] = 0.0;
      doubleArray0[7] = doubleArray8;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.setOptions(stringArray0);
      discretize0.getCutPoints(0);
      discretize0.getOptions();
      discretize0.findNumBinsTipText();
      discretize0.makeBinaryTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-2849));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6454371383635378
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setUseBinNumbers(true);
      discretize0.m_IgnoreClass = true;
      discretize0.setInvertSelection(false);
      discretize0.m_NumBins = 600;
      discretize0.getOptions();
      StringReader stringReader0 = new StringReader("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[Specifies], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\"-6GgV#`=|=Q[", arrayList0, 827);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = 1.7976931348623157E308;
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      sparseInstance0.toString(4, 2);
      sparseInstance0.dataset();
      Discretize discretize0 = new Discretize("1.7976931348623157E308");
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      boolean boolean0 = discretize0.m_IgnoreClass;
      discretize0.getCapabilities();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      sparseInstance0.toString(350, 350);
      sparseInstance0.dataset();
      Discretize discretize0 = new Discretize("0.0");
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setInvertSelection(true);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(5, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("OyJ:o6t4dad~*z");
      discretize0.setAttributeIndices("");
      discretize0.getAttributeIndices();
      Discretize discretize1 = new Discretize("");
      assertFalse(discretize1.getFindNumBins());
      
      discretize1.setFindNumBins(true);
      assertTrue(discretize1.getFindNumBins());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      discretize0.setUseEqualFrequency(true);
      discretize0.getRevision();
      discretize0.getCapabilities();
      discretize0.setAttributeIndices("weka/core/Capabilities.props");
      discretize0.binsTipText();
      discretize0.getUseEqualFrequency();
      discretize0.setMakeBinary(true);
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1932735280));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.322102232945105
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize("EMPTY_NOMINAL_CLASS");
      discretize0.m_IgnoreClass = true;
      discretize0.toString();
      String[] stringArray0 = discretize0.getOptions();
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      Attribute attribute0 = new Attribute("", 1960);
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints((-1870));
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-2080374776));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "vP6mPvbS";
      stringArray0[1] = "zeropoint";
      stringArray0[2] = "\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)";
      Discretize.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      discretize0.getRevision();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.m_FindNumBins = false;
      discretize0.getFindNumBins();
      discretize0.getCapabilities();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.findNumBinsTipText();
      discretize0.listOptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getBinRangesString(5);
      discretize0.getFindNumBins();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setDesiredWeightOfInstancesPerInterval(300.0);
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.619878727829206
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize("EMPTY_NOMINAL_CLASS");
      discretize0.setUseEqualFrequency(true);
      discretize0.setOptions((String[]) null);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2147483645);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-B";
      stringArray0[1] = "-B";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = 1.7976931348623157E308;
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      Discretize discretize0 = new Discretize("-M");
      discretize0.setUseEqualFrequency(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-M";
      stringArray0[1] = "-M";
      stringArray0[2] = "-M";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[10];
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[9];
      intArray0[0] = (-2781);
      intArray0[1] = (-2781);
      intArray0[2] = (-2781);
      intArray0[3] = (-2781);
      intArray0[5] = (-2781);
      intArray0[6] = (-2781);
      intArray0[7] = (-2781);
      intArray0[8] = (-2781);
      discretize0.setAttributeIndicesArray(intArray0);
      System.setCurrentTimeMillis((-3062L));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize("EMPTY_NOMINAL_CLASS");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = discretize0.getBins();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, int0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5488846458275627
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_IgnoreClass = true;
      discretize0.setInvertSelection(false);
      discretize0.m_NumBins = 600;
      discretize0.getOptions();
      StringReader stringReader0 = new StringReader("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[Specifies], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("first-last", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 100.0;
      discretize0.m_MakeBinary = false;
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getFindNumBins();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1168));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize("EMPTY_NOMINAL_CLASS");
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }
}
