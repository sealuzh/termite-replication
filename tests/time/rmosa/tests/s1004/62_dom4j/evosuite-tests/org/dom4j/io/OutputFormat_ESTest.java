/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 19:28:52 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Kk9OLx!wT+i[TDrlf", false, (String) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expadE;pty";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "-expadE;pty";
      stringArray0[5] = "z087vbZ&q";
      stringArray0[4] = "-newlines";
      stringArray0[5] = "-expadE;pty";
      stringArray0[6] = null;
      stringArray0[7] = "Kk9OLx!wT+i[TDrlf";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setIndent("g[4ATI");
      assertEquals("g[4ATI", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "v";
      String string1 = "YcsZU:\\19k54UExO";
      OutputFormat outputFormat0 = new OutputFormat("YcsZU:\u00019k54UExO");
      // Undeclared exception!
      outputFormat0.setIndentSize(2147483645);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9396395458476661
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setTrimText(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "P~d";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "-expan~Empty7<UM_Ntm ";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "-trimText";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setIndent("P~d");
      assertTrue(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      outputFormat0.setIndent("-lineSeparator");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-suppressDeclar9tion";
      stringArray0[1] = "-lineSeparator";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true, (String) null);
      String[] stringArray0 = new String[24];
      stringArray0[0] = "pq^Auy<b={Mf}_";
      stringArray0[1] = "`D4dx>0V}54Gq#qA'";
      stringArray0[2] = null;
      stringArray0[3] = "-xhtml-sa?_c{o>=:do";
      stringArray0[4] = "_";
      outputFormat0.setIndent((String) null);
      String string0 = outputFormat0.getEncoding();
      assertNull(string0);
      
      outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlJ+G_C", true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtmlJ+G_C";
      outputFormat0.setLineSeparator((String) null);
      stringArray0[1] = "-xhtmlJ+G_C";
      stringArray0[2] = "-xhtmlJ+G_C";
      stringArray0[3] = "-xhtmlJ+G_C";
      stringArray0[4] = "-xhtmlJ+G_C";
      stringArray0[5] = "j-Pt%3YXZZaldf\"$";
      outputFormat0.setNewLineAfterNTags(1);
      stringArray0[6] = "-xhtmlJ+G_C";
      stringArray0[7] = "";
      stringArray0[8] = "-xhtmlJ+G_C";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.getLineSeparator();
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals(1, outputFormat0.getNewLineAfterNTags());
      assertTrue(outputFormat0.isXHTML());
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[12];
      stringArray0[0] = "]{m|hKPBx";
      stringArray0[1] = "]{m|hKPBx";
      stringArray0[2] = "-expandEmpty-xhtml-sa?_c";
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('\u001F');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (\u001F)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclar9tion");
      outputFormat0.setIndent("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "-encoding";
      stringArray0[2] = " aiJcr)Z:";
      stringArray0[3] = "";
      stringArray0[4] = "-suppressDeclar9tion";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(" aiJcr)Z:", outputFormat0.getEncoding());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclar9tion");
      outputFormat0.setIndent((String) null);
      String[] stringArray0 = new String[9];
      outputFormat0.setIndentSize(0);
      stringArray0[0] = "-omitEncoding";
      stringArray0[1] = "-suppressDeclar9tion";
      outputFormat0.parseOptions(stringArray0, 0);
      stringArray0[4] = null;
      stringArray0[5] = "";
      stringArray0[6] = null;
      stringArray0[7] = "-expandEmptyj";
      stringArray0[8] = "-expandEmptyj";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-3511));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3511
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("%IM}k%=%", true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-indent";
      stringArray0[1] = "%IM}k%=%";
      stringArray0[2] = "I";
      stringArray0[3] = "%IM}k%=%";
      stringArray0[4] = "-xhtml-xhtml)";
      stringArray0[5] = "%IM}k%=%";
      stringArray0[6] = "-xhtml-xhtml)";
      stringArray0[7] = "%ZGVZQnk_sk!fml|>";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertTrue(outputFormat0.isNewlines());
      assertEquals("%IM}k%=%", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("EoOyF", false);
      assertFalse(outputFormat0.isPadText());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-padText";
      stringArray0[1] = "EoOyF";
      stringArray0[2] = "EoOyF";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isPadText());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclaration", false);
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "-suppressDeclaration";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9396395458476661
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclar9tion");
      String[] stringArray0 = new String[5];
      outputFormat0.setIndent((String) null);
      stringArray0[0] = "-expandEmptyj";
      stringArray0[1] = "-expandEmptyj";
      stringArray0[2] = "-suppressDeclar9tion";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setIndent("-expandEmptyj");
      assertEquals("-expandEmptyj", outputFormat0.getIndent());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags(4);
      outputFormat0.setNewlines(false);
      outputFormat0.setTrimText(true);
      outputFormat0.setTrimText(true);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setNewlines(true);
      outputFormat0.setLineSeparator("zO{v)*KQwT");
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat0.setLineSeparator("");
      OutputFormat.createPrettyPrint();
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.isExpandEmptyElements();
      outputFormat0.getLineSeparator();
      // Undeclared exception!
      try { 
        outputFormat1.setAttributeQuoteCharacter('%');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (%)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setNewLineAfterNTags((-1779));
      outputFormat1.setNewLineAfterNTags(0);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setTrimText(false);
      outputFormat0.isOmitEncoding();
      outputFormat1.setLineSeparator("D+O&");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "sk&9H*64O.WL)!fDcc";
      stringArray0[1] = "D+O&";
      stringArray0[1] = "D+O&";
      stringArray0[3] = "D+O&";
      stringArray0[2] = "D+O&";
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndentSize(0);
      stringArray0[5] = "D+O&";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat1.setIndentSize(0);
      outputFormat1.setOmitEncoding(false);
      outputFormat1.setNewLineAfterNTags((-181));
      outputFormat1.setIndent("A&IZ1n:MXw/)(e.dgCS");
      assertEquals((-181), outputFormat1.getNewLineAfterNTags());
      
      String string0 = outputFormat0.getIndent();
      assertEquals("", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.793494183903136
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setTrimText(true);
      outputFormat0.setNewLineAfterNTags((-1428));
      outputFormat0.setLineSeparator("");
      outputFormat0.setEncoding("");
      outputFormat0.getIndent();
      outputFormat0.setNewlines(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      String[] stringArray0 = new String[1];
      outputFormat0.setIndent("");
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      stringArray0[0] = "";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat1.setEncoding("m_d% <5aUSxYAH?Olh");
      outputFormat1.getAttributeQuoteCharacter();
      outputFormat0.setIndentSize(1311);
      outputFormat1.setIndent(true);
      outputFormat0.getEncoding();
      assertEquals((-1428), outputFormat0.getNewLineAfterNTags());
      
      outputFormat2.setIndent((String) null);
      outputFormat2.setIndent("");
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclar9tion");
      outputFormat0.setIndentSize((-1));
      String[] stringArray0 = new String[5];
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setNewLineAfterNTags((-1792325432));
      OutputFormat outputFormat1 = new OutputFormat("=&#A3M.{.2>}L2>", false, "gd}[6ufPtKj=Xc");
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals((-1792325432), int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expadE;pty");
      String[] stringArray0 = new String[2];
      outputFormat0.setAttributeQuoteCharacter('\'');
      stringArray0[1] = "-expadE;pty";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-877));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -877
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-trimTt", false, "-expandEmpty-trimTt");
      outputFormat0.setNewLineAfterNTags(634);
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(634, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("qh+DEU^=;");
      outputFormat0.setNewlines(false);
      outputFormat0.setIndent(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setOmitEncoding(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "qh+DEU^=;";
      stringArray0[1] = "qh+DEU^=;";
      stringArray0[2] = "qh+DEU^=;";
      stringArray0[3] = "qh+DEU^=;";
      stringArray0[5] = "qh+DEU^=;";
      stringArray0[6] = "qh+DEU^=;";
      stringArray0[7] = "";
      outputFormat0.parseOptions(stringArray0, 2609);
      outputFormat0.isXHTML();
      outputFormat0.isXHTML();
      outputFormat0.setNewLineAfterNTags((-10));
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setTrimText(false);
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      outputFormat0.setSuppressDeclaration(true);
      boolean boolean0 = outputFormat0.isNewlines();
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isNewlines();
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(boolean0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("\n");
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setEncoding("");
      outputFormat0.isXHTML();
      outputFormat0.setTrimText(true);
      assertTrue(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("|57Bm", false);
      outputFormat0.setTrimText(false);
      outputFormat0.setEncoding("|57Bm");
      outputFormat0.isTrimText();
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertEquals("|57Bm", outputFormat0.getEncoding());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.43570606742266
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndent(",18o");
      outputFormat0.setNewlines(true);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setTrimText(true);
      outputFormat0.setLineSeparator("");
      outputFormat0.setEncoding("");
      outputFormat0.getIndent();
      outputFormat0.setIndent((String) null);
      boolean boolean0 = true;
      outputFormat0.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      // Undeclared exception!
      try { 
        outputFormat2.setAttributeQuoteCharacter('c');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (c)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.getIndent();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (r)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(",#74~9ED+^~*R(", true);
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals(",#74~9ED+^~*R(", outputFormat0.getIndent());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indent");
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setPadText(true);
      String string0 = null;
      outputFormat0.setLineSeparator("-indent");
      outputFormat0.setExpandEmptyElements(false);
      boolean boolean0 = true;
      outputFormat0.isOmitEncoding();
      outputFormat0.setLineSeparator((String) null);
      String string1 = "sk&9H*64O.WL)!fDcc";
      int int0 = (-1467246667);
      outputFormat0.setIndentSize((-1467246667));
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "sk&9H*64O.WL)!fDcc";
      stringArray1[1] = "sk&9H*64O.WL)!fDcc";
      stringArray1[2] = "-indent";
      stringArray1[3] = "-indent";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, (-1467246667));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1467246667
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setEncoding("p rg");
      outputFormat0.setPadText(false);
      outputFormat0.isOmitEncoding();
      outputFormat0.setPadText(false);
      assertEquals("p rg", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      String string0 = outputFormat0.getLineSeparator();
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", string0);
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[9];
      outputFormat0.parseOptions(stringArray0, 37);
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1391));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1391
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setEncoding((String) null);
      String[] stringArray0 = new String[8];
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      boolean boolean0 = outputFormat0.isPadText();
      assertTrue(boolean0);
      
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertTrue(outputFormat0.isTrimText());
      assertEquals('\"', char0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("  ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expadE;pty");
      String[] stringArray0 = new String[3];
      stringArray0[1] = "-expadE;pty";
      outputFormat0.parseOptions(stringArray0, 1);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals("-expadE;pty", outputFormat0.getIndent());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', char0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("[");
      String string0 = "";
      outputFormat0.isXHTML();
      outputFormat0.setTrimText(false);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, (-836));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("3:I");
      boolean boolean0 = outputFormat0.isPadText();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(boolean0);
      assertEquals("3:I", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("|57Bm", true);
      outputFormat0.setTrimText(true);
      outputFormat0.setEncoding("|57Bm");
      outputFormat0.isTrimText();
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertEquals("|57Bm", outputFormat0.getEncoding());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expadE;pty");
      outputFormat0.setLineSeparator("l%MzG7{k");
      String[] stringArray0 = new String[3];
      stringArray0[1] = "-expadE;pty";
      outputFormat0.parseOptions(stringArray0, 1);
      assertEquals("l%MzG7{k", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setOmitEncoding(true);
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertTrue(outputFormat0.isOmitEncoding());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expadE;pty");
      String[] stringArray0 = new String[2];
      outputFormat0.setOmitEncoding(false);
      stringArray0[1] = "-expadE;pty";
      outputFormat0.parseOptions(stringArray0, 1);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("-expadE;pty", outputFormat0.getIndent());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclar9tion");
      outputFormat0.setXHTML(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-suppressDeclar9tion";
      stringArray0[1] = "-suppressDeclar9tion";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("-suppressDeclar9tion", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtml-sa?_c{o>=:do";
      stringArray0[1] = "_";
      stringArray0[2] = "-xhtml-sa?_c{o>=:do";
      outputFormat0.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('J');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (J)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      outputFormat0.setExpandEmptyElements(true);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "-trimTt";
      outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags(1383);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterNTags(1);
      outputFormat0.setIndent(true);
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat0.setNewlines(false);
      assertEquals(1383, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.549749826558804
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "]{m|hKPBx";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertEquals("  ", outputFormat1.getIndent());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isPadText());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertTrue(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isXHTML());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9535817885271314
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclar9tion");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-suppressDeclar9tion";
      stringArray0[1] = "-suppressDeclar9tion";
      outputFormat0.setNewLineAfterNTags(798);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setIndent("-suppressDeclar9tion");
      assertEquals(798, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expadE;pty");
      assertFalse(outputFormat0.isPadText());
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "-expadE;pty";
      outputFormat0.setPadText(true);
      outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isPadText());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "UTF-8";
      stringArray0[2] = "UTF-8";
      OutputFormat outputFormat0 = new OutputFormat("UTF-8");
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(boolean0);
      assertEquals("UTF-8", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(",#74~9ED+^~*R(", true);
      String[] stringArray0 = new String[2];
      outputFormat0.setNewLineAfterDeclaration(true);
      stringArray0[0] = ",#74~9ED+^~*R(";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      assertEquals(",#74~9ED+^~*R(", outputFormat0.getIndent());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = outputFormat0.getEncoding();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("UTF-8", string0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3755754015654476
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "DHtinC:j";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isNewlines());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isXHTML());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isPadText());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isOmitEncoding());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(false);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "]{m|hKPBx";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "-suppressDeclar9tion";
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewlines(false);
      int int0 = 0;
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclar9tion");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('.');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (.)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("z087vbZ&q");
      String[] stringArray0 = new String[10];
      stringArray0[1] = "-expadE;pty";
      outputFormat0.setTrimText(false);
      stringArray0[2] = "z087vbZ&q";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals(1, int0);
      assertEquals("z087vbZ&q", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }
}
