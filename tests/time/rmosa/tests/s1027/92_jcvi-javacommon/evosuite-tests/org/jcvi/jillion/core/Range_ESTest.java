/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 13:26:29 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.44089287987566
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.ofLength(1178L);
      Range range1 = Range.of(2283L, 3735L);
      long long0 = range0.getEnd();
      assertEquals(1177L, long0);
      
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      Range range2 = Range.of(3735L);
      boolean boolean1 = range1.equals(range2);
      assertFalse(range2.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.7173373633297366
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-235L), (-235L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      range0.complementFrom(list1);
      range1.equals("org.jcvi.jillion.core.Range$ShortRange");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("&R1Z|U/4hJ2@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.&R1Z|U/4hJ2@
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.44089287987566
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(3735L);
      Range range1 = Range.of(3735L, 3735L);
      long long0 = range0.getEnd();
      assertEquals(3734L, long0);
      
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      Range range2 = Range.of(671L);
      boolean boolean1 = range1.equals(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4928751306968477
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.of(9223372036854775797L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775797L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -23 would make range [9223372036854775797 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2033773039059485
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      Range range0 = range_Builder0.build();
      range0.iterator();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1771L), 1798L);
      range0.equals(range0);
      assertNotSame(range0, range1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8921481463615892
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3152L, 9223372036854775807L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.equals(range0);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3301458593936397
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of((-65452L), 19L);
      Range.of(19L, 1952L);
      Long long0 = new Long(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-65452L), 3151L);
      range0.iterator();
      Object object0 = new Object();
      range0.equals(range1);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 3151L, 1952L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.386923482034096
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(3735L);
      Range range1 = Range.of(3735L, 3735L);
      long long0 = range0.getEnd();
      assertEquals(3734L, long0);
      
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      
      Range range2 = Range.of(614L);
      boolean boolean1 = range2.equals(range1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.328162839005711
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.of((-65452L), 2611L);
      long long0 = 1476L;
      Long long1 = new Long(1476L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-65452L), (-65452L));
      Iterator<Long> iterator0 = range0.iterator();
      range0.equals(iterator0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, 3151L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.329716840559713
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range_Builder1.expandEnd(2147483647L);
      Range range1 = Range.of((-1L), 4582L);
      range_Builder0.build();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.440942475669937
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      Range range1 = Range.of((-36L), 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1L, 3088L);
      range1.iterator();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range2);
      assertFalse(range2.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.205056189126162
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(19L, 19L);
      Range.of(19L, 1952L);
      Long long0 = new Long(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 19L, 3151L);
      range0.iterator();
      Object object0 = new Object();
      range1.equals(range0);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 32767L, 3151L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.981360550497221
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 1L);
      Range.Builder range_Builder1 = new Range.Builder(1969L, 1969L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1771L), (-400L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of((-1771L), 1969L);
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.8993247224861243
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = 32767L;
      Range.ofLength(32767L);
      Range range0 = Range.of(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      List<Range> list0 = range0.split(32767L);
      range0.complementFrom(list0);
      String string0 = ")Lr|D~J ";
      // Undeclared exception!
      try { 
        Range.parseRange(")Lr|D~J ", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse )Lr|D~J  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long long0 = new Long((-128L));
      Range range0 = Range.of((-128L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.05725704976923
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.split(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Object object0 = new Object();
      range0.equals((Object) null);
      range0.getEnd(range_CoordinateSystem0);
      Collection<Range> collection0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange("5C)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 5C) into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.327595366528126
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.of(2147483637L, 2147483637L);
      Range.Builder range_Builder0 = new Range.Builder(2147483637L);
      range_Builder0.expandEnd(2147483637L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483637L, 2147483637L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(2147483637L, (-973L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals("value can not be <0");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.269042622949001
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem0);
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(1L, long0);
      
      Range range2 = Range.of(range_CoordinateSystem0, 1911L, 2147483647L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.equals((Object)range2));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1345528251107537
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-65452L), 0L);
      Range range1 = Range.of(0L, 1952L);
      String string0 = range1.toString();
      assertEquals("[ 0 .. 1952 ]/0B", string0);
      
      Long long0 = new Long(32767L);
      Object object0 = new Object();
      range0.equals(range0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3288655179692594
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(0L);
      range1.iterator();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range range2 = Range.ofLength(0L);
      range0.equals(range2);
      assertTrue(range2.isEmpty());
      assertFalse(range2.equals((Object)range1));
      assertSame(range2, range0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      range0.iterator();
      Object object0 = new Object();
      boolean boolean0 = range0.equals("R=u9kJ(k{");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3297650681941473
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-65452L), 0L);
      Range.of(0L, 1952L);
      Long long0 = new Long(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-65452L), 3151L);
      range0.iterator();
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3152L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(" WM/_p");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long long1 = new Long((-1288L));
      Long.compareUnsigned((-128L), (-128L));
      Long.compareUnsigned(255L, 255L);
      Range range0 = Range.of(255L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4436152559374453
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(399L, 611L);
      Range range1 = Range.of(399L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.isSubRangeOf(range0);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(612L, long0);
      
      Range range2 = range1.intersection(range0);
      range2.getLength();
      List<Range> list0 = range2.split(1L);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(0, list1.size());
      
      range1.toString();
      String string0 = range0.toString();
      assertEquals("[ 399 .. 611 ]/0B", string0);
      
      boolean boolean0 = range1.endsBefore(range0);
      assertSame(range1, range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.202999696051705
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      long long0 = (-1L);
      Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range0.equals((Object) null);
      String string0 = null;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.491795265679975
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder0.contractEnd((-1771L));
      range_Builder0.copy();
      range_Builder0.expandEnd(2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.endsBefore(range1);
      Long long0 = new Long((-4708L));
      range1.equals(long0);
      range1.startsBefore(range1);
      boolean boolean1 = range0.intersects(range1);
      assertTrue(boolean1 == boolean0);
      
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-128L), 127L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.830666048636742
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1253L, 1253L);
      Range range0 = Range.of(1253L, 1253L);
      List<Range> list0 = range0.split(1253L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range range1 = Range.of((-128L));
      Range range2 = range0.intersection(range1);
      range0.complement(range1);
      range2.intersection(range0);
      Range.ofLength(1253L);
      range2.complementFrom(list0);
      range1.iterator();
      Range range3 = range1.intersection(range0);
      range3.getEnd();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      range3.equals(object0);
      range1.endsBefore(range0);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1771L), (-530L));
      range0.iterator();
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Long long0 = new Long((-2147483648L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = 0L;
      long long1 = 0L;
      Range range0 = Range.of(913L);
      range0.iterator();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-1515L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1515 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 432L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.491227769049486
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(12L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1771L));
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range_Builder1.expandEnd(2147483647L);
      long long0 = 0L;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.endsBefore(range1);
      range1.isEmpty();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1416L, 3735L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.688750001065033
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long(4294967295L);
      Long.compareUnsigned(2147483647L, 2147483647L);
      range0.equals(long0);
      Object object0 = new Object();
      range0.equals((Object) null);
      range0.toString();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854774354L, (-1615L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1615 would make range [9223372036854774354 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(9223372036854775763L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2680015662764785
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(127L, 32767L);
      Range.Builder range_Builder1 = new Range.Builder(1863L, 32767L);
      range_Builder1.expandEnd((-2297L));
      Range range0 = range_Builder1.build();
      Range range1 = Range.of((-893L), 127L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-992L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-992L), (-992L));
      range0.startsBefore(range1);
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.split((-992L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1356559690710406
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(1431L);
      Range range1 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      long long0 = (-1582L);
      range_Builder0.expandEnd(1431L);
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.parseRange(" !c0n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  !c0n into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder((-228L), 33L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range range0 = range_Builder2.build();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854772073L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1334393520871684
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(3735L);
      Range range1 = Range.ofLength(3735L);
      long long0 = range0.getEnd();
      assertEquals(3735L, long0);
      
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      range1.equals(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.265342345428187
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range0.asRange();
      range0.getBegin();
      range_CoordinateSystem0.toString();
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Space Based", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(9223372036854775790L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Long long0 = new Long(0L);
      Range range0 = Range.of(2147483647L);
      range0.equals(long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Long long0 = new Long(0L);
      Long.compareUnsigned(1135L, 65535L);
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 432L, 4294967295L);
      range0.endsBefore(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.973278742811257
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder1.build();
      boolean boolean0 = range0.equals(range_Builder1);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-1941L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1941L), long0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1054L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Long long1 = new Long((-1054L));
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.327595366528126
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.of(2147483652L, 2147483652L);
      Range.Builder range_Builder0 = new Range.Builder(2147483652L);
      range_Builder0.expandEnd(2147483652L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483652L, 2147483652L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(2147483652L, (-973L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-984L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-12L), 9223372034707292592L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.0605245787004756
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-3069L));
      Range.Builder range_Builder1 = new Range.Builder((-32768L), (-32768L));
      Range range0 = range_Builder1.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of((-3069L));
      boolean boolean0 = range0.intersects(range1);
      boolean boolean1 = range0.equals(object1);
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-32768L), long0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(4294967311L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.588118476750127
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range_Builder1.expandEnd((-1366L));
      range0.endsBefore(range1);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range2 = Range.ofLength(797L);
      range1.isSubRangeOf(range2);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(65535L, 9223372036854775257L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3188L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.442236335994634
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-359L));
      Range range1 = Range.of((-359L));
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-359L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.3863067172457586
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 1784L);
      Range.Builder range_Builder1 = new Range.Builder((-1748L), 2721L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range range0 = range_Builder2.build();
      range0.equals(range_Builder0);
      Range range1 = Range.of(1784L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      List<Range> list1 = range0.complement(range1);
      assertEquals(1, list1.size());
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.389143256667664
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(1577L);
      Range range1 = Range.of(277L, 277L);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("\"W}rLK;c(,=", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse \"W}rLK;c(,= into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.3866123593999244
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L), 1L);
      Range range1 = Range.of((-9223372036854775808L), (-3811L));
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$LongStartIntLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$LongStartIntLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.3295096403525126
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(1197L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1197L, 1197L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(range1.isEmpty());
      assertTrue(list0.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(0L, long0);
      
      Range range2 = Range.ofLength(1396L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.328939839782712
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(1798L);
      range0.iterator();
      String string0 = range0.toString();
      assertEquals("[ 1798 .. 1798 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 1798 .. 1798 ]/0B");
      assertSame(range1, range0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.060362201498235
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32778L), (-3069L));
      Range.Builder range_Builder1 = new Range.Builder((-32778L), (-32778L));
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals((-32777L), long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-2683L), 2047L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.2696985488293766
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.parseRange("[ 0 .. 0 ]/RB", range_CoordinateSystem1);
      boolean boolean0 = range0.endsBefore(range2);
      assertTrue(range2.isEmpty());
      assertSame(range0, range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 432L, 2147483647L);
      range0.iterator();
      range0.getBegin();
      Object object0 = new Object();
      Range range1 = null;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.9848033653426387
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(1197L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$CoordinateSystem", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$CoordinateSystem into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.2032882963403053
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(1454L);
      range0.iterator();
      List<Range> list0 = range0.split(1454L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.139050513447308
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift((-1771L));
      Range range0 = range_Builder0.build();
      long long0 = (-420L);
      // Undeclared exception!
      range0.split(1L);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(1197L);
      List<Range> list0 = range0.split(4540L);
      assertTrue(list0.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.6884526475116584
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-1729L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1728 .. -1728 ]/RB", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = (-1771L);
      long long1 = 32767L;
      Range.Builder range_Builder0 = new Range.Builder((-283L), 32767L);
      Range.Builder range_Builder1 = new Range.Builder(32767L, 32767L);
      range_Builder1.expandEnd((-2885L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-2381L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2381L), (-2381L));
      long long1 = 0L;
      range_Builder0.contractEnd(1L);
      range_Builder0.expandEnd((-1L));
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.327595366528126
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(2147483647L, (-973L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(0L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 197L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-3340L);
      range_Builder0.expandEnd((-3340L));
      long long1 = 1199L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(3543L, (-3340L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.expandBegin(2015L);
      range_CoordinateSystem0.getAbbreviatedName();
      range_Builder0.contractBegin(1L);
      long long0 = 3543L;
      range_Builder0.expandEnd(3543L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(9980L, 1199L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.687420655767592
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Long long0 = new Long((-9223372036854775808L));
      Long.compareUnsigned(3735L, 9223372036854775807L);
      Long.compareUnsigned((-9223372036854775808L), 4294967295L);
      range0.equals(long0);
      String string0 = null;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.329987537604603
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854772073L);
      range0.iterator();
      Range range1 = Range.of((-1L), 754L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(9223372036854772073L, 2328L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(1975L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-1243L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("'.]XTbe( h;@~]D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.'.]XTbe( h;@~]D
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals("G*M$?HDgkn~i");
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.20450410181143
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = (-3811L);
      Range range0 = Range.of((-3811L), 1L);
      Range range1 = Range.of((-9223372036854775808L), (-3811L));
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$LongStartIntLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$LongStartIntLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range0.asRange();
      range0.complement(range1);
      // Undeclared exception!
      try { 
        range1.split((-1450L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.7977307240620064
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(1197L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.equals((Object) null);
      boolean boolean1 = range1.intersects(range0);
      assertSame(range1, range0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 432L, 432L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.7969671154659554
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(0L);
      Long long0 = new Long(32805L);
      Long long1 = new Long(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem.values();
      Range range1 = Range.of(0L);
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("7<", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 7< into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Long long0 = new Long((-128L));
      Range range0 = Range.of((-128L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Long long0 = new Long((-1898L));
      Long long1 = new Long((-128L));
      Range range0 = Range.of((-1898L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("%e&3R", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse %e&3R into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.parseRange("RB", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse RB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.parseRange("F(B`T*KYiXm$:`T&", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse F(B`T*KYiXm$:`T& into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(2147483679L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(7L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      
      range0.asRange();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Long long0 = new Long((-128L));
      Range range0 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range0.split((-460L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-5628L));
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(5047L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.687420655767592
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Long long0 = new Long((-128L));
      Range range0 = Range.of((-128L));
      String string0 = range0.toString();
      assertEquals("[ -128 .. -128 ]/0B", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getEnd();
      //  // Unstable assertion: assertEquals(3629L, long0);
      
      long long1 = range0.getBegin();
      //  // Unstable assertion: assertEquals(0L, long1);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1311L), (-1311L));
      long long0 = range0.getBegin();
      assertEquals((-1311L), long0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = 1253L;
      long long1 = 1253L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-541L), 1253L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem1, 256L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(0L, (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1047L), (-1047L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1653L, 32767L);
      range_Builder0.expandBegin(171L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(1863L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-9223372036854773802L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-2147483610L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-1727L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertNotSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 2076L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2076L, 2076L);
      String string0 = "\\Y";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_Builder0.expandBegin(2076L);
      // Undeclared exception!
      try { 
        Range.parseRange("Y", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Y into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1336L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_CoordinateSystem1, 1336L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.892518928712349
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(1L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(3505L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.9801447450260965
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.getEnd();
      Range range1 = Range.of((-5636L));
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(9223372036854775807L);
      range1.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.794110516722859
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Long long0 = new Long((-9223372036854775808L));
      Long.remainderUnsigned(1858L, 1720L);
      Long.compareUnsigned(3735L, 9223372036854775807L);
      Long.compareUnsigned((-9223372036854775808L), 4294967295L);
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = (-128L);
      Long long1 = new Long((-128L));
      Object object0 = new Object();
      Range range0 = Range.of((-128L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = 4055L;
      Range.Builder range_Builder0 = new Range.Builder(4055L);
      long long1 = 3543L;
      Range.Builder range_Builder1 = range_Builder0.shift(1199L);
      Range range0 = range_Builder1.build();
      // Undeclared exception!
      try { 
        range0.split((-420L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = (-1771L);
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      long long1 = 0L;
      range_Builder0.expandEnd(0L);
      range_Builder0.shift((-1771L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Ge_SMXc0xQF2k", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Ge_SMXc0xQF2k into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(3630L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775797L, (-3069L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3069 would make range [9223372036854775797 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(106L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = (-32767L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-32767L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(0L, (-1771L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
