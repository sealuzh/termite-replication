/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 13:38:20 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\b", 128);
      jSONObject1.optLong("\b");
      try { 
        jSONObject1.getJSONObject("VrN5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VrN5\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.587973990795769
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "getdecode";
      JSONObject jSONObject0 = new JSONObject((Object) "getdecode");
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      jSONObject0.put("P`!7yxb~UyDWa~ys", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("P`!7yxb~UyDWa~ys");
      jSONObject1.optLong("P`!7yxb~UyDWa~ys", 991L);
      try { 
        jSONObject1.getLong("P`!7yxb~UyDWa~ys");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"P`!7yxb~UyDWa~ys\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Expected '", (Collection) null);
      jSONObject1.accumulate("Expected '", "java.lang.Long@0000000005.");
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Long) null, "");
      jSONObject0.optJSONArray("");
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6890278560247443
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ispush";
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(60);
      hashMap0.put(long0, integer0);
      jSONObject0.optBoolean("&\"Jn,zp3_NN>1Z~w");
      Integer integer1 = new Integer((-1607));
      jSONObject0.optLong(",\n");
      Integer.getInteger("&\"Jn,zp3_NN>1Z~w", (-1607));
      Integer integer2 = Integer.getInteger("&\"Jn,zp3_NN>1Z~w", integer1);
      hashMap0.put((Long) null, integer2);
      jSONObject0.put("ispush", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-301));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = JSONObject.quote("3_8)WN]hV_`R2Ku");
      assertEquals("\"3_8)WN]hV_`R2Ku\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("3_8)WN]hV_`R2Ku", true);
      boolean boolean0 = jSONObject0.getBoolean("3_8)WN]hV_`R2Ku");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Short short0 = new Short((short)92);
      Long long0 = new Long((-2242L));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$1", (double) 1275);
      jSONObject1.accumulate("wheel.json.JSONObject$1", (Object) null);
      jSONObject1.optString("wheel.json.JSONObject$1");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5917629735996164
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(12, 4616.2191);
      jSONArray0.optBoolean(11);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("has", (Collection) linkedList0);
      boolean boolean0 = jSONObject0.isNull("has");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.099633990865473
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "is";
      JSONObject jSONObject0 = new JSONObject((Object) "is");
      jSONObject0.optDouble("is");
      Float float0 = new Float((-942.665551455725));
      Float.max(0.0F, 0.0F);
      Float.min(1.0F, 1.0F);
      JSONObject jSONObject1 = jSONObject0.put("is", (Object) float0);
      jSONObject1.getString("is");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.optLong("is");
      Byte byte0 = new Byte((byte)22);
      byte byte1 = (byte)104;
      Byte.toUnsignedLong((byte)104);
      linkedList0.add(byte0);
      try { 
        jSONObject0.getBoolean("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", (-89L));
      JSONObject jSONObject2 = jSONObject1.put("lon", (-1838));
      jSONObject2.getLong("JSONArray initial value should be a string or collection or array.");
      jSONObject1.toString((-3454), 13);
      JSONTokener jSONTokener0 = new JSONTokener("JSONArray initial value should be a string or collection or array.");
      jSONTokener0.syntaxError("lon");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("", (Collection) linkedList0);
      boolean boolean0 = jSONObject0.has("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      byte byte0 = (byte) (-19);
      Byte byte1 = new Byte((byte) (-19));
      linkedList0.offer(byte1);
      linkedList0.add((Byte) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("rp_19*QgkNgr;!8$lD", "rp_19*QgkNgr;!8$lD");
      JSONTokener jSONTokener0 = new JSONTokener("rp_19*QgkNgr;!8$lD");
      try { 
        jSONObject1.getBoolean("rp_19*QgkNgr;!8$lD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"rp_19*QgkNgr;!8$lD\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("!~|[N8jt5tr", 0L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(59, 59);
      JSONObject jSONObject1 = new JSONObject("{}");
      jSONObject0.accumulate("{}", jSONObject1);
      assertEquals(1, jSONObject0.length());
      
      JSONObject.doubleToString(0.0);
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("JSONArray initial value should be a string or collection or array.", "] is not a JSONObject.");
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.append("JSONArray initial value should be a string or collection or array.", "JSONArray initial value should be a string or collection or array.");
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("e&YwL@w", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "JSONArray initial value should be a string or collection or array.";
      jSONObject0.put("JSONArray initial value should be a string or collection or array.", (-89L));
      Object object0 = new Object();
      JSONObject.testValidity(object0);
      try { 
        jSONObject0.append("JSONArray initial value should be a string or collection or array.", "] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[JSONArray initial value should be a string or collection or array.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("E", (Collection) linkedList0);
      jSONObject1.toString();
      jSONObject0.optString("E", "@(}*CDMsqh");
      try { 
        jSONObject1.getInt("@(}*CDMsqh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@(}*CDMsqh\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "U4/0um");
      jSONObject0.put("G;pG`}gX?h,im", 63);
      jSONObject0.opt("G;pG`}gX?h,im");
      jSONObject0.optJSONObject("G;pG`}gX?h,im");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5712448203683604
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optDouble("pa");
      jSONObject0.put("p,ue", 1289L);
      JSONObject jSONObject1 = jSONObject0.put(" ,?t\"$vc'Tk.", 1991);
      JSONObject.valueToString("wheel.json.JSONObject@0000000001");
      jSONObject1.optInt("p,ue");
      jSONObject1.toString(1289, 1289);
      JSONObject.getNames((Object) " ,?t\"$vc'Tk.");
      JSONTokener jSONTokener0 = new JSONTokener(" ,?t\"$vc'Tk.");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 2 of  ,?t\"$vc'Tk.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("Expected '");
      JSONObject jSONObject1 = jSONObject0.put("Expected '", 126);
      jSONObject1.getInt("Expected '");
      try { 
        jSONObject1.getBoolean("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.692462672574315
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optInt("get");
      jSONObject0.put("isdoubleToRawLongBits", 0);
      jSONObject0.optBoolean("Expected a ',' or '}'", true);
      jSONObject0.names();
      String string0 = jSONObject0.toString(1257);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      double double0 = jSONObject0.optDouble("isdoubleToRawLongBits");
      assertEquals(4, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Long long0 = new Long((-281L));
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject.valueToString(jSONObject0);
      String string0 = "cTEI";
      JSONObject jSONObject1 = jSONObject0.put("cTEI", (Object) long0);
      JSONObject jSONObject2 = jSONObject1.put("cTEI", (Object) "wheel.json.JSONObject@0000000001");
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      jSONObject2.put("wheel.json.JSONObject@0000000001", (Map) hashMap0);
      try { 
        jSONObject1.getDouble("cTEI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cTEI\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1889454998876763
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{+1=\"soYm!-L{q");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("istoUnsignedLong", 2923);
      long long0 = jSONObject0.getLong("istoUnsignedLong");
      assertEquals(2923L, long0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Long long0 = new Long((-281L));
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject.valueToString(jSONObject0);
      String string0 = "cTEI";
      JSONObject jSONObject1 = jSONObject0.put("cTEI", (Object) long0);
      jSONObject1.getDouble("cTEI");
      try { 
        jSONObject0.getJSONObject(">P&7QS3;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">P&7QS3;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Double.valueOf(0.0);
      Double.valueOf(0.0);
      Double double0 = new Double(718.2682245083);
      JSONObject jSONObject0 = new JSONObject(double0);
      Integer.valueOf((int) (short) (-521));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string0 = "=#";
      jSONObject1.put("=#", (-2090));
      jSONObject1.optDouble("=#", 0.0);
      String string1 = null;
      jSONObject1.remove((String) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.put((-565), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-565] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      BiFunction<String, Object, Boolean> biFunction0 = (BiFunction<String, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      String string0 = JSONObject.valueToString(hashMap0, 26, 2384);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1235));
      JSONObject.getNames((Object) integer0);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.doubleToString(2276.361112799555);
      JSONObject jSONObject1 = jSONObject0.put("2276.361112799555", 0.0);
      long long0 = jSONObject1.getLong("2276.361112799555");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8751832500087795
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Double.valueOf(0.0);
      Double double0 = Double.valueOf(0.0);
      Double double1 = new Double(718.2682245083);
      JSONObject jSONObject0 = new JSONObject(double0);
      Integer.valueOf(2423);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-2795));
      linkedList0.add(integer0);
      jSONObject0.optDouble("3", (double) 2423);
      jSONObject1.remove("getput");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.putOpt("=#", double0);
      jSONObject0.isNull("num");
      int int0 = jSONObject1.optInt("=#", 102);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8794450460513974
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("istoUnsignedLong", 2923);
      JSONObject.getNames(jSONObject0);
      jSONObject1.append("KQTS|#&BG$7cTvh", "istoUnsignedLong");
      jSONObject0.toString(1, 57);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(2923);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "istoUnsignedLong");
      Writer writer0 = jSONArray0.write(stringWriter1);
      jSONObject0.write(writer0);
      try { 
        jSONObject1.getBoolean("acc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"acc\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("B", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "pi}i";
      stringArray0[1] = ")}3";
      stringArray0[2] = "pi}i";
      stringArray0[3] = "pi}i";
      stringArray0[4] = "pi}i";
      stringArray0[5] = "pi}i";
      stringArray0[6] = "@W[`Ft33";
      stringArray0[7] = "pi}i";
      stringArray0[8] = "pi}i";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      double double0 = jSONObject0.optDouble("pi}i", (-86.7027065663));
      assertEquals((-86.7027065663), double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOpt("5B/C3^`)x45XkEYTT", jSONArray0);
      try { 
        jSONObject1.getInt("5B/C3^`)x45XkEYTT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5B/C3^`)x45XkEYTT\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("T", "T");
      JSONObject.quote("E.,Jc|'AOQG`kiN");
      try { 
        jSONObject1.getLong("T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"T\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "istoUnsignedLong";
      jSONObject0.put("istoUnsignedLong", 32);
      jSONObject0.getDouble("istoUnsignedLong");
      try { 
        jSONObject0.getJSONArray("istoUnsignedLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoUnsignedLong\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "JSONArray initia value should be a string or collection or array.";
      String string1 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("pm|#", (-331L));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.put((Collection) null);
      JSONTokener jSONTokener0 = new JSONTokener(".");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of .
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5224793915295731
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(12, (double) 12);
      jSONArray0.put(2277, (Object) jSONArray1);
      jSONArray0.optBoolean(11);
      JSONObject.getNames((Object) jSONArray0);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray1, 11, 2277);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = Double.NaN;
      Double double1 = new Double(Double.NaN);
      Double.isFinite(Double.NaN);
      try { 
        JSONObject.valueToString(double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("T", (-574));
      int int0 = jSONObject0.getInt("T");
      assertEquals((-574), int0);
      
      String string0 = JSONObject.quote("W$*");
      assertEquals("\"W$*\"", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = new JSONArray();
      Long long0 = new Long(1L);
      HashMap<Long, Integer> hashMap1 = new HashMap<Long, Integer>();
      HashMap<JSONObject, String> hashMap2 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      jSONObject0.put("null", (Map) hashMap0);
      String string0 = jSONObject0.getString("null");
      assertNotNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Float float0 = new Float((double) (byte) (-25));
      Float float1 = new Float((double) (byte) (-25));
      hashMap0.put(float0, float1);
      Byte byte0 = new Byte((byte) (-25));
      linkedList1.offer(byte0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = new Boolean(true);
      String string0 = jSONObject0.optString("] not found.");
      assertEquals("", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("istoUnsignedLong", 184);
      try { 
        jSONObject0.getJSONObject("istoUnsignedLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoUnsignedLong\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = new Boolean(false);
      hashMap0.put("istoHexString", boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      Object object0 = jSONObject0.get("istoHexString");
      assertEquals(false, object0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double((-1425.5263003937));
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optDouble("x=K2$");
      JSONObject jSONObject1 = jSONObject0.put("p,ue", 1289L);
      jSONObject1.remove("p,ue");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1461);
      linkedList0.add(short0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.append("mS+$", boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1513.82751));
      assertEquals("-1513.82751", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("-1513.82751");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = JSONObject.quote("");
      Boolean boolean0 = Boolean.valueOf("\"\"");
      String string1 = JSONObject.valueToString(boolean0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.8510944537717136
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject.quote("V&'b0)/dX ");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Integer integer0 = new Integer(62);
      jSONObject0.put("false", (Object) integer0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = JSONObject.quote("YHw&S(e@;NKkR)c/3@");
      assertEquals("\"YHw&S(e@;NKkR)c/3@\"", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("JSON does not allow non-finite numbers.", "JSON does not allow non-finite numbers.");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(114);
      try { 
        jSONObject0.accumulate((String) null, integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = JSONObject.quote("\r");
      assertEquals("\"\\r\"", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      try { 
        jSONObject0.getDouble("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONTokener jSONTokener0 = new JSONTokener("{v2@t7X*");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {v2@t7X*
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Short short0 = new Short((short)120);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.names();
      jSONObject0.toString((-3536));
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = jSONObject0.toString(1812);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{+1=A\"YsoYm!-Lq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 6 of {+1=A\"YsoYm!-Lq
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{OQbOW(t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {OQbOW(t
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{+1=\"soYm!-L{q");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 14 of {+1=\"soYm!-L{q
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("wheel.json.JSONException", false);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 1275, 46);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer((-1391));
      Integer.toUnsignedLong((-1391));
      hashMap0.put(integer0, (String) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = jSONArray0.put((Collection) null);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object1, 1275, 48);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.doubleToString(3248.3);
      assertEquals("3248.3", string0);
      
      long long0 = jSONObject0.optLong("3248.3");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.names();
      // Undeclared exception!
      jSONObject0.toString(5266);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("istoUnsignedLong", (Object) "istoUnsignedLong");
      HashMap<Long, Integer> hashMap1 = new HashMap<Long, Integer>();
      jSONObject0.put("]Civ OEPj4N;9z&", (Map) hashMap0);
      jSONObject1.toString(50, 13);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-89L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      BiFunction<Integer, Object, Float> biFunction0 = (BiFunction<Integer, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("r", hashMap0);
      jSONObject0.optJSONArray("r");
      double double0 = jSONObject1.optDouble("r");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)2546);
      try { 
        jSONObject0.append((String) null, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of s
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double.valueOf(0.0);
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("getcompare", 0.0);
      Object object0 = jSONObject0.remove("' and instead saw '");
      assertNull(object0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      Byte byte0 = new Byte((byte) (-84));
      hashMap0.put(byte0, "a*fD_");
      JSONObject.getNames((Object) hashMap0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      hashMap1.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("oZe=jsl5hhN0YE$", (-1245));
      assertEquals((-1245), int0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Byte byte0 = new Byte((byte)12);
      String string0 = JSONObject.valueToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("~5^", (Object) null);
      String string0 = "EL(H";
      JSONTokener jSONTokener0 = new JSONTokener("EL(H");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of EL(H
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-2245.664961065));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("wheel.json.JSONObject", "000");
      assertEquals("000", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("wheel.json.JSONObject$Null", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put("] is not a number.", jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = jSONObject0.names();
      assertNotNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("p9N-v?", 127);
      try { 
        jSONObject1.getBoolean("p9N-v?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p9N-v?\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.8510944537717136
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = JSONObject.quote("$_tR=/");
      assertEquals("\"$_tR=/\"", string0);
      
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("gT`?WFG@.p7Qh#]{");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray("000");
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Double double0 = new Double((-1.0));
      JSONObject.getNames((Object) double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("D", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Long long0 = new Long((-1350L));
      Long.remainderUnsigned((-1298L), (-1298L));
      Long.sum(0L, (-1350L));
      JSONObject.testValidity(long0);
      JSONObject.quote("] is not a JSONObject.");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(1236);
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("T", "T");
      jSONObject0.toString(1898, 13);
      JSONTokener jSONTokener0 = new JSONTokener("T");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = "] is not a JSONObject.";
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a JSONObject.");
      // Undeclared exception!
      jSONObject0.toString(1329, 1329);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject1.toString((-546), (-546));
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      jSONObject0.toString(2898, 2898);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.putIfAbsent("log", boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(1439, 1439);
      JSONTokener jSONTokener0 = new JSONTokener("MGm");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of MGm
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(44);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("Bad value from toJSONString: ", "Bad value from toJSONString: ");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("] not found.");
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, boolean0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>(linkedList0);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("T", "T");
      short short0 = (short)101;
      Short short1 = new Short((short)101);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("T", (Collection) linkedList0);
      Integer integer0 = new Integer(445);
      hashMap0.replace(short1, integer0, integer0);
      JSONObject.quote((String) null);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("U!Xlg=!g\u0005;E");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.8120939218445867
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject.quote("%7/YyD5q['GhRr");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("u*`l*d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u*`l*d\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.doubleToString((-1513.82751));
      assertEquals("-1513.82751", string0);
      
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("par", 834L);
      assertEquals(834L, long0);
      
      String string1 = JSONObject.quote("#AofGT");
      assertEquals("\"#AofGT\"", string1);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(1.0F);
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      jSONObject0.optJSONObject("2FAq:HC&0JEHE1gy]z1");
      boolean boolean0 = jSONObject0.isNull("JSONObject[");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1235));
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      assertNotNull(stringArray0);
      
      JSONObject.numberToString(integer0);
      Boolean boolean0 = Boolean.valueOf("java.lang.Integer@0000000001");
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.optJSONArray("java.lang.Integer@0000000001");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("7CVz%\"(#rE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7CVz%\\\"(#rE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("M8$D2|VIYy", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getset";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0, 1275, 1275);
      assertNotNull(string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("D>(krJ~uu*4%a", 20);
      assertEquals(20, int0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("7ov;U\"F?");
      assertNull(object0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("40um");
      String string0 = JSONObject.valueToString(jSONTokener0, 814, 46);
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float float0 = new Float(0.0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0, 71, 1275);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf((String) null);
      String string0 = JSONObject.valueToString(boolean0, 46, 46);
      assertNotNull(string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-1750), (-1750));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = JSONObject.quote("7ov;U\"F?");
      assertEquals("\"7ov;U\\\"F?\"", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Long long0 = new Long(0L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of []
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
