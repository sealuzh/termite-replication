/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 13:18:44 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.Locale;
import java.util.Stack;
import java.util.concurrent.LinkedBlockingQueue;
import javax.help.ForwardAction;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JLayeredPane;
import javax.swing.JPopupMenu;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MemoryTileCache;
import org.w3c.dom.Document;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.695518092694581
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-2316));
      MockDate mockDate0 = new MockDate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2316), 0L, (-2316), (-2316), '/');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setSelectableDateRange((Date) null, mockDate0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.801687426925823
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getAncestorListeners();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-1924));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3, 2033L, (-967), 34, 'P');
      KeyEvent.getKeyText(1973);
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setDayBordersVisible(true);
      MockDate mockDate1 = new MockDate();
      java.sql.Date date0 = new java.sql.Date(0L);
      date0.toString();
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.firePropertyChange("' +{H.gzMtu", (short)23, (short)46);
      Color color0 = Color.GREEN;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)23;
      floatArray0[1] = (float) (short)46;
      floatArray0[2] = (float) (short)46;
      floatArray0[3] = (float) (short)23;
      floatArray0[4] = (float) (short)46;
      floatArray0[5] = (float) (short)46;
      floatArray0[6] = (float) (short)23;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      Color color0 = jDayChooser0.selectedColor;
      jDayChooser0.getBackground();
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMaxDayCharacters(4);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(4, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.sql.Date date0 = new java.sql.Date((short)46);
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      Color color0 = Color.GRAY;
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5777466264255984
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      Color color0 = Color.pink;
      jDayChooser0.setForeground(color0);
      jDayChooser0.setMonth(933);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setDay(809);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 15, 284, 284, 2733, 'f');
      Locale locale0 = new Locale("Center", "Center");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      keyEvent0.setSource(date0);
      jDayChooser0.keyPressed(keyEvent0);
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(164);
      jDayChooser0.setName("1");
      jDayChooser0.setMonth((-775));
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(27);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, byteArrayOutputStream0, 2400, 2400);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.createToolTip();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      mockDate0.before(date0);
      MockDate mockDate1 = new MockDate();
      jDayChooser0.getAncestorListeners();
      jDayChooser0.setForeground((Color) null);
      MockDate mockDate2 = new MockDate();
      jDayChooser0.setSelectableDateRange(mockDate1, mockDate0);
      jDayChooser0.setMaxSelectableDate(date0);
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      // Undeclared exception!
      try { 
        SVGGraphics2D.buildSVGGeneratorContext((Document) null, imageHandlerBase64Encoder0, defaultExtensionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // domFactory should not be null
         //
         verifyException("org.apache.batik.svggen.SVGGeneratorContext", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.validate();
      Color color0 = jDayChooser0.selectedColor;
      assertEquals((-6250336), color0.getRGB());
      
      Locale locale0 = Locale.JAPANESE;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      sVGDOMImplementation0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1835));
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      MockDate mockDate0 = new MockDate();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      mockDate0.before(date0);
      MockDate mockDate1 = new MockDate();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      jDayChooser0.setYear(238);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 970, 970, 1171, 1171, '7', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.createToolTip();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.696639782014582
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.requestFocus(false);
      jDayChooser0.setMonth((-5));
      jDayChooser0.getAncestorListeners();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDebugGraphicsOptions(33);
      jDayChooser0.createToolTip();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser0.init();
      jDayChooser1.updateUI();
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser1.getLocale();
      jDayChooser1.setDecorationBordersVisible(false);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.enableInputMethods(true);
      JButton jButton0 = new JButton("day");
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 49, (String) null, 1014);
      jDayChooser0.createToolTip();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"day\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6956669449374657
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(100);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.setMaxDayCharacters((-1));
      jDayChooser0.setDecorationBackgroundVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 458, 456L, (-1), 43, 's');
      KeyEvent.getKeyText(458);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      jDayChooser0.setMonth(45);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Sixteen");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = new Color(33, 33, 33);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 33;
      floatArray0[1] = (float) 33;
      floatArray0[2] = (float) 33;
      floatArray0[3] = (float) 33;
      floatArray0[4] = (float) 33;
      floatArray0[5] = (float) 33;
      floatArray0[6] = (float) 33;
      floatArray0[7] = (float) 33;
      floatArray0[8] = (float) 33;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setMonth(1237);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear((-2527));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.validate();
      jDayChooser0.getSundayForeground();
      int int0 = 26;
      char char0 = 'X';
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.yearChooser = jYearChooser0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 26, 26, 26, 32, 'X');
      Locale locale0 = new Locale("ROTATION", "day");
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      LinkedBlockingQueue<Locale> linkedBlockingQueue0 = new LinkedBlockingQueue<Locale>();
      Locale.lookup(stack0, linkedBlockingQueue0);
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9831398653357044
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 0;
      InputMap inputMap0 = jDayChooser0.getInputMap();
      inputMap0.getParent();
      Integer integer0 = StrokingTextPainter.ADJUST_ALL;
      ForwardAction forwardAction0 = new ForwardAction(integer0);
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      jDayChooser0.addMouseListener(forwardAction0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setInputMap(0, (InputMap) null);
      jDayChooser0.getBaselineResizeBehavior();
      jDayChooser0.isDayBordersVisible();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[2] = "5_ jfN?=";
      stringArray0[3] = "day";
      jDayChooser0.setSundayForeground((Color) null);
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(28, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.firePropertyChange((String) null, (short)23, (short)160);
      jDayChooser0.getMinSelectableDate();
      int int0 = jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setFont((Font) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Graphics graphics0 = null;
      jDayChooser0.print((Graphics) null);
      int int0 = (-1538);
      jDayChooser0.drawDays();
      int int1 = 0;
      jDayChooser0.repaint((-1538), 2216, 0, 0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(2216);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(27);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, byteArrayOutputStream0, 2400, 2400);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.drawWeeks();
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(39);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getRolloverIcon();
      jDayChooser_DecoratorButton0.getInsets();
      jDayChooser_DecoratorButton0.isFocusable();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      // Undeclared exception!
      try { 
        defaultTreeCellRenderer0.setVerticalTextPosition(979);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // verticalTextPosition
         //
         verifyException("javax.swing.JLabel", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.695529662081982
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.addListeners(3);
      jDayChooser0.setName("1");
      jDayChooser0.setMonth((-2214));
      jDayChooser0.setFocus();
      MapDialog mapDialog0 = new MapDialog();
      jDayChooser0.setMaxDayCharacters((-2214));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.addListeners(2);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1977));
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      Color color0 = new Color(9660);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      color0.getRGBComponents(floatArray0);
      floatArray0[1] = (-178.878F);
      try { 
        ICC_Profile.getInstance("org.apache.xpath.functions.FuncStartsWith");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot open file org.apache.xpath.functions.FuncStartsWith
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.enableInputMethods(true);
      jDayChooser0.setComponentPopupMenu((JPopupMenu) null);
      jDayChooser0.setIgnoreRepaint(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1851, 1738, (-1596), 2946, 'M');
      InputEvent.getModifiersExText(1851);
      keyEvent0.setKeyCode(2946);
      keyEvent0.setSource((Object) null);
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.transferFocusBackward();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getContainerListeners();
      jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      String[] stringArray0 = new String[7];
      stringArray0[6] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      jDayChooser0.setWeekdayForeground(color0);
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 410);
      MindMapMode mindMapMode0 = new MindMapMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(100, 100, 100, 100, 100, 100);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertNull(jButton0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.darkGray;
      ColorSpace colorSpace0 = color0.getColorSpace();
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      color0.getColorComponents(colorSpace0, (float[]) null);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getHeight();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.removeNotify();
      defaultTreeCellRenderer0.getFont();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.8008429327153
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[3] = "jpegImage";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      MockDate mockDate1 = new MockDate((-521L));
      jDayChooser0.setMinSelectableDate(mockDate1);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      HsqlProperties hsqlProperties0 = new HsqlProperties();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      ActionEvent actionEvent0 = new ActionEvent(mockDate0, 1, "(g5=}-x[YMj$x", 4734);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockDate cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
