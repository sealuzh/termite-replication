/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 13:37:43 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(517);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime((-3252));
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setCharset("");
      assertEquals(1, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketSendBufferSize((-1));
      advancedSettings0.setByteBufferSize(3993);
      advancedSettings1.setClientIdentifier("");
      advancedSettings0.setByteBufferSize(724);
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings2.getClientIdentifier();
      advancedSettings1.getQSObjectPoolMaker();
      advancedSettings1.getQSObjectPoolMaker();
      advancedSettings1.setPerformancePreferencesBandwidth(724);
      advancedSettings1.setClientSocketTrafficClass("!yMq");
      advancedSettings2.setPerformancePreferencesLatency(65536);
      advancedSettings2.getByteBufferSize();
      advancedSettings2.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      assertEquals(724, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.setPerformancePreferencesConnectionTime((-2250));
      advancedSettings0.setClientSocketSendBufferSize((-655));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getCharset();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setCharset("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getBacklog();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals((-2250), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("}EW iB)uHH&-qMb");
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesConnectionTime(1701);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getBacklog();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(1701, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("U(BiP]N *td<.xlBEC");
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(3556);
      advancedSettings0.setCharset("");
      int int0 = advancedSettings0.getBacklog();
      assertEquals(3556, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesBandwidth(2899);
      advancedSettings0.getBacklog();
      advancedSettings0.getByteBufferSize();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(2899, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize((-822));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setMaxThreadsForNioWrite(1656);
      advancedSettings0.setClientSocketSendBufferSize((-822));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setPerformancePreferencesBandwidth(17);
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals(1656, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(2372);
      advancedSettings0.setBacklog((-1085));
      advancedSettings0.setSocketLinger(0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize((-1085));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.setBacklog(0);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setPerformancePreferencesConnectionTime((-1085));
      advancedSettings1.setQSObjectPoolMaker((String) null);
      advancedSettings2.getPerformancePreferencesLatency();
      advancedSettings2.setClientSocketTcpNoDelay(true);
      advancedSettings0.getByteBufferSize();
      advancedSettings1.getByteBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings2.setDebugNonBlockingMode(false);
      advancedSettings2.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.getQSObjectPoolMaker();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setClientSocketTrafficClass((String) null);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(2372, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesConnectionTime((-2857));
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = "I\"-v`CE`1W]";
      advancedSettings0.setClientSocketTrafficClass("I\"-v`CE`1W]");
      advancedSettings0.getSocketLinger();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setBacklog((-2857));
      advancedSettings0.getDebugNonBlockingMode();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("I\"-v`CE`1W]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // I\"-v`CE`1W]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4297811167972485
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("");
      advancedSettings0.getQSObjectPoolMaker();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketSendBufferSize((-1183));
      advancedSettings2.setPerformancePreferencesConnectionTime(950);
      assertEquals(950, advancedSettings2.getPerformancePreferencesConnectionTime());
      
      advancedSettings1.getClientSocketTrafficClass();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(10);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setMaxThreadsForNioWrite((-1645));
      advancedSettings2.getByteBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings2.setPerformancePreferencesConnectionTime((-1645));
      advancedSettings2.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      assertEquals((-1645), advancedSettings2.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-3573));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1085));
      advancedSettings0.setBacklog((-1085));
      advancedSettings0.setSocketLinger(1210);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesConnectionTime((-1085));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite((-124));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setCharset("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("8OyhHgDDu");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 8OyhHgDDu
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.540818734019718
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.toXML((String) null);
      advancedSettings0.toXML("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketReceiveBufferSize((-661));
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize(728);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setBacklog((-1));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getUseDirectByteBuffer();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals((-661), advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(728, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("Ohpo-mF(Z5OC");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.xmlreader.AdvancedSettings");
      advancedSettings0.setByteBufferSize(15);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(15);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(15, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientIdentifier("\t<use-direct-byte-buffer>");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientIdentifier("5RTOS`T3305{l7PfYp");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger(991);
      advancedSettings0.setPerformancePreferencesBandwidth(1185);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesConnectionTime(2174);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("d?%v|f1!&3U+[f/~i1");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // d?%v|f1!&3U+[f/~i1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1824));
      advancedSettings0.toXML("C3AS:qr+");
      assertEquals((-1824), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setCharset("");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getCharset();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientIdentifier();
      assertEquals((-1), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      String string0 = advancedSettings0.toXML("");
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-traffic-class></client-socket-traffic-class>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getCharset();
      assertEquals("ISO-8859-1", string0);
      
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-872));
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertNotNull(string0);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite((-1645));
      advancedSettings0.setPerformancePreferencesBandwidth((-1645));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(15);
      advancedSettings1.setCharset("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.getCharset();
      assertEquals(15, advancedSettings1.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1645));
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setByteBufferSize((-1645));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-1645), advancedSettings0.getMaxThreadsForNioWrite());
      
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      String string0 = advancedSettings1.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("W");
      advancedSettings0.getClientSocketSendBufferSize();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals("W", advancedSettings0.getClientIdentifier());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, int0);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, int0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(154);
      advancedSettings0.toXML(";{6i;ggebu>\"");
      assertEquals(154, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("", string0);
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setBacklog((-1117));
      advancedSettings1.getDebugNonBlockingMode();
      advancedSettings0.setCharset("");
      String string0 = advancedSettings1.getClientIdentifier();
      assertEquals(0, advancedSettings1.getBacklog());
      assertFalse(advancedSettings1.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
      assertEquals("ISO-8859-1", advancedSettings1.getCharset());
      assertEquals(0, advancedSettings1.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings1.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings1.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings1.getSocketLinger());
      assertTrue(advancedSettings1.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings1.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings1.getByteBufferSize());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(3844);
      advancedSettings0.setClientIdentifier("");
      assertEquals(3844, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-3624));
      advancedSettings0.setClientIdentifier("Ol.h3.k41594");
      assertEquals("Ol.h3.k41594", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(623);
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(623, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("j2!%K.Ft1f");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // j2!%K.Ft1f
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
