/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 13:08:22 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("(l/g{zIgqC2H");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter table", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-2188), "selectselectt");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter table", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("alter table : SELECTSELECTT(3,3)", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("alter table, alter table, alter table, alter table, alter table, alter table, alter table, alter table, alter table", string1);
      
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("alter table : SELECTSELECTT(3,3)");
      assertEquals(3, objectArray0.length);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-719), "NCLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("kBzXJs");
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NCLOB", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.toString();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("Qge", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "alter tabletruncate42x96";
      stringArray0[1] = "alter tabletruncate42x96";
      stringArray0[2] = "alter tabletruncate42x96";
      stringArray0[3] = "alter tabletruncate42x96";
      SQLUtil.join("alter tabletruncate42x96", "alter tabletruncate42x96", stringArray0, "alter tabletruncate42x96", "alter tabletruncate42x96", stringArray0);
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "\\d(,gI(]k`)?2f+$n|L";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("d(,gI(]k`)?2f+$n|L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals("., ., ., .", string0);
      
      String string1 = SQLUtil.substituteMarkers("", "c7x", "");
      assertEquals("", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "|V\"";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "AAHl_rbhwWv[D-_?";
      stringArray0[1] = "|V\"";
      stringArray0[2] = "AAHl_rbhwWv[D-_?";
      stringArray0[3] = "|V\"";
      stringArray0[4] = "AAHl_rbhwWv[D-_?";
      stringArray0[5] = "AAHl_rbhwWv[D-_?";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "AAHl_rbhwWv[D-_?";
      stringArray1[1] = "T3$";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("|V\"", stringArray0, "AAHl_rbhwWv[D-_?", "T3$", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      String string0 = SQLUtil.renderValue(stringBuilder1);
      assertEquals("", string0);
      
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "SpiNaU{[ul0[";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(" = '' AND  = '' AND  = '' AND  = '' AND  = '' AND SpiNaU{[ul0[ = 'SpiNaU{[ul0[' AND  = '' AND  = '' AND  = ''", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "inner";
      stringArray0[1] = "updatehi<zb{\"oocpy4i0F}";
      stringArray0[2] = "create table";
      stringArray0[2] = "NCLOB";
      stringArray0[7] = "selectdrop index|m'r>";
      stringArray0[8] = "updatehi<zb{\"oocpy4i0F}";
      String string0 = SQLUtil.join("inner", "updatehi<zb{\"oocpy4i0F}", stringArray0, (String) null, "@6", stringArray0);
      assertEquals("null as @6 on updatehi<zb{\"oocpy4i0F}.inner = @6.inner and updatehi<zb{\"oocpy4i0F}.updatehi<zb{\"oocpy4i0F} = @6.updatehi<zb{\"oocpy4i0F} and updatehi<zb{\"oocpy4i0F}.NCLOB = @6.NCLOB and updatehi<zb{\"oocpy4i0F}.null = @6.null and updatehi<zb{\"oocpy4i0F}.null = @6.null and updatehi<zb{\"oocpy4i0F}.null = @6.null and updatehi<zb{\"oocpy4i0F}.null = @6.null and updatehi<zb{\"oocpy4i0F}.selectdrop index|m'r> = @6.selectdrop index|m'r> and updatehi<zb{\"oocpy4i0F}.updatehi<zb{\"oocpy4i0F} = @6.updatehi<zb{\"oocpy4i0F}", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(inner, updatehi<zb{\"oocpy4i0F}, NCLOB, , , , , selectdrop index|m'r>, updatehi<zb{\"oocpy4i0F})", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("b-tree leaf ", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(1707, "Wb'{vC\"*o");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create table", false, stringArray0);
      SQLUtil.removeComments("NCLOB");
      String string2 = SQLUtil.renderColumnListWithTableName("create table", stringArray0);
      assertEquals("create table.inner, create table.updatehi<zb{\"oocpy4i0F}, create table.NCLOB, create table.null, create table.null, create table.null, create table.null, create table.selectdrop index|m'r>, create table.updatehi<zb{\"oocpy4i0F}", string2);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      String string3 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null WB'{VC\"*O NULL", string3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2218, "kWO^");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = new Integer(802);
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer4, integer4);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("delete", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NOT NULL", false, defaultDBTable0, " NOT NULL");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" NOT NULL\" CHECK  NOT NULL", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals("., .", string0);
      
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("update", compositeDBObject0);
      tableContainer0.getSchema();
      DBTrigger dBTrigger0 = new DBTrigger("", (DBSchema) null);
      String string1 = SQLUtil.ownerDotComponent(dBTrigger0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "CuW U/zn3";
      stringArray0[1] = "Y*e";
      stringArray0[2] = ",gC%1ew";
      stringArray0[3] = "07J{g";
      stringArray0[4] = "Y*e";
      SQLUtil.renderColumnListWithTableName("Y*e", stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = ",gC%1ew";
      stringArray1[1] = "Y*e";
      stringArray1[2] = "op_prepare2 ";
      stringArray1[3] = ",7#IB";
      stringArray1[4] = "Y*e.CuW U/zn3, Y*e.Y*e, Y*e.,gC%1ew, Y*e.07J{g, Y*e.Y*e";
      stringArray1[5] = "Y*e.CuW U/zn3, Y*e.Y*e, Y*e.,gC%1ew, Y*e.07J{g, Y*e.Y*e";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("92vjvtc1|");
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "DESCRIPTOR";
      stringArray0[2] = "92vjvtc1|";
      stringArray0[3] = "92vjvtc1|";
      stringArray0[4] = "92vjvtc1|";
      stringArray0[5] = "DESCRIPTOR";
      stringArray0[6] = "92vjvtc1|";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType dBDataType0 = DBDataType.getInstance(4668, "DESCRIPTOR");
      JdbcConnectionPool.create("92vjvtc1|", "DESCRIPTOR", stringArray0[0]);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.typeAndName(dBForeignKeyConstraint0);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".tmp", defaultDBTable0, dBDataType0, (Integer) null, integer2);
      StringBuilder stringBuilder0 = new StringBuilder("~J=T");
      StringBuilder stringBuilder1 = stringBuilder0.append("RZG\"IK7Kk");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("~J=TRZG\"IK7KkDESCRIPTOR", stringBuilder1.toString());
      assertEquals("~J=TRZG\"IK7KkDESCRIPTOR", stringBuilder0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.h2.store.fs.FileSystemDiskNioMapped", (DBTable) null, (DBDataType) null);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DBDataType dBDataType0 = DBDataType.getInstance((-1960), "l0ZDlq");
      Integer integer0 = new Integer((-396));
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("org.h2.store.fs.FileSystemDiskNioMapped", (DBTable) null, dBDataType0, integer0, integer1);
      columnDescriptorList0.add((Object) defaultDBColumn1);
      columnDescriptorList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
      assertEquals("org.h2.store.fs.FileSystemDiskNioMapped, org.h2.store.fs.FileSystemDiskNioMapped", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter indexr8sx");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "alter indexr8sx";
      stringArray0[1] = "alter indexr8sx";
      stringArray0[2] = "alter indexr8sx";
      stringArray0[3] = "alter indexr8sx";
      String string0 = SQLUtil.join("alter indexr8sx", "alter indexr8sx", stringArray0, "Ncy|T8[fg<dCZZA", "LONLJOIN", stringArray0);
      assertEquals("alter indexr8sx join Ncy|T8[fg<dCZZA as LONLJOIN on alter indexr8sx.alter indexr8sx = LONLJOIN.alter indexr8sx and alter indexr8sx.alter indexr8sx = LONLJOIN.alter indexr8sx and alter indexr8sx.alter indexr8sx = LONLJOIN.alter indexr8sx and alter indexr8sx.alter indexr8sx = LONLJOIN.alter indexr8sx", string0);
      
      VersionNumber.valueOf("v+q!");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("HN9!L6s*/BK-", "alter indexr8sx", versionNumber0);
      String string1 = SQLUtil.typeAndName(defaultDatabase0);
      assertEquals("database HN9!L6s*/BK-", string1);
      assertNotNull(string1);
      
      String string2 = SQLUtil.normalize("database HN9!L6s*/BK-", true);
      assertEquals("database HN9 ! L6s */  BK -", string2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = SQLUtil.isQuery("*=fo o?~&$(");
      boolean boolean1 = SQLUtil.isQuery("select into");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderValue(defaultDBTable0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      MockFile.createTempFile("insert", "T9CTw_G-jLk");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("H[Y1G4E.@Q]N  Q&5");
      assertFalse(defaultDBTable1.equals((Object)defaultDBTable0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("42X51");
      DBDataType dBDataType0 = DBDataType.getInstance((-673), "create materialized viewcase");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("--", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
      
      boolean boolean0 = SQLUtil.isQuery("--");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("deletecan't cancel an invalid eventhandle");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLUtil.normalize("1>SZ)y&", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFile.createTempFile("drop materialized view", "rH p_1$|AZs2 *");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rH p_1$|AZs2 *");
      jdbcClob jdbcClob0 = new jdbcClob("rH p_1$|AZs2 *");
      StringReader stringReader0 = new StringReader("rH p_1$|AZs2 *");
      DataStore dataStore0 = new DataStore("delete*#z#i");
      VirtualFile virtualFile0 = new VirtualFile("delete*#z#i", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "delete*#z#i";
      PrintWriter printWriter0 = mockPrintWriter0.printf("rH p_1$|AZs2 *", objectArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rH p_1$|AZs2 *";
      stringArray0[1] = "drop materialized view";
      stringArray0[2] = "ZF<+Upb $qS3X7h#60b";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ZF<+Upb $qS3X7h#60b", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DBDataType.getInstance((-694), "-`");
      Integer integer0 = new Integer(2799);
      Integer integer1 = RawTransaction.ABORT;
      SQLUtil.normalize("-`", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "- `";
      stringArray0[1] = "-`";
      stringArray0[2] = "- `";
      stringArray0[3] = "create unique indexzmx{}am";
      Integer integer2 = RawTransaction.COMMIT;
      String[] stringArray1 = new String[3];
      stringArray1[0] = "create unique indexzmx{}am";
      stringArray1[1] = "create unique indexzmx{}am";
      stringArray1[2] = "U|";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("- `", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("\u0001w", "create unique indexzmx{}am", "-`");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O2vjv4c1|");
      DBDataType dBDataType0 = DBDataType.getInstance((-945), " zMX{}aM");
      Integer integer0 = new Integer((-3270));
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = new Integer((-183673425));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("nclob", defaultDBTable0, dBDataType0, integer1, integer2);
      File file0 = MockFile.createTempFile("alter indexk_+cq?3", "DESCRIPTOR");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("alter indexk_+cq?3");
      Integer integer3 = new Integer((-945));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop materialized viewinner", defaultDBTable0, dBDataType0, integer0, integer3);
      File file1 = MockFile.createTempFile("drop materialized viewinner", "null = null and null = n");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(file1);
      mockPrintWriter0.append((CharSequence) " zMX{}aM");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      assertEquals("O2vjv4c1|", defaultDBTable0.getName());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("22007", "22007", (String[]) null, "22007", "FOREIGN KEY ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("9\"H'N.4F(c");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9\"H'N.4F(c", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "XSLA0.D", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("exec");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFile.createTempFile("drop materialized view", "rH p_1$|AZs2 *");
      String[] stringArray0 = new String[3];
      DBDataType.getInstance(1344, "CASE");
      Integer integer0 = new Integer(1213);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rH p_1$|AZs2 *");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "3k0", true, stringArray0);
      Integer.valueOf(1344);
      Integer integer2 = RawTransaction.COMMIT;
      SQLUtil.isProcedureCall("exec");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "%#)vwi(&", "select");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Boolean.valueOf("AAHJy_y-YWv[Di_?");
      String string0 = SQLUtil.normalize("AAHJy_y-YWv[Di_?", true);
      assertEquals("AAHJy_y - YWv [ Di_ ?", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Object object0 = new Object();
      columnDescriptorList0.add(object0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("deletecallo,m*87mq^~x", true);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertNull(defaultDBTable1.getName());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("'>}1qg[ez@A,.'>m~a", compositeDBObject0);
      TableContainer tableContainer1 = new TableContainer("V]zzle[;p6]");
      tableContainer1.getTable(";x_|:|JTaf$ZFOP3");
      String[] stringArray0 = new String[0];
      SQLUtil.join("{!rvdT0>2/__[2YVY+", "Ox{", stringArray0, ";x_|:|JTaf$ZFOP3", "V]zzle[;p6]", stringArray0);
      MockFile mockFile0 = new MockFile("No JNI library was found in the path.", "*w/WE})/dE");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.printf("qXxP{L.JL`y", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("ra|N", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      File file0 = MockFile.createTempFile(" NULL", "org.apache.derby.impl.sql.compile.DistinctNode");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append((CharSequence) "org.apache.derby.impl.sql.compile.DistinctNode");
      SQLUtil.isProcedureCall("0ADlbN=)L");
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "org.apache.derby.impl.sql.compile.DistinctNode";
      stringArray0[4] = "org.apache.derby.impl.sql.compile.DistinctNode";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "update", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("8V^]Ub w", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(dBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLUtil.isDDL("(Hhk2WZ\"9XNtdxH;d");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter indexk_+cq?3");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("(Hhk2WZ\"9XNtdxH;d", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("(Hhk2WZ\"9XNtdxH;d");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      stringBuilder0.append((-1220));
      SQLUtil.addOptionalCondition("Illegal column type format: ", stringBuilder1);
      File file0 = MockFile.createTempFile("Illegal column type format: ", "]t~6CwIJ,6C&3_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append((CharSequence) "Illegal column type format: ");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("org.apache.derby.impl.sql.compile.DistinctNode", "9<]I%<P'BPI{%");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 9<]I%<P'BPI{%
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session}");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[7] = null;
      stringArray0[7] = null;
      stringArray0[8] = "'";
      SQLUtil.leftJoin((String) null, stringArray0, (String) null, "MdEr?n", stringArray0);
      String string0 = "select";
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(stringArray0[3], compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select", (DBSchema) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[0], false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.typeAndName((DBObject) null);
      SQLUtil.typeAndName(dBForeignKeyConstraint0);
      boolean boolean0 = true;
      NameSpec nameSpec0 = NameSpec.NEVER;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-52678991));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("executi", false, "executi", "executi");
      String string0 = "~k";
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) "~k");
      int int0 = 11;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(11, 'P');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(21, "+");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      MockFile mockFile0 = new MockFile("+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertTrue(defaultDBTable1.equals((Object)defaultDBTable0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "EcNp}txD&!`J";
      // Undeclared exception!
      try { 
        SQLUtil.join("EcNp}txD&!`J", "create unique index", stringArray1, "", "select intodefault", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(32, "selecttimetm0p");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selecttimetm0p");
      String string0 = "executealer tabletruncate42x96";
      String[] stringArray0 = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "executealer tabletruncate42x96", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("+", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer0 = new Integer((-106283310));
      Integer integer1 = new Integer(32);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selecttimetm0p", dBTable0, dBDataType0, integer0, integer1);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "/wQ_94";
      stringArray1[1] = "selecttimetm0p";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("+", (String[]) null, "/wQ_94", "alrer t", stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[35];
      StringBuilder stringBuilder0 = new StringBuilder("create unique index");
      MockFile mockFile0 = new MockFile("create unique index");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "create unique index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "update9\"h'n.4f(c", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter table", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, printWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertTrue(defaultDBTable1.equals((Object)defaultDBTable0));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLUtil.normalize("(Hhfk2WZ\"9.NtdxHud", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertNull(defaultDBTable1.getDoc());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = SQLUtil.normalize("9j\"H'N.F(c", true);
      assertEquals("9j \"H'N.F(c\"", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(40, "+");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      StringBuilder stringBuilder0 = new StringBuilder("+");
      StringBuilder stringBuilder1 = stringBuilder0.append(" AND ");
      StringBuilder stringBuilder2 = stringBuilder1.append(true);
      stringBuilder2.append((long) 40);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("+ AND true40+(1)", stringBuilder1.toString());
      assertEquals("+ AND true40+(1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLUtil.removeComments("select into");
      SQLUtil.renderValue("select into");
      System.setCurrentTimeMillis((-2880L));
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2284), (CharSequence) "select into", (-2284), 773);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -2284
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(90048, "hgz`*Sj\"0JHz");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("hgz`*Sj\"0JHz", defaultDBTable0, dBDataType0, integer0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("alter tabledeletecallo,m*87mq^~x");
      StringBuilder stringBuilder1 = stringBuilder0.append("select intodescriptor");
      StringBuilder stringBuilder2 = stringBuilder1.append((long) 90048);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder2);
      assertEquals("alter tabledeletecallo,m*87mq^~xselect intodescriptor90048HGZ`*SJ\"0JHZ(3,3)", stringBuilder2.toString());
      assertEquals("alter tabledeletecallo,m*87mq^~xselect intodescriptor90048HGZ`*SJ\"0JHZ(3,3)", stringBuilder0.toString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("selecttimestamp");
      StringReader stringReader0 = new StringReader("selecttimestamp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}4zKZ'U0B";
      stringArray0[1] = "}4zKZ'U0B";
      stringArray0[2] = "}4zKZ'U0B";
      String string0 = SQLUtil.renderColumnListWithTableName("}4zKZ'U0B", stringArray0);
      assertEquals("}4zKZ'U0B.}4zKZ'U0B, }4zKZ'U0B.}4zKZ'U0B, }4zKZ'U0B.}4zKZ'U0B", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance((-3311), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}4zKZ'U0B", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Bq{>d");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2950, ",e~?q82pa$");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index,e~?q82pa$_x(q", defaultDBTable1, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(",E~?Q82PA$(0,0)", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("execexecuting", (DBCatalog) null);
      DBTrigger dBTrigger0 = new DBTrigger("execexecuting", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBTrigger0);
      assertEquals("execexecuting.execexecuting", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("9j\"H'N.F(c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 9j\"H'N.F(c
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("d-,gI(]k`)?2f+$n|L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]k`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "executi";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alRer tabletruncate42x96", false, "executi", "executi");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFile.createTempFile("drop materialized view", "rH p_1$|AZsS2 *");
      String[] stringArray0 = new String[3];
      DBDataType.getInstance(1344, "CASE");
      Integer integer0 = new Integer(1213);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rH p_1$|AZsS2 *");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "3k0", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBUniqueConstraint0);
      SQLUtil.renderValue("CASE");
      File file0 = MockFile.createTempFile("create unique index(hhk2wz\"9xntdxh;d", "select into");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "drop materialized view");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("=", "SELECT * FROM ", "=");
      assertEquals("=", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("SELECT proname,oid FROM pg_proc WHERE ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create table");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[29];
      String[] stringArray1 = new String[7];
      stringArray1[0] = "{hD53y";
      stringArray1[1] = "{hD53y";
      stringArray1[2] = "TriggerOldTransitionRows";
      stringArray1[3] = "TriggerOldTransitionRows";
      stringArray1[4] = "{hD53y";
      stringArray1[5] = "{hD53y";
      stringArray1[6] = "{hD53y";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("{hD53y", stringArray0, "TriggerOldTransitionRows", "TriggerOldTransitionRows", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "create unique indexw";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create unique indexw";
      // Undeclared exception!
      try { 
        SQLUtil.join("create unique indexw", "create unique indexw", stringArray0, "create unique indexw", "create unique indexw", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter materialized viewk>%b";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "alter materialized viewk>%b";
      stringArray1[1] = "alter materialized viewk>%b";
      stringArray1[2] = "alter materialized viewk>%b";
      String string0 = SQLUtil.leftJoin("alter materialized viewk>%b", stringArray0, "42621", "alter materialized viewk>%b", stringArray1);
      assertEquals("left join 42621 as alter materialized viewk>%b on alter materialized viewk>%b.alter materialized viewk>%b = alter materialized viewk>%b.alter materialized viewk>%b", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = SQLUtil.normalize("Can't find a clasloader for the Driver; not loading driver confguration", false);
      assertEquals("Can 't find a clasloader for the Driver; not loading driver confguration'", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) "");
      int int0 = 773;
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = 'Y';
      charArray0[2] = 't';
      charArray0[3] = '$';
      charArray0[4] = ')';
      char char0 = '<';
      charArray0[5] = '<';
      int int1 = 48;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(773, charArray0, 48, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 773
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "selecttimestamp");
      SQLUtil.addRequiredCondition("selecttimestamp", stringBuilder0);
      assertEquals("selecttimestamp and selecttimestamp", stringBuilder0.toString());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("93`9+%y>A^QEMH", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R6as!4*K";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\u0001\u015E", false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType.getInstance(4668, "\u0001\u015E");
      JdbcConnectionPool.create((String) null, (String) null, (String) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertNull(defaultDBTable1.getName());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selectexecuting");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.9389355707834581
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      String string0 = SQLUtil.normalize("o+!wnl89?I/2%?COu", false);
      assertEquals("o + ! wnl89 ? I / 2 % ? COu", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "o+!wnl89?I/2%?COu", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("c(SJI", false, (String) null, "isDesktopSupported");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK isDesktopSupported", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("~k", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Character character0 = Character.valueOf('d');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'d'", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "WvsNr%";
      stringArray0[1] = "WvsNr%";
      stringArray0[2] = "WvsNr%";
      stringArray0[3] = "WvsNr%";
      stringArray0[4] = "WvsNr%";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "WvsNr%";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[25];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DBDataType dBDataType0 = DBDataType.getInstance(42, "alter materialized view");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized view", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "BLOB";
      stringArray0[1] = " WHERE ";
      stringArray0[2] = " WHERE ";
      stringArray0[3] = " WHERE ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " WHERE ", false, stringArray0);
      dBPrimaryKeyConstraint0.setName("1>#E`6TY?4jjB");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (BLOB,  WHERE ,  WHERE ,  WHERE )", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join((String) null, "9\"H'IN.4F(c", stringArray0, "CHAR_OCTET_LENGTH", "CHAR_OCTET_LENGTH", stringArray0);
      assertEquals("CHAR_OCTET_LENGTH as CHAR_OCTET_LENGTH on ", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance(71, "4_+cqX3");
      String string0 = null;
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      dBForeignKeyConstraint0.equals((Object) null);
      StringBuilder stringBuilder0 = new StringBuilder("inner");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      stringBuilder0.append(71);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-537356803), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -537356803
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.487566749366001
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[16];
      String string0 = SQLUtil.join("selecttimetmp", "create unique index", stringArray0, "create unique index", "create unique index", stringArray0);
      assertEquals("selecttimetmp join create unique index as create unique index on create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selecttimetmp join create unique index as create unique index on create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null and create unique index.null = create unique index.null");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique index", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create unique index\" PRIMARY KEY (, , , , , , , , , , , , , , , )", string1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "NCLOB";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("7");
      SQLUtil.addOptionalCondition("7", stringBuilder0);
      assertEquals("7 or 7", stringBuilder0.toString());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("E-");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM E- WHERE ", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("Tl3%", (String[]) null, "Tl3%", "Tl3%", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "j^9yj(";
      String string1 = "";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("PLe/@n'q>!$[l{,y");
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      StringBuilder stringBuilder2 = stringBuilder1.append(0L);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean.valueOf((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (DBDataType) null, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("drop index", stringArray0, "drop index", "drop index", stringArray0);
      assertEquals("drop index as drop index on ", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("alter index&9kd0$:");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLUtil.normalize("", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = SQLUtil.normalize("QsO].D", false);
      assertEquals("QsO ].D", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SQLUtil.renderValue(integer0);
      assertEquals("2", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[25];
      String string0 = SQLUtil.join("mkla/+j7]j]<jr", "F;^uRpZo", stringArray0, "mkla/+j7]j]<jr", "F;^uRpZo", stringArray0);
      assertEquals("mkla/+j7]j]<jr join mkla/+j7]j]<jr as F;^uRpZo on F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null and F;^uRpZo.null = F;^uRpZo.null", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[17];
      String string0 = SQLUtil.join(" NOT", " NOT", stringArray0, "RCNBE<", " NOT", stringArray0);
      assertEquals(" NOT join RCNBE< as  NOT on  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null and  NOT.null =  NOT.null", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("alter index", "alter index", stringArray0, "AtY{T(bPS_.=gJbQ^", "AtY{T(bPS_.=gJbQ^", stringArray0);
      assertEquals("alter index join AtY{T(bPS_.=gJbQ^ as AtY{T(bPS_.=gJbQ^ on ", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("mL_/AA@@2W2!", "insert", stringArray0, "mL_/AA@@2W2!", "mL_/AA@@2W2!", stringArray0);
      assertEquals("mL_/AA@@2W2! join mL_/AA@@2W2! as mL_/AA@@2W2! on insert.null = mL_/AA@@2W2!.null", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.leftJoin("42Z21", stringArray0, "O_", "80000000-00d1-15fc-60b9-000a0a0b1500", stringArray0);
      assertEquals("left join O_ as 80000000-00d1-15fc-60b9-000a0a0b1500 on 42Z21.null = 80000000-00d1-15fc-60b9-000a0a0b1500.null", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", true, "rename", "rename");
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append(')');
      StringBuilder stringBuilder3 = stringBuilder2.append((StringBuffer) null);
      StringBuilder stringBuilder4 = stringBuilder3.append("(qgE3");
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      // Undeclared exception!
      try { 
        stringBuilder4.append(charArray0, (-491353270), 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("executi", false, "executi", "executi");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("executi", true, "uU\"(,Ble", "executi");
      String string0 = "zvq40+K'5|FcCI<f";
      StringBuilder stringBuilder0 = new StringBuilder("zvq40+K'5|FcCI<f");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      char[] charArray0 = new char[14];
      charArray0[0] = '4';
      int int0 = 10;
      // Undeclared exception!
      try { 
        stringBuilder1.append(charArray0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.945928577776465
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = SQLUtil.normalize(";=a=c*yxbr$", true);
      assertEquals("; = a = c * yxbr $", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("; = a = c * yxbr $");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "DROP STATISTICS FOR ";
      stringArray0[1] = ";=a=c*yxbr$";
      stringArray0[2] = ";=a=c*yxbr$";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(";=a=c*yxbr$", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (DROP STATISTICS FOR , ;=a=c*yxbr$, ;=a=c*yxbr$) REFERENCES ; = a = c * yxbr $(DROP STATISTICS FOR , ;=a=c*yxbr$, ;=a=c*yxbr$)", string1);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.8180921139553184
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      SQLUtil.normalize("o+!wnlH9G?I/2%?COu", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("t}L3-GA0:>B>");
      DBDataType dBDataType0 = DBDataType.getInstance((-183), "alter materialized view");
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NOT", defaultDBTable0, dBDataType0, integer1);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter tabletruncate42x96");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure(";");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("g`2xg^q_;n");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(Hhfk2WZ\"9XNtdxH;d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (Hhfk2WZ\"9XNtdxH;d
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
