/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 13:16:02 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(63);
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.setIdentifier("&");
      stringWriter0.write("&");
      JavaParser javaParser0 = new JavaParser((Reader) null);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "9");
      simpleNode0.setIdentifier("\"class\"");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) ">=");
      StringWriter stringWriter3 = new StringWriter();
      stringWriter3.append((CharSequence) ">=");
      StringWriter stringWriter4 = stringWriter0.append('S');
      stringWriter2.write(1);
      simpleNode0.dump("ReturnStatement", stringWriter4);
      assertEquals("&9>=S\u0001<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter4.toString());
      assertEquals("&9>=S\u0001<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(3073);
      simpleNode0.setIdentifier("FormalParameters");
      stringWriter0.write("5Q7b");
      JavaParser javaParser0 = new JavaParser((Reader) null);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "<");
      simpleNode0.setIdentifier("&&");
      stringWriter1.append((CharSequence) "FormalParameters");
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = stringWriter1.append((CharSequence) null);
      StringWriter stringWriter4 = stringWriter3.append('$');
      stringWriter0.write((-319));
      simpleNode0.dump("x`BD@ G[r", stringWriter4);
      assertEquals("5Q7b<FormalParametersnull$\uFEC1<CompilationUnit>\n  <identifier>FormalParameters</identifier>\n  <identifier>*amp</identifier>\n</CompilationUnit>\n", stringWriter4.toString());
      assertEquals("5Q7b<FormalParametersnull$\uFEC1<CompilationUnit>\n  <identifier>FormalParameters</identifier>\n  <identifier>*amp</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0287375017310743
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.setIdentifier("{");
      simpleNode0.dump("{", stringWriter0);
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      // Undeclared exception!
      try { 
        jJTJavaParserState0.popNode();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      simpleNode0.setIdentifier("}");
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      simpleNode0.dump("}", stringWriter0);
      assertEquals("<EnumBody>\n</EnumBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1923814837758717
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.jjtAddChild(simpleNode0, 30);
      simpleNode0.setIdentifier(";");
      stringWriter0.append((CharSequence) "ForUpdate");
      stringWriter0.append((CharSequence) ";");
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-273), 119);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringWriter stringWriter1 = new StringWriter(30);
      stringWriter0.append((CharSequence) ";");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      simpleNode0.dump("ForUpdate", stringWriter0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node node0 = simpleNode0.parent;
      Node node1 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.jjtAddChild((Node) null, 10);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.setIdentifier("&");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "&");
      StringWriter stringWriter3 = stringWriter2.append('q');
      StringWriter stringWriter4 = new StringWriter();
      stringWriter4.append((CharSequence) "}");
      stringWriter0.append((CharSequence) "&");
      stringWriter1.append((CharSequence) "&");
      StringWriter stringWriter5 = stringWriter3.append((CharSequence) "}");
      stringWriter5.append('p');
      stringWriter3.write(718);
      simpleNode0.dump("}", stringWriter2);
      assertEquals(11, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.setIdentifier(">=");
      stringWriter0.write("<<");
      JavaParser javaParser0 = new JavaParser((Reader) null);
      simpleNode0.parser = javaParser0;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ">=");
      simpleNode0.setIdentifier("<<");
      stringWriter0.append((CharSequence) "<<");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.append((CharSequence) ">=");
      stringWriter1.append('%');
      stringWriter1.write(10);
      simpleNode0.dump(">=", stringWriter2);
      StringReader stringReader0 = new StringReader("return");
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(119);
      simpleNode0.jjtAddChild((Node) null, 30);
      simpleNode0.setIdentifier("");
      stringWriter0.append((CharSequence) "ForUpdate");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-273), 119);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      simpleNode0.parser = javaParser0;
      StringWriter stringWriter2 = new StringWriter(30);
      stringWriter0.append((CharSequence) "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringWriter1.write(119);
      simpleNode0.dump("ForUpdate", stringWriter0);
      assertEquals(31, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4971098265895954
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      StringWriter stringWriter0 = new StringWriter(119);
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter1 = new StringWriter(1405);
      simpleNode0.jjtAddChild(simpleNode0, 119);
      stringWriter1.write("r");
      // Undeclared exception!
      simpleNode0.dump("", stringWriter1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(3);
      simpleNode0.setIdentifier(">>");
      StringBuffer stringBuffer0 = new StringBuffer(",B@Mo,NxU~e8");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.write((-1103100070));
      simpleNode0.dump(">>", stringWriter1);
      assertEquals("\u075A<EnumConstant>\n  <identifier>*rshft</identifier>\n</EnumConstant>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      SimpleNode simpleNode0 = new SimpleNode((-1450613952));
      SimpleNode simpleNode1 = new SimpleNode(1);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      SimpleNode simpleNode2 = new SimpleNode(0);
      simpleNode1.setIdentifier("<=");
      StringReader stringReader0 = new StringReader("bOxLe-EnRjc");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "<=");
      stringWriter1.write("bOxLe-EnRjc");
      simpleNode1.jjtAddChild(simpleNode0, 1);
      stringWriter1.append((CharSequence) ">");
      StringWriter stringWriter2 = stringWriter0.append('\'');
      stringWriter1.write(28);
      simpleNode2.dump("bOxLe-EnRjc", stringWriter2);
      assertEquals("<=bOxLe-EnRjc>'\u001C", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.identifiers = null;
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(55);
      String string0 = ">=";
      // Undeclared exception!
      try { 
        simpleNode0.setIdentifier(">=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.014784547108511
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(5701);
      SimpleNode simpleNode1 = new SimpleNode(1813);
      simpleNode0.jjtAddChild(simpleNode1, 8);
      SimpleNode simpleNode2 = new SimpleNode(8);
      simpleNode2.setIdentifier("<=");
      String string0 = "{9x{(Ki<wOMg";
      simpleNode2.dump("{9x{(Ki<wOMg", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode2.jjtAddChild(simpleNode0, (-1679));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      int int0 = 92;
      SimpleNode simpleNode0 = new SimpleNode(2997);
      SimpleNode simpleNode1 = new SimpleNode(92);
      simpleNode1.jjtAddChild(simpleNode0, 10);
      simpleNode1.setIdentifier("$){\"C]w6Y2j:Z$T7Zf#");
      String string0 = ":rOc&&,!%qk";
      Node node0 = simpleNode1.jjtGetChild(10);
      simpleNode0.jjtSetParent(node0);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-711));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      SimpleNode simpleNode1 = new SimpleNode(10);
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.jjtAddChild(simpleNode1, 1999);
      stringWriter0.write("/");
      simpleNode0.dump("iW43WH6IVb", stringWriter0);
      assertEquals(2000, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.id = (-540);
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.jjtAddChild(simpleNode0, 10);
      String string0 = "-R(iqeumOP`'*xkO<";
      simpleNode0.jjtAddChild(simpleNode0, 10);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(3142);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.jjtAddChild((Node) null, 3142);
      assertEquals(3143, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-3002));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Node[] nodeArray0 = new Node[1];
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.dump("?u{=SA3uItka", (Writer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1484);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      simpleNode0.parent = nodeArray0[6];
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetNumChildren();
      int int0 = 120;
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(120);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(106);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("B@");
      // Undeclared exception!
      try { 
        simpleNode0.dump("B@", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.83823771269426
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.setIdentifier(">=");
      stringWriter0.write("9");
      JavaParser javaParser0 = new JavaParser((Reader) null);
      simpleNode0.parser = javaParser0;
      stringWriter0.append((CharSequence) ">=");
      simpleNode0.setIdentifier("9");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "9");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.append((CharSequence) ">=");
      stringWriter2.append('S');
      stringWriter0.write(66);
      simpleNode0.dump(">=", stringWriter2);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString();
      simpleNode0.toString();
      simpleNode0.jjtAddChild((Node) null, 10);
      assertEquals(11, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.8249506629220404
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.setIdentifier(">=");
      stringWriter0.write("<");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ">=");
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) charBuffer0);
      stringWriter2.append('%');
      stringWriter1.write((-3763));
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump(">=", stringWriter3);
      assertEquals("<EnumConstant>\n  <identifier>*ge</identifier>\n</EnumConstant>\n", stringWriter3.toString());
      
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2300);
      // Undeclared exception!
      try { 
        simpleNode0.toString(">_:?i06*-l}(");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2300
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.002663334987299
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(3);
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.setIdentifier(">");
      StringBuffer stringBuffer0 = new StringBuffer(">");
      StringWriter stringWriter1 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringWriter1.write(3);
      simpleNode0.dump("*lt", stringWriter0);
      assertEquals("<Modifiers>\n  <identifier>*gt</identifier>\n</Modifiers>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString(">");
      assertEquals(">Modifiers : >", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(138);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("B@");
      // Undeclared exception!
      try { 
        simpleNode0.dump("+iB_M6v#Gjlb32t9", (Writer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1484);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      simpleNode0.parent = nodeArray0[6];
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetNumChildren();
      int int0 = 120;
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 120
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(64);
      simpleNode0.jjtAddChild(simpleNode0, 64);
      SimpleNode simpleNode1 = (SimpleNode)simpleNode0.jjtGetChild(64);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) simpleNode0;
      JavaParser javaParser0 = new JavaParser("dzkaf50f");
      simpleNode1.parser = javaParser0;
      nodeArray0[1] = (Node) simpleNode1;
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      // Undeclared exception!
      try { 
        jJTJavaParserState0.popNode();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(3142);
      simpleNode0.jjtAddChild((Node) null, 0);
      stringWriter0.write("/");
      simpleNode0.toString();
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetChild(0);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0954485469884303
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(3);
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.setIdentifier(">");
      StringBuffer stringBuffer0 = new StringBuffer(">");
      StringWriter stringWriter1 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringWriter1.write(3);
      simpleNode0.dump("*lt", stringWriter0);
      JavaParser javaParser0 = new JavaParser("*lt");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 3);
      simpleNode1.jjtSetParent(simpleNode0);
      simpleNode1.dump("*lt", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode1.jjtAddChild((Node) null, (-1432583002));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      SimpleNode simpleNode0 = new SimpleNode((-1));
      simpleNode0.jjtClose();
      String string0 = ":rOc&&,!%qk";
      StringWriter stringWriter1 = new StringWriter(1);
      stringWriter1.write(":rOc&&,!%qk");
      stringWriter0.append((CharSequence) ":rOc&&,!%qk");
      StringWriter stringWriter2 = new StringWriter(1);
      stringWriter2.append((CharSequence) ":rOc&&,!%qk");
      String string1 = ":rOc&&,!%qk";
      StringWriter stringWriter3 = new StringWriter(92);
      stringWriter0.flush();
      // Undeclared exception!
      try { 
        stringWriter3.write(":rOc&&,!%qk", (-1106101594), 1754);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.002663334987299
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.setIdentifier("%=");
      simpleNode0.jjtSetParent((Node) null);
      stringWriter0.write("%=");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "%=");
      CharBuffer.allocate(4);
      StringWriter stringWriter2 = new StringWriter(10);
      stringWriter2.write(10);
      SystemInUtil.addInputLine("%=");
      stringWriter2.append('%');
      stringWriter1.write((-3763));
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump("%=", stringWriter3);
      assertEquals("<EnumConstant>\n  <identifier>%=</identifier>\n</EnumConstant>\n", stringWriter3.toString());
      
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(23);
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, 1883);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(92);
      SimpleNode simpleNode1 = new SimpleNode(11);
      simpleNode0.jjtAddChild(simpleNode1, 92);
      simpleNode0.jjtOpen();
      assertEquals(93, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1084);
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1084
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9686421518854049
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 10;
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.setIdentifier(">=");
      stringWriter0.write("<");
      JavaParser javaParser0 = new JavaParser((Reader) null);
      simpleNode0.parser = javaParser0;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ">=");
      simpleNode0.setIdentifier("<");
      stringWriter0.append((CharSequence) "<");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.append((CharSequence) ">=");
      stringWriter1.append('%');
      stringWriter1.write(10);
      simpleNode0.dump(">=", stringWriter2);
      StringReader stringReader0 = new StringReader("return");
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(122);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }
}
