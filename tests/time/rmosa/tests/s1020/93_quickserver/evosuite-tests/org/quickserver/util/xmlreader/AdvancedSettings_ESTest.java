/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 07:42:21 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("~^d+}05[hYp`Z{Y");
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setPerformancePreferencesBandwidth(829);
      advancedSettings0.setClientIdentifier("Zg.]i#&<:[Gm;");
      advancedSettings0.setClientIdentifier("Zg.]i#&<:[Gm;");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setBacklog(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setBacklog(829);
      advancedSettings0.setClientSocketTrafficClass("Zg.]i#&<:[Gm;");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTrafficClass("## o,uZ<");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesLatency(829);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals("Zg.]i#&<:[Gm;", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.681095545078155
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1729));
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize((-2850));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize((-1729));
      advancedSettings0.setCharset("");
      advancedSettings0.setBacklog((-2216));
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      boolean boolean0 = advancedSettings0.getDebugNonBlockingMode();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = 380;
      advancedSettings0.setPerformancePreferencesLatency((-2599));
      advancedSettings0.setMaxThreadsForNioWrite(380);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setByteBufferSize((-2599));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesConnectionTime(829);
      advancedSettings0.setByteBufferSize(829);
      advancedSettings0.setCharset("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setDebugNonBlockingMode(false);
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings0.setCharset("");
      advancedSettings1.setBacklog((-445));
      advancedSettings1.setClientSocketReceiveBufferSize(829);
      advancedSettings1.getDebugNonBlockingMode();
      advancedSettings0.getPerformancePreferencesLatency();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setPerformancePreferencesConnectionTime(380);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<performance-preferences-latency>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<performance-preferences-latency>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(12);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime(10);
      advancedSettings0.setCharset("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesBandwidth((-1523));
      int int0 = advancedSettings1.getClientSocketSendBufferSize();
      assertEquals((-1523), advancedSettings1.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesConnectionTime(2921);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize(1420);
      advancedSettings0.setClientSocketSendBufferSize(1420);
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      assertEquals((-1), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(11);
      String string0 = "-^}eU2hdKcER,WDKJ";
      advancedSettings0.setPerformancePreferencesBandwidth((-2821));
      advancedSettings0.setQSObjectPoolMaker("-^}eU2hdKcER,WDKJ");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesConnectionTime((-1516));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketSendBufferSize(11);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("-^}eU2hdKcER,WDKJ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // -^}eU2hdKcER,WDKJ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-668));
      advancedSettings0.setMaxThreadsForNioWrite((-668));
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-668), int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-4465));
      advancedSettings0.setPerformancePreferencesBandwidth((-944));
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getBacklog();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketSendBufferSize((-944));
      assertEquals((-944), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setCharset("");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("", string0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.587545949861811
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("p'\u0003{^rsozg(T.Z8q`");
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.toXML("p'\u0003{^rsozg(T.Z8q`");
      advancedSettings0.toXML((String) null);
      advancedSettings0.setSocketLinger(4396);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setQSObjectPoolMaker("ErBM=C%+tO");
      advancedSettings0.setClientIdentifier("^>=|^D6q8E ");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketSendBufferSize(1);
      assertEquals((-1), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(380);
      advancedSettings0.setMaxThreadsForNioWrite((-932));
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketReceiveBufferSize((-932));
      advancedSettings0.setByteBufferSize((-2113));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesConnectionTime((-2850));
      advancedSettings0.setByteBufferSize(19);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(380);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize(19);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize(495);
      boolean boolean0 = advancedSettings0.getDebugNonBlockingMode();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-2113));
      advancedSettings0.toXML("<vflS]Z9!U2;.7}t[");
      assertEquals((-2113), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("2");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 2
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketTrafficClass();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = 0;
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setByteBufferSize(891);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</performance-preferences-bandwidth>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </performance-preferences-bandwidth>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setSocketLinger(3099);
      advancedSettings0.setByteBufferSize(575);
      advancedSettings0.setBacklog(5720);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketSendBufferSize(228);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesConnectionTime(3099);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("gdA6`{(c,R~;c@>f");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // gdA6`{(c,R~;c@>f
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("~^d+}05[hYp`Z{Y");
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setClientIdentifier("vs!9j|4");
      advancedSettings0.setClientIdentifier("vs!9j|4");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setBacklog(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketTrafficClass("vs!9j|4");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTrafficClass("## o,uZ<");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesLatency(0);
      assertEquals("vs!9j|4", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientSocketTrafficClass();
      String string0 = advancedSettings0.getCharset();
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("ISO-8859-1", string0);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertFalse(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.585018356972772
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.toXML((String) null);
      advancedSettings0.setQSObjectPoolMaker("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>true</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesLatency((-3640));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("x");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setQSObjectPoolMaker("x");
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getCharset();
      advancedSettings0.getQSObjectPoolMaker();
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("7 e2moK|<b,|7");
      advancedSettings0.toXML("7 e2moK|<b,|7");
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(380);
      advancedSettings0.setMaxThreadsForNioWrite(380);
      advancedSettings0.getPerformancePreferencesLatency();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("7\fnr6~/v$L");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 7\fnr6~/v$L
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(2656);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(2656, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1));
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getCharset();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite(3357);
      advancedSettings0.setByteBufferSize((-994));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setSocketLinger(3357);
      advancedSettings0.setByteBufferSize((-994));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog(3357);
      advancedSettings0.setPerformancePreferencesConnectionTime(58);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setPerformancePreferencesLatency(58);
      advancedSettings0.setPerformancePreferencesLatency((-994));
      advancedSettings0.setMaxThreadsForNioWrite((-276));
      advancedSettings0.setMaxThreadsForNioWrite(10);
      advancedSettings0.setMaxThreadsForNioWrite(58);
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(58, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-4196));
      advancedSettings0.toXML("");
      assertEquals((-4196), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientIdentifier(" ");
      assertEquals(1, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset("");
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertTrue(boolean0);
      
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertNotNull(string0);
      
      int int0 = advancedSettings0.getBacklog();
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertNotNull(string0);
      
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, int0);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }
}
