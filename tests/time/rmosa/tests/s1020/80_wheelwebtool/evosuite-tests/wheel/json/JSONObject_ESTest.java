/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 07:27:17 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer((-42841071));
      String string0 = JSONObject.doubleToString((-42841071));
      assertEquals("-4.2841071E7", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("c", jSONArray0);
      Object object0 = JSONObject.NULL;
      JSONObject.getNames((Object) "c");
      jSONObject0.getJSONArray("c");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1817));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4999761779979989
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1253);
      jSONArray0.toString((-1253), (-1253));
      JSONArray jSONArray1 = jSONArray0.put(0L);
      int int1 = 2620;
      jSONArray1.put(2620, (-213.0));
      String string0 = "";
      jSONArray1.toString();
      String string1 = jSONArray1.join("");
      // Undeclared exception!
      jSONObject0.getInt(string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1025885973656075
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optLong("getgetChars", (-77L));
      Short short0 = new Short((short)1731);
      Short.toUnsignedLong((short)1731);
      JSONObject jSONObject1 = jSONObject0.putOpt("getgetChars", short0);
      jSONObject0.toString(1406);
      jSONObject0.optDouble("getgetChars", (-1.0));
      jSONObject1.optJSONArray("getgetChars");
      jSONObject1.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.101975225866936
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = new Integer((-2410));
      Integer.getInteger("M#0;|v9X");
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", 24);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Float float0 = new Float(0.0);
      linkedList0.add(float0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter0);
      Writer writer1 = jSONObject0.write(writer0);
      jSONObject0.write(writer1);
      jSONObject1.isNull("");
      JSONObject.numberToString(integer0);
      jSONObject0.put("M#0;|v9X", (double) (-2410));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.put("i trim", (Map) hashMap1);
      jSONObject1.put("i trim", (-169));
      double double0 = jSONObject0.getDouble("i trim");
      assertEquals((-169.0), double0, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.names();
      JSONObject jSONObject2 = jSONObject0.put("pa", (Map) hashMap0);
      String string0 = jSONObject2.optString("pa");
      assertNotNull(string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("0", jSONArray0);
      Object object0 = JSONObject.NULL;
      jSONObject0.put("mIm?rOepl0", (Object) jSONArray0);
      JSONArray jSONArray1 = jSONObject0.optJSONArray("mIm?rOepl0");
      assertEquals(0, jSONArray1.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6903681388493332
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("getmerge", "getremove");
      jSONObject1.toString(35, 35);
      jSONObject1.optBoolean("getmerge");
      jSONObject0.opt("getmerge");
      long long0 = jSONObject0.optLong("{\"java.lang.String@0000000002\": \"java.lang.String@0000000003\"}");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      hashMap0.put("-169.8762827.", (Boolean) null);
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put((Object) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      Long long0 = new Long(0L);
      Boolean boolean0 = Boolean.valueOf("spl");
      hashMap0.put(long0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put(",j$ IwH>^~p?4aB", 0L);
      int int0 = jSONObject1.optInt(",j$ IwH>^~p?4aB", 13);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("t3O|+9p.", 2185L);
      JSONObject.getNames(jSONObject0);
      String string0 = jSONObject1.optString("isN", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0983268013229894
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Short.compare((short)11, (short)13);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
      
      Byte byte0 = new Byte((byte)125);
      Integer.getInteger("", (int) (byte)125);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject1.put("in", (Object) byte0);
      jSONObject1.toString(45, (-327));
      double double0 = jSONObject0.optDouble("in");
      assertEquals(125.0, double0, 0.01);
      
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      Double double1 = new Double((short)13);
      jSONObject1.put("x6S", (Object) double1);
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      Object object0 = new Object();
      Boolean boolean0 = Boolean.valueOf("JSONArray[");
      JSONObject jSONObject1 = jSONObject0.put("{@=9~3uN&ECt`)p", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("{@=9~3uN&ECt`)p");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("^P~h:O.", "^P~h:O.");
      String string0 = jSONObject1.getString("^P~h:O.");
      assertNotNull(string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0978100054573563
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.optBoolean("");
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject0.getJSONObject("");
      jSONObject1.put("5+D~0", true);
      String string0 = jSONObject1.getString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Float float0 = new Float(2339.102131835114);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.add((Double) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("2", 65009L);
      jSONObject1.getLong("2");
      jSONObject1.keys();
      jSONObject1.keys();
      Short.compare((short) (-527), (short) (-527));
      jSONObject0.put("2", (Collection) null);
      JSONObject.valueToString("2");
      Byte byte0 = new Byte((byte) (-128));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("5u|Fy $B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 5u|Fy $B
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Object object0 = JSONObject.NULL;
      String string0 = "] is not a Boolean.";
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a Boolean.", object0);
      try { 
        jSONObject1.getBoolean("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("R", hashMap0);
      String string0 = jSONObject0.toString(1778, (-2490));
      assertNotNull(string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(10);
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("Missing value", hashMap0);
      jSONObject1.append("Missing value", jSONObject0);
      try { 
        jSONObject0.getJSONObject("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0978100054573563
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString();
      jSONObject0.isNull("fo");
      Boolean boolean1 = new Boolean(true);
      jSONObject0.append("H|QJX%&-U_R6.7e}DY", "fo");
      // Undeclared exception!
      jSONObject0.toString(2147483645);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-69));
      JSONObject.numberToString(byte0);
      String string0 = "";
      Boolean boolean0 = new Boolean("");
      Long long0 = new Long((byte)58);
      JSONObject jSONObject0 = new JSONObject(long0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt(" at character ", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Short.toUnsignedInt((short) (-1782));
      Double.sum((-809.0), (-1068.865962521));
      Boolean boolean0 = new Boolean("getreplaceFirst");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      long long0 = jSONObject0.optLong("Unclosed comment", (long) (short) (-1782));
      assertEquals((-1782L), long0);
      
      jSONObject0.optJSONArray("sp");
      jSONObject0.has("MP'W/t4");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(8, 8);
      String string0 = JSONObject.valueToString(hashMap0, 8, 8);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5919456220014427
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Float float0 = new Float(2339.102131835114);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}", (Object) float0);
      int int0 = (-327);
      jSONObject1.toString(32, 32);
      try { 
        jSONObject0.getLong("%]?'wF2ce#PP&dKeRD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%]?'wF2ce#PP&dKeRD\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5891783264039585
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Float float0 = new Float(2339.102131835114);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "' and instead saw '");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("' and instead saw '", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject.quote("A JSONArray text must start with '['");
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Object) "\"A JSONArray text must start with '['\"");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"A JSONArray text must start with '['\"";
      // Undeclared exception!
      jSONObject0.toString(3236, 3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      StringWriter stringWriter0 = new StringWriter(4820);
      Boolean.valueOf(false);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt((String) null);
      int int0 = jSONObject0.optInt("HPSL.", (-105355879));
      assertEquals((-105355879), int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1925396471456073
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("cl");
      JSONObject jSONObject1 = jSONObject0.accumulate("spl", boolean0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.put("it", (Object) jSONObject1);
      // Undeclared exception!
      jSONObject2.toString((-26705495), 87);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Short short0 = new Short((short) (-28352));
      Float float0 = new Float(0.0);
      Float.isFinite((short) (-28352));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "os[}m3*L1WK:7\\t\\";
      jSONObject0.putOpt("os[}m3*L1WK:7\t", "]QsPFi>/Y#]f-");
      try { 
        jSONObject0.getInt("os[}m3*L1WK:7\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"os[}m3*L1WK:7\\t\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2093.47);
      Float.isFinite(0.0F);
      JSONObject jSONObject1 = new JSONObject();
      Long long0 = new Long(0L);
      jSONObject1.putOpt("]QsPFi>/Y#]f-", long0);
      jSONObject1.getInt("]QsPFi>/Y#]f-");
      String string0 = "000";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("000", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("n4P %V");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.optJSONArray("Q|_");
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
      
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{@=9~3uN&ECt`)p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 15 of {@=9~3uN&ECt`)p
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{=9~3uNECt`)p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 1 of {=9~3uNECt`)p
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a Boolean.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.put("{}", false);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 2981, 2981);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter(87);
      jSONObject1.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
      
      JSONObject jSONObject2 = jSONObject1.put("min", (-1.0));
      double double1 = jSONObject2.optDouble("min");
      assertEquals((-1.0), double1, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Float float0 = new Float(2339.102131835114);
      JSONObject jSONObject0 = new JSONObject((Object) "zo");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Short short0 = new Short((short)4);
      Short short1 = new Short((short)12);
      Short.toUnsignedLong((short) (-527));
      Short.toUnsignedLong((short)12);
      Integer integer0 = new Integer((-4109));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("8#|", (long) (short)12);
      String string0 = jSONObject1.optString(" of ", "");
      assertEquals(2, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      Float.isFinite(0.0F);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject1.putOpt("]QsPFi>/Y#]f-", "]QsPFi>/Y#]f-");
      jSONObject3.getInt("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("]QsPFi>/Y#]f-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ]QsPFi>/Y#]f-
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject.getNames((Object) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-3197), (-3197));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.getJSONObject((-3197));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3197] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Short short0 = new Short((short)14);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.putOpt("9@[,qqosh1A@", "9@[,qqosh1A@");
      jSONObject0.get("9@[,qqosh1A@");
      jSONObject0.optString("9@[,qqosh1A@", "ydzYm4kUu'zZ.");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = "R";
      JSONObject jSONObject1 = jSONObject0.accumulate("R", jSONArray0);
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("R", jSONObject0);
      try { 
        jSONObject1.getBoolean("q%{+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q%{+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = 0L;
      Long long1 = new Long(0L);
      jSONObject0.putOpt("9@A,q4osh1AO", long1);
      Float float0 = new Float(0.0);
      jSONObject0.accumulate("9@A,q4osh1AO", float0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "9@A,q4osh1AO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Short short0 = new Short((short) (-557));
      Short.toUnsignedLong((short) (-557));
      Short short1 = new Short((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("", 64979L);
      jSONObject0.putOpt("9@[,qqosh1A@", short0);
      boolean boolean0 = jSONObject0.has("");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.093308880176036
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Short short0 = new Short((short) (-484));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.putOpt("9@[,qqosh1A@", short0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optLong("9@[,qqosh1A@");
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Function<Long, String> function0 = (Function<Long, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyLong());
      String string0 = hashMap0.computeIfAbsent((Long) null, function0);
      assertNull(string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.587973990795769
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "R";
      stringArray0[1] = "R";
      stringArray0[2] = "R";
      stringArray0[3] = "R";
      stringArray0[4] = "R";
      stringArray0[5] = "R";
      stringArray0[6] = "R";
      stringArray0[7] = "R";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      Double double0 = new Double((-1214.91412455273));
      JSONObject jSONObject1 = jSONObject0.accumulate("R", double0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.put("PJ>s`h6MtaJU| eR@'C", (Object) "PJ>s`h6MtaJU| eR@'C");
      jSONObject2.toString((-2490), (-2655));
      JSONObject.quote("d*6)FX$bO50i");
      long long0 = jSONObject1.getLong("R");
      assertEquals((-1214L), long0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("c", jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Short.compare((short)11, (short)13);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      jSONObject0.put("{}", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(83);
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      Boolean boolean0 = Boolean.valueOf(false);
      Byte byte0 = new Byte((byte)28);
      hashMap0.put(boolean0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("] is not a Boolean.", "] is not a Boolean.");
      try { 
        jSONObject0.getBoolean("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("ic6e0", (-42724917));
      assertEquals((-42724917), int0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Boolean.valueOf("t],b,UO<.NlH4^0yZO");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("t],b,UO<.NlH4^0yZO");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.accumulate("U0]t8S81hBHjKOjOHL", object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, "getremove");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("par", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("true", "true");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[m;l-h&[.'P#Qz";
      stringArray0[1] = "getparseDouble";
      stringArray0[2] = "getparseDouble";
      stringArray0[3] = "getparseDouble";
      stringArray0[4] = "lo";
      stringArray0[5] = "getparseDouble";
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Long long0 = new Long((-1L));
      Long long1 = new Long((-1869L));
      Long long2 = new Long((-5L));
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      hashMap0.computeIfAbsent(long2, function0);
      Boolean boolean0 = new Boolean("@2t#}n!AGSc");
      String string0 = JSONObject.valueToString(boolean0, (-20664796), (-20664796));
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject.quote("/RHmB-Y");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) ")@JpG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = JSONObject.quote("9d/<^IM~eL!");
      assertEquals("\"9d/<^IM~eL!\"", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject.doubleToString(1002.35490892581);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.put((Object) jSONObject0);
      jSONArray1.toString((-2813), 4916);
      try { 
        jSONArray1.getJSONObject(4916);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[4916] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      HashMap<Float, Long> hashMap1 = new HashMap<Float, Long>();
      Boolean boolean0 = Boolean.valueOf("tX1n)J1!");
      hashMap1.remove((Object) boolean0);
      String string0 = JSONObject.valueToString(hashMap1);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1025851700749716
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = JSONObject.quote("3[iadH}a]");
      assertEquals("\"3[iadH}a]\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "3[iadH}a]");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"3[iadH}a]\"";
      stringArray0[1] = "\"3[iadH}a]\"";
      stringArray0[2] = "3[iadH}a]";
      stringArray0[3] = "3[iadH}a]";
      stringArray0[4] = "3[iadH}a]";
      stringArray0[5] = "3[iadH}a]";
      stringArray0[6] = "wheel.json.JSONObject";
      stringArray0[7] = "\"3[iadH}a]\"";
      stringArray0[8] = "3[iadH}a]";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      int int0 = jSONObject1.optInt("'");
      assertEquals(0, int0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(":", (-1667L));
      assertEquals((-1667L), long0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("t+9p.", 621L);
      try { 
        jSONObject0.getJSONArray("t+9p.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t+9p.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = new Float(0.0F);
      float float1 = Float.max((-1710.674F), 0.0F);
      JSONObject.testValidity(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Object object0 = new Object();
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(300.0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, float0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "] is not a JSONArray.";
      stringArray0[2] = "gettoHexString";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("R", jSONArray0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("rep", (Object) jSONArray0);
      String string0 = jSONObject1.toString(1225, 1225);
      String string1 = JSONObject.quote(string0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short short1 = new Short((short) (-527));
      Short.toUnsignedInt((short)15);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.put("", (long) short1);
      String string1 = "!X.~";
      Integer integer0 = new Integer((short)15);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Null pointer", 1L);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Short short0 = new Short((short)9);
      jSONArray0.put((Object) short0);
      jSONArray0.toString(35, 69);
      try { 
        jSONArray0.getJSONObject((-42833328));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-42833328] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("c", jSONArray0);
      jSONObject0.put("rep", (Object) jSONArray0);
      jSONObject1.toString(1225, (-2490));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2490));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(907);
      Byte byte0 = new Byte((byte)67);
      hashMap0.put(integer0, byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string0 = jSONObject0.toString(32);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", (Object) hashMap0);
      try { 
        jSONObject1.getLong("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.put("istrim", (Map) hashMap1);
      try { 
        jSONObject0.getDouble("istrim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istrim\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("gethashCode", "gethashCode");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float.isFinite((-1767.0981F));
      Float.sum((-1767.0981F), 0.0F);
      Float float0 = new Float((double) (-1767.0981F));
      Float.max((-1767.0981F), (-1767.0981F));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("Null pointer");
      try { 
        jSONObject0.getBoolean("Y%^O0w&Le{s*|Tr~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Y%^O0w&Le{s*|Tr~\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("tb|ksf6P", (double) 45);
      assertEquals(45.0, double0, 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a Boolean.", object0);
      jSONObject1.remove("] is not a Boolean.");
      boolean boolean0 = new Boolean("] is not a Boolean.");
      try { 
        jSONObject1.getLong("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble(",:]}/a\"[;=#", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put(".L7Q`Bjv=^T0u1", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject.getNames((Object) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      hashMap1.put(boolean0, boolean0);
      jSONObject0.put("tri", 5);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 1197);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("get");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 2185L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt(",:]}/a\"[;=#", ",:]}/a\"[;=#");
      Integer integer0 = new Integer(5);
      try { 
        jSONObject0.append(",:]}/a\"[;=#", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[,:]}/a\"[;=#] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Integer integer0 = new Integer((-128));
      JSONObject.quote(":");
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      assertEquals(0, hashMap1.size());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("hcp@Fs;/", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("hcp@Fs;/", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(">83+tk9`0?x%]{lhgE", 0.0);
      hashMap0.put("5?xhL;Mj8Z6", jSONObject0);
      String string0 = "";
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put("_# ~rHfU", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("ishashCode", true);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.write("tR_=YhDqB}", (-2403), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("}dU~i<;m(9!(y\"V");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }dU~i<;m(9!(y\"V
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      int int0 = 35;
      JSONObject.quote(";?mR|Z@q;\":ul17E");
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Short short0 = new Short((short)2622);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.remove((Object) short0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(1204);
      String string0 = JSONObject.valueToString("is", 1204, 120);
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.quote("u?_$jNOXbOL");
      assertEquals("\"u?_$jNOXbOL\"", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("wheel.json.JSONArray", 0L);
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Float.isFinite((-1767.0981F));
      Float.sum((-1767.0981F), 0.0F);
      Float float0 = new Float((double) (-1767.0981F));
      Float.max((-1767.0981F), (-1767.0981F));
      Float.sum((-1767.0981F), (-1767.0981F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("1\r!U]vY~{I5R!j");
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("1\r!U]vY~{I5R!j", "hMjuq}x%U4*X");
      assertEquals("hMjuq}x%U4*X", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("jq].j}/Uo2vr:");
      assertEquals("", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Byte byte0 = new Byte((byte)91);
      String string0 = JSONObject.valueToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("^J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ^J
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONArray[", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("] is not a Boolean.", hashMap0);
      try { 
        jSONObject0.getBoolean("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      short short0 = (short) (-527);
      Short short1 = new Short((short) (-527));
      Float float0 = new Float(2093.47);
      Float.isFinite((short) (-527));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("]QsPFi>/Y#]f-", float0);
      jSONObject0.getInt("]QsPFi>/Y#]f-");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]QsPFi>/Y#]f-";
      stringArray0[1] = "getparseDouble";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("getparseDouble");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of getparseDouble
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("6HNC.z jw", Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      BiFunction<Object, Object, Boolean> biFunction0 = (BiFunction<Object, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Float, Boolean> hashMap1 = new HashMap<Float, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      double double0 = jSONObject1.optDouble("spl", (-1067.129242));
      assertEquals((-1067.129242), double0, 0.01);
      
      String string0 = JSONObject.valueToString(jSONObject1, 381, 381);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((Object) linkedList0);
      jSONArray1.toString((-2813), 4916);
      try { 
        jSONArray0.getJSONObject((-2042));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2042] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-5319), (-705));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = new Integer((-1440));
      Double double0 = new Double(262);
      Double.isFinite((-1440));
      String string0 = JSONObject.doubleToString((-622.255019953));
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(jSONArray0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) integer0);
      String string1 = jSONObject0.toString((-3172), (-1440));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Boolean boolean0 = new Boolean("nU>rtjg=");
      hashMap0.put((Object) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-3172), (-3172));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("5g$?>PP}mA&$,f", 61);
      assertEquals(61, int0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean(":^GindCv", false);
      String string0 = hashMap0.put((Integer) null, ":^GindCv");
      assertNull(string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt("i;+.ZL!x~_)l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"i;+.ZL!x~_)l\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"in\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)0);
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(byte0, boolean0);
      JSONObject.valueToString(hashMap0);
      JSONObject.getNames((Object) jSONObject0);
      Object object0 = jSONObject0.opt("{\"java.lang.Byte@0000000003\":java.lang.Boolean@0000000004}");
      assertNull(object0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      hashMap0.put((Byte) null, "\f");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute((Byte) null, biFunction0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      String string0 = jSONObject0.toString();
      assertNull(string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Long long0 = new Long(2221L);
      JSONObject.testValidity(long0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer0 = new Integer(69);
      try { 
        jSONObject0.put((String) null, (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("!X.~");
      assertNull(object0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Integer integer0 = new Integer((-4));
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
